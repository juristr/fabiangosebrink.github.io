<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
    <title>Offering Solutions</title>
    <link>http://offering.solutions</link>
    <description>Articles about Angular &amp; ASP.NET</description>
    <pubDate/>
    <language/>
    <wp:wxr_version>1.2</wp:wxr_version>
    <wp:base_site_url>http://offering.solutions</wp:base_site_url>
    <wp:base_blog_url>http://offering.solutions</wp:base_blog_url>
    <wp:author>
      <wp:author_login></wp:author_login>
      <wp:author_email></wp:author_email>
      <wp:author_display_name><![CDATA[]]></wp:author_display_name>
      <wp:author_first_name><![CDATA[]]></wp:author_first_name>
      <wp:author_last_name><![CDATA[]]></wp:author_last_name>
    </wp:author>
    <generator>http://offering.solutions</generator>
    <image>
    	<url>http://offering.solutions/images/site-logo.png</url>
    	<title>Offering Solutions</title>
      <link>http://offering.solutions</link>
    </image>

    
      <item>
        <title><![CDATA[Lessons I learnt from organising a conference]]></title>
        <link>http://offering.solutions/blog/articles/2017/07/18/things-i-learned-from-organising-a-conference/</link>
        <pubDate>2017-07-18T19:55:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>It has been quiet here for a while… :-)</p>

<p>You may have noticed that I organised my first conference <a href="http://dotnetday.ch/">.NET Day</a> about two months ago. Well, that is not true. The organisation itself took place long before that but the event took place approximately two months ago. With this distance of time I want to gather up what I learned from organising this event, what I take with me and what will influence the next conference if I will do this again some time :-)</p>

<p>I needed some time to really figure out all the thoughts &amp; things which were going on and break them down to the following points. If you made similar experiences or want to add new ones feel free to comment :)</p>

<h2 id="be-prepared-and-have-a-plan-b">Be prepared and have a plan B</h2>

<p>On the event you are planning, things will happen you never thought of. This can be good or bad things, but you will <em>not</em> be prepared of them. So what you can do is starting early (!) and thinking of any possible situation which may happen. (You can’t, but more on this later :-) This can be that a speaker is not coming because the night before he got sick or something, a microphone does not work, the food can not be served etc. You should always think of those things and play with that thought in your head. “What am I doing if xyz happens?” is the question you have to ask for youself. Have backup speakers. Have saved the telephone numbers of all pizza delivery services in your area to be prepared if food can not be served. Have a car there which you can use to get something which you not have thought of etc. If you re-think your event over and over again you will possibly come to a point where you can say to yourself that you are prepared for every single thing which can happen. (Which you can’t, but you did your best here :)</p>

<p>So make that a little easier and taking this thought of being prepared further we can take a look at the next point…</p>

<h2 id="change-the-perspective-to-an-attendee">Change the perspective to an attendee</h2>

<p>…changing the perspective to an attendee. Image you are walking into the venue, what do you expect? Getting your ticket scanned? Getting a lanyard? Seeing the organiser? Just think of where do you would like to sit, what would be cool in the breakes? Is there something you would say “If there would be xyz, that’d be cool!”. If you attended to other conferences before and you can clone some ideas: Cool! If you were missing something on other conference: Try to add it to our conference. Its your attendees who give feedback &amp; do tweet about it. So you have to do everything they feel comfortable. From the selection of talks, topics over the venue, how you treat them etc.</p>

<h2 id="ask-for-help">Ask for help</h2>

<p>You noticed something, didn’t you? Thats massive work. Well until here we did not organise anything so far. All that were thoughts! But you need another input. Ask your friends, your family if idea xyz is cool. “Would you like it if …?”, “What do you think of xyz?”. Also tell them if you arranged something. Not to get compliments on how good you are but to trigger their thouoghts a bit. “Hey I have just organised thisandthat” - “Cool, but did you think of thatandthis, too then?” - Boom! You got your input.</p>

<p>Further ask a friend to help you out. There are so much things to do which are completely separated and can be done by another one. If you organise a conference at some point you have to …</p>

<h2 id="talk-to-each-other-and-delegate">Talk to each other and delegate</h2>

<p>… delegate! We took OneNote for that which was completely fine. Just to keep each other up to date, if the emails to the speakers were sent out, which speaker said yes/no/maybe. Which topic by whom, which sponsors do we have, mail proposals for review etc. Delegate something, divide the work by two or more and give exact advises. “Can you please write a draft mail for the sponsors to do this and that”. Maybe you can organise via SCRUM or Kanban. Feel free to do that as you want, but split up the work. It is getting easier then.</p>

<h2 id="dont-do-a-talk-when-you-organise-the-conference">Don’t do a talk when you organise the conference</h2>

<p>I did that mistake. I really thought a long time about “Shall I speak or not?”. In the end I thought my topics were interesting and so I spoke at the event I organised. This was a mistake if I look back. And the reason for that was that I was not focussing on my talk. You are so distracted by anything what is going on that you can not focus on your talk. I did not get into this tunnel completely giving everything I have in this 45 minutes. (I even thought about so much things the night before the event, that I forgot that I only had 45 minutes and practices for 60 instead!!!) I only have been at the talk at like 70% or something. And it went bad. I forgot to show demos, forgot a cable to show something with my mobile phone, my timing was bad, I moved the slides too fast etc.</p>

<p>So stay focused. Either on talking or on doing the things around it…but for me both is not working.</p>

<h2 id="start-early">Start early</h2>

<p>With all the things in mind: You can not start too early with that. Even if other people youre talking to tell you “We still have time”: Try to organise everything sooner than later. If you just ask people about their opinion maybe you notice things you haven’t thought of. And these are things you have to organise. So start early with you preparations. Maybe there is no “Too early” at all :-)</p>

<h2 id="during-the-conference-observe--listen-">During the conference: Observe &amp; Listen !!!</h2>

<p>Maybe this is the most important point. Listen to feedback. It won’t go perfect the first time you organise a conference and people will tell you. And that is okay. Take it as a chance to get better. How was the food? How was the venue? Take a look at the attendees during the talks and during the brakes. Do not only talk with people you know. Ask them about one thing specifically. “How do you like …?”, “Are you satisfied with …”, “Is it okay that thingandthat is like …”. In addition to that provide a possibility for feedback. We used google forms for that. We always asked about ratings and if the rating was not the best there was the possibility to add “Why is it not rated with 5 stars? What can we do better next time?” and we got great feedback!</p>

<h2 id="enjoy-the-moment">Enjoy the moment</h2>

<p>Last but not least: Enjoy the moment. I was sitting in the conference very excited and tried to have everything under control as a friend and attendee said “Don’t worry. It will work. Lean back and enjoy the conference”. When I look back now that was one of the greatest advices that day.</p>

<p>Thank you and once again thanks to all attendees. You made this day very special and I had a great birthday that day :-)</p>

<p>BR</p>

<p>Fabian</p>

]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2017/07/18/things-i-learned-from-organising-a-conference</wp:post_id>
        <wp:post_date>2017-07-18T19:55:00+02:00</wp:post_date>
        <wp:post_date_gmt>2017-07-18T19:55:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="angular"><![CDATA[["angular",]]></category>
        
          <category domain="post_tag" nicename="azure"><![CDATA["azure",]]></category>
        
          <category domain="post_tag" nicename="conference"><![CDATA["conference",]]></category>
        
          <category domain="post_tag" nicename="angular"><![CDATA["angular",]]></category>
        
          <category domain="post_tag" nicename="dotnet"><![CDATA["dotnet"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Announcing the .NET Day 2017]]></title>
        <link>http://offering.solutions/blog/articles/2017/04/02/announcing-the-dotnetday-2017/</link>
        <pubDate>2017-04-02T19:12:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>I am very happy to announce the .NET Day 2017 in Switzerland! In this blogpost I want to give you a small background information on this, how this idea came up and about the current status.</p>

<h3 id="the-beginning">The beginning</h3>

<p>The idea of this conference day came into my mind in the middle of 2016. I love conferences. I think that a developer has to stay updated on his well known topics as well as be open to new topics and has to keep on learning over and over again. If he wants to stay open and focused on the same time he has to take a look whats new, what is established and learn from others. If you listen to a talk on a conference, on a usergroup or whereever: You get an idea of if you are interested in this topic or not. You see if you want to dig deeper or not. In a very short amount of time. And if you already know: you can see whats new, other perspectives and so on. This is worth a lot.</p>

<p>In addition to that Microsoft came up with a lot of new stuff during the last time. And I think beside the awesome TechDays in Switzerland there should be another paltform to spread this knowledge. But I did not want to make a commercial conference. This thing should be community driven. The focus is on spreading knowledge. The new stuff.</p>

<p>After a few thoughts and conversations the idea grew and I fixed a name and a date and I could go ahead organising speakers.</p>

<blockquote>
  <p>To mention this: I never organsied a conference before. I had no idea what to be done, no idea how to start with that thing. But Microsoft helped me a lot with this. They offered the room and helped me where they could as well as forcing me to take care about stuff with “Do it as you like”.</p>
</blockquote>

<p>After a while I realized that I could not do this on my own. So I asked my friend Manuel Meyer for help. He immediately said yes and there we are:</p>

<h3 id="how-it-grew">How it grew</h3>

<p>Through a great community and platforms like papercall.io we started a call for paper to get the speakers and the talks. IMHO we got a great agenda and speakers now (which I am not telling because I am part of it. I really do not count myself to the top speakers we have there. I am more than proud to be in between this international known names to who every single one I am looking up to).</p>

<p>After a while we got the agenda fixed and also Manuels and my shared OneNote grew and grew ;-).</p>

<p>We walked further and organsied sponsors. Some emails went out never getting any response back. But some of them came back loving the idea and they wanted to support us with the bigger one of the sponsoring packages. Great! So this grew, too.</p>

<h3 id="the-event">The Event</h3>

<p>The .NET Day takes place in Wallisellen at the Microsoft Office. It is focussing on the latest topics like Azure, the .NET Standard or ASP.NET Core and Angular.</p>

<p>You can see the website here <a href="http://dotnetday.ch/">.NET Day Switzerland</a>.</p>

<p>We only have one day, one track as we wanted to start small and see if the feedback is good. If so: Perhaps we will do this again! If the feedback is bad then we at least tried to do this and hopefully had a good day. We will analyse it and see what we can make better the mext time if there is a next time then.</p>

<h3 id="current-status">Current status</h3>

<p>Right now we are still searching for sponsors. The more sponsors we have the more we can do about merchandising such as shirts, lanyards etc. Focus is on paying the food for everyone. On the other side we “sold” all tickets. It is really sold out. I would have never thought that.</p>

<p>I think it is all prepared for a good day.</p>

<h3 id="things-to-say-more-important-than-anything-else">Things to say more important than anything else</h3>

<p>T H A N K S to everybody who was involved in this so far. Thank you Manuel, I could not have done this that far without you, thanks to all speakers and everyone I had to reject because the agenda was full, thank you for every retweet, for every email, every phone call! You are amazing. We will try to give everything back making this day a great great conference.</p>

<p>See you soon.</p>

<p>Fabian</p>

]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2017/04/02/announcing-the-dotnetday-2017</wp:post_id>
        <wp:post_date>2017-04-02T19:12:00+02:00</wp:post_date>
        <wp:post_date_gmt>2017-04-02T19:12:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="angular"><![CDATA[["angular",]]></category>
        
          <category domain="post_tag" nicename="azure"><![CDATA["azure",]]></category>
        
          <category domain="post_tag" nicename="conference"><![CDATA["conference"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Moving your Angular application from SystemJS to Webpack]]></title>
        <link>http://offering.solutions/blog/articles/2017/02/26/moving-from-systemjs-to-webpack-angular-2/</link>
        <pubDate>2017-02-26T16:46:00+01:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this blogpost I want to show you how you can move from an existing Angular application using systemjs to an application with webpack.</p>

<p>Imagine the following application.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>app
├── // modules, components and so on
├── app.component.ts
├── app.component.html
├── app.module.ts
└── main.ts
...
systemjs.config.js
tsconfig.json
tslint.json
...
</code></pre>
</div>

<p>Because we want to get away from systemjs here we will first introduce a webpack.config.js which holds your configuration and which can handle all you files and stuff.</p>

<p>But before we do please install webpack and the webpack-dev-server first:</p>

<p><code class="highlighter-rouge">npm install webpack-dev-server webpack --save-dev</code></p>

<p>So now we can add a webpack.config.js. This is the file webpack is searching per default.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>app
├── // modules, components and so on
├── app.component.ts
├── app.component.html
├── app.module.ts
└── main.ts
...
systemjs.config.js
webpack.config.js // &lt;---
tsconfig.json
tslint.json
...
</code></pre>
</div>

<p>Of course you have to modify the config that it fits to your application. A structure of this could be useful:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>

    <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
        <span class="c1">// Here all your entry points from </span>
        <span class="c1">// your application are mentioned</span>
    <span class="p">},</span>

    <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
        <span class="c1">// Here we can specify the output</span>
    <span class="p">},</span>

    <span class="na">resolve</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">extensions</span><span class="p">:</span> <span class="c1">// mention the extensions webpack should take care of</span>
    <span class="p">},</span>

    <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">rules</span><span class="p">:</span> <span class="p">[</span>
            <span class="c1">// tell webpack HOW to react when a file is included in your application</span>
        <span class="p">]</span>
    <span class="p">},</span>

    <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
		<span class="c1">// finetune the behaviour of specific plugins</span>
    <span class="p">]</span>
<span class="p">};</span> </code></pre></figure>

<p>You can see an example here <a href="https://github.com/FabianGosebrink/ASPNETCore-Angular-Webpack-StarterTemplate/blob/master/src/ASPNETCoreAngularWebpackStarter/webpack.dev.js">webpack.dev.js</a></p>

<h2 id="adding-polyfills">Adding Polyfills</h2>

<p>To have your Angular application ready for handling polyfills you have to introduce another file <code class="highlighter-rouge">polyfills.ts</code> where you import all polyfills your application needs.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>app
├── // modules, components and so on
├── app.component.ts
├── app.component.html
├── app.module.ts
├── polyfills.ts // &lt;---
└── main.ts
...
systemjs.config.js
webpack.config.js
tsconfig.json
tslint.json
...
</code></pre>
</div>

<p>The file could look like this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">import</span> <span class="s1">'ie-shim'</span><span class="p">;</span> <span class="c1">// Internet Explorer 9 support.</span>

<span class="kr">import</span> <span class="s1">'core-js/es6/symbol'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/object'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/function'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/parse-int'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/parse-float'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/number'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/math'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/string'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/date'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/array'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/regexp'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/map'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/set'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/weak-map'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/weak-set'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/typed'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/reflect'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es7/reflect'</span><span class="p">;</span>

<span class="kr">import</span> <span class="s1">'zone.js/dist/zone'</span><span class="p">;</span></code></pre></figure>

<blockquote>
  <p>Notice that when you import things you also have to install them via npm which also should be reflected in you package.json</p>
</blockquote>

<h2 id="adding-third-party-dependencies">Adding Third-Party dependencies</h2>

<p>If you have to include external libs like jquery or bootstrap you can manage them in a seperate file called <code class="highlighter-rouge">vendor.ts</code>. After installing them via npm you can consume them here:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>app
├── // modules, components and so on
├── app.component.ts
├── app.component.html
├── app.module.ts
├── polyfills.ts
├── vendor.ts // &lt;---
└── main.ts
...
systemjs.config.js
webpack.config.js
tsconfig.json
tslint.json
...
</code></pre>
</div>

<p>Which could look like this</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">import</span> <span class="s1">'jquery/dist/jquery'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'bootstrap/dist/js/bootstrap'</span><span class="p">;</span>

<span class="kr">import</span> <span class="s1">'bootstrap/dist/css/bootstrap.css'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'../css/custom.css'</span><span class="p">;</span>

<span class="c1">// import everything else here!!!</span></code></pre></figure>

<blockquote>
  <p>You should include all your custom files here</p>
</blockquote>

<h2 id="delete-systemjsconfigjs">Delete systemjs.config.js</h2>

<p>You can now delete the systemjs.config.js because you do not need it anymore.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>app
├── // modules, components and so on
├── app.component.ts
├── app.component.html
├── app.module.ts
├── polyfills.ts
├── vendor.ts
└── main.ts
...
webpack.config.js
tsconfig.json
tslint.json
...
</code></pre>
</div>

<h2 id="entrypoints">Entrypoints</h2>

<p>Note that you now have three entrypoint for your application: <code class="highlighter-rouge">main.ts</code>, <code class="highlighter-rouge">vendor.ts</code> and <code class="highlighter-rouge">polyfills.ts</code>. Due to the fact that webpack is reading all you files and going through all imports importing what is included you have the possibility to:</p>

<p>give your webpack config all three entrypoint like this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
        <span class="s1">'app'</span><span class="p">:</span> <span class="s1">'./app/main.ts'</span><span class="p">,</span>
        <span class="s1">'vendor'</span><span class="p">:</span> <span class="s1">'./app/vendor.ts'</span><span class="p">,</span>
        <span class="s1">'polyfills'</span><span class="p">:</span> <span class="s1">'./app/polyfills.ts'</span><span class="p">,</span>
    <span class="p">},</span></code></pre></figure>

<p>or you import the two files in you main.ts like:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">import</span> <span class="s1">'./polyfills'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'./vendor'</span><span class="p">;</span>

<span class="kr">import</span> <span class="p">{</span> <span class="nx">platformBrowserDynamic</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">'@angular/platform-browser-dynamic'</span><span class="p">;</span>

<span class="kr">import</span> <span class="p">{</span> <span class="nx">AppModule</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">'./app.module'</span><span class="p">;</span>

<span class="nx">platformBrowserDynamic</span><span class="p">().</span><span class="nx">bootstrapModule</span><span class="p">(</span><span class="nx">AppModule</span><span class="p">);</span></code></pre></figure>

<p>and in your webpack.config.ts you only need one entrypoint then:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
        <span class="s1">'app'</span><span class="p">:</span> <span class="s1">'./app/main.ts'</span>
    <span class="p">},</span></code></pre></figure>

<h2 id="asking-for-the-environment-devprod">Asking for the environment (dev/prod)</h2>

<p>We will set the environment from the outside later. To consume it in your application we can simply ask for a variable like this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">env</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">env</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">require</span><span class="p">(</span><span class="err">`</span><span class="p">.</span><span class="o">/</span><span class="nx">webpack</span><span class="p">.</span><span class="nx">$</span><span class="p">{</span><span class="nx">env</span><span class="p">}.</span><span class="nx">js</span><span class="err">`</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>With this you can apply multiple ways of generating your output based on the given environment asking for the variable “NODE_ENV” which we will set up later in our scripts.</p>

<p>You can see an example here <a href="https://github.com/FabianGosebrink/ASPNETCore-Angular-Webpack-StarterTemplate/blob/master/src/ASPNETCoreAngularWebpackStarter/webpack.config.js">webpack.config.js</a></p>

<h2 id="triggering-it-from-the-npm-scripts">Triggering it from the npm scripts</h2>

<p>Now that we introduced webpack we can add the commands to our package.json like this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
    <span class="c1">//...</span>
    <span class="s2">"scripts"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"start"</span><span class="err">:</span> <span class="s2">"tsc &amp;&amp; webpack-dev-server --open"</span><span class="p">,</span>
        <span class="c1">// other scripts</span>
        <span class="s2">"build:dev"</span><span class="err">:</span> <span class="s2">"webpack --env=dev --progress --profile --colors"</span><span class="p">,</span>
        <span class="s2">"build:dist"</span><span class="err">:</span> <span class="s2">"webpack --env=prod --progress --profile --colors"</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="c1">//...</span>
<span class="p">}</span></code></pre></figure>

<p>Here we are setting the environment variable accordingly and start webpack with the <code class="highlighter-rouge">webpack</code> command</p>

<p>When you run <code class="highlighter-rouge">npm start</code> and have the correct configuration in your webpack &amp; package.json a browser should open up displaying your page while reloading if you change something.</p>

<p>Feel free to comment if I missed something.</p>

<p>Hope this helps and happy coding.</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2017/02/26/moving-from-systemjs-to-webpack-angular-2</wp:post_id>
        <wp:post_date>2017-02-26T16:46:00+01:00</wp:post_date>
        <wp:post_date_gmt>2017-02-26T16:46:00+01:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="angular"><![CDATA[["angular",]]></category>
        
          <category domain="post_tag" nicename="systemjs"><![CDATA["systemjs",]]></category>
        
          <category domain="post_tag" nicename="webpack"><![CDATA["webpack"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Automatically reload typed configuration in ASP.NET Core]]></title>
        <link>http://offering.solutions/blog/articles/2017/02/17/automatically-reload-typed-configuration-in-asp-net-core/</link>
        <pubDate>2017-02-17T22:31:00+01:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this article I want to explore IOptionsSnapshot and show how to work with IOptionsSnapshot in ASP.NET Core 1.1.</p>

<p>We will use the dotnet cli to create a new project and configure it using the reload technique in combination with IOptionsSnapshot.</p>

<blockquote>
  <p>Make sure you are using at least ASP.NET Core 1.1</p>
</blockquote>

<p>Get started by creating a new folder where you want to work in, opening a console there and typing</p>

<p><code class="highlighter-rouge">dotnet new mvc</code> and <code class="highlighter-rouge">dotnet restore</code> to get the project in a starting position.</p>

<p>Then open up a console and type <code class="highlighter-rouge">code .</code> to start Visual Studio Code on the current level.</p>

<p>You should now see all the files and folders of your project. We can now go ahead and create a typed class which represents the configuration we want to work with. In this case this is just a file with a name property.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>Config
└── myConfig.json
Controllers
└── ...
Views
└── ...
wwwroot
└── ...
...
Program.cs
Startup.cs
</code></pre>
</div>

<p>myConfig.json</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">"Person"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"Firstname"</span> <span class="err">:</span> <span class="s2">"John Doe"</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>This leads us to the class</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">Person</span>  
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Firstname</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<div class="highlighter-rouge"><pre class="highlight"><code>Config
└── myConfig.json
ConfigModels
└── Person.cs
Controllers
└── ...
Views
└── ...
wwwroot
└── ...
...
Program.cs
Startup.cs
</code></pre>
</div>

<p>which represents our configuration in our application.</p>

<p>We have to modify our constructor of the Startup.cs file a bit to load this new file:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="nf">Startup</span><span class="p">(</span><span class="n">IHostingEnvironment</span> <span class="n">env</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ConfigurationBuilder</span><span class="p">()</span>
        <span class="p">.</span><span class="nf">SetBasePath</span><span class="p">(</span><span class="n">env</span><span class="p">.</span><span class="n">ContentRootPath</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="s">"appsettings.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">false</span><span class="p">,</span> <span class="n">reloadOnChange</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="err">$</span><span class="s">"appsettings.{env.EnvironmentName}.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">AddEnvironmentVariables</span><span class="p">();</span>
    <span class="n">Configuration</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<p>becomes to</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="nf">Startup</span><span class="p">(</span><span class="n">IHostingEnvironment</span> <span class="n">env</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ConfigurationBuilder</span><span class="p">()</span>
        <span class="p">.</span><span class="nf">SetBasePath</span><span class="p">(</span><span class="n">env</span><span class="p">.</span><span class="n">ContentRootPath</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="s">"appsettings.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">false</span><span class="p">,</span> <span class="n">reloadOnChange</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="err">$</span><span class="s">"appsettings.{env.EnvironmentName}.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="err">$</span><span class="s">"config/myConfig.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">false</span><span class="p">,</span> <span class="n">reloadOnChange</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">AddEnvironmentVariables</span><span class="p">();</span>
    <span class="n">Configuration</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<blockquote>
  <p>Pay attention to the <code class="highlighter-rouge">realoadOnChange: true</code> because that is what we are reaching out for</p>
</blockquote>

<p>So now that we loaded the file we need to add it to our configuration which is used in our app.</p>

<p>Lets do this by adding the statement in the <code class="highlighter-rouge">ConfigureServices</code>-Method:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...
</span>    <span class="n">services</span><span class="p">.</span><span class="n">Configure</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;(</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetSection</span><span class="p">(</span><span class="s">"Person"</span><span class="p">));</span>
<span class="p">}</span></code></pre></figure>

<p>Here we are mapping our values in JSON to a typed class called “Person”.</p>

<p>Now this configuration is available through dependency injection and we can use it in our controllers!</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">HomeController</span> <span class="p">:</span> <span class="n">Controller</span>  
<span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">Person</span> <span class="n">_person</span><span class="p">;</span>
    <span class="k">public</span> <span class="nf">HomeController</span><span class="p">(</span><span class="n">IOptionsSnapshot</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;</span> <span class="n">person</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_person</span> <span class="p">=</span> <span class="n">person</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<blockquote>
  <p>Pay attention to the “IOptionsSnapshot” we injected here which is different from the previous ASP.NET Core versions.</p>
</blockquote>

<p>Be sure to have the <code class="highlighter-rouge">"Microsoft.Extensions.Options": "1.1.0"</code> package installed and you are using ASP.NET Core 1.1.</p>

<p>We can now inject the <code class="highlighter-rouge">IOptionsSnapshot&lt;T&gt;</code> in our controller and use its value. For testing we save the Firstname in the ViewData displaying it afterwards.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">namespace</span> <span class="nn">WebApplication6.Controllers</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">HomeController</span> <span class="p">:</span> <span class="n">Controller</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">Person</span> <span class="n">_person</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">HomeController</span><span class="p">(</span><span class="n">IOptionsSnapshot</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;</span> <span class="n">person</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_person</span> <span class="p">=</span> <span class="n">person</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Index</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">ViewData</span><span class="p">[</span><span class="s">"FirstName"</span><span class="p">]</span> <span class="p">=</span> <span class="n">_person</span><span class="p">.</span><span class="n">Firstname</span><span class="p">;</span>
            <span class="k">return</span> <span class="nf">View</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Index.cshtml</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="p">&lt;</span><span class="n">h3</span><span class="p">&gt;</span><span class="err">@</span><span class="p">(</span><span class="n">ViewData</span><span class="p">[</span><span class="s">"FirstName"</span><span class="p">])&lt;/</span><span class="n">h3</span><span class="p">&gt;</span></code></pre></figure>

<p>If you now start the web application via <code class="highlighter-rouge">dotnet run</code> and you change the configuration without restarting the application, hit F5 to refresh the browser you see the new values.</p>

<p>Hope this helps anybody :-)</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2017/02/17/automatically-reload-typed-configuration-in-asp-net-core</wp:post_id>
        <wp:post_date>2017-02-17T22:31:00+01:00</wp:post_date>
        <wp:post_date_gmt>2017-02-17T22:31:00+01:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="ioptionssnapshot"><![CDATA[["ioptionssnapshot",]]></category>
        
          <category domain="post_tag" nicename="aspnetcore"><![CDATA["aspnetcore"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Angular Ahead Of Time (AoT) compilation, lazy loading and treeshaking with webpack]]></title>
        <link>http://offering.solutions/blog/articles/2017/02/08/angular-2-ahead-of-time-aot-compilation-lazy-loading-treeshaking-webpack/</link>
        <pubDate>2017-02-08T16:42:00+01:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this blogpost I want to show you how to get Ahead Of Time compilation enabled with lazy loading in combination with webpack 2.</p>

<h3 id="code">Code</h3>

<p><a href="https://github.com/FabianGosebrink/ASPNET-ASPNETCore-Angular-Webpack/tree/master">Github - ASPNET-ASPNETCore-AngularJS-Angular</a></p>

<h3 id="the-router">The Router</h3>

<p>If you want to enable lazy loading in your application with aot you first have to configure your router to load the module lazy - when it gets requested. You can do that with the loadChildren-attribute.</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">export</span> <span class="kd">const</span> <span class="nx">AppRoutes</span><span class="err">:</span> <span class="nx">Routes</span> <span class="o">=</span> <span class="p">[</span>
  <span class="c1">// normal routes</span>
  <span class="p">{</span> <span class="na">path</span><span class="p">:</span> <span class="s1">'food'</span><span class="p">,</span> <span class="na">loadChildren</span><span class="p">:</span> <span class="s1">'./path/to/module.file#ModuleName'</span> <span class="p">},</span>
  <span class="p">{</span>
    <span class="na">path</span><span class="p">:</span> <span class="s1">'**'</span><span class="p">,</span>
    <span class="na">redirectTo</span><span class="p">:</span> <span class="s1">'home'</span>
  <span class="p">}</span>
<span class="p">];</span></code></pre></figure>

<p>The syntax is <code class="highlighter-rouge"><span class="p">{</span><span class="w"> </span><span class="err">path:</span><span class="w"> </span><span class="err">'myPath',</span><span class="w"> </span><span class="err">loadChildren:</span><span class="w"> </span><span class="err">'./path/to/module.file#ModuleName'</span><span class="w"> </span><span class="p">}</span><span class="err">,</span></code></p>

<h3 id="the-module">The Module</h3>

<p>If you did this you have to remove the module import from the module import array where you explicitly imported it in the first place!</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="c1">// imports</span>

<span class="err">@</span><span class="nx">NgModule</span><span class="p">({</span>
    <span class="na">imports</span><span class="p">:</span> <span class="p">[</span>
        <span class="nx">BrowserModule</span><span class="p">,</span>
        <span class="c1">// other imports but NOT your lazy loaded module anymore</span>
        <span class="nx">HomeModule</span>
    <span class="p">],</span>

    <span class="na">declarations</span><span class="p">:</span> <span class="p">[</span>
        <span class="nx">AppComponent</span>
    <span class="p">],</span>

    <span class="na">providers</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// ...</span>
    <span class="p">],</span>

    <span class="na">bootstrap</span><span class="p">:</span> <span class="p">[</span><span class="nx">AppComponent</span><span class="p">]</span>
<span class="p">})</span>

<span class="k">export</span> <span class="kr">class</span> <span class="nx">AppModule</span> <span class="p">{</span> <span class="p">}</span></code></pre></figure>

<h3 id="the-ngc-compiler">The ngc compiler</h3>

<p>If done so you can install the needed packages to get started with the ngc compiler:</p>

<p><code class="highlighter-rouge">npm install @angular/compiler-cli @angular/platform-server --save</code></p>

<p>After this you have to configure a seperate tsconfig-aot.json for Ahead Of Time Compilation:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">
  </span><span class="nt">"compilerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nt">"target"</span><span class="p">:</span><span class="w"> </span><span class="s2">"es5"</span><span class="p">,</span><span class="w">
    </span><span class="nt">"module"</span><span class="p">:</span><span class="w"> </span><span class="s2">"es2015"</span><span class="p">,</span><span class="w">
    </span><span class="nt">"moduleResolution"</span><span class="p">:</span><span class="w"> </span><span class="s2">"node"</span><span class="p">,</span><span class="w">
    </span><span class="nt">"sourceMap"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nt">"emitDecoratorMetadata"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nt">"experimentalDecorators"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nt">"lib"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="s2">"es2015"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"dom"</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nt">"noImplicitAny"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nt">"suppressImplicitAnyIndexErrors"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nt">"files"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"app/app.module.ts"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"path/to/module.file"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"app/main.ts"</span><span class="w">
  </span><span class="p">],</span><span class="w">
  </span><span class="nt">"angularCompilerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nt">"genDir"</span><span class="p">:</span><span class="w"> </span><span class="s2">"aot"</span><span class="p">,</span><span class="w">
    </span><span class="nt">"skipMetadataEmit"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<blockquote>
  <p>Please pay special attention to the “files” array. Because the module is not imported in your application via the <code class="highlighter-rouge">import</code> statement anymore the compiler will not include it in the aot-folder (which is fixed in the “genDir”-attribute). So here you have to add it by yourself but only the path to the module.</p>
</blockquote>

<p>If you now run</p>

<p><code class="highlighter-rouge">node_modules/.bin/ngc -p tsconfig-aot.json</code></p>

<p>an “aot” folder is created which should contain all your compilated files.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>app
├── app.component.ts
├── app.component.html
├── ...
├── app.module.ts
└── main.ts
aot
└── app
    ├── module1
    ├── module2
    ├── module...
    └── ....ngfactory.ts
index.html
systemjs.config.js
tsconfig.json
tslint.json
styles.css
package.json
</code></pre>
</div>

<h3 id="the-new-entrypoint">The (new) entrypoint</h3>

<p>Also as an entry point we specify the file(s) we have but the main file is different. Because we created an output in the aot folder we need to point our entrypoint to that compilated files!</p>

<p>We can do that by adding a new main.ts file called “main-aot.ts” and add the following into it:</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">platformBrowser</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/platform-browser'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">enableProdMode</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">AppModuleNgFactory</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../aot/app/app.module.ngfactory'</span><span class="p">;</span>

<span class="nx">enableProdMode</span><span class="p">();</span>

<span class="nx">platformBrowser</span><span class="p">().</span><span class="nx">bootstrapModuleFactory</span><span class="p">(</span><span class="nx">AppModuleNgFactory</span><span class="p">);</span></code></pre></figure>

<p>Here we are consuming the generated files in the aot folder.</p>

<blockquote>
  <p>If this file causes problems because of not finding any files it may be that the aot folder does not exist yet. This is normal. What does not exist cant be imported. Just create the folder and the errors should go away.</p>
</blockquote>

<h3 id="webpack-comsuming-the-aot-output">Webpack: Comsuming the AoT output</h3>

<p>After that output is created you can go along and consume this files via webpack.</p>

<p>Here it is very important to use the <code class="highlighter-rouge">angular-router-loader</code> which enables loading modules through the string we mentioned in the routes.</p>

<p>So if a route ts file comes along we want to send it through the <code class="highlighter-rouge">angular2-template-loader</code>, <code class="highlighter-rouge">angular-router-loader</code> and the <code class="highlighter-rouge">awesome-typescript-loader</code> to proceed with our files.</p>

<p>The rule for this looks like the following:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">
    </span><span class="err">test:</span><span class="w"> </span><span class="err">/\.ts$/,</span><span class="w">
    </span><span class="err">use:</span><span class="w"> </span><span class="err">[</span><span class="w">
        </span><span class="err">'awesome-typescript-loader',</span><span class="w">
        </span><span class="err">'angular-router-loader?aot=true&amp;genDir=aot/',</span><span class="w">
        </span><span class="err">'angular2-template-loader',</span><span class="w">
    </span><span class="err">]</span><span class="w">
</span><span class="p">}</span><span class="err">,</span></code></pre></figure>

<blockquote>
  <p>Pay attention to the parameters we give to the <code class="highlighter-rouge">angular-router-loader</code>. the <code class="highlighter-rouge">genDir</code> has to match our directory containing our aot compiled output.</p>
</blockquote>

<p>and as an entrypoint we are pointing to the new file we created:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="err">entry:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">'app':</span><span class="w"> </span><span class="err">'./app/main-aot.ts'</span><span class="w">
</span><span class="p">}</span><span class="err">,</span></code></pre></figure>

<p>With this webpack uses our aot-file as an entrypoint and follows all imports in this file.</p>

<p>We also have to tell webpack how to name the files which are recognized as lazy loaded. We can do this by adding a “chunkFilename” in the output-settings:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="err">output:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">path:</span><span class="w"> </span><span class="err">'./.dist/web/aot/',</span><span class="w">
    </span><span class="err">filename:</span><span class="w"> </span><span class="err">'js/[name]-[hash:8].bundle.js',</span><span class="w">
    </span><span class="err">chunkFilename:</span><span class="w"> </span><span class="err">'js/[id].-[hash:8].chunk.js',</span><span class="w">
</span><span class="p">}</span><span class="err">,</span></code></pre></figure>

<h3 id="webpack-adding-tree-shaking">Webpack: Adding tree shaking</h3>

<p>To add tree shaking we have to use the <code class="highlighter-rouge">UglifyJsPlugin</code> from webpack which we can configure like this:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="err">var</span><span class="w"> </span><span class="err">CompressionPlugin</span><span class="w"> </span><span class="err">=</span><span class="w"> </span><span class="err">require(</span><span class="s2">"compression-webpack-plugin"</span><span class="err">);</span><span class="w">
</span><span class="err">//</span><span class="w"> </span><span class="err">...</span><span class="w">
</span><span class="err">plugins:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">...</span><span class="w">
    </span><span class="err">new</span><span class="w"> </span><span class="err">webpack.optimize.UglifyJsPlugin(</span><span class="p">{</span><span class="w">
        </span><span class="err">compress:</span><span class="w"> </span><span class="err">{</span><span class="w">
            </span><span class="err">warnings:</span><span class="w"> </span><span class="err">false</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="err">output:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="err">comments:</span><span class="w"> </span><span class="err">false</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="err">sourceMap:</span><span class="w"> </span><span class="kc">false</span><span class="w">
    </span><span class="err">})</span><span class="p">,</span><span class="w">
    </span><span class="err">new</span><span class="w"> </span><span class="err">CompressionPlugin(</span><span class="p">{</span><span class="w">
        </span><span class="err">asset:</span><span class="w"> </span><span class="nt">"[path].gz[query]"</span><span class="err">,</span><span class="w">
        </span><span class="err">algorithm</span><span class="p">:</span><span class="w"> </span><span class="s2">"gzip"</span><span class="p">,</span><span class="w">
        </span><span class="err">test</span><span class="p">:</span><span class="w"> </span><span class="err">/\.js$|\.html$/</span><span class="p">,</span><span class="w">
        </span><span class="err">threshold</span><span class="p">:</span><span class="w"> </span><span class="mi">10240</span><span class="p">,</span><span class="w">
        </span><span class="err">minRatio</span><span class="p">:</span><span class="w"> </span><span class="mf">0.8</span><span class="w">
    </span><span class="p">}</span><span class="err">)</span><span class="p">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">...</span><span class="w">
</span><span class="p">]</span></code></pre></figure>

<blockquote>
  <p>Here we also added the CompressionPlugin to get the compressed output too.</p>
</blockquote>

<h3 id="wrapping-it-up--beautify-it">Wrapping it up &amp; beautify it</h3>

<p>Ahead of Time compilation and treeshaking are two different things often used together. AoT is done via a different compiler. Treeshaking <em>can</em> be done via webpack but also rollup.js is a way to go.</p>

<p>So we need to have two steps:</p>

<ol>
  <li>compile our files via the ngc compiler</li>
  <li>use the output of that and consume it via webpack</li>
</ol>

<h4 id="beautify-it">beautify it</h4>

<p>You can now “hide” those two commands in the <code class="highlighter-rouge">package.json</code> “scripts” section like this:</p>

<p><code class="highlighter-rouge">"webpack-prod": "npm run ngc &amp;&amp; webpack",</code></p>

<p>which you can run via</p>

<p><code class="highlighter-rouge">npm run webpack-prod</code></p>

<blockquote>
  <p>Be sure to have the ngc command globally installed then…</p>
</blockquote>

<p>I hope i could clarify a bit how aot and treeshaking work with webpack 2 and angular.</p>

<p>Best regards</p>

<p>Fabian</p>

<h4 id="links">Links</h4>

<p><a href="https://angular.io/docs/ts/latest/cookbook/aot-compiler.html">Ahead of time compilation - Angular.io</a></p>

<p><a href="https://github.com/FabianGosebrink/ASPNET-ASPNETCore-Angular-Webpack/tree/master">ASPNET-ASPNETCore-AngularJS-Angular</a></p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2017/02/08/angular-2-ahead-of-time-aot-compilation-lazy-loading-treeshaking-webpack</wp:post_id>
        <wp:post_date>2017-02-08T16:42:00+01:00</wp:post_date>
        <wp:post_date_gmt>2017-02-08T16:42:00+01:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="angular"><![CDATA[["angular",]]></category>
        
          <category domain="post_tag" nicename="webpack"><![CDATA["webpack",]]></category>
        
          <category domain="post_tag" nicename="lazyloading"><![CDATA["lazyloading",]]></category>
        
          <category domain="post_tag" nicename="treeshaking"><![CDATA["treeshaking",]]></category>
        
          <category domain="post_tag" nicename="aot"><![CDATA["aot"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[The difference between AddMvc() and AddMvcCore()]]></title>
        <link>http://offering.solutions/blog/articles/2017/02/07/difference-between-addmvc-addmvcore/</link>
        <pubDate>2017-02-07T20:49:00+01:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this blogpost I want to show you difference between the ASP.NET Core methods <code class="highlighter-rouge">AddMvc()</code> and <code class="highlighter-rouge">AddMvcCore()</code> when working with ASP.NET Core.</p>

<p><a href="https://github.com/FabianGosebrink/ASPNETCore-WebAPI-Sample">ASPNETCore-WebAPI-Sample</a></p>

<h3 id="startupcs">Startup.cs</h3>

<p>When creating an ASP.NET Core WebAPI you often see a Startup.cs file to configure your services and configure your pipeline. Thats what the methods <code class="highlighter-rouge">ConfigureServices(IServiceCollection services)</code> and <code class="highlighter-rouge">Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)</code> are for.</p>

<p><code class="highlighter-rouge">ConfigureServices</code> is preparing your services for being used as you configure them.</p>

<blockquote>
  <p>Here is also the place to add dependency injection, but that is another seperate topic</p>
</blockquote>

<p>You can have a lot of configuration in here. But we want to focus on the main point: Adding the mvc framework.</p>

<p>When starting with “File” –&gt; “New Project” in Visual Studio the default setting in the method is <code class="highlighter-rouge">AddMvc()</code>. And it works straight away. Lets take a look:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...
</span>    <span class="n">services</span><span class="p">.</span><span class="nf">AddMvc</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<p>When now an API with Controllers kicks in we can consume it like normal.</p>

<p><code class="highlighter-rouge">dotnet run</code> makes the API work on <code class="highlighter-rouge">localhost:5000</code></p>

<p><code class="highlighter-rouge">GET localhost:5000/api/house</code></p>

<p>brings</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">[</span>
  <span class="p">{</span>
    <span class="s2">"id"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="s2">"street"</span><span class="p">:</span> <span class="s2">"Street1"</span><span class="p">,</span>
    <span class="s2">"city"</span><span class="p">:</span> <span class="s2">"Town1"</span><span class="p">,</span>
    <span class="s2">"zipCode"</span><span class="p">:</span> <span class="mi">1234</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="s2">"id"</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="s2">"street"</span><span class="p">:</span> <span class="s2">"Street2"</span><span class="p">,</span>
    <span class="s2">"city"</span><span class="p">:</span> <span class="s2">"Town2"</span><span class="p">,</span>
    <span class="s2">"zipCode"</span><span class="p">:</span> <span class="mi">1234</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="s2">"id"</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
    <span class="s2">"street"</span><span class="p">:</span> <span class="s2">"Street3"</span><span class="p">,</span>
    <span class="s2">"city"</span><span class="p">:</span> <span class="s2">"Town3"</span><span class="p">,</span>
    <span class="s2">"zipCode"</span><span class="p">:</span> <span class="mi">1234</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="s2">"id"</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
    <span class="s2">"street"</span><span class="p">:</span> <span class="s2">"Street4"</span><span class="p">,</span>
    <span class="s2">"city"</span><span class="p">:</span> <span class="s2">"Town4"</span><span class="p">,</span>
    <span class="s2">"zipCode"</span><span class="p">:</span> <span class="mi">1234</span>
  <span class="p">}</span>
<span class="p">]</span></code></pre></figure>

<p>What happens, if we change <code class="highlighter-rouge">AddMvc()</code> to <code class="highlighter-rouge">AddMvcCore()</code>?</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...
</span>    <span class="n">services</span><span class="p">.</span><span class="nf">AddMvcCore</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<p>Lets run the same command again:</p>

<p><code class="highlighter-rouge">GET localhost:5000/api/house</code></p>

<p>now brings a <code class="highlighter-rouge">406</code> Error saying “Not Acceptable”.</p>

<p>If we check the console which hosts the webapi we see more information about this error:</p>

<blockquote>
  <p>warn: Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor[1]No output formatter was found for content type ‘’ to write the response.</p>
</blockquote>

<p>So we deactivated something we better should have not deactivated ;-).</p>

<p>The error says that we do not have an output formatter which can parse our output. Even if we add an accept header in the request like <code class="highlighter-rouge">Accept: application/json</code> we would get the same error message, because the server does not know how ot handle the respose.</p>

<p>Lets take a closer look on what is the real difference between <code class="highlighter-rouge">AddMvc()</code> and <code class="highlighter-rouge">AddMvcCore()</code>.</p>

<p>Due to the fact that the framework is open source we can take a look at the sources:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">static</span> <span class="n">IMvcBuilder</span> <span class="nf">AddMvc</span><span class="p">(</span><span class="k">this</span> <span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">services</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="nf">nameof</span><span class="p">(</span><span class="n">services</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">services</span><span class="p">.</span><span class="nf">AddMvcCore</span><span class="p">();</span>

    <span class="n">builder</span><span class="p">.</span><span class="nf">AddApiExplorer</span><span class="p">();</span>
    <span class="n">builder</span><span class="p">.</span><span class="nf">AddAuthorization</span><span class="p">();</span>

    <span class="nf">AddDefaultFrameworkParts</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">PartManager</span><span class="p">);</span>

    <span class="c1">// Order added affects options setup order
</span>
    <span class="c1">// Default framework order
</span>    <span class="n">builder</span><span class="p">.</span><span class="nf">AddFormatterMappings</span><span class="p">();</span>
    <span class="n">builder</span><span class="p">.</span><span class="nf">AddViews</span><span class="p">();</span>
    <span class="n">builder</span><span class="p">.</span><span class="nf">AddRazorViewEngine</span><span class="p">();</span>
    <span class="n">builder</span><span class="p">.</span><span class="nf">AddCacheTagHelper</span><span class="p">();</span>

    <span class="c1">// +1 order
</span>    <span class="n">builder</span><span class="p">.</span><span class="nf">AddDataAnnotations</span><span class="p">();</span> <span class="c1">// +1 order
</span>
    <span class="c1">// +10 order
</span>    <span class="n">builder</span><span class="p">.</span><span class="nf">AddJsonFormatters</span><span class="p">();</span>

    <span class="n">builder</span><span class="p">.</span><span class="nf">AddCors</span><span class="p">();</span>

    <span class="k">return</span> <span class="k">new</span> <span class="nf">MvcBuilder</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">,</span> <span class="n">builder</span><span class="p">.</span><span class="n">PartManager</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>From <a href="https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc/MvcServiceCollectionExtensions.cs#L25-L56">MvcServiceCollectionExtensions.cs</a> tells us, that we are adding the complete MVC Services you need to get the whole MVC functionality.</p>

<p>It is adding Authorization, the RazorViewEngine and the JsonFormatters we need to get our output going. And most interesting it is also calling the <code class="highlighter-rouge">AddMvcCore()</code> method itself.</p>

<p>So if we use the <code class="highlighter-rouge">AddMvc()</code> method we got the ability to render view with razor and so on.</p>

<p>Lets have a look at <code class="highlighter-rouge">AddMvcCore()</code> on the other hand:</p>

<p><a href="https://github.com/aspnet/Mvc/blob/48546dbb28ee762014f49caf052dc9c8a01eec3a/src/Microsoft.AspNetCore.Mvc.Core/DependencyInjection/MvcCoreServiceCollectionExtensions.cs#L37-L54">MvcCoreServiceCollectionExtensions.cs</a></p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">static</span> <span class="n">IMvcCoreBuilder</span> <span class="nf">AddMvcCore</span><span class="p">(</span><span class="k">this</span> <span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">services</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="nf">nameof</span><span class="p">(</span><span class="n">services</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="kt">var</span> <span class="n">partManager</span> <span class="p">=</span> <span class="nf">GetApplicationPartManager</span><span class="p">(</span><span class="n">services</span><span class="p">);</span>
    <span class="n">services</span><span class="p">.</span><span class="nf">TryAddSingleton</span><span class="p">(</span><span class="n">partManager</span><span class="p">);</span>

    <span class="nf">ConfigureDefaultFeatureProviders</span><span class="p">(</span><span class="n">partManager</span><span class="p">);</span>
    <span class="nf">ConfigureDefaultServices</span><span class="p">(</span><span class="n">services</span><span class="p">);</span>
    <span class="nf">AddMvcCoreServices</span><span class="p">(</span><span class="n">services</span><span class="p">);</span>

    <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">MvcCoreBuilder</span><span class="p">(</span><span class="n">services</span><span class="p">,</span> <span class="n">partManager</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">builder</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>This method is a lot shorter and only adding the basic things to get started. But both methods are returning an IMvcCoreBuilder.
Interesting is the <code class="highlighter-rouge">AddMvcCoreServices(services);</code> method which is adding the ability to return FileContents, RedirectToRouteResults, ActionResolvers, use Controllers, use routing and so on. Really basic functionality.</p>

<p>So when using <code class="highlighter-rouge">AddMvcCore()</code> we have to add everything by ourselves. This means, that we only have in our application what we really want and for example do not include the razor functionality which we do not need anyway.</p>

<p>Now that we know the difference between those two methods: How can we get our webapi going again? We still have the error and we can not return any data.</p>

<p>We can fix that by simply telling ASP.NET that it should use JsonFormatters like</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
	<span class="c1">// ...
</span>	
	<span class="c1">// Add framework services.
</span>	<span class="n">services</span><span class="p">.</span><span class="nf">AddMvcCore</span><span class="p">().</span><span class="nf">AddJsonFormatters</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<p>If we now call our</p>

<p><code class="highlighter-rouge">GET localhost:5000/api/house</code></p>

<p>again we should see the output as json like we expected it to be.</p>

<p>I hope this clarified a bit what is the main difference between AddMvc() and AddMvcCore().</p>

<p>Best regards</p>

<p>Fabian</p>

<h4 id="links">Links</h4>

<p><a href="http://stackoverflow.com/questions/40097229/when-i-develop-asp-net-core-mvc-which-service-should-i-use-addmvc-or-addmvccor">When I develop ASP.NET Core MVC, which service should I use? AddMvc or AddMvcCore?</a></p>

<p><a href="https://github.com/aspnet/Mvc/blob/48546dbb28ee762014f49caf052dc9c8a01eec3a/src/Microsoft.AspNetCore.Mvc.Core/DependencyInjection/MvcCoreServiceCollectionExtensions.cs">MvcCoreServiceCollectionExtensions.cs</a></p>

<p><a href="https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc/MvcServiceCollectionExtensions.cs">MvcServiceCollectionExtensions.cs</a></p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2017/02/07/difference-between-addmvc-addmvcore</wp:post_id>
        <wp:post_date>2017-02-07T20:49:00+01:00</wp:post_date>
        <wp:post_date_gmt>2017-02-07T20:49:00+01:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="aspnet"><![CDATA[["aspnet",]]></category>
        
          <category domain="post_tag" nicename="aspnetcore"><![CDATA["aspnetcore"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Working with Angular Template Forms]]></title>
        <link>http://offering.solutions/blog/articles/2017/01/14/working-with-angular-2-template-forms/</link>
        <pubDate>2017-01-14T13:49:00+01:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this blog I want explain and show you how to work with Angular’s template driven forms.</p>

<h3 id="the-problem">The Problem</h3>

<p>I was recently giving an Angular course to awesome people and I noticed that working with Angular forms seems to be one of the most complicated things in Angular.</p>

<h3 id="the-situation">The Situation</h3>

<p>We will start with a simple Angular application which has a structure like this:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>app
├── app.component.ts
├── app.component.html
├── form.component.ts
├── form.component.html
├── app.module.ts
└── main.ts
index.html
systemjs.config.js
tsconfig.json
tslint.json
styles.css
package.json
</code></pre>
</div>

<p>this is an easy way to start with Angular and template forms.</p>

<blockquote>
  <p>I did not mention files like favicon etc. They do not really impact our work here</p>
</blockquote>

<p>Now lets got create a simple form. For this I will grab bootstraps most simple form just to get a nice look and feel.</p>

<p><a href="http://getbootstrap.com/css/#forms">Bootstraps Forms</a></p>

<p>Now we add the bootstrap cdn to our <code class="highlighter-rouge">index.html</code>.</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/head&gt;</span></code></pre></figure>

<p>Out app.component.html simply looks like this:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h1&gt;</span>{{title}}<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;form-component&gt;&lt;/form-component&gt;</span>
<span class="nt">&lt;/div&gt;</span></code></pre></figure>

<h3 id="introducing-the-form">Introducing the Form</h3>

<p>We remove the checkbox and the file upload from the copied form from bootstrap just for clarity and add the form template to our form component. Further we want to handle a simple Name for understanding. Lets modify the template to only work with a name.</p>

<p>So our <code class="highlighter-rouge">form.component.html</code> looks like this now:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;form&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"exampleInputName"</span><span class="nt">&gt;</span>Name<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"name"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"exampleInputName"</span> <span class="na">placeholder=</span><span class="s">"Name"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">class=</span><span class="s">"btn btn-default"</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/form&gt;</span></code></pre></figure>

<p>So what we did here so far is nothing Angular related! We just added simple HTML-Form things.</p>

<p>We will now go ahead and make this thing an Angular form.</p>

<h3 id="add-angular-to-the-form">Add Angular to the form</h3>

<h4 id="the-model">The model</h4>

<p>We will use a normal customer to deal with the form. Also nothing spectecular here, we just add a class representing this customer:</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">export</span> <span class="kr">class</span> <span class="nx">Customer</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="k">public</span> <span class="nx">name</span><span class="err">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>and we place it in a special folder called <code class="highlighter-rouge">models</code></p>

<div class="highlighter-rouge"><pre class="highlight"><code>app
├── models
    └──  customer.model.ts
├── app.component.ts
├── app.component.html
├── form.component.ts
├── form.component.html
├── app.module.ts
└── main.ts
index.html
systemjs.config.js
tsconfig.json
tslint.json
styles.css
package.json
</code></pre>
</div>

<p>Then we can make a new model in the components constructor like this</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">export</span> <span class="kr">class</span> <span class="nx">FormComponent</span> <span class="p">{</span>
  <span class="k">public</span> <span class="nx">title</span><span class="err">:</span> <span class="kr">string</span> <span class="o">=</span> <span class="s1">'Template Forms'</span><span class="p">;</span>
  <span class="k">public</span> <span class="nx">model</span><span class="err">:</span> <span class="nx">Customer</span><span class="p">;</span>

  <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">model</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Customer</span><span class="p">(</span><span class="s1">'Fabian'</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h4 id="adding-the-binding-to-the-model-with-ngmodel">Adding the binding to the model with ngModel</h4>

<p>Next thing is to add the binding to the inputs in our forms. And here is the first time we marry Angular with our html.</p>

<p>We take the <code class="highlighter-rouge">ngModel</code>-directive to tell the field “Hey, this thing I give you here is important for you form. Please, my little form, take care of it”</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
    <span class="c">&lt;!--...--&gt;</span>
     <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"name"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"exampleInputName"</span> <span class="na">placeholder=</span><span class="s">"Name"</span> <span class="na">ngModel</span><span class="nt">&gt;</span>
    <span class="c">&lt;!--...--&gt;</span>
<span class="nt">&lt;/div&gt;</span></code></pre></figure>

<p>Now this input is marked with the <code class="highlighter-rouge">ngModel</code>-directive. But what is that good for?</p>

<p>Before we go on clarify that can also take care of something Angular prepared for us. What we want to do now is asking our form about its state. What is the state of our form currently and when the user types something in? We can not access our form yet, because we do not have a name to ask for. So let’s introduce one!</p>

<p>We can do this by adding a variable in the template with the “#”-Sign and tagging the form with the <code class="highlighter-rouge">ngForm</code>-directive Angular prepared for us.</p>

<p>This means:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;form&gt;</span></code></pre></figure>

<p>becomes to</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;form</span> <span class="err">#</span><span class="na">myform=</span><span class="s">"ngForm"</span><span class="nt">&gt;</span></code></pre></figure>

<p>We have introduced a variable and assign the complete form to it. Angular introduced this <code class="highlighter-rouge">ngForm</code> for us in the background, we are only catching it up and take a variable to make it accessible. Now we are able to ask the form for its state! This variable is called a template reference variable.</p>

<p>What we want is to see the state of our form. We achieve that by adding the ngModel-directive, by giving the form a variable we can access it and one last piece is missing. If we use ngModel in an form control, we also have to tell the Angular form how it should be accessed. So we need a name. Lets introduce a name that this control can be registered onto the form under that name.</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
    <span class="c">&lt;!--...--&gt;</span>
     <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"exampleInputName"</span> <span class="na">placeholder=</span><span class="s">"Name"</span> <span class="na">ngModel</span> <span class="na">name=</span><span class="s">"name"</span><span class="nt">&gt;</span>
    <span class="c">&lt;!--...--&gt;</span>
<span class="nt">&lt;/div&gt;</span></code></pre></figure>

<p>With those three things we can ask the form about its state with</p>

<p><code class="highlighter-rouge"> myform.value </code></p>

<p>like this:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;p&gt;</span> {{ myform.value | json }} <span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;form</span> <span class="err">#</span><span class="na">myform=</span><span class="s">"ngForm"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"exampleInputName"</span><span class="nt">&gt;</span>Name<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"exampleInputName"</span> <span class="na">placeholder=</span><span class="s">"Name"</span> <span class="na">ngModel</span> <span class="na">name=</span><span class="s">"name"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">class=</span><span class="s">"btn btn-default"</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/form&gt;</span></code></pre></figure>

<p>The ngModel directive is forcing Angular to persist the state of the form to the form object. So we read it with</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{{</span> <span class="nx">myform</span><span class="p">.</span><span class="nx">value</span> <span class="o">|</span> <span class="nx">json</span> <span class="p">}}</span></code></pre></figure>

<p>But further to that it is doing nothing. We got our state only persisted to the form. We want to interact with our model, right?</p>

<p>Therefore we have to intruduce some kind of databinding. As we know that databinding is working with () and/or [] we have no databinding going on here so far.</p>

<p>We could do the property binding like this</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"> <span class="nt">&lt;input</span> <span class="err">...</span> <span class="err">[</span><span class="na">ngModel</span><span class="err">]="</span><span class="na">model</span><span class="err">.</span><span class="na">name</span><span class="err">"</span> <span class="na">name=</span><span class="s">"name"</span><span class="nt">&gt;</span></code></pre></figure>

<p>Then Angular would take this ngModel directive and connect it to a property on our component called “model.name”.</p>

<blockquote>
  <p>Remember we created a model on our component with its constructor</p>
</blockquote>

<p>When the initial value is set from the component the value would be reflected into the input field. But this is only one way binding! When the value in the input changes it would not be reflected into the model. The form would change its state but the model know nothing about it.</p>

<p>To get the model also changed when the user types something in we have to introduce two way binding like this:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"> <span class="nt">&lt;input</span> <span class="err">...</span> <span class="err">[(</span><span class="na">ngModel</span><span class="err">)]="</span><span class="na">model</span><span class="err">.</span><span class="na">name</span><span class="err">"</span> <span class="na">name=</span><span class="s">"name"</span><span class="nt">&gt;</span></code></pre></figure>

<p>So the forms state would now reflect the changes into the forms state <em>and</em> into the model we want to work with when submitting. In addition to that the initial state is set because we create a model on the constructor.</p>

<h4 id="further-steps-with-the-form">Further steps with the form</h4>

<p>We can use the forms template reference variable also to check some properties on the form.</p>

<blockquote>
  <p>The template reference variable offers us a form-property which we can check</p>
</blockquote>

<p>We can check the following states on the form :</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="c">&lt;!--</span> <span class="k">if</span> <span class="nx">user</span> <span class="nx">touched</span> <span class="nx">every</span> <span class="nx">field</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">form</span> <span class="o">--&gt;</span>
<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">myform</span><span class="p">.</span><span class="nx">form</span><span class="p">.</span><span class="nx">touched</span><span class="p">}}</span><span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>
<span class="c">&lt;!--</span> <span class="k">if</span> <span class="nx">every</span> <span class="nx">field</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">form</span> <span class="nx">is</span> <span class="nx">not</span> <span class="nx">touched</span> <span class="nx">yet</span> <span class="o">--&gt;</span>
<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">myform</span><span class="p">.</span><span class="nx">form</span><span class="p">.</span><span class="nx">untouched</span><span class="p">}}</span><span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>
<span class="c">&lt;!--</span> <span class="nx">field</span> <span class="nx">has</span> <span class="nx">not</span> <span class="nx">been</span> <span class="nx">changed</span> <span class="nx">value</span> <span class="nx">since</span> <span class="nx">it</span> <span class="nx">is</span> <span class="nx">displayed</span> <span class="o">--&gt;</span>
<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">myform</span><span class="p">.</span><span class="nx">form</span><span class="p">.</span><span class="nx">pristine</span><span class="p">}}</span><span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>
<span class="c">&lt;!--</span> <span class="nx">user</span> <span class="nx">changed</span> <span class="nx">the</span> <span class="nx">value</span> <span class="nx">since</span> <span class="nx">it</span> <span class="nx">is</span> <span class="nx">displayed</span> <span class="o">--&gt;</span>
<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">myform</span><span class="p">.</span><span class="nx">form</span><span class="p">.</span><span class="nx">dirty</span><span class="p">}}</span><span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>
<span class="c">&lt;!--</span> <span class="nx">form</span> <span class="nx">is</span> <span class="nx">valid</span> <span class="o">--&gt;</span>
<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">myform</span><span class="p">.</span><span class="nx">form</span><span class="p">.</span><span class="nx">valid</span><span class="p">}}</span><span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>
<span class="c">&lt;!--</span> <span class="nx">form</span> <span class="nx">is</span> <span class="nx">invalid</span> <span class="o">--&gt;</span>
<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">myform</span><span class="p">.</span><span class="nx">form</span><span class="p">.</span><span class="nx">invalid</span><span class="p">}}</span><span class="o">&lt;</span><span class="sr">/p&gt;</span></code></pre></figure>

<p>Lets face the “valid” and “invalid” for a second. We can apply a normal HTML <code class="highlighter-rouge">required</code> attribute at one control just to have a reason why a form should be valid or invalid.</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;form</span> <span class="err">#</span><span class="na">myform=</span><span class="s">"ngForm"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"exampleInputName"</span><span class="nt">&gt;</span>Name<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"exampleInputName"</span> <span class="na">placeholder=</span><span class="s">"Name"</span> <span class="err">[(</span><span class="na">ngModel</span><span class="err">)]="</span><span class="na">model</span><span class="err">.</span><span class="na">name</span><span class="err">"</span> <span class="na">name=</span><span class="s">"name"</span> <span class="na">required</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">class=</span><span class="s">"btn btn-default"</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/form&gt;</span></code></pre></figure>

<p>So we can go ahead and for example disable the submit button and show a message when the form is not valid.</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;form</span> <span class="err">#</span><span class="na">myform=</span><span class="s">"ngForm"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"exampleInputName"</span><span class="nt">&gt;</span>Name<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"exampleInputName"</span> <span class="na">placeholder=</span><span class="s">"Name"</span> <span class="err">[(</span><span class="na">ngModel</span><span class="err">)]="</span><span class="na">model</span><span class="err">.</span><span class="na">name</span><span class="err">"</span> <span class="na">name=</span><span class="s">"name"</span> <span class="na">required</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/div&gt;</span>

    <span class="nt">&lt;span</span> <span class="err">*</span><span class="na">ngIf=</span><span class="s">"!myform.form.valid"</span><span class="nt">&gt;</span>Check your form<span class="nt">&lt;/span&gt;</span>

    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">class=</span><span class="s">"btn btn-default"</span> <span class="err">[</span><span class="na">disabled</span><span class="err">]="!</span><span class="na">myform</span><span class="err">.</span><span class="na">form</span><span class="err">.</span><span class="na">valid</span><span class="err">"</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>

<span class="nt">&lt;/form&gt;</span></code></pre></figure>

<p>So this gives us the possibility to ask the form for some variables Angular gives us.</p>

<p>We can also do this whole template variable thing on a control itself and ask the simple control for its state instead of the whole form. The same properties which are valid for the form apply also on the control. Therefore we have to grab our ngModel-directive again and assign it to a template variable to make the control, or better: the model assigned to this control, accessible.</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"> <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"exampleInputName"</span> <span class="na">placeholder=</span><span class="s">"Name"</span> <span class="err">[(</span><span class="na">ngModel</span><span class="err">)]="</span><span class="na">model</span><span class="err">.</span><span class="na">name</span><span class="err">"</span> <span class="na">name=</span><span class="s">"name"</span> <span class="na">required</span> <span class="err">#</span><span class="na">name=</span><span class="s">"ngModel"</span><span class="nt">&gt;</span></code></pre></figure>

<p>Now we can ask for the state of this control in the same way like the form:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;form</span> <span class="err">#</span><span class="na">myform=</span><span class="s">"ngForm"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"exampleInputName"</span><span class="nt">&gt;</span>Name<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"exampleInputName"</span> <span class="na">placeholder=</span><span class="s">"Name"</span> <span class="err">[(</span><span class="na">ngModel</span><span class="err">)]="</span><span class="na">model</span><span class="err">.</span><span class="na">name</span><span class="err">"</span> <span class="na">name=</span><span class="s">"name"</span> <span class="na">required</span> <span class="err">#</span><span class="na">name=</span><span class="s">"ngModel"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/div&gt;</span>

    <span class="nt">&lt;span</span> <span class="err">*</span><span class="na">ngIf=</span><span class="s">"!name.valid"</span><span class="nt">&gt;</span>name is invalid<span class="nt">&lt;/span&gt;</span>

    <span class="nt">&lt;span</span> <span class="err">*</span><span class="na">ngIf=</span><span class="s">"!myform.form.valid"</span><span class="nt">&gt;</span>Check your form<span class="nt">&lt;/span&gt;</span>

    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">class=</span><span class="s">"btn btn-default"</span> <span class="err">[</span><span class="na">disabled</span><span class="err">]="!</span><span class="na">myform</span><span class="err">.</span><span class="na">form</span><span class="err">.</span><span class="na">valid</span><span class="err">"</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>

<span class="nt">&lt;/form&gt;</span></code></pre></figure>

<h4 id="submitting-the-form">Submitting the Form</h4>

<p>Our button at the end of the form is currently set to submit the form. But we do not catch the submitting so far. So lets do that.</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;h4&gt;</span>Form Value<span class="nt">&lt;/h4&gt;</span>

<span class="nt">&lt;p&gt;</span>{{myform.value | json}}<span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;form</span> <span class="err">#</span><span class="na">myform=</span><span class="s">"ngForm"</span> <span class="err">(</span><span class="na">ngSubmit</span><span class="err">)="</span><span class="na">alertMyFormModel</span><span class="err">()"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"exampleInputEmail1"</span><span class="nt">&gt;</span>Email address<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"email"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"exampleInputEmail1"</span> <span class="na">placeholder=</span><span class="s">"Email"</span> <span class="na">ngModel</span> <span class="na">name=</span><span class="s">"email"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"exampleInputPassword1"</span><span class="nt">&gt;</span>Password<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"password"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"exampleInputPassword1"</span> <span class="na">placeholder=</span><span class="s">"Password"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">class=</span><span class="s">"btn btn-default"</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/form&gt;</span></code></pre></figure>

<p>We introduced the ngSubmit-directive and assigned it a function we have to implement on our component.</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">export</span> <span class="kr">class</span> <span class="nx">FormComponent</span> <span class="p">{</span>
  <span class="k">public</span> <span class="nx">title</span><span class="err">:</span> <span class="kr">string</span> <span class="o">=</span> <span class="s1">'Template Forms'</span><span class="p">;</span>
  <span class="k">public</span> <span class="nx">model</span><span class="err">:</span> <span class="nx">Customer</span><span class="p">;</span>

  <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">model</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Customer</span><span class="p">(</span><span class="s1">'Fabian'</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nx">alertMyFormModel</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">));</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>If you now click the button the form gets submitted and you should see the model in a json string in an alert box.</p>

<p>I hope I could clarify some things about Angulars template driven forms.</p>

<p>Best regards</p>

<p>Fabian</p>

]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2017/01/14/working-with-angular-2-template-forms</wp:post_id>
        <wp:post_date>2017-01-14T13:49:00+01:00</wp:post_date>
        <wp:post_date_gmt>2017-01-14T13:49:00+01:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="angular"><![CDATA[["angular",]]></category>
        
          <category domain="post_tag" nicename="forms"><![CDATA["forms",]]></category>
        
          <category domain="post_tag" nicename="templatedriven"><![CDATA["templatedriven"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Speaking at the Microsoft TechDays 2017]]></title>
        <link>http://offering.solutions/blog/articles/2017/01/02/speaking-at-the-microsoft-techdays-2017/</link>
        <pubDate>2017-01-02T10:08:00+01:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>I am very proud to announce that I will be speaking at the Microsoft TechDays 2017 about Angular and ASP.NET Core.</p>

<p>This is the second time I am attending to the Microsoft TechDays. The last time was 2016 and it was a blast - I really enjoyed it.</p>

<p><img src="/assets/articles/wp-content/uploads/2017/01/C0Q_kTCUcAABfwL-1024x536.jpg" alt="Speaking at the Microsoft TechDays 2017" /></p>

<p>In my session which is placed as the last one at the second day, I will get you introduced to ASP.NET Core and how to use it. We will look at general facts around ASP.NET Core as well as the Startup-File, Middlewares and of course an ASP.NET Core WebAPI and the implementation of the HTTP-Verbs.</p>

<p>In the second part of my session we will take a look at Angular and one possible way to use components with stateful and stateless design. We will cover the differences between those and find out what One-Way-Dataflow is and how it will help us getting our application cleaner and well structured.</p>

<p>I will prepare an demo application to show all this concepts and techniques in action. We will use Visual Studio Code as this is still a scary thing for many developers due to the fact that it is not Visual Studio itself.</p>

<p>The talk will be in german.</p>

<p>Well, I will do the best I can to give you guys a show, to entertain you and to give you some technical inspiration and a view on this new stuff. I really hope to see you there.</p>

<p>See you</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2017/01/02/speaking-at-the-microsoft-techdays-2017</wp:post_id>
        <wp:post_date>2017-01-02T10:08:00+01:00</wp:post_date>
        <wp:post_date_gmt>2017-01-02T10:08:00+01:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="microsoft"><![CDATA[["microsoft",]]></category>
        
          <category domain="post_tag" nicename="speaking"><![CDATA["speaking",]]></category>
        
          <category domain="post_tag" nicename="techdays"><![CDATA["techdays"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[How I started recording my first Video training]]></title>
        <link>http://offering.solutions/blog/articles/2016/11/29/how-i-started-recording-my-first-video-training/</link>
        <pubDate>2016-11-29T14:07:00+01:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this blogpost I want to describe how I started recording my first Video training and tell you about the experiences I made during the recording.</p>

<p><a href="https://channel9.msdn.com/Blogs/MVP-VisualStudio-Dev/Erstellen-einer-WebAPI-mit-ASPNET-Core">https://channel9.msdn.com/Blogs/MVP-VisualStudio-Dev/Erstellen-einer-WebAPI-mit-ASPNET-Core</a></p>

<h3 id="why">Why?</h3>

<p>I had this “recording a video”-thing in my mind for a long time. But never had the equipment and the software to do it. So it was more a “Yes, I can get this video recording thing going sometime”. But a few weeks ago I went along and bought a microphone giving me a bit better quality than the microphone on an USB-Logitech-Webcam. ;) I think this is another way of getting knowledge in the community beside blogging and doing talks. It is not better or worse - it is just a different way. And I wanted to try it. If I fail I take the experience with me and if I would try the next time I have some experience to rely on :)</p>

<h3 id="get-going">Get going…</h3>

<p>So…I first bought a microphone. I went for this one:</p>

<p><a href="https://www.digitec.ch/de/s1/product/rode-nt-usb-mono-mikrofon-3450705">https://www.digitec.ch/de/s1/product/rode-nt-usb-mono-mikrofon-3450705</a></p>

<p><img src="/assets/articles/wp-content/uploads/2016/11/IMG_20161015_141224_01-1024x576.jpg" alt="img_20161015_141224_01" /></p>

<p><img src="/assets/articles/wp-content/uploads/2016/11/IMG_20161015_141515-e1480155685781-1024x576.jpg" alt="img_20161015_141515" /></p>

<p>The installation (on a windows 10 computer) was easy. Plugged in USB and it was recognized by my computer immediately.</p>

<p>Next thing was to get Camtasia as a screen recording software. I downloaded it and used it without having seen a screen recording software ever. Like I said: This was the beginning - I never got in touch with this kind of doing tutorials. But Camtasia is massive but also very easy to use.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/11/IMG_20161018_115456-1024x576.jpg" alt="img_20161018_115456" /></p>

<p>You should give it a try. Even if you do not have Camtasia experience you can get started in just a few steps.</p>

<h3 id="you-are-going-to-hate-yourself">You are going to hate yourself</h3>

<p>After I took a session I replayed it and heard my voice for the first time recorded by a better microphone. If you do so: be prepared. I thought I was but as I heard my voice I knew: I was not. I hate my voice. How can people listen to me with such a horrible voice? That is incredible! But you can not change that. So I kept going. People are used to your voice. They don’t know you in sounding different. So this is okay. It has to be. You got nothing else to offer regarding to your own sound of your voice. ;-)</p>

<p><img src="/assets/articles/wp-content/uploads/2016/11/IMG_20161015_150039-1024x576.jpg" alt="How I started recording my first Video training" /></p>

<h3 id="technique-of-recording">Technique of recording</h3>

<p>The first steps I took were horrible and I immediately deleted every recording which had a mistake in it. And I recognized that the longer I tried to get a part of the recording correct the harder I failed. There comes the point where you are that concentrated on getting one single word correct, where you are that focused, that you do not think of all other parts in the block of recording and then these ones are failing. “Is that really that hard” I thought? It is! But there are ways to get around this a little better.</p>

<p>At the MVP Summit I had a nice chat to Deborah Kurata which is in my opinion one of the best recording teachers I have ever seen (or heard). She gave me the tip that if I have made a mistake while recording: keep silence for a bit and get going! Do not stop and delete the recording. I knew that this was one way of doing it before but I did not know how to cut things with Camtasia and how granular I could cut video and audio with Camtasia. But she gave me that tip and I tried it. I had to get into this cutting-audio-and-video-thing with Camtasia but I got is very fast because it is really easy with that software. So I tried that and I was a lot faster. So thank you for the tip Deborah. ;)</p>

<p>Okay, I got that going…but there was still a lot of cutting. After a time I realized I had to big blocks to record. So I made the blocks to record smaller which has a few other advantages: You dont have to cut THAT much, you can keep focused on the thing you want to tell in this particular block and you will get a better structure in your video.</p>

<p>But with a that cutting and block-stuff: When you do a mistake on talking: Make sure that when you start recording again your screen looks exactly the same as at the beginning. Even the mouse should have the position to where you started. If it does not and you watch it afterwards the mouse will “jump” which is very difficult for the people to follow.</p>

<h3 id="record-your-picture--or-not">Record your picture … or not?</h3>

<p>In the beginning I was impressed that Camstasia could handle the two video inputs (webcam and screen) and put the picture of my webcam on the recording in the end. That was a nice feature. But I started to get rid of it because of several reasons: the people should see my whole desktop, my voice was enough for the people to handle and I wanted the people not to be distracted from the screen. There was the focus. Not my voice, not my face, it was the screen, the coding I do. So I did not want to spend a single inch of my desktop to picture me.</p>

<h3 id="still-a-loooong-way-to-go">Still a loooong way to go…</h3>

<p>With all the experience I made recording a video this whole thing is a lot of work. It takes a lot if time and I am sure I will make a lot more experiences in the future when it comes to record a video. It takes massive time to prepare a video, record it and work on it when you finished the recording. I dont know how the others feel but I have the feeling I recorded this video about 5 times in a whole to get the output I got now. And I think it is far away from being perfect. But I think with the time you can learn from others, from your own experience and do some things better right from the start. But I am also sure that other problems will appear then.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/11/IMG_20161020_103819-1024x576.jpg" alt="How I started recording my first Video training" /></p>

<h3 id="the-result">The result</h3>

<p>I published the result on Channel 9. I made this video in german because I was told having german content is more important right now than having english content due to the fact that there is a lot of english content in the moment on the topic ASP.NET. And although it was a lot of work doing this recording the video was so much fun!!! I loved it. All this cutting, speaking, recording etc. I loved doing it and enjoyed every second.</p>

<p>Well…in the end it is a video. The result of heavy work which was so much fun that I can not describe it. Still: I dont like the sound of my voice :) But I hope that this video will help others to get started with ASP.NET and Visual Studio 2015. I hope that I can reach others and make them as enthusiastic to the topic as I am. This is one way more to give the community something back.</p>

<p>I really hope you like it.</p>

<p><a href="https://channel9.msdn.com/Blogs/MVP-VisualStudio-Dev/Erstellen-einer-WebAPI-mit-ASPNET-Core">https://channel9.msdn.com/Blogs/MVP-VisualStudio-Dev/Erstellen-einer-WebAPI-mit-ASPNET-Core</a></p>

<p>Best regards</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2016/11/29/how-i-started-recording-my-first-video-training</wp:post_id>
        <wp:post_date>2016-11-29T14:07:00+01:00</wp:post_date>
        <wp:post_date_gmt>2016-11-29T14:07:00+01:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="channel9"><![CDATA[["channel9",]]></category>
        
          <category domain="post_tag" nicename="microphone"><![CDATA["microphone",]]></category>
        
          <category domain="post_tag" nicename="recording"><![CDATA["recording",]]></category>
        
          <category domain="post_tag" nicename="screenrecording"><![CDATA["screenrecording",]]></category>
        
          <category domain="post_tag" nicename="talks"><![CDATA["talks",]]></category>
        
          <category domain="post_tag" nicename="speaking"><![CDATA["speaking"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[How to implement a table filter in Angular]]></title>
        <link>http://offering.solutions/blog/articles/2016/11/21/how-to-implement-a-table-filter-in-angular-2/</link>
        <pubDate>2016-11-21T21:16:00+01:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this post I want to show you how to implement a table filter in Angular.</p>

<p>Code: <a href="https://github.com/FabianGosebrink/ASPNET-ASPNETCore-Angular-Webpack/blob/master/AngularCLI/src/app/food/pipes/filter.pipe.ts">https://github.com/FabianGosebrink/ASPNET-ASPNETCore-Angular-Webpack/blob/master/AngularCLI/src/app/food/pipes/filter.pipe.ts</a></p>

<p>A table in your application is maybe one of the most used controls. So is a filter for the table.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/11/filter-1024x133.jpg" alt="In this post I want to show you how to implement a table filter in Angular2" /></p>

<p>You can achieve this using a pipe:</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">Pipe</span><span class="p">,</span> <span class="nx">PipeTransform</span><span class="p">,</span> <span class="nx">Injectable</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>

<span class="err">@</span><span class="nx">Pipe</span><span class="p">({</span>
    <span class="na">name</span><span class="p">:</span> <span class="s1">'filter'</span>
<span class="p">})</span>

<span class="err">@</span><span class="nx">Injectable</span><span class="p">()</span>
<span class="k">export</span> <span class="kr">class</span> <span class="nx">FilterPipe</span> <span class="k">implements</span> <span class="nx">PipeTransform</span> <span class="p">{</span>
    <span class="nx">transform</span><span class="p">(</span><span class="nx">items</span><span class="err">:</span> <span class="kr">any</span><span class="p">[],</span> <span class="nx">field</span><span class="err">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">value</span><span class="err">:</span> <span class="kr">string</span><span class="p">)</span><span class="err">:</span> <span class="kr">any</span><span class="p">[]</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">items</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="p">[];</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">field</span> <span class="o">||</span> <span class="o">!</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">items</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nx">items</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">singleItem</span> <span class="o">=&gt;</span> <span class="nx">singleItem</span><span class="p">[</span><span class="nx">field</span><span class="p">].</span><span class="nx">toLowerCase</span><span class="p">().</span><span class="nx">includes</span><span class="p">(</span><span class="nx">value</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()));</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>This pipe takes an array if items and checks if the field which is also a parameter on a single items contains the value the user types. It returns the array of matching items.</p>

<p>The Pipe is available through the name “filter”.</p>

<p>After implementing this the pipe has to be registered on a module to make it available in our application. Could be your application module or if you have one, a shared module. In case of the shared one: Do not forget to export it. ;-)</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">NgModule</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">BrowserModule</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/platform-browser'</span><span class="p">;</span>

<span class="c1">// ...</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">FilterPipe</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../pipes/filter.pipe'</span><span class="p">;</span>

<span class="err">@</span><span class="nx">NgModule</span><span class="p">({</span>
    <span class="na">imports</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// Modules</span>
        <span class="nx">BrowserModule</span>
    <span class="p">],</span>

    <span class="na">declarations</span><span class="p">:</span> <span class="p">[</span>

        <span class="c1">// Components &amp;amp; directives</span>
        <span class="nx">FilterPipe</span>
    <span class="p">],</span>

    <span class="na">providers</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// Services</span>
    <span class="p">],</span>

    <span class="na">exports</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// ...</span>
        <span class="nx">FilterPipe</span>
    <span class="p">]</span>
<span class="p">})</span>

<span class="k">export</span> <span class="kr">class</span> <span class="nx">SharedModule</span> <span class="p">{</span> <span class="p">}</span></code></pre></figure>

<p>AppModule:</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">NgModule</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="c1">// ...</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">SharedModule</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'./modules/shared.module'</span><span class="p">;</span>

<span class="c1">// ...</span>

<span class="err">@</span><span class="nx">NgModule</span><span class="p">({</span>
    <span class="na">imports</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// ...</span>
        <span class="nx">SharedModule</span>
    <span class="p">],</span>

    <span class="na">declarations</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// ...</span>
    <span class="p">],</span>

    <span class="na">providers</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// ...</span>
    <span class="p">],</span>

    <span class="na">bootstrap</span><span class="p">:</span> <span class="p">[</span><span class="nx">AppComponent</span><span class="p">]</span>
<span class="p">})</span>

<span class="k">export</span> <span class="kr">class</span> <span class="nx">AppModule</span> <span class="p">{</span> <span class="p">}</span></code></pre></figure>

<p>In the template you have to add a input to a form to display a field to the user where the searchstring can be typed. After this the pipe has to be applied and the searchstring has to be databound in the template.</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">OnInit</span><span class="p">,</span> <span class="nx">Output</span><span class="p">,</span> <span class="nx">EventEmitter</span><span class="p">,</span> <span class="nx">Input</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="err">@</span><span class="nx">Component</span><span class="p">({</span>
    <span class="na">selector</span><span class="p">:</span> <span class="s1">'foodList'</span><span class="p">,</span>
    <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'app/components/foodList/foodList.component.html'</span>
<span class="p">})</span>

<span class="k">export</span> <span class="kr">class</span> <span class="nx">FoodListComponent</span> <span class="p">{</span>
    <span class="k">public</span> <span class="nx">foodItem</span><span class="err">:</span> <span class="nx">FoodItem</span><span class="p">;</span>
    <span class="k">public</span> <span class="nx">searchString</span><span class="err">:</span> <span class="kr">string</span><span class="p">;</span>

    <span class="c1">// ...</span>
<span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;form&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"input-group"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"input-group-addon"</span><span class="nt">&gt;&lt;i</span> <span class="na">class=</span><span class="s">"glyphicon glyphicon-search"</span><span class="nt">&gt;&lt;/i&gt;&lt;/div&gt;</span>
            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">name=</span><span class="s">"searchString"</span> <span class="na">placeholder=</span><span class="s">"Type to search..."</span> <span class="err">[(</span><span class="na">ngModel</span><span class="err">)]="</span><span class="na">searchString</span><span class="err">"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/form&gt;</span>

<span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">"table"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
        <span class="nt">&lt;th&gt;</span>Name<span class="nt">&lt;/th&gt;</span>
        <span class="nt">&lt;th&gt;</span>Calories<span class="nt">&lt;/th&gt;</span>
        <span class="nt">&lt;th</span> <span class="na">class=</span><span class="s">"text-right"</span><span class="nt">&gt;</span>Actions<span class="nt">&lt;/th&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
    <span class="nt">&lt;tr</span> <span class="err">*</span><span class="na">ngFor=</span><span class="s">"let food of foods | filter : 'name' : searchString; let i = index"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">"text-left"</span><span class="nt">&gt;</span>
            
        <span class="nt">&lt;/td&gt;</span>
        // ...
    <span class="nt">&lt;/tr&gt;</span>
<span class="nt">&lt;/table&gt;</span></code></pre></figure>

<p>Now the table is filtered after the field “name” by the string which is typed into the searchString-input.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/11/searchFilter-1024x316.gif" alt="In this post I want to show you how to implement a table filter in Angular2" /></p>

<p>HTH</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2016/11/21/how-to-implement-a-table-filter-in-angular-2</wp:post_id>
        <wp:post_date>2016-11-21T21:16:00+01:00</wp:post_date>
        <wp:post_date_gmt>2016-11-21T21:16:00+01:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="angular"><![CDATA[["angular",]]></category>
        
          <category domain="post_tag" nicename="filter"><![CDATA["filter",]]></category>
        
          <category domain="post_tag" nicename="pipe"><![CDATA["pipe",]]></category>
        
          <category domain="post_tag" nicename="tablefilter"><![CDATA["tablefilter",]]></category>
        
          <category domain="post_tag" nicename="typescript"><![CDATA["typescript"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Build and debug a WebAPI with the Dotnet CLI and VSCode]]></title>
        <link>http://offering.solutions/blog/articles/2016/11/02/build-and-debug-webapi-with-the-dotnet-cli-and-vscode/</link>
        <pubDate>2016-11-02T09:30:00+01:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this blog I want to show you how to build and debug a WebAPI with the Dotnet CLI and VSCode.</p>

<p>Code is here:</p>

<p><a href="https://github.com/FabianGosebrink/ASPNETCore-WebAPI-With-VSCode-Dotnet-CLI">https://github.com/FabianGosebrink/ASPNETCore-WebAPI-With-VSCode-Dotnet-CLI</a></p>

<h3 id="why-should-we-do-a-webapi-with-vscode-and-the-dotnet-cli">Why should we do a WebAPI with VSCode and the DotNet CLI?</h3>

<p>If you are building websites nowadays you have a lot of tools and a lot of technologies to handle. On Serverside this is a little bit easier but there you have a couple of technologies to face, too. In the past this was strongly connected to the operating system you were running on. With the dotnet CLI and Visual Studio Code you can build, run and debug APIs which are cross platform and so not bound to your (windows) system anymore.</p>

<h3 id="get-started">Get started</h3>

<p>First you have to download the dotnet CLI</p>

<p><a href="https://github.com/dotnet/cli">https://github.com/dotnet/cli</a></p>

<p>You can check if the CLI is running correctly by typing “dotnet” into your cmd. Something like this should appear:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/11/BuildaWebAPIwithVSCodeandtheDotNetCLI_01.jpg" alt="buildawebapiwithvscodeandthedotnetcli_01" />&lt;/a&gt;</p>

<p>Now we can type “code .” to start Visual Studio Code and add some content.</p>

<p>Modify the project.json to this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">"dependencies"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"Microsoft.NETCore.App"</span><span class="err">:</span> <span class="p">{</span>
      <span class="s2">"version"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
      <span class="s2">"type"</span><span class="err">:</span> <span class="s2">"platform"</span>
    <span class="p">},</span>
    <span class="s2">"Microsoft.AspNetCore.Diagnostics"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.AspNetCore.Server.IISIntegration"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.AspNetCore.Server.Kestrel"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.Extensions.Logging.Console"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.AspNetCore.Mvc"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Automapper"</span><span class="err">:</span> <span class="s2">"5.1.1"</span><span class="p">,</span>
    <span class="s2">"Microsoft.Extensions.Configuration.FileExtensions"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.Extensions.Configuration.Json"</span><span class="err">:</span> <span class="s2">"1.0.0"</span>
  <span class="p">},</span>
  <span class="s2">"tools"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"Microsoft.AspNetCore.Server.IISIntegration.Tools"</span><span class="err">:</span> <span class="s2">"1.0.0-preview2-final"</span>
  <span class="p">},</span>
  <span class="s2">"frameworks"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"netcoreapp1.0"</span><span class="err">:</span> <span class="p">{}</span>
  <span class="p">},</span>
  <span class="s2">"buildOptions"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"emitEntryPoint"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"preserveCompilationContext"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"debugType"</span><span class="err">:</span> <span class="s2">"portable"</span>
  <span class="p">},</span>
  <span class="s2">"runtimeOptions"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"configProperties"</span><span class="err">:</span> <span class="p">{</span>
      <span class="s2">"System.GC.Server"</span><span class="err">:</span> <span class="kc">true</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="s2">"publishOptions"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"include"</span><span class="err">:</span> <span class="p">[</span>
      <span class="s2">"wwwroot"</span><span class="p">,</span>
      <span class="s2">"web.config"</span>
    <span class="p">]</span>
  <span class="p">},</span>
  <span class="s2">"scripts"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"postpublish"</span><span class="err">:</span> <span class="p">[</span>
      <span class="s2">"dotnet publish-iis --publish-folder %publish:OutputPath% --framework %publish:FullTargetFramework%"</span>
    <span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>and add the Startup.cs like this:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Builder</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Hosting</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.DependencyInjection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Logging</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AspNetWebapiCore</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Startup</span>
    <span class="p">{</span>
        <span class="c1">// This method gets called by the runtime. Use this method to add services to the container.
</span>        <span class="c1">// For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=398940
</span>        <span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">services</span><span class="p">.</span><span class="nf">AddOptions</span><span class="p">();</span>

            <span class="n">services</span><span class="p">.</span><span class="nf">AddCors</span><span class="p">(</span><span class="n">options</span> <span class="p">=&gt;</span>
            <span class="p">{</span>
                <span class="n">options</span><span class="p">.</span><span class="nf">AddPolicy</span><span class="p">(</span><span class="s">"AllowAllOrigins"</span><span class="p">,</span>
                    <span class="n">builder</span> <span class="p">=&gt;</span>
                    <span class="p">{</span>
                        <span class="n">builder</span>
                            <span class="p">.</span><span class="nf">AllowAnyOrigin</span><span class="p">()</span>
                            <span class="p">.</span><span class="nf">AllowAnyHeader</span><span class="p">()</span>
                            <span class="p">.</span><span class="nf">AllowAnyMethod</span><span class="p">();</span>
                    <span class="p">});</span>
            <span class="p">});</span>

            <span class="n">services</span><span class="p">.</span><span class="nf">AddMvc</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
</span>        <span class="k">public</span> <span class="k">void</span> <span class="nf">Configure</span><span class="p">(</span><span class="n">IApplicationBuilder</span> <span class="n">app</span><span class="p">,</span> <span class="n">IHostingEnvironment</span> <span class="n">env</span><span class="p">,</span> <span class="n">ILoggerFactory</span> <span class="n">loggerFactory</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">loggerFactory</span><span class="p">.</span><span class="nf">AddConsole</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">env</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="n">app</span><span class="p">.</span><span class="nf">UseDeveloperExceptionPage</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseCors</span><span class="p">(</span><span class="s">"AllowAllOrigins"</span><span class="p">);</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseMvc</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Now modify the program.cs like this:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">using</span> <span class="nn">System.IO</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Hosting</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AspNetWebapiCore</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">host</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">WebHostBuilder</span><span class="p">()</span>
                <span class="p">.</span><span class="nf">UseKestrel</span><span class="p">()</span>
                <span class="p">.</span><span class="nf">UseContentRoot</span><span class="p">(</span><span class="n">Directory</span><span class="p">.</span><span class="nf">GetCurrentDirectory</span><span class="p">())</span>
                <span class="p">.</span><span class="nf">UseIISIntegration</span><span class="p">()</span>
                <span class="p">.</span><span class="n">UseStartup</span><span class="p">&lt;</span><span class="n">Startup</span><span class="p">&gt;()</span>
                <span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

            <span class="n">host</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>If you now type “dotnet restore” and “dotnet run” your api starts.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/11/BuildaWebAPIwithVSCodeandtheDotNetCLI_02.jpg" alt="buildawebapiwithvscodeandthedotnetcli_02" /></p>

<p>That was easy, right?</p>

<blockquote>
  <p>The ASP.NET Core WebAPI runs now. All we do now is adding content, but the main environment for the ASP.NET Core WebAPI is running at this point. :)</p>
</blockquote>

<p>Lets add some content.</p>

<p>Add the folders and files:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/11/BuildaWebAPIwithVSCodeandtheDotNetCLI_03.jpg" alt="buildawebapiwithvscodeandthedotnetcli_03" /></p>

<p>The repository can be found here:</p>

<p><a href="https://github.com/FabianGosebrink/ASPNETCore-WebAPI-With-VSCode-Dotnet-CLI">https://github.com/FabianGosebrink/ASPNETCore-WebAPI-With-VSCode-Dotnet-CLI</a></p>

<p>Please add the showed files to your project, you can copy them from the repo.</p>

<p>Do not forget to modify your Startup.cs like this: Adding the repositry to the IoC-Container and adding the Automapper mapping:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...
</span>    <span class="n">services</span><span class="p">.</span><span class="n">AddSingleton</span><span class="p">&lt;</span><span class="n">IFoodRepository</span><span class="p">,</span> <span class="n">FoodRepository</span><span class="p">&gt;();</span>
    <span class="c1">// ...
</span><span class="p">}</span></code></pre></figure>

<p>and</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">void</span> <span class="nf">Configure</span><span class="p">(</span><span class="n">IApplicationBuilder</span> <span class="n">app</span><span class="p">,</span> <span class="n">IHostingEnvironment</span> <span class="n">env</span><span class="p">,</span> <span class="n">ILoggerFactory</span> <span class="n">loggerFactory</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...
</span>    <span class="n">AutoMapper</span><span class="p">.</span><span class="n">Mapper</span><span class="p">.</span><span class="nf">Initialize</span><span class="p">(</span><span class="n">mapper</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
        <span class="n">mapper</span><span class="p">.</span><span class="n">CreateMap</span><span class="p">&lt;</span><span class="n">FoodItem</span><span class="p">,</span> <span class="n">FoodDto</span><span class="p">&gt;().</span><span class="nf">ReverseMap</span><span class="p">();</span>
    <span class="p">});</span>
    <span class="c1">// ...
</span><span class="p">}</span></code></pre></figure>

<p>If you now type “dotnet build” it should build everyting. The warnings are because of we ware doing nothing with the exception variable. You should handle them anyhow in a real world project.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/11/BuildaWebAPIwithVSCodeandtheDotNetCLI_04.jpg" alt="Build and debug WebAPI with the Dotnet CLI and VSCode" /></p>

<p>If you now do “dotnet run” on your console, your webapi starts up and you can use it:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/11/BuildaWebAPIwithVSCodeandtheDotNetCLI_05-1024x555.jpg" alt="Build and debug WebAPI with the Dotnet CLI and VSCode" /></p>

<h3 id="debugging">Debugging</h3>

<p>We can now also debug the webapi with vscode. Therefore you only have to cancel the running process first and then hit the start button in the debug tab from vscode:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/11/BuildaWebAPIwithVSCodeandtheDotNetCLI_06-1024x555.jpg" alt="Build and debug a WebAPI with the Dotnet CLI and VSCode" /></p>

<p><img src="/assets/articles/wp-content/uploads/2016/11/BuildaWebAPIwithVSCodeandtheDotNetCLI_07-1024x553.jpg" alt="Build and debug a WebAPI with the Dotnet CLI and VSCode" /></p>

<p>So this is it. You now have built a ASP.NET WebAPI only with the dotnet cli and Visual Studio Code (vscode)</p>

<p>Hope this helps anybody</p>

<p>BR</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2016/11/02/build-and-debug-webapi-with-the-dotnet-cli-and-vscode</wp:post_id>
        <wp:post_date>2016-11-02T09:30:00+01:00</wp:post_date>
        <wp:post_date_gmt>2016-11-02T09:30:00+01:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="aspnet"><![CDATA[["aspnet",]]></category>
        
          <category domain="post_tag" nicename="dotnet"><![CDATA["dotnet",]]></category>
        
          <category domain="post_tag" nicename="cli"><![CDATA["cli",]]></category>
        
          <category domain="post_tag" nicename="webapi"><![CDATA["webapi"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[How to debug an Angular application with Chrome and VS Code]]></title>
        <link>http://offering.solutions/blog/articles/2016/10/16/how-to-debug-an-angular-application-with-chrome-and-vs-code/</link>
        <pubDate>2016-10-16T17:50:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this blogpost I want to show you how to debug an Angular application with Chrome and VS Code.</p>

<p>First of all you need to install the extension in VS Code.</p>

<p>You can find it here</p>

<p><a href="https://github.com/Microsoft/vscode-chrome-debug">https://github.com/Microsoft/vscode-chrome-debug</a></p>

<p>or search in the extensions tab for the plugin directly:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/10/HowtodebuganAngular2applicationwithChromeandVSCode_01.jpg" alt="How to debug an Angular application with Chrome and VS Code" /></p>

<p>After installing you probably have to enable the plugin and restart VS Code but in the end you will see your folder structure like normal. Then head over to the debug tab and press the button for creating you an new configuration and select the “Chrome” environment.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/10/HowtodebuganAngular2applicationwithChromeandVSCode_02-1024x276.jpg" alt="How to debug an Angular application with Chrome and VS Code" /></p>

<p>After doing this the extension created a new folder (if you do not have it already) called “.vscode” and a “launch.json” in it initially looking like this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
    <span class="s2">"version"</span><span class="err">:</span> <span class="s2">"0.2.0"</span><span class="p">,</span>
    <span class="s2">"configurations"</span><span class="err">:</span> <span class="p">[</span>
        <span class="p">{</span>
            <span class="s2">"name"</span><span class="p">:</span> <span class="s2">"Launch Chrome against localhost, with sourcemaps"</span><span class="p">,</span>
            <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"chrome"</span><span class="p">,</span>
            <span class="s2">"request"</span><span class="p">:</span> <span class="s2">"launch"</span><span class="p">,</span>
            <span class="s2">"url"</span><span class="p">:</span> <span class="s2">"http://localhost:8080"</span><span class="p">,</span>
            <span class="s2">"sourceMaps"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="s2">"webRoot"</span><span class="p">:</span> <span class="s2">"${workspaceRoot}"</span>
        <span class="p">},</span>
        <span class="p">{</span>
            <span class="s2">"name"</span><span class="p">:</span> <span class="s2">"Attach to Chrome, with sourcemaps"</span><span class="p">,</span>
            <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"chrome"</span><span class="p">,</span>
            <span class="s2">"request"</span><span class="p">:</span> <span class="s2">"attach"</span><span class="p">,</span>
            <span class="s2">"port"</span><span class="p">:</span> <span class="mi">9222</span><span class="p">,</span>
            <span class="s2">"sourceMaps"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="s2">"webRoot"</span><span class="p">:</span> <span class="s2">"${workspaceRoot}"</span>
        <span class="p">}</span>
    <span class="p">]</span>
<span class="p">}</span></code></pre></figure>

<p>Our folder strucutre tells us that the files are served from the root.</p>

<p>So, the “webRoot”: “${workspaceRoot}”” setting is good to go for us. We will open a new Chrome instance but it needs an existing running server. So, if you use something like lite-server, you can easily type “lite-server” at the root of your web application or place it in your NPM command chain in the “NPM Start” command. This is what I did.
But before we go we need to adjust the urls where the server is running on and the url where the Chrome instance is starting.</p>

<p>So replace the port in the config file with the port from your lite-server. In my cae thats “3000”. This is how your config look like then:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
    <span class="s2">"version"</span><span class="err">:</span> <span class="s2">"0.2.0"</span><span class="p">,</span>
    <span class="s2">"configurations"</span><span class="err">:</span> <span class="p">[</span>
        <span class="p">{</span>
            <span class="s2">"name"</span><span class="p">:</span> <span class="s2">"Launch Chrome against localhost, with sourcemaps"</span><span class="p">,</span>
            <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"chrome"</span><span class="p">,</span>
            <span class="s2">"request"</span><span class="p">:</span> <span class="s2">"launch"</span><span class="p">,</span>
            <span class="s2">"url"</span><span class="p">:</span> <span class="s2">"http://localhost:3000"</span><span class="p">,</span>
            <span class="s2">"sourceMaps"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="s2">"webRoot"</span><span class="p">:</span> <span class="s2">"${workspaceRoot}"</span>
        <span class="p">},</span>
        <span class="p">{</span>
            <span class="s2">"name"</span><span class="p">:</span> <span class="s2">"Attach to Chrome, with sourcemaps"</span><span class="p">,</span>
            <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"chrome"</span><span class="p">,</span>
            <span class="s2">"request"</span><span class="p">:</span> <span class="s2">"attach"</span><span class="p">,</span>
            <span class="s2">"port"</span><span class="p">:</span> <span class="mi">9222</span><span class="p">,</span>
            <span class="s2">"sourceMaps"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="s2">"webRoot"</span><span class="p">:</span> <span class="s2">"${workspaceRoot}"</span>
        <span class="p">}</span>
    <span class="p">]</span>
<span class="p">}</span></code></pre></figure>

<p>Then start the lite server and just hit “play”</p>

<p><img src="/assets/articles/wp-content/uploads/2016/10/HowtodebuganAngular2applicationwithChromeandVSCode_04.jpg" alt="How to debug an Angular application with Chrome and VS Code" /></p>

<p><img src="/assets/articles/wp-content/uploads/2016/10/HowtodebuganAngular2applicationwithChromeandVSCode-1024x608.gif" alt="How to debug an Angular application with Chrome and VS Code" /></p>

<p>Chrome starts and you can debug your page in VS Code. Of course you can also confugre Chrome to attach directly. See here for examples:</p>

<p><a href="https://github.com/Microsoft/vscode-chrome-debug/wiki/Examples">https://github.com/Microsoft/vscode-chrome-debug/wiki/Examples</a></p>

<p>Hope this helps anybody</p>

<p>BR</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2016/10/16/how-to-debug-an-angular-application-with-chrome-and-vs-code</wp:post_id>
        <wp:post_date>2016-10-16T17:50:00+02:00</wp:post_date>
        <wp:post_date_gmt>2016-10-16T17:50:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="debug"><![CDATA[["debug",]]></category>
        
          <category domain="post_tag" nicename="angular"><![CDATA["angular",]]></category>
        
          <category domain="post_tag" nicename="chrome"><![CDATA["chrome",]]></category>
        
          <category domain="post_tag" nicename="vscode"><![CDATA["vscode"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Moving from Microsoft Lumia 950 to OnePlus 3]]></title>
        <link>http://offering.solutions/blog/articles/2016/10/15/moving-from-microsoft-lumia-950-to-oneplus-3/</link>
        <pubDate>2016-10-15T16:19:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this blogpost I want to share the experience I made moving from Microsoft Lumia 950 to OnePlus 3.</p>

<h3 id="prologue">Prologue</h3>

<p>Let me clarify that first: I have always been a WP &amp; Lumia-Lover. I had Windows Phones right from the start and never had another phone ever before. So for me it was clear to also jump to the newest one, the 950, and I was sure to love it. But I changed my mind because of several reasons. Let me explain them to you and of course explain you my experiences with my newest phone, the OnePlus3, here.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/10/DSC_6520.jpg" alt="dsc_6520" /></p>

<h3 id="the-first-doubts">The first doubts</h3>

<p>As I have been to a huge festival this year there was the possibility to create your timeschedule with all the different artists you wanted to see via your mobile phone. Which was great because you could easily pick your favourites and see where they were playing, for how long etc.</p>

<p>This was done via app and this app was not available for windows mobile. This was kind of the last drop where I realized: How can it be that I always have to draw the short straw with my phone?</p>

<p>I have had this feelings almost everytime you could do something really easy via your mobile phone. Well, as a Windows user you could not. And even if there was an app for this it was not well implemented.</p>

<p>Don’t get me wrong: I could do almost everything I wanted with my phone. Through the normal websites you can do a lot of stuff without an app, the rest of the things you wanted to do were not really necessary or you could not even do them because your phone was not able to. And this last this was really offending me more and more.</p>

<p>Another story: I was in a project at a customers place and they were discussing about getting their angular application to mobile via cordova and stuff. They wanted to participate from my knowledge so I was consulting them and joined the discussion. As I said that you are able to build for every platform their eyes really got bigger and bigger and they were really interested. As I started naming all the platforms and mentioned “Windows Mobile” they suddenly interrupted me and said “Nobody cares about Windows Mobile”. This was not to offend me. It was just said in the room like a statement. Standing there. I was quiet for a little time and went on.</p>

<p>But this showed me that also customers do not care about Windows Mobile.</p>

<p>Another one of the many problems was that the first move to a “one windows on all devices” was kind of shaky on the phone. Yes the 950 has power, a great display etc. but it was not stable and normal apps you wanted to use acted not stable. Also there have been no updates very often.</p>

<p>So all of this and a lot stories more (like the percentage of people using it is decreasing and decreasing etc.) brought me to the fact that I had to switch phones. Period.</p>

<p>Well and here is my first confession: I was lying to you. Right in your face because I have not ever had <em>only</em> Windows Phones and Lumias. There was a short period (about two weeks) where I had a really small and not powerful and cheap Android Phone. And I hated it. I could not do anything with it.</p>

<p>But I wanted to give another OS a chance without spending tons of money on it. An iPhone is interesting for sure. But its very expensive and for the “first try” after switching platform? Pheew, thats a lot of money.</p>

<p>Then I came to the OnePlus3. Which is still at 399 EUR which IS a lot of money but this is way cheaper than the iPhone and it has got great specs.</p>

<p><a href="https://oneplus.net/at/3/specs">https://oneplus.net/at/3/specs</a></p>

<p>After a short talk with a friend of mine who already has the phone (<a href="https://schwabencode.com/">Benjamin Abt / Schwabencode</a>) I ordered the OnePlus 3 over their store online.</p>

<blockquote>
  <p>I had to order to Germany because I am living in Switzerland where the OnePlus-Team did not ship at that point of time. Don’t know if this has changed.</p>
</blockquote>

<p>It arrived and the first impression was good. It was not overwhelming and not bad. Again: Do not get me wrong, the phone looked awesome! But so did the Lumia 950. There was no “WOW WHAT A PHONE”-Moment there. The 950 set the standard very very high especially looking at the outward appearance.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/10/DSC_6517.jpg" alt="dsc_6517" /></p>

<p>I booted it and began to invest in how to get my complete Microsoft environment onto Android. My first walking steps if you want.</p>

<p>It turned out that this was not a big deal because Microsoft has alsmost everything you need available for Android. So this was okay. And as I started to work with the phone I realised: Wow, it is freaking fast!!!</p>

<p><img src="/assets/articles/wp-content/uploads/2016/10/DSC_6521-1024x683.jpg" alt="dsc_6521" /></p>

<h3 id="speed">Speed</h3>

<p>The speed of the phone was really one of the first things that made me stunning. That was awesome! And I thought the Lumia 950 was fast. Well sure it is but the OnePlus3 is faster. Apps are open almost immediatelly. The fingerprint-sensor is also very fast (I read that it is one of the fastest on the market, not sure if this is true, got no comparison…the 950 does not have one ;)</p>

<p>So the speed was one thing which was very impressive. But I can not say that it is Android itself or the Hardware. But in the end I do not care about what it actually is: Its fast and that is what counts.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/10/DSC_6524-1024x683.jpg" alt="dsc_6524" /></p>

<h3 id="apps">Apps</h3>

<p>This paragraph now might put a smile on every not-windows-phone-user. But I began to explore and enjoy apps on my mobile device. Which was, like I mentioned, not unfamiliar to me because the 950 HAD Apps (against all rumours there are no apps for the Lumia), but not that many and not that useful ones. I can now have a look into my bank account, I can use a better twitter app, skype, slack, outlook, news-apps, parkkingcard for the place I am living…all this can done via app now. Before most of those apps I use now where not build for windows mobile. And I did not know what I missed because all of the Microsft apps are still there.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/10/DSC_6518.jpg" alt="dsc_6518" /></p>

<h3 id="internet-data">Internet Data</h3>

<p>Another thing I noticed was the data usage of the OnePlus3 or better: of the apps. I have a volume contract of 1 GB per month. Which is totally fine for me but should not be less than 1 GB. And I use Twitter very often. On my windows Mobile device the app was consuming a lot (!) of my monthly volume. I do not know why and I am not 100% sure to blame the Twitter app for WM for that. But with the OnePlus3 my monthly data usage decreased a lot. If I have the real reason for this I will let you know.</p>

<h3 id="hardware">Hardware</h3>

<p>The hardware is also pretty great on both devices. But the OP3 has aluminium which just looks a bit nicer and it has got this notification slider on the side where I can choose which notifications shall come through by only slide this button up and down. This was really impressive. Also the fingerprint sensor I mentioned is cool.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/10/DSC_6519.jpg" alt="dsc_6519" /></p>

<h3 id="what-i-miss">What I miss…</h3>

<p>Well, not everything is better with the new phone. So of course there are some things I really miss. First of all: the life tiles. Damn they are great. My OnePlus 3 has a frozen desktop. Not much interaction on it. With the Lumia 950 I felt the phone was more interacting with me even when I did not use it directly. Tiles were turning showing me some data which could be interesting for me. That was great, I miss that a bit.</p>

<p>Second thing which I miss is the camera. As a windows mobile user I was used to the good camera the devices had since…ever. And here the same thing: I did not know how good it was because I did not have a possibility to compare. The camera on the OP3 is absolutely good and is fulfilling all my needs. But it does not have got the quality of the 950 camera. I miss this camera a little bit, too.</p>

<p>The next thing I do not miss directly but it shows me that from my last experience with android the OS developed a lot but is still not perfect. Or are this the apps? I dont know. But sometimes thee is a setting which is suddenly turned off instead on, sometimes things are a little weird. Outlook mails do not show my trash folder anymore but I can empty it. Such kind of things. Not heavy stuff. Maybe I can fix it with a new installation…I will do that when I have time ;)</p>

<p>Also the mentioned camera is a little bit prominent on the back of the phone. I do not care a lot because a friend of mine is sewing me bags for my phone everytime I got a new one so it is covered a little bit, but the Microsoft Lumia solved this problem a little better.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/10/DSC_6522.jpg" alt="dsc_6522" /></p>

<h3 id="conclusion">Conclusion</h3>

<p>I will not go back to a Windows Mobile Phone for a long time. I really enjoy having my new OnePlus 3 because finally I can do everything I want with it and it is fast as hell. But I will never forget my Lumia. I will put it in my closet - keeping it and not throwing it away. And I will think of it everytime I think of a mobile phone because I hope the Windows Mobile OS gets better and better and perhaps one day I will get my Lumia out again enjoying it as much as I enjoy the OP3 in the meantime…</p>

<p>Best regards</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2016/10/15/moving-from-microsoft-lumia-950-to-oneplus-3</wp:post_id>
        <wp:post_date>2016-10-15T16:19:00+02:00</wp:post_date>
        <wp:post_date_gmt>2016-10-15T16:19:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="microsoft"><![CDATA[["microsoft",]]></category>
        
          <category domain="post_tag" nicename="lumia"><![CDATA["lumia",]]></category>
        
          <category domain="post_tag" nicename="mobile"><![CDATA["mobile",]]></category>
        
          <category domain="post_tag" nicename="oneplus"><![CDATA["oneplus",]]></category>
        
          <category domain="post_tag" nicename="phones"><![CDATA["phones"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[How to set up Angular and Webpack in Visual Studio with ASP.NET Core]]></title>
        <link>http://offering.solutions/blog/articles/2016/08/27/how-to-set-up-angular-2-and-webpack-in-visual-studio-with-asp-net-core/</link>
        <pubDate>2016-08-27T16:58:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>With this blogpost I want to show an example of how to set up Angular and Webpack in Visual Studio with ASP.NET Core ready for dev and production builds.</p>

<blockquote>
  <p>See also my latest article <a href="http://offering.solutions/blog/articles/2017/02/08/angular-2-ahead-of-time-aot-compilation-lazy-loading-treeshaking-webpack/">Angular Ahead Of Time (AoT) compilation, lazy loading and treeshaking with webpack</a></p>
</blockquote>

<p>If you read this until the end you will have a picture how to enable webpack and webpack-dev-server with npm and how to use webpack to bundle your angular application and inject files into index.html for your web application.</p>

<p>I had this topic already with my colleague <a href="https://github.com/damienbod">DamienBod</a>
<a href="https://github.com/damienbod/Angular2WebpackVisualStudio">here</a> and a StarterTemplate <a href="https://github.com/FabianGosebrink/ASPNETCore-Angular-StarterTemplate">here</a> (which is using system.js as bootstrapper for your application), but this post is more to show how we get there and which steps you should take to get things going. For Damien and me this was a bit confusing in the beginning so this is the guide how we started actually. I hope you like reading it as much as I liked writing it.</p>

<p>Find the code here:</p>

<p><a href="https://github.com/FabianGosebrink/ASPNET-Core-Angular2-Webpack-StarterTemplate">https://github.com/FabianGosebrink/ASPNET-Core-Angular2-Webpack-StarterTemplate</a></p>

<h3 id="the-new-project">The new project</h3>

<p>Select “File” –&gt; “New Project”</p>

<p><img src="/assets/articles/wp-content/uploads/2016/08/Clipboard01.jpg" alt="How to set up Angular 2 and Webpack in Visual Studio with ASP.NET Core" /></p>

<p>And create a new project. In this case we name it “Angular2WebpackStarter”. After creating you can take the empty template like this:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/08/Clipboard02.jpg" alt="How to set up Angular 2 and Webpack in Visual Studio with ASP.NET Core" /></p>

<p>Make sure you have installed the latest typescript nuget package because we will need it later to work with angular2 and visual studio 2015. A Resharper in the latest version also cannot be a mistake ;)</p>

<h3 id="add-the-necessary-files-and-folders">Add the necessary files and folders</h3>

<p>The next step is to add the files and folders which are needed to keep your application structured and organized.</p>

<p>Add a new folder in your solution and call it “Angular2app”. This where all the client related dependencies are stored and being “compiled” and transferred to the wwwroot folder later on.</p>

<p>Next, add these files to your project and fill it with this data:</p>

<p><strong>package.json</strong>
Your npm file related to your project. It keeps als dependencies and everything for your client.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">"name"</span><span class="err">:</span> <span class="s2">"aspnetcoreangularwebpackstarter"</span><span class="p">,</span>
  <span class="s2">"version"</span><span class="err">:</span> <span class="s2">"0.0.0"</span><span class="p">,</span>
  <span class="s2">"license"</span><span class="err">:</span> <span class="s2">"MIT"</span><span class="p">,</span>
  <span class="s2">"scripts"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"ngc"</span><span class="err">:</span> <span class="s2">"ngc -p ./tsconfig-aot.json"</span><span class="p">,</span>
    <span class="s2">"start"</span><span class="err">:</span> <span class="s2">"tsc &amp;&amp; npm run startWebpackDevServer"</span><span class="p">,</span>
    <span class="s2">"startWebpackDevServer"</span><span class="err">:</span> <span class="s2">"webpack-dev-server --inline --progress --port 8080"</span><span class="p">,</span>
    <span class="s2">"build"</span><span class="err">:</span> <span class="s2">"SET NODE_ENV=development &amp;&amp; webpack -d --color &amp;&amp; dotnet run"</span><span class="p">,</span>
    <span class="s2">"buildProduction"</span><span class="err">:</span> <span class="s2">"npm run ngc &amp;&amp; SET NODE_ENV=production &amp;&amp; webpack -d --color"</span><span class="p">,</span>
    <span class="s2">"lint"</span><span class="err">:</span> <span class="s2">"tslint ./angularApp/**/*.ts -t verbose"</span><span class="p">,</span>
    <span class="s2">"tsc"</span><span class="err">:</span> <span class="s2">"tsc"</span><span class="p">,</span>
    <span class="s2">"tsc:w"</span><span class="err">:</span> <span class="s2">"tsc -w"</span>
  <span class="p">},</span>
  <span class="s2">"keywords"</span><span class="err">:</span> <span class="p">[],</span>
  <span class="s2">"author"</span><span class="err">:</span> <span class="s2">"Fabian Gosebrink"</span><span class="p">,</span>
  <span class="s2">"dependencies"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"@angular/common"</span><span class="err">:</span> <span class="s2">"~4.0.1"</span><span class="p">,</span>
    <span class="s2">"@angular/compiler"</span><span class="err">:</span> <span class="s2">"~4.0.1"</span><span class="p">,</span>
    <span class="s2">"@angular/core"</span><span class="err">:</span> <span class="s2">"~4.0.1"</span><span class="p">,</span>
    <span class="s2">"@angular/forms"</span><span class="err">:</span> <span class="s2">"~4.0.1"</span><span class="p">,</span>
    <span class="s2">"@angular/http"</span><span class="err">:</span> <span class="s2">"~4.0.1"</span><span class="p">,</span>
    <span class="s2">"@angular/platform-browser"</span><span class="err">:</span> <span class="s2">"~4.0.1"</span><span class="p">,</span>
    <span class="s2">"@angular/platform-browser-dynamic"</span><span class="err">:</span> <span class="s2">"~4.0.1"</span><span class="p">,</span>
    <span class="s2">"@angular/router"</span><span class="err">:</span> <span class="s2">"~4.0.1"</span><span class="p">,</span>
    <span class="s2">"@angular/upgrade"</span><span class="err">:</span> <span class="s2">"~4.0.1"</span><span class="p">,</span>
    <span class="s2">"angular-in-memory-web-api"</span><span class="err">:</span> <span class="s2">"0.3.1"</span><span class="p">,</span>
    <span class="s2">"core-js"</span><span class="err">:</span> <span class="s2">"2.4.1"</span><span class="p">,</span>
    <span class="s2">"reflect-metadata"</span><span class="err">:</span> <span class="s2">"0.1.10"</span><span class="p">,</span>
    <span class="s2">"rxjs"</span><span class="err">:</span> <span class="s2">"5.2.1-smooth"</span><span class="p">,</span>
    <span class="s2">"zone.js"</span><span class="err">:</span> <span class="s2">"0.8.5"</span><span class="p">,</span>
    <span class="s2">"@angular/compiler-cli"</span><span class="err">:</span> <span class="s2">"~4.0.1"</span><span class="p">,</span>
    <span class="s2">"@angular/platform-server"</span><span class="err">:</span> <span class="s2">"~4.0.1"</span><span class="p">,</span>
    <span class="s2">"bootstrap"</span><span class="err">:</span> <span class="s2">"^3.3.7"</span><span class="p">,</span>
    <span class="s2">"ie-shim"</span><span class="err">:</span> <span class="s2">"~0.1.0"</span><span class="p">,</span>
    <span class="s2">"jquery"</span><span class="err">:</span> <span class="s2">"^3.1.1"</span><span class="p">,</span>
    <span class="s2">"angular2-toaster"</span><span class="err">:</span> <span class="s2">"^3.0.1"</span><span class="p">,</span>
    <span class="s2">"ng2-slim-loading-bar"</span><span class="err">:</span> <span class="s2">"^2.4.0"</span>
  <span class="p">},</span>
  <span class="s2">"devDependencies"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"@types/jasmine"</span><span class="err">:</span> <span class="s2">"^2.5.47"</span><span class="p">,</span>
    <span class="s2">"@types/node"</span><span class="err">:</span> <span class="s2">"7.0.12"</span><span class="p">,</span>
    <span class="s2">"angular-router-loader"</span><span class="err">:</span> <span class="s2">"^0.6.0"</span><span class="p">,</span>
    <span class="s2">"angular2-template-loader"</span><span class="err">:</span> <span class="s2">"^0.6.2"</span><span class="p">,</span>
    <span class="s2">"awesome-typescript-loader"</span><span class="err">:</span> <span class="s2">"^3.1.2"</span><span class="p">,</span>
    <span class="s2">"canonical-path"</span><span class="err">:</span> <span class="s2">"0.0.2"</span><span class="p">,</span>
    <span class="s2">"concurrently"</span><span class="err">:</span> <span class="s2">"^3.4.0"</span><span class="p">,</span>
    <span class="s2">"http-server"</span><span class="err">:</span> <span class="s2">"^0.9.0"</span><span class="p">,</span>
    <span class="s2">"ie-shim"</span><span class="err">:</span> <span class="s2">"^0.1.0"</span><span class="p">,</span>
    <span class="s2">"jquery"</span><span class="err">:</span> <span class="s2">"^3.2.1"</span><span class="p">,</span>
    <span class="s2">"json-loader"</span><span class="err">:</span> <span class="s2">"^0.5.4"</span><span class="p">,</span>
    <span class="s2">"lite-server"</span><span class="err">:</span> <span class="s2">"^2.3.0"</span><span class="p">,</span>
    <span class="s2">"lodash"</span><span class="err">:</span> <span class="s2">"^4.17.4"</span><span class="p">,</span>
    <span class="s2">"node-sass"</span><span class="err">:</span> <span class="s2">"^4.5.2"</span><span class="p">,</span>
    <span class="s2">"protractor"</span><span class="err">:</span> <span class="s2">"~5.1.1"</span><span class="p">,</span>
    <span class="s2">"raw-loader"</span><span class="err">:</span> <span class="s2">"^0.5.1"</span><span class="p">,</span>
    <span class="s2">"rimraf"</span><span class="err">:</span> <span class="s2">"^2.6.1"</span><span class="p">,</span>
    <span class="s2">"source-map-loader"</span><span class="err">:</span> <span class="s2">"^0.2.1"</span><span class="p">,</span>
    <span class="s2">"style-loader"</span><span class="err">:</span> <span class="s2">"^0.16.1"</span><span class="p">,</span>
    <span class="s2">"ts-helpers"</span><span class="err">:</span> <span class="s2">"^1.1.2"</span><span class="p">,</span>
    <span class="s2">"tslint"</span><span class="err">:</span> <span class="s2">"^5.0.0"</span><span class="p">,</span>
    <span class="s2">"typescript"</span><span class="err">:</span> <span class="s2">"~2.2.2"</span><span class="p">,</span>
  <span class="p">}</span>
<span class="p">,</span> <span class="s2">"-vs-binding"</span><span class="err">:</span><span class="p">{</span><span class="s2">"BeforeBuild"</span><span class="err">:</span><span class="p">[</span><span class="s2">"buildProduction"</span><span class="p">]}</span>
<span class="p">}</span></code></pre></figure>

<p><strong>tsconfig.json</strong></p>

<p>Is configuring your tsc compiler. Whenever your run the “tsc” command from the commandline it will be taken as configuration for the typescript-compiler.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">"compilerOptions"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"target"</span><span class="err">:</span> <span class="s2">"es5"</span><span class="p">,</span>
    <span class="s2">"module"</span><span class="err">:</span> <span class="s2">"es2015"</span><span class="p">,</span>
    <span class="s2">"moduleResolution"</span><span class="err">:</span> <span class="s2">"node"</span><span class="p">,</span>
    <span class="s2">"sourceMap"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"emitDecoratorMetadata"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"experimentalDecorators"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"lib"</span><span class="err">:</span> <span class="p">[</span>
      <span class="s2">"es2015"</span><span class="p">,</span>
      <span class="s2">"dom"</span>
    <span class="p">],</span>
    <span class="s2">"noImplicitAny"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"suppressImplicitAnyIndexErrors"</span><span class="err">:</span> <span class="kc">true</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h3 id="fill-the-angular2app-folder">Fill the angular2app-folder</h3>

<p>Next we are going to fill the angular2 app folder. Here we are going to be lazy. We are taking the <a href="https://github.com/angular/quickstart">quickstart repo from angular.io</a> and copy the files we need form there. For the sake of simplicity we will only take the <a href="https://github.com/angular/quickstart/blob/master/src/app/">app.module</a> to get things going. To be structured its best you create an app folder inside to place your code there.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/08/Zwischenablage02.jpg" alt="Zwischenablage02" /></p>

<p>But to start we need an index.html. And for webpack to be prepared we need an entrypoint for the polyfills and the vendor files we need for our app. Lets add these files.</p>

<p>index.html</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">title</span><span class="o">&gt;</span><span class="nx">ASP</span><span class="p">.</span><span class="nx">NET</span> <span class="nx">Core</span> <span class="nx">Angular</span> <span class="nx">Webpack</span> <span class="nx">Demo</span><span class="o">&lt;</span><span class="sr">/title</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="nx">meta</span> <span class="nx">charset</span><span class="o">=</span><span class="nx">UTF</span><span class="o">-</span><span class="mi">8</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">meta</span> <span class="nx">name</span><span class="o">=</span><span class="nx">viewport</span> <span class="nx">content</span><span class="o">=</span><span class="s2">"width=device-width,initial-scale=1"</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="sr">/head</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">my</span><span class="o">-</span><span class="nx">app</span><span class="o">&gt;</span><span class="nx">Loading</span><span class="p">...</span><span class="o">&lt;</span><span class="sr">/my-app</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/body</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/html&gt;</span></code></pre></figure>

<blockquote>
  <p>Note that we include <strong>nothing</strong> here yet. This is on purpose. Read further… :)</p>
</blockquote>

<p>I reduced the vendor.ts and polyfills.ts to store only the things we need</p>

<p>polyfills.ts</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">import</span> <span class="s1">'ie-shim'</span><span class="p">;</span> <span class="c1">// Internet Explorer 9 support.</span>
<span class="kr">import</span> <span class="s1">'zone.js/dist/zone'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'reflect-metadata'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/symbol'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/object'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/function'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/parse-int'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/parse-float'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/number'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/math'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/string'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/date'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/array'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/regexp'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/map'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/set'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/weak-map'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/weak-set'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/typed'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/reflect'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es7/reflect'</span><span class="p">;</span></code></pre></figure>

<p>vendor.ts</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">import</span> <span class="s1">'jquery/dist/jquery'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'bootstrap/dist/js/bootstrap'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'bootstrap/dist/css/bootstrap.css'</span><span class="p">;</span>

<span class="kr">import</span> <span class="s1">'angular2-toaster/toaster.css'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'angular2-toaster/angular2-toaster'</span><span class="p">;</span>

<span class="kr">import</span> <span class="s1">'ng2-slim-loading-bar'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'ng2-slim-loading-bar/style.css'</span><span class="p">;</span></code></pre></figure>

<p>Why did we all this and if the wwwroot-folder is the one to be served to the client…why are we doing all this?</p>

<p>This is where webpack comes into play. We will configure webpack now to build our application into the wwwroot folder. Let’s do this…</p>

<p>Lets add a webpack.config.js file to the root of the project. (Make sure you have the <a href="https://visualstudiogallery.msdn.microsoft.com/5497fd10-b1ba-474c-8991-1438ae47012a">WebPack Task Runner Extension</a> installed) .</p>

<p>So…you added the file: Paste the following content:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">ExtractTextPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'extract-text-webpack-plugin'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'webpack'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">HtmlWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'html-webpack-plugin'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">CleanWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'clean-webpack-plugin'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'path'</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
        <span class="s1">'app'</span><span class="p">:</span> <span class="s1">'./angularApp/app/main.ts'</span>
    <span class="p">},</span>
    <span class="na">devtool</span><span class="p">:</span> <span class="s1">'source-map'</span><span class="p">,</span>
    <span class="na">performance</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">hints</span><span class="p">:</span> <span class="kc">false</span>
    <span class="p">},</span>
    <span class="na">resolve</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">extensions</span><span class="p">:</span> <span class="p">[</span><span class="s1">'.ts'</span><span class="p">,</span> <span class="s1">'.js'</span><span class="p">,</span> <span class="s1">'.json'</span><span class="p">,</span> <span class="s1">'.css'</span><span class="p">,</span> <span class="s1">'.scss'</span><span class="p">,</span> <span class="s1">'.html'</span><span class="p">]</span>
    <span class="p">},</span>
    <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">path</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'wwwroot'</span><span class="p">),</span>
        <span class="na">filename</span><span class="p">:</span> <span class="s1">'js/[name].bundle.js'</span>
    <span class="p">},</span>

    <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">rules</span><span class="p">:</span> <span class="p">[</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">ts$/</span><span class="p">,</span>
                <span class="na">loaders</span><span class="p">:</span> <span class="p">[</span>
                    <span class="s1">'awesome-typescript-loader'</span><span class="p">,</span>
                    <span class="s1">'angular2-template-loader'</span>
                <span class="p">]</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">html$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'html-loader'</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.(</span><span class="sr">png|jpg|gif|ico|woff|woff2|ttf|svg|eot</span><span class="se">)</span><span class="sr">$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'file-loader?name=assets/[name].[ext]'</span><span class="p">,</span>
            <span class="p">},</span>

            <span class="c1">// Load css files which are required in vendor.ts</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">css$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="nx">ExtractTextPlugin</span><span class="p">.</span><span class="nx">extract</span><span class="p">({</span>
                    <span class="na">fallbackLoader</span><span class="p">:</span> <span class="s2">"style-loader"</span><span class="p">,</span>
                    <span class="na">loader</span><span class="p">:</span> <span class="s2">"css-loader"</span>
                <span class="p">})</span>
            <span class="p">}</span>
        <span class="p">]</span>
    <span class="p">},</span>
    <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
        <span class="k">new</span> <span class="nx">ExtractTextPlugin</span><span class="p">(</span><span class="s1">'css/[name].bundle.css'</span><span class="p">),</span>
        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">CommonsChunkPlugin</span><span class="p">({</span>
            <span class="na">name</span><span class="p">:</span> <span class="p">[</span><span class="s1">'app'</span><span class="p">,</span> <span class="s1">'vendor'</span><span class="p">,</span> <span class="s1">'polyfills'</span><span class="p">]</span>
        <span class="p">}),</span>
        <span class="k">new</span> <span class="nx">CleanWebpackPlugin</span><span class="p">(</span>
            <span class="p">[</span>
                <span class="s1">'./wwwroot/js/'</span><span class="p">,</span>
                <span class="s1">'./wwwroot/css/'</span><span class="p">,</span>
                <span class="s1">'./wwwroot/assets/'</span><span class="p">,</span>
                <span class="s1">'./wwwroot/index.html'</span>
            <span class="p">]</span>
        <span class="p">),</span>
        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">ProvidePlugin</span><span class="p">({</span>
            <span class="na">jQuery</span><span class="p">:</span> <span class="s1">'jquery'</span><span class="p">,</span>
            <span class="na">$</span><span class="p">:</span> <span class="s1">'jquery'</span><span class="p">,</span>
            <span class="na">jquery</span><span class="p">:</span> <span class="s1">'jquery'</span>
        <span class="p">})</span>
    <span class="p">],</span>
    <span class="na">devServer</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">historyApiFallback</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="na">stats</span><span class="p">:</span> <span class="s1">'minimal'</span>
    <span class="p">}</span>
<span class="p">};</span></code></pre></figure>

<p>This file is no magic, don’t be scared:</p>

<p>First we require everything we need to use to kick off webpack. Then we will export our complete configuration. Our entrypoints are pointing to the files we just created (remember?) and of course our entrypoint of our application.</p>

<p>The “resolve”-array tells webpack to look for those file endings. The “output” is what we all were looking for. Here we tell webpack “Hey, what no matter what you are doing and how you are doing it, put it in the ./wwwroot-Folder and please be gentle and name the files like I will tell you later on ([name]) and please put a hash on it at the end, but only 8 digits ([hash:8])”. This is it.</p>

<p>Rules and Loaders are telling webpack <strong>how</strong> to handle such file endings. So: If you encounter such a file, so this and that. The plugins are telling webpack how to behave generally, to point which files out etc. And this is alle the magic.</p>

<p><strong>package.json</strong></p>

<p>Add the webpack-things we need to the “DevDependencies”-section in the package.json:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="s2">"devDependencies"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"@types/jasmine"</span><span class="err">:</span> <span class="s2">"^2.5.36"</span><span class="p">,</span>
    <span class="s2">"@types/node"</span><span class="err">:</span> <span class="s2">"7.0.0"</span><span class="p">,</span>
    <span class="s2">"angular-router-loader"</span><span class="err">:</span> <span class="s2">"^0.5.0"</span><span class="p">,</span>
    <span class="s2">"angular2-template-loader"</span><span class="err">:</span> <span class="s2">"^0.6.0"</span><span class="p">,</span>
    <span class="s2">"awesome-typescript-loader"</span><span class="err">:</span> <span class="s2">"^2.2.4"</span><span class="p">,</span>
    <span class="s2">"canonical-path"</span><span class="err">:</span> <span class="s2">"0.0.2"</span><span class="p">,</span>
    <span class="s2">"clean-webpack-plugin"</span><span class="err">:</span> <span class="s2">"^0.1.15"</span><span class="p">,</span>
    <span class="s2">"concurrently"</span><span class="err">:</span> <span class="s2">"^3.1.0"</span><span class="p">,</span>
    <span class="s2">"copy-webpack-plugin"</span><span class="err">:</span> <span class="s2">"^4.0.1"</span><span class="p">,</span>
    <span class="s2">"css-loader"</span><span class="err">:</span> <span class="s2">"^0.26.1"</span><span class="p">,</span>
    <span class="s2">"extract-text-webpack-plugin"</span><span class="err">:</span> <span class="s2">"2.0.0-beta.5"</span><span class="p">,</span>
    <span class="s2">"file-loader"</span><span class="err">:</span> <span class="s2">"^0.9.0"</span><span class="p">,</span>
    <span class="s2">"html-loader"</span><span class="err">:</span> <span class="s2">"^0.4.4"</span><span class="p">,</span>
    <span class="s2">"html-webpack-plugin"</span><span class="err">:</span> <span class="s2">"^2.26.0"</span><span class="p">,</span>
    <span class="s2">"http-server"</span><span class="err">:</span> <span class="s2">"^0.9.0"</span><span class="p">,</span>
    <span class="s2">"ie-shim"</span><span class="err">:</span> <span class="s2">"^0.1.0"</span><span class="p">,</span>
    <span class="s2">"jquery"</span><span class="err">:</span> <span class="s2">"^2.2.0"</span><span class="p">,</span>
    <span class="s2">"json-loader"</span><span class="err">:</span> <span class="s2">"^0.5.4"</span><span class="p">,</span>
    <span class="s2">"lite-server"</span><span class="err">:</span> <span class="s2">"^2.2.2"</span><span class="p">,</span>
    <span class="s2">"lodash"</span><span class="err">:</span> <span class="s2">"^4.16.4"</span><span class="p">,</span>
    <span class="s2">"node-sass"</span><span class="err">:</span> <span class="s2">"^4.3.0"</span><span class="p">,</span>
    <span class="s2">"protractor"</span><span class="err">:</span> <span class="s2">"~4.0.14"</span><span class="p">,</span>
    <span class="s2">"raw-loader"</span><span class="err">:</span> <span class="s2">"^0.5.1"</span><span class="p">,</span>
    <span class="s2">"rimraf"</span><span class="err">:</span> <span class="s2">"^2.5.4"</span><span class="p">,</span>
    <span class="s2">"sass-loader"</span><span class="err">:</span> <span class="s2">"^4.1.1"</span><span class="p">,</span>
    <span class="s2">"source-map-loader"</span><span class="err">:</span> <span class="s2">"^0.1.6"</span><span class="p">,</span>
    <span class="s2">"style-loader"</span><span class="err">:</span> <span class="s2">"^0.13.1"</span><span class="p">,</span>
    <span class="s2">"ts-helpers"</span><span class="err">:</span> <span class="s2">"^1.1.2"</span><span class="p">,</span>
    <span class="s2">"tslint"</span><span class="err">:</span> <span class="s2">"^4.3.1"</span><span class="p">,</span>
    <span class="s2">"tslint-loader"</span><span class="err">:</span> <span class="s2">"^3.3.0"</span><span class="p">,</span>
    <span class="s2">"typescript"</span><span class="err">:</span> <span class="s2">"~2.0.10"</span><span class="p">,</span>
    <span class="s2">"url-loader"</span><span class="err">:</span> <span class="s2">"^0.5.7"</span><span class="p">,</span>
    <span class="s2">"webpack"</span><span class="err">:</span> <span class="s2">"^2.2.0"</span><span class="p">,</span>
    <span class="s2">"webpack-dev-server"</span><span class="err">:</span> <span class="s2">"^1.16.2"</span>
  <span class="p">}</span></code></pre></figure>

<p>Run npm install or let VS do this for you.</p>

<p>Now that you’ve done this open up the Task Runner Explorer in Visual Studio and let the “Run - Development” go:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/08/Zwischenablage04.jpg" alt="Zwischenablage04" /></p>

<p>Et voila: our wwwroot-folder got filled with our entire app (or with what we have got so far). But there is one thing missing: The index.html!</p>

<p>Lets tell webpack to take our index.html we already have got and inject the sources into it and copy it too. To do this extend the “plugins”-section like this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"> <span class="nx">plugins</span><span class="err">:</span> <span class="p">[</span>
        <span class="k">new</span> <span class="nx">ExtractTextPlugin</span><span class="p">(</span><span class="s1">'css/[name].bundle.css'</span><span class="p">),</span>
        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">CommonsChunkPlugin</span><span class="p">({</span>
            <span class="na">name</span><span class="p">:</span> <span class="p">[</span><span class="s1">'app'</span><span class="p">,</span> <span class="s1">'vendor'</span><span class="p">,</span> <span class="s1">'polyfills'</span><span class="p">]</span>
        <span class="p">}),</span>
        <span class="k">new</span> <span class="nx">CleanWebpackPlugin</span><span class="p">(</span>
            <span class="p">[</span>
                <span class="s1">'./wwwroot/js/'</span><span class="p">,</span>
                <span class="s1">'./wwwroot/css/'</span><span class="p">,</span>
                <span class="s1">'./wwwroot/assets/'</span><span class="p">,</span>
                <span class="s1">'./wwwroot/index.html'</span>
            <span class="p">]</span>
        <span class="p">),</span>
        <span class="c1">// inject in index.html</span>
        <span class="k">new</span> <span class="nx">HtmlWebpackPlugin</span><span class="p">({</span>
            <span class="na">template</span><span class="p">:</span> <span class="s1">'./angularApp/index.html'</span><span class="p">,</span>
            <span class="na">inject</span><span class="p">:</span> <span class="s1">'body'</span><span class="p">,</span>
            <span class="na">filename</span><span class="p">:</span> <span class="s1">'index.html'</span>
        <span class="p">}),</span>
    <span class="p">],</span></code></pre></figure>

<p>and add the</p>

<p><code class="highlighter-rouge">var HtmlWebpackPlugin = require("html-webpack-plugin");</code></p>

<p>at the top of the page. We need to include what we want to use ;)</p>

<p>let it run again:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/08/Zwischenablage05.jpg" alt="Zwischenablage05" /></p>

<p>Lets take a look into this index.html:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>

<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;base</span> <span class="na">href=</span><span class="s">"/"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;title&gt;</span>ASP.NET Core Angular Webpack Demo<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">"css/app.bundle.css"</span> <span class="na">rel=</span><span class="s">"stylesheet"</span><span class="nt">&gt;&lt;/head&gt;</span>

<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;my-app&gt;</span>Loading...<span class="nt">&lt;/my-app&gt;</span>
<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"js/polyfills.bundle.js"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"js/app.bundle.js"</span><span class="nt">&gt;&lt;/script&gt;&lt;/body&gt;</span>

<span class="nt">&lt;/html&gt;</span></code></pre></figure>

<p>our files got injected!</p>

<p>Before we actually see our application we have to modify the Startup.cs to behave like we want it to:</p>

<p>Add</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml">"Microsoft.AspNetCore.Mvc": "1.1.0",
"Microsoft.AspNetCore.StaticFiles": "1.1.0"</code></pre></figure>

<p>to your project.json and in the Startup write:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">Startup</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="n">IConfigurationRoot</span> <span class="n">Configuration</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

    <span class="c1">// This method gets called by the runtime. Use this method to add services to the container.
</span>    <span class="c1">// For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=398940
</span>    <span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">services</span><span class="p">.</span><span class="nf">AddCors</span><span class="p">();</span>
        <span class="n">services</span><span class="p">.</span><span class="nf">AddMvc</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nf">Startup</span><span class="p">(</span><span class="n">IHostingEnvironment</span> <span class="n">env</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ConfigurationBuilder</span><span class="p">()</span>
            <span class="p">.</span><span class="nf">SetBasePath</span><span class="p">(</span><span class="n">env</span><span class="p">.</span><span class="n">ContentRootPath</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="s">"appsettings.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">true</span><span class="p">,</span> <span class="n">reloadOnChange</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="err">$</span><span class="s">"appsettings.{env.EnvironmentName}.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">true</span><span class="p">);</span>

        <span class="n">builder</span><span class="p">.</span><span class="nf">AddEnvironmentVariables</span><span class="p">();</span>
        <span class="n">Configuration</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>
    <span class="p">}</span>


    <span class="c1">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
</span>    <span class="k">public</span> <span class="k">void</span> <span class="nf">Configure</span><span class="p">(</span><span class="n">IApplicationBuilder</span> <span class="n">app</span><span class="p">,</span> <span class="n">ILoggerFactory</span> <span class="n">loggerFactory</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">loggerFactory</span><span class="p">.</span><span class="nf">AddConsole</span><span class="p">(</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetSection</span><span class="p">(</span><span class="s">"Logging"</span><span class="p">));</span>
        <span class="n">loggerFactory</span><span class="p">.</span><span class="nf">AddDebug</span><span class="p">();</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseCors</span><span class="p">(</span><span class="n">config</span> <span class="p">=&gt;</span>
            <span class="n">config</span><span class="p">.</span><span class="nf">AllowAnyHeader</span><span class="p">()</span>
                <span class="p">.</span><span class="nf">AllowAnyMethod</span><span class="p">()</span>
                <span class="p">.</span><span class="nf">AllowAnyOrigin</span><span class="p">());</span>
                
        <span class="n">app</span><span class="p">.</span><span class="nf">UseDefaultFiles</span><span class="p">();</span>
        <span class="n">app</span><span class="p">.</span><span class="nf">UseStaticFiles</span><span class="p">();</span>

        <span class="n">app</span><span class="p">.</span><span class="nf">UseMvc</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Now we have an index.html and we can press the play-button in Visual Studio:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/08/Zwischenablage06.jpg" alt="Zwischenablage06" /></p>

<p>So it is working!!</p>

<p>Great so far.</p>

<h3 id="adding-webpack-dev-server">Adding webpack dev server:</h3>

<p>Wouldn’t it be nice to get the files refreshed as soon as I start working on them with this webpack construction? Well we already added the webpack dev-server in the package.json as dependency and in the web.config we already configured it in a basic way. So now lets use it:</p>

<p>You can now change the “npm start” command but we will simply make another one like “startWebpackDevServer”. So add the following line into the scripts section of package.json:</p>

<p><code class="highlighter-rouge">"startWebpackDevServer": "webpack-dev-server --inline --progress --port 8080",</code></p>

<p>Now open a commandline to the level of your package.json and type “npm run startWebpackDevServer”:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/08/Zwischenablage07.jpg" alt="Zwischenablage07" /></p>

<p>Let it open and browse to “localhost:8080”</p>

<p><img src="/assets/articles/wp-content/uploads/2016/08/Zwischenablage08.jpg" alt="Zwischenablage08" /></p>

<p>There your app appears!</p>

<p>So lets take a look how this behaves if we change a file…</p>

<p><img src="/assets/articles/wp-content/uploads/2016/08/Animation.gif" alt="Animation" /></p>

<p>Okay great.</p>

<p>Now lets go ahead and build this thing up to use development and production builds, which is our last step:</p>

<h3 id="development-and-production-builds">Development and Production builds</h3>

<p>Lets take a closer look to what we did when we first ran our webpack:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/08/Zwischenablage09.jpg" alt="How to set up Angular and Webpack in Visual Studio with ASP.NET Core" /></p>

<p>There webpack is setting the variable “NODE_ENV” to “development”. Lets use that!!!</p>

<p>rename the “webpack.config.js” to “webpack.dev.js”. Create a new webpack.config.js.</p>

<p>All we need to do now is creating a switch which says “if you are development, use a (new) file (we will create) which takes the dev-thing, otherwise take the production ones”</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">environment</span> <span class="o">=</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">||</span> <span class="s2">"development"</span><span class="p">).</span><span class="nx">trim</span><span class="p">();</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">environment</span> <span class="o">===</span> <span class="s2">"development"</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./webpack.dev.js'</span><span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./webpack.prod.js'</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>So THIS is our new entrypoint for webpack, the new webpack.config.json!!</p>

<p>Create a file which is called “webpack.prod.js” which will be our production file in the future. You should now have something like this:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/08/Zwischenablage10.jpg" alt="How to set up Angular and Webpack in Visual Studio with ASP.NET Core" /></p>

<p>To test this put a simple console.log in the production file like:</p>

<p><code class="highlighter-rouge">console.log("----&gt; Production");</code></p>

<p>and let it run:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/08/Zwischenablage11.jpg" alt="Zwischenablage11" /></p>

<p>So now lets pimp the production a bit. Its mostly the same we have so far for dev, but we need a little more plugins. Maybe the one to uglify the js <a href="http://webpack.github.io/docs/list-of-plugins.html#uglifyjsplugin">UglifyJsPlugin</a> and to delete the files in the wwwroot first “<a href="https://github.com/johnagan/clean-webpack-plugin">Clean for webpack</a>”.</p>

<p>Copy the whole content from the webpack.dev.json to the prod.json and simply add the uglifyjs-plugin like this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">plugins</span><span class="err">:</span> <span class="p">[</span>
        <span class="k">new</span> <span class="nx">ExtractTextPlugin</span><span class="p">(</span><span class="s1">'css/[name]-[hash:6].bundle.css'</span><span class="p">),</span>
        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">CommonsChunkPlugin</span><span class="p">({</span>
            <span class="na">name</span><span class="p">:</span> <span class="p">[</span><span class="s1">'vendor'</span><span class="p">,</span> <span class="s1">'polyfills'</span><span class="p">]</span>
        <span class="p">}),</span>
        <span class="c1">// inject in index.html</span>
        <span class="k">new</span> <span class="nx">HtmlWebpackPlugin</span><span class="p">({</span>
            <span class="na">template</span><span class="p">:</span> <span class="s1">'./angularApp/index.html'</span><span class="p">,</span>
            <span class="na">inject</span><span class="p">:</span> <span class="s1">'body'</span><span class="p">,</span>
            <span class="na">filename</span><span class="p">:</span> <span class="s1">'index.html'</span>
        <span class="p">}),</span>
        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">UglifyJsPlugin</span><span class="p">({</span>
            <span class="na">compress</span><span class="p">:</span> <span class="p">{</span>
                <span class="na">warnings</span><span class="p">:</span> <span class="kc">false</span>
            <span class="p">},</span>
            <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
                <span class="na">comments</span><span class="p">:</span> <span class="kc">false</span>
            <span class="p">},</span>
            <span class="na">sourceMap</span><span class="p">:</span> <span class="kc">false</span>
        <span class="p">}),</span>
        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">ProvidePlugin</span><span class="p">({</span>
            <span class="na">jQuery</span><span class="p">:</span> <span class="s1">'jquery'</span><span class="p">,</span>
            <span class="na">$</span><span class="p">:</span> <span class="s1">'jquery'</span><span class="p">,</span>
            <span class="na">jquery</span><span class="p">:</span> <span class="s1">'jquery'</span>
        <span class="p">})</span>
    <span class="p">],</span></code></pre></figure>

<p>If you now let the prod-task run the files will be treated as ever but they are uglified as well.</p>

<p>To clean the wwwroot-folder first we need to install another plugin “Clean for webpack” and use it:</p>

<p><code class="highlighter-rouge">npm install clean-webpack-plugin --save-dev</code></p>

<p>and in both webpack-files</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">CleanWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'clean-webpack-plugin'</span><span class="p">);</span>
 <span class="c1">//....</span>

<span class="nl">plugins</span><span class="p">:</span> <span class="p">[</span>
       <span class="k">new</span> <span class="nx">ExtractTextPlugin</span><span class="p">(</span><span class="s2">"[name].bundle.css"</span><span class="p">),</span>
       <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">CommonsChunkPlugin</span><span class="p">({</span>
           <span class="na">name</span><span class="p">:</span> <span class="p">[</span><span class="s2">"app"</span><span class="p">,</span> <span class="s2">"vendor"</span><span class="p">,</span> <span class="s2">"polyfills"</span><span class="p">]</span>
       <span class="p">}),</span>

       <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">UglifyJsPlugin</span><span class="p">({</span>
           <span class="na">compress</span><span class="p">:</span> <span class="p">{</span>
               <span class="na">warnings</span><span class="p">:</span> <span class="kc">false</span>
           <span class="p">}</span>
       <span class="p">}),</span>
         <span class="k">new</span> <span class="nx">CleanWebpackPlugin</span><span class="p">(</span>
            <span class="p">[</span>
                <span class="s2">"./wwwroot/"</span>
            <span class="p">]</span>
        <span class="p">),</span>
       <span class="c1">// inject in index.html</span>
        <span class="k">new</span> <span class="nx">HtmlWebpackPlugin</span><span class="p">({</span>
            <span class="na">template</span><span class="p">:</span> <span class="s1">'./angularApp/index.html'</span><span class="p">,</span>
            <span class="na">inject</span><span class="p">:</span> <span class="s1">'body'</span><span class="p">,</span>
            <span class="na">filename</span><span class="p">:</span> <span class="s1">'index.html'</span>
        <span class="p">}),</span>
    <span class="p">],</span></code></pre></figure>

<p>Now our folder gets cleaned. You can add this into dev, too.</p>

<p>This is it. This is how you can treat Angular with webpack in Visual Studio with an ASPNET Core application. I hope you liked and enjoyed reading.</p>

<p>HTH</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2016/08/27/how-to-set-up-angular-2-and-webpack-in-visual-studio-with-asp-net-core</wp:post_id>
        <wp:post_date>2016-08-27T16:58:00+02:00</wp:post_date>
        <wp:post_date_gmt>2016-08-27T16:58:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="aspnet"><![CDATA[["aspnet",]]></category>
        
          <category domain="post_tag" nicename="aspnetcore"><![CDATA["aspnetcore",]]></category>
        
          <category domain="post_tag" nicename="visualstudio"><![CDATA["visualstudio",]]></category>
        
          <category domain="post_tag" nicename="webpack"><![CDATA["webpack",]]></category>
        
          <category domain="post_tag" nicename="devserver"><![CDATA["devserver"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Neue Angular-Kurstermine angekündigt]]></title>
        <link>http://offering.solutions/blog/articles/2016/08/17/neue-angular-kurstermine-angekundigt/</link>
        <pubDate>2016-08-17T19:14:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In diesem Blogpost möchte ich bekanntgeben, dass <a href="https://www.digicomp.ch/">Digicomp</a> neue Kurstermine angekündigt hat, die ich als Trainer betreuen und durchführen darf :) . Die Kurse finden in Bern statt, je nach Teilnehmern auch in Basel und Zürich.</p>

<p><a href="http://offering.solutions/assets/images/Angular_With_Digicomp.png" target="_blank" rel="https://www.digicomp.ch/weiterbildung/softwareentwicklungs-trainings/web-und-mobile-app-entwicklung/webentwicklung/javascript-kurse-und-workshops/frontend-entwicklung-mit-angularjs"><img src="/assets/articles/assets/images/Angular_With_Digicomp.png" alt="Neue Angular-Kurstermine angekündigt" /></a></p>

<p><a href="https://www.digicomp.ch/weiterbildung/softwareentwicklungs-trainings/webentwicklung/javascript-kurse-und-workshops/frontend-entwicklung-mit-angularjs">Zu den Kursterminen</a></p>

<p>Zu Beginn werde ich wie beim letzten Mal die Erwartungen der Teilnehmer abholen, eventuell habt ihr ja Punkte, die euch unter den Nägeln brennen. Im Laufe des Kurses werde ich versuchen alle Punkte zu klären, dass euch möglichst gut geholfen werden kann.</p>

<p>Wir werden in dem Kurs erstmal die Javascript-Basics anschauen um danach die Grundlagen von AngularJS zu lernen. Dabei schauen wir uns natürlich Module, Factories, Services, HTTP-Kommunikation etc. an. Alles, was drumherung passiert (npm, etc.) ist natürlich auch mit dabei.</p>

<p>Am Ende schliessen wir den Kurs mit dem Testing und einem Review einer Beispielapplikation ab, so dass man neben den Hands-On-Übungen, die es nach jedem Kapitel gibt, auch mal das “Grosse Ganze” sieht und ein Gefühl bekommt, wie AngularJS sich in einer etwas grösseren Umgebung präsentiert.</p>

<p>Der Kurs beinhaltet also (nicht nur)</p>

<ul>
  <li>Einführung in das Ökosystem der modernen JavaScript-Entwicklung</li>
  <li>Build-Tools, Automatisiertes Testing, Dependency-Management …</li>
  <li>Wichtige Konzepte der JavaScript Entwicklung</li>
  <li>Closures, Prototypal Inheritance, Constructor Functions, Promises, Module Pattern, Client-Side MVC</li>
  <li>Realisierung von dynamischen UIs mit AngularJS</li>
  <li>Directives, Controllers, Modules, Expressions und Filters</li>
  <li>Angular Services und Backend-Anbindung</li>
  <li>Angular Routing</li>
  <li>Custom Directives</li>
  <li>Build-Automatisierung und Testing</li>
</ul>

<p>Bis es soweit ist werde ich meine Angular-Unterlagen auf den neuesten Stand bringen um den Kursteilnehmern natürlich die neusten Features präsentieren zu können.</p>

<p>Wie beim letzten Kurs lege ich Wert darauf, dass der Kurs von den Teilnehmer mitgestaltet wird indem Fragen mitgebracht werden. Wir werden Zeit für Fragen haben, schliesslich ist der Kurs für euch und nicht für mich :-).</p>

<p>Also: Fragen aufschreiben, mitbringen und stellen.</p>

<p>Jetzt registrieren, ich freue mich auf euer Kommen!</p>

<p>Gruss</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2016/08/17/neue-angular-kurstermine-angekundigt</wp:post_id>
        <wp:post_date>2016-08-17T19:14:00+02:00</wp:post_date>
        <wp:post_date_gmt>2016-08-17T19:14:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="angularjs"><![CDATA[["angularjs",]]></category>
        
          <category domain="post_tag" nicename="courses"><![CDATA["courses",]]></category>
        
          <category domain="post_tag" nicename="digicomp"><![CDATA["digicomp"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[How to create an ASP.NET Core WebAPI]]></title>
        <link>http://offering.solutions/blog/articles/2016/07/29/how-to-create-an-asp-net-core-webapi/</link>
        <pubDate>2016-07-29T18:31:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this blogpost I want to show you how to create an ASP.NET Core WebAPI. We will use a custom mapper (you could use AutoMapper for this instead, a repository which is a singleton in this blog here and we will use the normal CRUD operations to Create, Read, Update and Delete in the “database” here.</p>

<p>Code here <a href="https://github.com/FabianGosebrink/ASPNETCore-WebAPI-Sample">https://github.com/FabianGosebrink/ASPNETCore-WebAPI-Sample</a></p>

<h3 id="visual-studio">Visual Studio</h3>

<p><img src="/assets/articles/wp-content/uploads/2016/07/AspNetCoreWebApi0.jpg" alt="AspNetCoreWebApi0" />
<img src="/assets/articles/wp-content/uploads/2016/07/AspNetCoreWebApi02.jpg" alt="AspNetCoreWebApi02" /></p>

<p>We will start with the ASP.NET Startup-File</p>

<h3 id="aspnet-core-startup">ASP.NET Core Startup</h3>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">Startup</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nf">Startup</span><span class="p">(</span><span class="n">IHostingEnvironment</span> <span class="n">env</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ConfigurationBuilder</span><span class="p">()</span>
           <span class="p">.</span><span class="nf">SetBasePath</span><span class="p">(</span><span class="n">env</span><span class="p">.</span><span class="n">ContentRootPath</span><span class="p">)</span>
           <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="s">"appsettings.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">true</span><span class="p">,</span> <span class="n">reloadOnChange</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
           <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="err">$</span><span class="s">"appsettings.{env.EnvironmentName}.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">true</span><span class="p">);</span>

        <span class="n">builder</span><span class="p">.</span><span class="nf">AddEnvironmentVariables</span><span class="p">();</span>
        <span class="n">Configuration</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="n">IConfigurationRoot</span> <span class="n">Configuration</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="c1">// This method gets called by the runtime. Use this method to add services to the container.
</span>    <span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// Add framework services.
</span>        <span class="n">services</span><span class="p">.</span><span class="nf">AddMvc</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="c1">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
</span>    <span class="k">public</span> <span class="k">void</span> <span class="nf">Configure</span><span class="p">(</span><span class="n">IApplicationBuilder</span> <span class="n">app</span><span class="p">,</span> <span class="n">IHostingEnvironment</span> <span class="n">env</span><span class="p">,</span> <span class="n">ILoggerFactory</span> <span class="n">loggerFactory</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">loggerFactory</span><span class="p">.</span><span class="nf">AddConsole</span><span class="p">(</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetSection</span><span class="p">(</span><span class="s">"Logging"</span><span class="p">));</span>
        <span class="n">loggerFactory</span><span class="p">.</span><span class="nf">AddDebug</span><span class="p">();</span>

        <span class="n">app</span><span class="p">.</span><span class="nf">UseDefaultFiles</span><span class="p">();</span>
        <span class="n">app</span><span class="p">.</span><span class="nf">UseStaticFiles</span><span class="p">();</span>

        <span class="n">app</span><span class="p">.</span><span class="nf">UseMvc</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>No magic here so far. We are creating a configuration in the first step (constructor) of the FIle and then add and use MVC with its defaultfiles (e.g. index.html) and add the ability to server static files in general (app.useStaticFiles).</p>

<h3 id="the-models">The models</h3>

<p>First lets build some entities we want to send to the client and back. We will create a DTO and an Entity and map everything before it gets send to the client.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">HouseDto</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="p">[</span><span class="n">Required</span><span class="p">,</span> <span class="nf">MinLength</span><span class="p">(</span><span class="m">3</span><span class="p">)]</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Street</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="p">[</span><span class="n">Required</span><span class="p">,</span> <span class="nf">MinLength</span><span class="p">(</span><span class="m">3</span><span class="p">)]</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">City</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="p">[</span><span class="n">Required</span><span class="p">]</span>
        <span class="p">[</span><span class="nf">DataType</span><span class="p">(</span><span class="n">DataType</span><span class="p">.</span><span class="n">PostalCode</span><span class="p">)]</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">ZipCode</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">HouseEntity</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Street</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">City</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">ZipCode</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>So the DTO is an exact duplicate from the entity in this case.</p>

<p>Lets create the Mapper next (which is really obvious):</p>

<h3 id="the-mapper">The mapper</h3>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">interface</span> <span class="n">IHouseMapper</span>
    <span class="p">{</span>
        <span class="n">HouseDto</span> <span class="nf">MapToDto</span><span class="p">(</span><span class="n">HouseEntity</span> <span class="n">houseEntity</span><span class="p">);</span>
        <span class="n">HouseEntity</span> <span class="nf">MapToEntity</span><span class="p">(</span><span class="n">HouseDto</span> <span class="n">houseDto</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">HouseMapper</span> <span class="p">:</span> <span class="n">IHouseMapper</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">HouseDto</span> <span class="nf">MapToDto</span><span class="p">(</span><span class="n">HouseEntity</span> <span class="n">houseEntity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">HouseDto</span><span class="p">()</span>
            <span class="p">{</span>
                <span class="n">Id</span> <span class="p">=</span> <span class="n">houseEntity</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span>
                <span class="n">ZipCode</span> <span class="p">=</span> <span class="n">houseEntity</span><span class="p">.</span><span class="n">ZipCode</span><span class="p">,</span>
                <span class="n">City</span> <span class="p">=</span> <span class="n">houseEntity</span><span class="p">.</span><span class="n">City</span><span class="p">,</span>
                <span class="n">Street</span> <span class="p">=</span> <span class="n">houseEntity</span><span class="p">.</span><span class="n">Street</span>
            <span class="p">};</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">HouseEntity</span> <span class="nf">MapToEntity</span><span class="p">(</span><span class="n">HouseDto</span> <span class="n">houseDto</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">HouseEntity</span><span class="p">()</span>
            <span class="p">{</span>
                <span class="n">Id</span> <span class="p">=</span> <span class="n">houseDto</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span>
                <span class="n">ZipCode</span> <span class="p">=</span> <span class="n">houseDto</span><span class="p">.</span><span class="n">ZipCode</span><span class="p">,</span>
                <span class="n">City</span> <span class="p">=</span> <span class="n">houseDto</span><span class="p">.</span><span class="n">City</span><span class="p">,</span>
                <span class="n">Street</span> <span class="p">=</span> <span class="n">houseDto</span><span class="p">.</span><span class="n">Street</span>
            <span class="p">};</span>
        <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>So here we are just mapping from one to another. Simple case. This can get more complex but it should do it for this time.</p>

<p>After we created the mapper we want to have this mapper instanciated <strong>every time a request comes in</strong>. For this we use the build in DI-container in ASP.NET Core.</p>

<p>So go to Startup.cs and add the line</p>

<p><code class="highlighter-rouge">services.AddTransient&lt;IHouseMapper, HouseMapper&gt;();</code></p>

<p>in the “ConfigureServices”-Method. It should look like this then:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
            <span class="n">services</span><span class="p">.</span><span class="n">AddTransient</span><span class="p">&lt;</span><span class="n">IHouseMapper</span><span class="p">,</span> <span class="n">HouseMapper</span><span class="p">&gt;();</span>
            <span class="c1">// Add framework services.
</span>            <span class="n">services</span><span class="p">.</span><span class="nf">AddMvc</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<h3 id="the-repository">The Repository</h3>

<p>The repository is responsible for providing and saving the data. Normally you would use da database here.</p>

<p>Like:</p>

<p><a href="https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-6">https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-6</a></p>

<p><a href="https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-Core">https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-Core</a></p>

<p>But for this time we will use like a static list where objects are added and removed.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">interface</span> <span class="n">IHouseRepository</span>
    <span class="p">{</span>
        <span class="n">List</span><span class="p">&lt;</span><span class="n">HouseEntity</span><span class="p">&gt;</span> <span class="nf">GetAll</span><span class="p">();</span>
        <span class="n">HouseEntity</span> <span class="nf">GetSingle</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
        <span class="n">HouseEntity</span> <span class="nf">Add</span><span class="p">(</span><span class="n">HouseEntity</span> <span class="n">toAdd</span><span class="p">);</span>
        <span class="n">HouseEntity</span> <span class="nf">Update</span><span class="p">(</span><span class="n">HouseEntity</span> <span class="n">toUpdate</span><span class="p">);</span>
        <span class="k">void</span> <span class="nf">Delete</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">HouseRepository</span> <span class="p">:</span> <span class="n">IHouseRepository</span>
    <span class="p">{</span>
        <span class="k">readonly</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">HouseEntity</span><span class="p">&gt;</span> <span class="n">_houses</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">HouseEntity</span><span class="p">&gt;();</span>

        <span class="k">public</span> <span class="nf">HouseRepository</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">_houses</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="k">new</span> <span class="nf">HouseEntity</span><span class="p">()</span> <span class="p">{</span> <span class="n">City</span> <span class="p">=</span> <span class="s">"Town1"</span><span class="p">,</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">Street</span> <span class="p">=</span> <span class="s">"Street1"</span><span class="p">,</span> <span class="n">ZipCode</span> <span class="p">=</span> <span class="m">1234</span> <span class="p">});</span>
            <span class="n">_houses</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="k">new</span> <span class="nf">HouseEntity</span><span class="p">()</span> <span class="p">{</span> <span class="n">City</span> <span class="p">=</span> <span class="s">"Town2"</span><span class="p">,</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">2</span><span class="p">,</span> <span class="n">Street</span> <span class="p">=</span> <span class="s">"Street2"</span><span class="p">,</span> <span class="n">ZipCode</span> <span class="p">=</span> <span class="m">1234</span> <span class="p">});</span>
            <span class="n">_houses</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="k">new</span> <span class="nf">HouseEntity</span><span class="p">()</span> <span class="p">{</span> <span class="n">City</span> <span class="p">=</span> <span class="s">"Town3"</span><span class="p">,</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">3</span><span class="p">,</span> <span class="n">Street</span> <span class="p">=</span> <span class="s">"Street3"</span><span class="p">,</span> <span class="n">ZipCode</span> <span class="p">=</span> <span class="m">1234</span> <span class="p">});</span>
            <span class="n">_houses</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="m">4</span><span class="p">,</span> <span class="k">new</span> <span class="nf">HouseEntity</span><span class="p">()</span> <span class="p">{</span> <span class="n">City</span> <span class="p">=</span> <span class="s">"Town4"</span><span class="p">,</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">4</span><span class="p">,</span> <span class="n">Street</span> <span class="p">=</span> <span class="s">"Street4"</span><span class="p">,</span> <span class="n">ZipCode</span> <span class="p">=</span> <span class="m">1234</span> <span class="p">});</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">HouseEntity</span><span class="p">&gt;</span> <span class="nf">GetAll</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_houses</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Value</span><span class="p">).</span><span class="nf">ToList</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">HouseEntity</span> <span class="nf">GetSingle</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_houses</span><span class="p">.</span><span class="nf">FirstOrDefault</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Key</span> <span class="p">==</span> <span class="n">id</span><span class="p">).</span><span class="n">Value</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">HouseEntity</span> <span class="nf">Add</span><span class="p">(</span><span class="n">HouseEntity</span> <span class="n">toAdd</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">int</span> <span class="n">newId</span> <span class="p">=</span> <span class="p">!</span><span class="nf">GetAll</span><span class="p">().</span><span class="nf">Any</span><span class="p">()</span> <span class="p">?</span> <span class="m">1</span> <span class="p">:</span> <span class="nf">GetAll</span><span class="p">().</span><span class="nf">Max</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span> <span class="p">+</span> <span class="m">1</span><span class="p">;</span>
            <span class="n">toAdd</span><span class="p">.</span><span class="n">Id</span> <span class="p">=</span> <span class="n">newId</span><span class="p">;</span>
            <span class="n">_houses</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">newId</span><span class="p">,</span> <span class="n">toAdd</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">toAdd</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">HouseEntity</span> <span class="nf">Update</span><span class="p">(</span><span class="n">HouseEntity</span> <span class="n">toUpdate</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">HouseEntity</span> <span class="n">single</span> <span class="p">=</span> <span class="nf">GetSingle</span><span class="p">(</span><span class="n">toUpdate</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">single</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">_houses</span><span class="p">[</span><span class="n">single</span><span class="p">.</span><span class="n">Id</span><span class="p">]</span> <span class="p">=</span> <span class="n">toUpdate</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">toUpdate</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Delete</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_houses</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>A normal interface using Entity Framwork could look like this btw:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">interface</span> <span class="n">IExampleRepository</span>
    <span class="p">{</span>
        <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">MyModel</span><span class="p">&gt;</span> <span class="nf">GetAll</span><span class="p">();</span>
        <span class="n">MyModel</span> <span class="nf">GetSingle</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
        <span class="n">MyModel</span> <span class="nf">Add</span><span class="p">(</span><span class="n">MyModel</span> <span class="n">toAdd</span><span class="p">);</span>
        <span class="n">MyModel</span> <span class="nf">Update</span><span class="p">(</span><span class="n">MyModel</span> <span class="n">toUpdate</span><span class="p">);</span>
        <span class="k">void</span> <span class="nf">Delete</span><span class="p">(</span><span class="n">MyModel</span> <span class="n">toDelete</span><span class="p">);</span>
        <span class="kt">int</span> <span class="nf">Save</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<p>taken from <a href="https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-Core/blob/master/src/AspnetCoreEFCoreExample/Repositories/IExampleRepository.cs">https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-Core/blob/master/src/AspnetCoreEFCoreExample/Repositories/IExampleRepository.cs</a></p>

<p>See the “Save()”-Method here. But for this time it should be good with the list. We are not focussing on the Database here.</p>

<p>So we do have the repository to save the data. Let’s make it available through DI in the Startup. This time we do NOT want to have a new repo every request, so we will add a singleton this time.</p>

<p>In a normal case with a real DB you would not do that</p>

<p>Example for EF 6 is here</p>

<p><a href="https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-6/blob/master/src/AspnetCoreEF6Example/Startup.cs#L32">https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-6/blob/master/src/AspnetCoreEF6Example/Startup.cs#L32</a></p>

<p><a href="https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-Core/blob/master/src/AspnetCoreEFCoreExample/Startup.cs#L32">https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-Core/blob/master/src/AspnetCoreEFCoreExample/Startup.cs#L32</a></p>

<p>But this time we will use a singleton. Shame on me so far.</p>

<p><code class="highlighter-rouge">services.AddSingleton&lt;IHouseRepository, HouseRepository&gt;();</code></p>

<p>So the whole Startup.cs is now like:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">services</span><span class="p">.</span><span class="n">AddSingleton</span><span class="p">&lt;</span><span class="n">IHouseRepository</span><span class="p">,</span> <span class="n">HouseRepository</span><span class="p">&gt;();</span>

    <span class="n">services</span><span class="p">.</span><span class="n">AddTransient</span><span class="p">&lt;</span><span class="n">IHouseMapper</span><span class="p">,</span> <span class="n">HouseMapper</span><span class="p">&gt;();</span>
    <span class="c1">// Add framework services.
</span>    <span class="n">services</span><span class="p">.</span><span class="nf">AddMvc</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<p>With this we can start using the whole construct in a controller like this:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="na">[Route("api/[controller]</span><span class="s">")]
</span><span class="k">public</span> <span class="k">class</span> <span class="nc">HouseController</span> <span class="p">:</span> <span class="n">Controller</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IHouseMapper</span> <span class="n">_houseMapper</span><span class="p">;</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IHouseRepository</span> <span class="n">_houseRepository</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">HouseController</span><span class="p">(</span><span class="n">IHouseMapper</span> <span class="n">houseMapper</span><span class="p">,</span> <span class="n">IHouseRepository</span> <span class="n">houseRepository</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_houseMapper</span> <span class="p">=</span> <span class="n">houseMapper</span><span class="p">;</span>
        <span class="n">_houseRepository</span> <span class="p">=</span> <span class="n">houseRepository</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
    <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Get</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">_houseRepository</span><span class="p">.</span><span class="nf">GetAll</span><span class="p">().</span><span class="nf">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">_houseMapper</span><span class="p">.</span><span class="nf">MapToDto</span><span class="p">(</span><span class="n">x</span><span class="p">)));</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//logg exception or do anything with it
</span>            <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span> <span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">InternalServerError</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id:int}"</span><span class="p">,</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">"GetSingleHouse"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">GetSingle</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="n">HouseEntity</span> <span class="n">houseEntity</span> <span class="p">=</span> <span class="n">_houseRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">houseEntity</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">_houseMapper</span><span class="p">.</span><span class="nf">MapToDto</span><span class="p">(</span><span class="n">houseEntity</span><span class="p">));</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//logg exception or do anything with it
</span>            <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">InternalServerError</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="nf">HttpPatch</span><span class="p">(</span><span class="s">"{id:int}"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Patch</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="p">[</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">JsonPatchDocument</span><span class="p">&lt;</span><span class="n">HouseDto</span><span class="p">&gt;</span> <span class="n">housePatchDocument</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">housePatchDocument</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">ModelState</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">HouseEntity</span> <span class="n">houseEntity</span> <span class="p">=</span> <span class="n">_houseRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">houseEntity</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">HouseDto</span> <span class="n">existingHouse</span> <span class="p">=</span> <span class="n">_houseMapper</span><span class="p">.</span><span class="nf">MapToDto</span><span class="p">(</span><span class="n">houseEntity</span><span class="p">);</span>

            <span class="n">housePatchDocument</span><span class="p">.</span><span class="nf">ApplyTo</span><span class="p">(</span><span class="n">existingHouse</span><span class="p">,</span> <span class="n">ModelState</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">ModelState</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">_houseRepository</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="n">_houseMapper</span><span class="p">.</span><span class="nf">MapToEntity</span><span class="p">(</span><span class="n">existingHouse</span><span class="p">));</span>

            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">existingHouse</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//logg exception or do anything with it
</span>            <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">InternalServerError</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
    <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Create</span><span class="p">([</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">HouseDto</span> <span class="n">houseDto</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">houseDto</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">ModelState</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">HouseEntity</span> <span class="n">houseEntity</span> <span class="p">=</span> <span class="n">_houseMapper</span><span class="p">.</span><span class="nf">MapToEntity</span><span class="p">(</span><span class="n">houseDto</span><span class="p">);</span>

            <span class="n">_houseRepository</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">houseEntity</span><span class="p">);</span>

            <span class="k">return</span> <span class="nf">CreatedAtRoute</span><span class="p">(</span><span class="s">"GetSingleHouse"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">houseEntity</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">_houseMapper</span><span class="p">.</span><span class="nf">MapToDto</span><span class="p">(</span><span class="n">houseEntity</span><span class="p">));</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//logg exception or do anything with it
</span>            <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">InternalServerError</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"{id:int}"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Update</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="p">[</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">HouseDto</span> <span class="n">houseDto</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">houseDto</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">ModelState</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">HouseEntity</span> <span class="n">houseEntityToUpdate</span> <span class="p">=</span> <span class="n">_houseRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">houseEntityToUpdate</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">houseEntityToUpdate</span><span class="p">.</span><span class="n">ZipCode</span> <span class="p">=</span> <span class="n">houseDto</span><span class="p">.</span><span class="n">ZipCode</span><span class="p">;</span>
            <span class="n">houseEntityToUpdate</span><span class="p">.</span><span class="n">Street</span> <span class="p">=</span> <span class="n">houseDto</span><span class="p">.</span><span class="n">Street</span><span class="p">;</span>
            <span class="n">houseEntityToUpdate</span><span class="p">.</span><span class="n">City</span> <span class="p">=</span> <span class="n">houseDto</span><span class="p">.</span><span class="n">City</span><span class="p">;</span>

            <span class="n">_houseRepository</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="n">houseEntityToUpdate</span><span class="p">);</span>

            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">_houseMapper</span><span class="p">.</span><span class="nf">MapToDto</span><span class="p">(</span><span class="n">houseEntityToUpdate</span><span class="p">));</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//logg exception or do anything with it
</span>            <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">InternalServerError</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"{id:int}"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Delete</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="n">HouseEntity</span> <span class="n">houseEntityToDelete</span> <span class="p">=</span> <span class="n">_houseRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">houseEntityToDelete</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_houseRepository</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//logg exception or do anything with it
</span>            <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">InternalServerError</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Now we can go ahead and test this with a tool like postman or whatever:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/07/AspNetCoreWebApi1.jpg" alt="Create an ASP.NET Core 1.1 WebAPI" /></p>

<p><img src="/assets/articles/wp-content/uploads/2016/07/AspNetCoreWebApi3.jpg" alt="AspNetCoreWebApi3" /></p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2016/07/29/how-to-create-an-asp-net-core-webapi</wp:post_id>
        <wp:post_date>2016-07-29T18:31:00+02:00</wp:post_date>
        <wp:post_date_gmt>2016-07-29T18:31:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="aspnet"><![CDATA[["aspnet",]]></category>
        
          <category domain="post_tag" nicename="core"><![CDATA["core",]]></category>
        
          <category domain="post_tag" nicename="webapi"><![CDATA["webapi"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Kooperation von MyCSharp.de und der BASTA!]]></title>
        <link>http://offering.solutions/blog/articles/2016/07/20/kooperation-von-mycsharp-de-und-der-basta/</link>
        <pubDate>2016-07-20T18:05:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>Ich freue mich wieder sehr anzukündigen, dass es erneut zu einer Kooperation von MyCSharp.de und der BASTA! gekommen ist. Die zweite dieses Jahr :)</p>

<p><a href="http://www.basta.net" target="_blank"><img src="/assets/articles/wp-content/uploads/2016/07/BASTA_SE_2016_Leaderboard_32115_v3.gif" alt="Kooperation von MyCSharp.de und der Basta" /></a></p>

<h3 id="was-ist-die-basta">Was ist die BASTA!?</h3>

<blockquote>
  <p>Die <strong>BASTA!</strong> ist die führende unabhängige Konferenz für Microsoft-Technologien im deutschsprachigen Raum. Durch ihre einmalige Expertendichte, die Aktualität sowie ausgeprägte Praxisrelevanz gehört sie zu den jährlichen Pflichtterminen für Windows- und .NET-Entwickler, Architekten und Projektleiter.
Das Konferenzprogramm umfasst die immer größere werdende Technologieplattform der Microsoft-Welt – und darüber hinaus.</p>
</blockquote>

<p>Unter den Sprechern befinden sich zum Beispiel Rainer Stropek, Oliver Sturm, Neno Loje, Holger Schwichtenberg, Christian Weyer, Daniel Meixner, Manfred Steyer, Gregor Biswanger, Dominick Baier und viele viele mehr.</p>

<p>Ich persönlich war die letzten Jahre immer als Gast auf der BASTA! und nur positives Berichten. Es ist unglaublich wie viele Eindrücke man bekommt und wie viele Leute man kennenlernt. Man hat direktdie Chance Fragen zu stellen und kann so sein Wissen auf dem favorisierten Fachgebiet so entweder vertiefen oder aber mal andere Vorträge besuchen. Mit solchen “Breakouts” kann man eventuell eine komplett neue Richtung für sich entdecken.</p>

<p>Der Dialog mit den Speakern ist neben den Interessanten Themen einer der Hauptgründe Konferenzen zu besuchen. Ich kann jedem nur ans Herz legen diese Möglichkeiten zum Austausch zu nutzen.</p>

<p>Wir haben einen Rabattcode bekommen mit dem ihr 15% sparen könnt! Zudem werden wir noch zwei Freitickets unter unseren Forenmitgliedern verlosen.</p>

<p>Wir hoffen dadurch myCSharp.de noch bekannter zu machen damit wir mit einer grossen Community noch mehr Leuten und Entwicklern helfen können.</p>

<p><a href="https://basta.net/" target="_blank">https://basta.net/</a></p>

<p><a href="http://www.mycsharp.de/wbb2/thread.php?threadid=117378" target="_blank">15% Rabatt - Kooperation mit der BASTA! - 19. bis 23. September 2016 in Mainz</a></p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2016/07/20/kooperation-von-mycsharp-de-und-der-basta</wp:post_id>
        <wp:post_date>2016-07-20T18:05:00+02:00</wp:post_date>
        <wp:post_date_gmt>2016-07-20T18:05:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="basta"><![CDATA[["basta",]]></category>
        
          <category domain="post_tag" nicename="mycsharp"><![CDATA["mycsharp"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[ASP.NET Core 1.0 with Entity Framework Core]]></title>
        <link>http://offering.solutions/blog/articles/2016/07/03/asp-net-core-with-entity-framework-core/</link>
        <pubDate>2016-07-03T22:32:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this repository I want to show the first steps with Entity Framework Core and ASP.NET Core 1.0.</p>

<p>The Repository contains a sample WebAPI with CRUD-Operations that you can Get/Read/Update and Delete “MyModel” objects through HTTP-calls.</p>

<p>Here is the code: <a href="https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-Core">https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-Core</a></p>

<h2 id="before-starting">Before starting…</h2>

<p>Please read this readme and think of executing <code class="highlighter-rouge">Add-Migration [MyMigrationName]</code> and <code class="highlighter-rouge">update-database</code> in the Package Manager Console first.</p>

<p>The database should now be visible inside your SQL Server Management Studio.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/07/database.jpg" alt="ASP.NET CORE 1.0 with Entity Framework Core" /></p>

<p><img src="/assets/articles/wp-content/uploads/2016/07/folderstructure.jpg" alt="ASP.NET CORE 1.0 with Entity Framework Core" /></p>

<h2 id="projectjson">Project.json</h2>

<p>The project.json file includes tha Entity Framework SQLServer package as well as the EF Core itself and the EF Core Tools. The tools are mentioned twice: Once in the “dependencies”-section and once in the “tools”-section</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">"dependencies"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"Microsoft.NETCore.App"</span><span class="err">:</span> <span class="p">{</span>
      <span class="s2">"version"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
      <span class="s2">"type"</span><span class="err">:</span> <span class="s2">"platform"</span>
    <span class="p">},</span>
    <span class="s2">"Microsoft.ApplicationInsights.AspNetCore"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.AspNetCore.Mvc"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.AspNetCore.Server.IISIntegration"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.AspNetCore.Server.Kestrel"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.Extensions.Configuration.EnvironmentVariables"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.Extensions.Configuration.FileExtensions"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.Extensions.Configuration.Json"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.Extensions.Logging"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.Extensions.Logging.Console"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.Extensions.Logging.Debug"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.Extensions.Options.ConfigurationExtensions"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.AspNetCore.StaticFiles"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.EntityFrameworkCore"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.EntityFrameworkCore.SqlServer"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.EntityFrameworkCore.Tools"</span><span class="err">:</span> <span class="p">{</span>
      <span class="s2">"version"</span><span class="err">:</span> <span class="s2">"1.0.0-preview2-final"</span><span class="p">,</span>
      <span class="s2">"type"</span><span class="err">:</span> <span class="s2">"build"</span>
    <span class="p">},</span>
    <span class="s2">"AutoMapper"</span><span class="err">:</span> <span class="s2">"5.0.0"</span>
  <span class="p">},</span>

  <span class="s2">"tools"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"Microsoft.AspNetCore.Server.IISIntegration.Tools"</span><span class="err">:</span> <span class="s2">"1.0.0-preview2-final"</span><span class="p">,</span>
    <span class="s2">"Microsoft.EntityFrameworkCore.Tools"</span><span class="err">:</span> <span class="s2">"1.0.0-preview2-final"</span>
  <span class="p">},</span>

  <span class="s2">"frameworks"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"netcoreapp1.0"</span><span class="err">:</span> <span class="p">{</span>
      <span class="s2">"imports"</span><span class="err">:</span> <span class="p">[</span>
        <span class="s2">"dotnet5.6"</span><span class="p">,</span>
        <span class="s2">"portable-net45+win8"</span>
      <span class="p">]</span>
    <span class="p">}</span>
  <span class="p">},</span>

  <span class="s2">"buildOptions"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"emitEntryPoint"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"preserveCompilationContext"</span><span class="err">:</span> <span class="kc">true</span>
  <span class="p">},</span>

  <span class="s2">"runtimeOptions"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"configProperties"</span><span class="err">:</span> <span class="p">{</span>
      <span class="s2">"System.GC.Server"</span><span class="err">:</span> <span class="kc">true</span>
    <span class="p">}</span>
  <span class="p">},</span>

  <span class="s2">"publishOptions"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"include"</span><span class="err">:</span> <span class="p">[</span>
      <span class="s2">"wwwroot"</span><span class="p">,</span>
      <span class="s2">"Views"</span><span class="p">,</span>
      <span class="s2">"Areas/**/Views"</span><span class="p">,</span>
      <span class="s2">"appsettings.json"</span><span class="p">,</span>
      <span class="s2">"web.config"</span>
    <span class="p">]</span>
  <span class="p">},</span>

  <span class="s2">"scripts"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"postpublish"</span><span class="err">:</span> <span class="p">[</span> <span class="s2">"dotnet publish-iis --publish-folder %publish:OutputPath% --framework %publish:FullTargetFramework%"</span> <span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h2 id="appsettings">Appsettings</h2>

<p>The appsettings contain beside the well known logging section the connectionstring to target the database:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">"Logging"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"IncludeScopes"</span><span class="err">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="s2">"LogLevel"</span><span class="err">:</span> <span class="p">{</span>
      <span class="s2">"Default"</span><span class="err">:</span> <span class="s2">"Debug"</span><span class="p">,</span>
      <span class="s2">"System"</span><span class="err">:</span> <span class="s2">"Information"</span><span class="p">,</span>
      <span class="s2">"Microsoft"</span><span class="err">:</span> <span class="s2">"Information"</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="s2">"ConnectionStrings"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"DefaultConnection"</span><span class="err">:</span> <span class="s2">"Server=localhost\\SQLEXPRESS;Database=AspnetCoreEF7Example;Trusted_Connection=True;MultipleActiveResultSets=true;"</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>This connectionstring is consumed in …</p>

<h2 id="startup">Startup</h2>

<p>…the startup-file. With</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="kt">var</span> <span class="n">configurationSection</span> <span class="p">=</span> <span class="n">Configuration</span><span class="p">.</span><span class="nf">GetSection</span><span class="p">(</span><span class="s">"ConnectionStrings:DefaultConnection"</span><span class="p">);</span>
<span class="n">services</span><span class="p">.</span><span class="nf">AddDbContext</span><span class="p">(</span><span class="n">options</span> <span class="p">=&gt;</span> <span class="n">options</span><span class="p">.</span><span class="nf">UseSqlServer</span><span class="p">(</span><span class="n">configurationSection</span><span class="p">.</span><span class="n">Value</span><span class="p">));</span></code></pre></figure>

<p>we can read the connectionstring and pass it to the “UseSQLServer”-Method.</p>

<h2 id="the-database-context">The Database Context</h2>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">DataBaseContext</span> <span class="p">:</span> <span class="n">DbContext</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">MyModel</span><span class="p">&gt;</span> <span class="n">MyModels</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="nf">DataBaseContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">DataBaseContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span>
        <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
    <span class="p">{</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>In the DbContext you pass the DbSet of your Entites as you are used to it when working with the Entity Framework also in previous versions. But see the new constructor EF Core introduces.</p>

<h2 id="run-it">Run it…</h2>

<p>If you now run the solution you can perform CRUD operations for example via postman, angular etc…</p>

<p><img src="/assets/articles/wp-content/uploads/2016/07/postmandatabase.jpg" alt="ASP.NET CORE 1.0 with Entity Framework Core" /></p>

<h2 id="links">Links</h2>

<p><a href="https://ef.readthedocs.io/en/latest/platforms/aspnetcore/new-db.html">ASP.NET Core Application to New Database</a></p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2016/07/03/asp-net-core-with-entity-framework-core</wp:post_id>
        <wp:post_date>2016-07-03T22:32:00+02:00</wp:post_date>
        <wp:post_date_gmt>2016-07-03T22:32:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="aspnet"><![CDATA[["aspnet",]]></category>
        
          <category domain="post_tag" nicename="core"><![CDATA["core",]]></category>
        
          <category domain="post_tag" nicename="entityframeworkcore"><![CDATA["entityframeworkcore"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Cross Platform Builds with Angular, Gulp and Webpack]]></title>
        <link>http://offering.solutions/blog/articles/2016/06/17/cross-platform-builds-with-angular-2-gulp-and-webpack/</link>
        <pubDate>2016-06-17T19:09:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this blogpost I want to show how to create Cross Platform Builds with Angular, Gulp and Webpack</p>

<p><a href="https://webpack.github.io/" title="Webpack">Webpack</a></p>

<p><a href="http://gulpjs.com/" title="Gulp">Gulp</a></p>

<p><a href="http://angular.io/" title="Angular2">Angular</a></p>

<p>Code can be found here: <a href="https://github.com/FabianGosebrink/Foodchooser-ASPNET-Angular-Cross-Platform">https://github.com/FabianGosebrink/Foodchooser-ASPNET-Angular-Cross-Platform</a></p>

<h3 id="setting-up-the-folder-structure">Setting up the folder structure</h3>

<p>The folder structure is very important but also one of the most discussed in the internet I think ;). Mine looks like the following:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/06/folderStructure.png" alt="Angular2 webpack" /></p>

<p>Whereas “app” contains my Angular 2 application and the other files and folders speak for theirselves.</p>

<h2 id="the-goal">The goal</h2>

<p>The sense of this blogpost is now to get a build with webpack AND gulp combined to have the same cross platform functionality we are used from a “gulp-only” build.</p>

<h3 id="the-past">The past</h3>

<p>In the past the problem with Angular 2 and gulp was the bundling and the minification of the application. Gulp works with streams and files whereas angular 2 is build with related components which are imported and then used. We can not concat every file anymore in the correct order and minify it to distribute an application.</p>

<h3 id="the-solution">The solution</h3>

<p>The solution (or at least one of them) is webpack. Webpack is slightly different from gulp, where it can resolve the dependencies and use your “import” and “require” statements to see when which file is used and has to be included.</p>

<h2 id="the-files">The files</h2>

<p>Now I want to show you the files which can make this whole thing possible. See the “gulptasks”-folder to divide the responsibilities of building each target platform.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/06/gulpFiles.png" alt="angular2 webpack" /></p>

<h3 id="webpackconfigjs">webpack.config.js</h3>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">ExtractTextPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'extract-text-webpack-plugin'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'webpack'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">HtmlWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'html-webpack-plugin'</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
        <span class="s1">'polyfills'</span><span class="p">:</span> <span class="s1">'./app/polyfills.ts'</span><span class="p">,</span>
        <span class="s1">'vendor'</span><span class="p">:</span> <span class="s1">'./app/vendor.ts'</span><span class="p">,</span>
        <span class="s1">'app'</span><span class="p">:</span> <span class="s1">'./app/main.ts'</span>
    <span class="p">},</span>
    <span class="na">resolve</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">extensions</span><span class="p">:</span> <span class="p">[</span><span class="s1">''</span><span class="p">,</span> <span class="s1">'.ts'</span><span class="p">,</span> <span class="s1">'.js'</span><span class="p">,</span> <span class="s1">'.css'</span><span class="p">,</span> <span class="s1">'.html'</span><span class="p">]</span>
    <span class="p">},</span>
    <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">filename</span><span class="p">:</span> <span class="s1">'[name].bundle.js'</span>
    <span class="p">},</span>
    <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">loaders</span><span class="p">:</span> <span class="p">[</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">ts$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'ts'</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">html$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'html'</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.(</span><span class="sr">png|jpe</span><span class="se">?</span><span class="sr">g|gif|svg|woff|woff2|ttf|eot|ico</span><span class="se">)</span><span class="sr">$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'file?name=fonts/[name].[hash].[ext]'</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">css$/</span><span class="p">,</span>
                <span class="na">exclude</span><span class="p">:</span> <span class="s1">'./app'</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="nx">ExtractTextPlugin</span><span class="p">.</span><span class="nx">extract</span><span class="p">(</span><span class="s1">'style'</span><span class="p">,</span> <span class="s1">'css?sourceMap'</span><span class="p">)</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">css$/</span><span class="p">,</span>
                <span class="na">include</span><span class="p">:</span> <span class="s1">'./app'</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'raw'</span>
            <span class="p">}</span>
        <span class="p">]</span>
    <span class="p">},</span>
    <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
        <span class="k">new</span> <span class="nx">ExtractTextPlugin</span><span class="p">(</span><span class="s1">'[name].bundle.css'</span><span class="p">),</span>
        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">CommonsChunkPlugin</span><span class="p">({</span>
            <span class="na">name</span><span class="p">:</span> <span class="p">[</span><span class="s1">'app'</span><span class="p">,</span> <span class="s1">'vendor'</span><span class="p">,</span> <span class="s1">'polyfills'</span><span class="p">]</span>
        <span class="p">}),</span>
        <span class="k">new</span> <span class="nx">HtmlWebpackPlugin</span><span class="p">({</span>
            <span class="na">template</span><span class="p">:</span> <span class="s1">'./index.html'</span>
        <span class="p">})</span>
    <span class="p">],</span>
    <span class="na">devServer</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">historyApiFallback</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="na">stats</span><span class="p">:</span> <span class="s1">'minimal'</span>
    <span class="p">}</span>
<span class="p">};</span></code></pre></figure>

<p>This file is plain simple:</p>

<p>First we tell webpack that we have three entry-points (three files to start) in our application which are “app”, “vendor” and “polyfills”</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">entry</span><span class="err">:</span> <span class="p">{</span>
<span class="s1">'polyfills'</span><span class="err">:</span> <span class="s1">'./app/polyfills.ts'</span><span class="p">,</span>
<span class="s1">'vendor'</span><span class="err">:</span> <span class="s1">'./app/vendor.ts'</span><span class="p">,</span>
<span class="s1">'app'</span><span class="err">:</span> <span class="s1">'./app/main.ts'</span>
<span class="p">},</span></code></pre></figure>

<p>Then we tell webpack which files to look for…</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">resolve</span><span class="err">:</span> <span class="p">{</span>
<span class="nl">extensions</span><span class="p">:</span> <span class="p">[</span><span class="s1">''</span><span class="p">,</span> <span class="s1">'.ts'</span><span class="p">,</span> <span class="s1">'.js'</span><span class="p">,</span> <span class="s1">'.css'</span><span class="p">,</span> <span class="s1">'.html'</span><span class="p">]</span>
<span class="p">},</span></code></pre></figure>

<p>…how the js-files should be named on output…</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">output</span><span class="err">:</span> <span class="p">{</span>
<span class="nl">filename</span><span class="p">:</span> <span class="s1">'[name].bundle.js'</span>
<span class="p">},</span></code></pre></figure>

<p>… and in the modules part we define how to treat the several file types.</p>

<p>The plugins section then sticks together every operation we do with the files. So this is normal webpack as you can see in several repositories as well.</p>

<p>But how to deal with gulp? Well…there is an npm package…;) It’s called <code class="highlighter-rouge">webpack-stream</code> and allows us to do tasks like this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">'web-compile-with-webpack'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">'./app/main.js'</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">webpack</span><span class="p">(</span><span class="nx">require</span><span class="p">(</span><span class="s1">'../webpack.config.js'</span><span class="p">)))</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s2">"../.temp/webapp/"</span><span class="p">));</span>
<span class="p">});</span></code></pre></figure>

<p>So if we trigger this gulp-tasks our application is build an bundles and so on and will be copied to the specified folder with gulp.</p>

<p>After we did this we can go ahead like normal.</p>

<p>Because we also have a dev-server from webpack in the repository above we will have a index.html fully loaded to execute everything. The gulp-html-comments make sure that everything in between those comments gets overwritten when we inject sources with gulp.</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;html&gt;</span>

<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>FoodChooser Angular 2<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1"</span><span class="nt">&gt;</span>

    <span class="c">&lt;!-- inject:css --&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"vendor.bundle.css"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"app.bundle.css"</span><span class="nt">&gt;</span>
    <span class="c">&lt;!-- endinject --&gt;</span>

<span class="nt">&lt;/head&gt;</span>

<span class="c">&lt;!-- 3. Display the application --&gt;</span>

<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;foodChooser-app&gt;</span>Loading...<span class="nt">&lt;/foodChooser-app&gt;</span>
<span class="nt">&lt;/body&gt;</span>

<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"cordova.js"</span><span class="nt">&gt;&lt;/script&gt;</span>

<span class="c">&lt;!-- inject:js --&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"polyfills.bundle.js"</span><span class="nt">&gt;&lt;/script&gt;</span>

<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"vendor.bundle.js"</span><span class="nt">&gt;&lt;/script&gt;</span>

<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"app.bundle.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="c">&lt;!-- endinject --&gt;</span>

<span class="nt">&lt;script&gt;</span>
    <span class="c">&lt;!--</span> <span class="nx">Toggle</span> <span class="nx">Hamburger</span> <span class="nx">Menu</span> <span class="nx">on</span> <span class="nx">mobile</span> <span class="o">--&gt;</span>
    <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">'click'</span><span class="p">,</span><span class="s1">'.navbar-collapse.in'</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span> <span class="nx">$</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">).</span><span class="nx">is</span><span class="p">(</span><span class="s1">'a'</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">$</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'class'</span><span class="p">)</span> <span class="o">!=</span> <span class="s1">'dropdown-toggle'</span> <span class="p">)</span> <span class="p">{</span>
        <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">collapse</span><span class="p">(</span><span class="s1">'hide'</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">});</span>

<span class="nt">&lt;/script&gt;</span>

<span class="nt">&lt;/html&gt;</span></code></pre></figure>

<p>The complete tasks for the web solution are:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">'build:web:prod'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">runSeq</span><span class="p">(</span>
        <span class="s1">'web-clean-temp-folder'</span><span class="p">,</span>        <span class="c1">// cleans the temp folder</span>
        <span class="s1">'web-compile-with-webpack'</span><span class="p">,</span>     <span class="c1">// compiles the sources with webpack</span>
        <span class="s1">'web-copy-index-to-webapp-temp-folder'</span><span class="p">,</span>     <span class="c1">// copies the index.html to the temp folder</span>
        <span class="s1">'web-inject-in-html'</span><span class="p">,</span>        <span class="c1">// injects the webpack-output into the index.html with gulp</span>
        <span class="s1">'web-clean-dist-folder'</span><span class="p">,</span>    <span class="c1">// clean the dist folder first...</span>
        <span class="s1">'web-copy-to-dist'</span><span class="p">,</span> <span class="c1">// copy it</span>
        <span class="nx">done</span><span class="p">);</span>
<span class="p">});</span></code></pre></figure>

<p>After we run this the index.html looks quite the same:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">title</span><span class="o">&gt;</span><span class="nx">FoodChooser</span> <span class="nx">Angular</span> <span class="mi">2</span><span class="o">&lt;</span><span class="sr">/title</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="nx">meta</span> <span class="nx">name</span><span class="o">=</span><span class="s2">"viewport"</span> <span class="nx">content</span><span class="o">=</span><span class="s2">"width=device-width, initial-scale=1"</span><span class="o">&gt;</span>

    <span class="c">&lt;!--</span> <span class="nx">inject</span><span class="err">:</span><span class="nx">css</span> <span class="o">--&gt;</span>
    <span class="o">&lt;</span><span class="nx">link</span> <span class="nx">rel</span><span class="o">=</span><span class="s2">"stylesheet"</span> <span class="nx">href</span><span class="o">=</span><span class="s2">"vendor.bundle.css"</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">link</span> <span class="nx">rel</span><span class="o">=</span><span class="s2">"stylesheet"</span> <span class="nx">href</span><span class="o">=</span><span class="s2">"app.bundle.css"</span><span class="o">&gt;</span>
    <span class="c">&lt;!--</span> <span class="nx">endinject</span> <span class="o">--&gt;</span>

<span class="o">&lt;</span><span class="sr">/head</span><span class="err">&gt;
</span>
<span class="c">&lt;!--</span> <span class="mi">3</span><span class="p">.</span> <span class="nx">Display</span> <span class="nx">the</span> <span class="nx">application</span> <span class="o">--&gt;</span>

<span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">foodChooser</span><span class="o">-</span><span class="nx">app</span><span class="o">&gt;</span><span class="nx">Loading</span><span class="p">...</span><span class="o">&lt;</span><span class="sr">/foodChooser-app</span><span class="err">&gt;
</span>

<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">"cordova.js"</span><span class="o">&gt;&lt;</span><span class="sr">/script</span><span class="err">&gt;
</span>
<span class="c">&lt;!--</span> <span class="nl">inject</span><span class="p">:</span><span class="nx">js</span> <span class="o">--&gt;</span>
<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">"polyfills.bundle.js"</span><span class="o">&gt;&lt;</span><span class="sr">/script</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">"vendor.bundle.js"</span><span class="o">&gt;&lt;</span><span class="sr">/script</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">"app.bundle.js"</span><span class="o">&gt;&lt;</span><span class="sr">/script</span><span class="err">&gt;
</span><span class="c">&lt;!--</span> <span class="nx">endinject</span> <span class="o">--&gt;</span>

<span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
    <span class="c">&lt;!--</span> <span class="nx">Toggle</span> <span class="nx">Hamburger</span> <span class="nx">Menu</span> <span class="nx">on</span> <span class="nx">mobile</span> <span class="o">--&gt;</span>
    <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">'click'</span><span class="p">,</span><span class="s1">'.navbar-collapse.in'</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span> <span class="nx">$</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">).</span><span class="nx">is</span><span class="p">(</span><span class="s1">'a'</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">$</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'class'</span><span class="p">)</span> <span class="o">!=</span> <span class="s1">'dropdown-toggle'</span> <span class="p">)</span> <span class="p">{</span>
        <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">collapse</span><span class="p">(</span><span class="s1">'hide'</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">});</span>

<span class="o">&lt;</span><span class="sr">/script</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/body</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/html&gt;</span></code></pre></figure>

<p>But this time the sources got injected. See the dist folder here:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/06/dist.png" alt="dist" /></p>

<p>With this approach we can go ahead as usual when building electron or cordova-things with gulp.</p>

<p>See the required steps fo r e.g. a cordova-build here:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">'build:electron:prod'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">runSeq</span><span class="p">(</span>
        <span class="s1">'electron-clean-temp'</span><span class="p">,</span>
        <span class="s1">'electron-compile-with-webpack'</span><span class="p">,</span>
        <span class="s1">'electron-copy-index-to-temp-folder'</span><span class="p">,</span>
        <span class="s1">'electron-inject-in-html'</span><span class="p">,</span>
        <span class="s1">'electron-copy-assets-to-temp-folder'</span><span class="p">,</span>
        <span class="s1">'electron-build-win'</span><span class="p">,</span>
        <span class="nx">done</span><span class="p">);</span>
<span class="p">});</span></code></pre></figure>

<p>the only difference here is that we have to copy assets for electron into the temp folder. The whole procedure before is like we know it from the web solution.</p>

<p>I hope this helps to get out confusion and reduces the complexity of the topic “Cross platform”.</p>

<p>HTH</p>

<p>Regards</p>

<p>Fabian</p>

<h1 id="links">Links</h1>

<p><a href="https://angular.io/docs/ts/latest/guide/webpack.html">https://angular.io/docs/ts/latest/guide/webpack.html</a></p>

<p><a href="https://webpack.github.io/docs/usage-with-gulp.html">https://webpack.github.io/docs/usage-with-gulp.html</a></p>

<p><a href="https://www.npmjs.com/package/webpack-stream">https://www.npmjs.com/package/webpack-stream</a></p>

<p><a href="https://github.com/shama/webpack-stream">https://github.com/shama/webpack-stream</a></p>

<p><a href="https://www.xplatform.rocks/2016/02/14/angular2-and-electron-the-definitive-guide/">https://www.xplatform.rocks/2016/02/14/angular2-and-electron-the-definitive-guide/</a></p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2016/06/17/cross-platform-builds-with-angular-2-gulp-and-webpack</wp:post_id>
        <wp:post_date>2016-06-17T19:09:00+02:00</wp:post_date>
        <wp:post_date_gmt>2016-06-17T19:09:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="angular"><![CDATA[["angular",]]></category>
        
          <category domain="post_tag" nicename="gulp"><![CDATA["gulp",]]></category>
        
          <category domain="post_tag" nicename="webpack"><![CDATA["webpack"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[ASP.NET Core and Angular with Webpack and Visual Studio]]></title>
        <link>http://offering.solutions/blog/articles/2016/06/12/asp-net-core-angular-2-webpack-visual-studio/</link>
        <pubDate>2016-06-12T22:10:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>This article shows how to use ASP.NET Core and Angular with webpack and Visual Studio. Both the client and the server side of the application is implemented inside one ASP.NET Core project which makes it easier to deploy.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/06/vs_webpack_angular2.png" alt="vs_webpack_angular2" /></p>

<p><strong>Code:</strong> <a href="https://github.com/damienbod/Angular2WebpackVisualStudio">https://github.com/damienbod/Angular2WebpackVisualStudio</a></p>

<p><strong>Authors</strong> <em>Fabian Gosebrink, Damien Bowden</em>.
This post is hosted on both <a href="http://damienbod.com">http://damienbod.com</a> and <a href="http://offering.solutions/">http://offering.solutions/</a>.</p>

<p><strong>Setting up the application</strong></p>

<p>The ASP.NET Core application contains both the server side API services and also hosts the Angular 2 client application. The source code for the Angular 2 application is implemented in the angular2App folder. Webpack is then used to deploy the application, using the development build or a production build, which deploys the application to the wwwroot folder. This makes it easy to deploy the application using the standard tools from Visual Studio with the standard configurations.</p>

<p><strong>npm configuration</strong></p>

<p>The npm package.json configuration loads all the required packages for Angular 2 and Webpack. The Webpack packages are all added to the devDependencies. A “npm build” script and also a “npm buildProduction” are also configured, so that the client application can be built using Webpack from the cmd line using “npm build” or “npm buildProduction”. These two scripts just call the same cmd as the Webpack task runner.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">"name"</span><span class="err">:</span> <span class="s2">"angular2-webpack-visualstudio"</span><span class="p">,</span>
  <span class="s2">"version"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
  <span class="s2">"description"</span><span class="err">:</span> <span class="s2">""</span><span class="p">,</span>
  <span class="s2">"main"</span><span class="err">:</span> <span class="s2">"wwwroot/index.html"</span><span class="p">,</span>
  <span class="s2">"author"</span><span class="err">:</span> <span class="s2">""</span><span class="p">,</span>
  <span class="s2">"license"</span><span class="err">:</span> <span class="s2">"ISC"</span><span class="p">,</span>
  <span class="s2">"scripts"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"ngc"</span><span class="err">:</span> <span class="s2">"ngc -p ./tsconfig-aot.json"</span><span class="p">,</span>
    <span class="s2">"start"</span><span class="err">:</span> <span class="s2">"concurrently \"webpack-dev-server --hot --inline --port 8080\" \"dotnet run\" "</span><span class="p">,</span>
    <span class="s2">"webpack-dev"</span><span class="err">:</span> <span class="s2">"set NODE_ENV=development &amp;&amp; webpack"</span><span class="p">,</span>
    <span class="s2">"webpack-production"</span><span class="err">:</span> <span class="s2">"set NODE_ENV=production &amp;&amp; webpack"</span><span class="p">,</span>
    <span class="s2">"build-dev"</span><span class="err">:</span> <span class="s2">"npm run webpack-dev"</span><span class="p">,</span>
    <span class="s2">"build-production"</span><span class="err">:</span> <span class="s2">"npm run ngc &amp;&amp; npm run webpack-production"</span><span class="p">,</span>
    <span class="s2">"watch-webpack-dev"</span><span class="err">:</span> <span class="s2">"set NODE_ENV=development &amp;&amp; webpack --watch --color"</span><span class="p">,</span>
    <span class="s2">"watch-webpack-production"</span><span class="err">:</span> <span class="s2">"npm run build-production --watch --color"</span><span class="p">,</span>
    <span class="s2">"publish-for-iis"</span><span class="err">:</span> <span class="s2">"npm run build-production &amp;&amp; dotnet publish -c Release"</span>
  <span class="p">},</span>
  <span class="s2">"dependencies"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"@angular/common"</span><span class="err">:</span> <span class="s2">"~2.4.7"</span><span class="p">,</span>
    <span class="s2">"@angular/compiler"</span><span class="err">:</span> <span class="s2">"~2.4.7"</span><span class="p">,</span>
    <span class="s2">"@angular/core"</span><span class="err">:</span> <span class="s2">"~2.4.7"</span><span class="p">,</span>
    <span class="s2">"@angular/forms"</span><span class="err">:</span> <span class="s2">"~2.4.7"</span><span class="p">,</span>
    <span class="s2">"@angular/http"</span><span class="err">:</span> <span class="s2">"~2.4.7"</span><span class="p">,</span>
    <span class="s2">"@angular/platform-browser"</span><span class="err">:</span> <span class="s2">"~2.4.7"</span><span class="p">,</span>
    <span class="s2">"@angular/platform-browser-dynamic"</span><span class="err">:</span> <span class="s2">"~2.4.7"</span><span class="p">,</span>
    <span class="s2">"@angular/router"</span><span class="err">:</span> <span class="s2">"~3.4.7"</span><span class="p">,</span>
    <span class="s2">"@angular/upgrade"</span><span class="err">:</span> <span class="s2">"~2.4.7"</span><span class="p">,</span>
    <span class="s2">"angular-in-memory-web-api"</span><span class="err">:</span> <span class="s2">"0.2.4"</span><span class="p">,</span>
    <span class="s2">"core-js"</span><span class="err">:</span> <span class="s2">"2.4.1"</span><span class="p">,</span>
    <span class="s2">"reflect-metadata"</span><span class="err">:</span> <span class="s2">"0.1.9"</span><span class="p">,</span>
    <span class="s2">"rxjs"</span><span class="err">:</span> <span class="s2">"5.0.3"</span><span class="p">,</span>
    <span class="s2">"zone.js"</span><span class="err">:</span> <span class="s2">"0.7.5"</span><span class="p">,</span>
    <span class="s2">"@angular/compiler-cli"</span><span class="err">:</span> <span class="s2">"~2.4.7"</span><span class="p">,</span>
    <span class="s2">"@angular/platform-server"</span><span class="err">:</span> <span class="s2">"~2.4.7"</span><span class="p">,</span>
    <span class="s2">"bootstrap"</span><span class="err">:</span> <span class="s2">"^3.3.7"</span><span class="p">,</span>
    <span class="s2">"ie-shim"</span><span class="err">:</span> <span class="s2">"~0.1.0"</span>
  <span class="p">},</span>
  <span class="s2">"devDependencies"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"@types/node"</span><span class="err">:</span> <span class="s2">"7.0.5"</span><span class="p">,</span>
    <span class="s2">"angular2-template-loader"</span><span class="err">:</span> <span class="s2">"^0.6.0"</span><span class="p">,</span>
    <span class="s2">"angular-router-loader"</span><span class="err">:</span> <span class="s2">"^0.5.0"</span><span class="p">,</span>
    <span class="s2">"awesome-typescript-loader"</span><span class="err">:</span> <span class="s2">"3.0.4"</span><span class="p">,</span>
    <span class="s2">"clean-webpack-plugin"</span><span class="err">:</span> <span class="s2">"^0.1.15"</span><span class="p">,</span>
    <span class="s2">"concurrently"</span><span class="err">:</span> <span class="s2">"^3.1.0"</span><span class="p">,</span>
    <span class="s2">"copy-webpack-plugin"</span><span class="err">:</span> <span class="s2">"^4.0.1"</span><span class="p">,</span>
    <span class="s2">"css-loader"</span><span class="err">:</span> <span class="s2">"^0.26.1"</span><span class="p">,</span>
    <span class="s2">"file-loader"</span><span class="err">:</span> <span class="s2">"^0.9.0"</span><span class="p">,</span>
    <span class="s2">"html-webpack-plugin"</span><span class="err">:</span> <span class="s2">"^2.26.0"</span><span class="p">,</span>
    <span class="s2">"jquery"</span><span class="err">:</span> <span class="s2">"^2.2.0"</span><span class="p">,</span>
    <span class="s2">"json-loader"</span><span class="err">:</span> <span class="s2">"^0.5.4"</span><span class="p">,</span>
    <span class="s2">"node-sass"</span><span class="err">:</span> <span class="s2">"^4.3.0"</span><span class="p">,</span>
    <span class="s2">"raw-loader"</span><span class="err">:</span> <span class="s2">"^0.5.1"</span><span class="p">,</span>
    <span class="s2">"rimraf"</span><span class="err">:</span> <span class="s2">"^2.5.4"</span><span class="p">,</span>
    <span class="s2">"sass-loader"</span><span class="err">:</span> <span class="s2">"^4.1.1"</span><span class="p">,</span>
    <span class="s2">"source-map-loader"</span><span class="err">:</span> <span class="s2">"^0.1.6"</span><span class="p">,</span>
    <span class="s2">"style-loader"</span><span class="err">:</span> <span class="s2">"^0.13.1"</span><span class="p">,</span>
    <span class="s2">"ts-helpers"</span><span class="err">:</span> <span class="s2">"^1.1.2"</span><span class="p">,</span>
    <span class="s2">"tslint"</span><span class="err">:</span> <span class="s2">"^4.3.1"</span><span class="p">,</span>
    <span class="s2">"tslint-loader"</span><span class="err">:</span> <span class="s2">"^3.3.0"</span><span class="p">,</span>
    <span class="s2">"typescript"</span><span class="err">:</span> <span class="s2">"2.0.3"</span><span class="p">,</span>
    <span class="s2">"url-loader"</span><span class="err">:</span> <span class="s2">"^0.5.7"</span><span class="p">,</span>
    <span class="s2">"webpack"</span><span class="err">:</span> <span class="s2">"^2.2.1"</span><span class="p">,</span>
    <span class="s2">"webpack-dev-server"</span><span class="err">:</span> <span class="s2">"2.2.1"</span>
  <span class="p">},</span>
  <span class="s2">"-vs-binding"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"ProjectOpened"</span><span class="err">:</span> <span class="p">[</span>
      <span class="s2">"watch-webpack-dev"</span>
    <span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><strong>tsconfig configuration</strong></p>

<p>The types are configured in this file, so typings are no longer required.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">"compilerOptions"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"target"</span><span class="err">:</span> <span class="s2">"es5"</span><span class="p">,</span>
    <span class="s2">"module"</span><span class="err">:</span> <span class="s2">"es2015"</span><span class="p">,</span>
    <span class="s2">"moduleResolution"</span><span class="err">:</span> <span class="s2">"node"</span><span class="p">,</span>
    <span class="s2">"sourceMap"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"emitDecoratorMetadata"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"experimentalDecorators"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"removeComments"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"noImplicitAny"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"skipLibCheck"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"lib"</span><span class="err">:</span> <span class="p">[</span>
      <span class="s2">"es2015"</span><span class="p">,</span>
      <span class="s2">"dom"</span>
    <span class="p">],</span>
    <span class="s2">"types"</span><span class="err">:</span> <span class="p">[</span>
      <span class="s2">"node"</span>
    <span class="p">]</span>
  <span class="p">},</span>
  <span class="s2">"files"</span><span class="err">:</span> <span class="p">[</span>
    <span class="s2">"angularApp/app/app.module.ts"</span><span class="p">,</span>
    <span class="s2">"angularApp/app/about/about.module.ts"</span><span class="p">,</span>
    <span class="s2">"angularApp/main.ts"</span>
  <span class="p">],</span>
  <span class="s2">"awesomeTypescriptLoaderOptions"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"useWebpackText"</span><span class="err">:</span> <span class="kc">true</span>
  <span class="p">},</span>
  <span class="s2">"compileOnSave"</span><span class="err">:</span> <span class="kc">false</span><span class="p">,</span>
  <span class="s2">"buildOnSave"</span><span class="err">:</span> <span class="kc">false</span>
<span class="p">}</span></code></pre></figure>

<h2 id="webpack-build">Webpack build</h2>

<p>The Webpack development build <em>&gt;webpack -d</em> just uses the source files and creates outputs for development. The production build copies everything required for the client application to the wwwroot folder, and uglifies the js files. The <em>webpack -d –watch</em> can be used to automatically build the dist files if a source file is changed.</p>

<p>The Webpack config file was created using the excellent github repository <a href="https://github.com/preboot/angular2-webpack">https://github.com/preboot/angular2-webpack</a>. Thanks for this. Small changes were made to this, such as the process.env.NODE_ENV and Webpack uses different source and output folders to match the ASP.NET Core project. If you decide to use two different projects, one for server, and one for client,  preboot or angular-cli, or both together would be a good choice for the client application.</p>

<p><strong>webpack.config.js</strong></p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">/// &lt;binding ProjectOpened='Run - Development' /&gt;</span>

<span class="kd">var</span> <span class="nx">environment</span> <span class="o">=</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">||</span> <span class="s2">"development"</span><span class="p">).</span><span class="nx">trim</span><span class="p">();</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">environment</span> <span class="o">===</span> <span class="s2">"development"</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./webpack.dev.js'</span><span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./webpack.prod.js'</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p><strong>webpack.dev.js</strong></p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'path'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'webpack'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">HtmlWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'html-webpack-plugin'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">CopyWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'copy-webpack-plugin'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">CleanWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'clean-webpack-plugin'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">helpers</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./webpack.helpers'</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'@@@@@@@@@ USING DEVELOPMENT @@@@@@@@@@@@@@@'</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>

    <span class="na">devtool</span><span class="p">:</span> <span class="s1">'source-map'</span><span class="p">,</span>
    <span class="na">performance</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">hints</span><span class="p">:</span> <span class="kc">false</span>
    <span class="p">},</span>
    <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
        <span class="s1">'polyfills'</span><span class="p">:</span> <span class="s1">'./angularApp/polyfills.ts'</span><span class="p">,</span>
        <span class="s1">'vendor'</span><span class="p">:</span> <span class="s1">'./angularApp/vendor.ts'</span><span class="p">,</span>
        <span class="s1">'app'</span><span class="p">:</span> <span class="s1">'./angularApp/main.ts'</span>
    <span class="p">},</span>

    <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">path</span><span class="p">:</span> <span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">'/wwwroot/'</span><span class="p">,</span>
        <span class="na">filename</span><span class="p">:</span> <span class="s1">'dist/[name].bundle.js'</span><span class="p">,</span>
        <span class="na">chunkFilename</span><span class="p">:</span> <span class="s1">'dist/[id].chunk.js'</span><span class="p">,</span>
        <span class="na">publicPath</span><span class="p">:</span> <span class="s1">'/'</span>
    <span class="p">},</span>

    <span class="na">resolve</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">extensions</span><span class="p">:</span> <span class="p">[</span><span class="s1">'.ts'</span><span class="p">,</span> <span class="s1">'.js'</span><span class="p">,</span> <span class="s1">'.json'</span><span class="p">,</span> <span class="s1">'.css'</span><span class="p">,</span> <span class="s1">'.scss'</span><span class="p">,</span> <span class="s1">'.html'</span><span class="p">]</span>
    <span class="p">},</span>

    <span class="na">devServer</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">historyApiFallback</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="na">contentBase</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'/wwwroot/'</span><span class="p">),</span>
        <span class="na">watchOptions</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">aggregateTimeout</span><span class="p">:</span> <span class="mi">300</span><span class="p">,</span>
            <span class="na">poll</span><span class="p">:</span> <span class="mi">1000</span>
        <span class="p">}</span>
    <span class="p">},</span>

    <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">rules</span><span class="p">:</span> <span class="p">[</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">ts$/</span><span class="p">,</span>
                <span class="na">loaders</span><span class="p">:</span> <span class="p">[</span>
                    <span class="s1">'awesome-typescript-loader'</span><span class="p">,</span>
                    <span class="s1">'angular-router-loader'</span><span class="p">,</span>
                    <span class="s1">'angular2-template-loader'</span><span class="p">,</span>
                    <span class="s1">'source-map-loader'</span><span class="p">,</span>
                    <span class="s1">'tslint-loader'</span>
                <span class="p">]</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.(</span><span class="sr">png|jpg|gif|woff|woff2|ttf|svg|eot</span><span class="se">)</span><span class="sr">$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'file-loader?name=assets/[name]-[hash:6].[ext]'</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/favicon.ico$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'file-loader?name=/[name].[ext]'</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">css$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'style-loader!css-loader'</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">scss$/</span><span class="p">,</span>
                <span class="na">exclude</span><span class="p">:</span> <span class="sr">/node_modules/</span><span class="p">,</span>
                <span class="na">loaders</span><span class="p">:</span> <span class="p">[</span><span class="s1">'style-loader'</span><span class="p">,</span> <span class="s1">'css-loader'</span><span class="p">,</span> <span class="s1">'sass-loader'</span><span class="p">]</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">html$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'raw-loader'</span>
            <span class="p">}</span>
        <span class="p">],</span>
        <span class="na">exprContextCritical</span><span class="p">:</span> <span class="kc">false</span>
    <span class="p">},</span>
    <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">CommonsChunkPlugin</span><span class="p">({</span> <span class="na">name</span><span class="p">:</span> <span class="p">[</span><span class="s1">'app'</span><span class="p">,</span> <span class="s1">'polyfills'</span><span class="p">]</span> <span class="p">}),</span>

        <span class="k">new</span> <span class="nx">CleanWebpackPlugin</span><span class="p">(</span>
            <span class="p">[</span>
                <span class="s1">'./wwwroot/dist'</span><span class="p">,</span>
                <span class="s1">'./wwwroot/assets'</span>
            <span class="p">]</span>
        <span class="p">),</span>

        <span class="k">new</span> <span class="nx">HtmlWebpackPlugin</span><span class="p">({</span>
            <span class="na">filename</span><span class="p">:</span> <span class="s1">'index.html'</span><span class="p">,</span>
            <span class="na">inject</span><span class="p">:</span> <span class="s1">'body'</span><span class="p">,</span>
            <span class="na">template</span><span class="p">:</span> <span class="s1">'angularApp/index.html'</span>
        <span class="p">}),</span>

        <span class="k">new</span> <span class="nx">CopyWebpackPlugin</span><span class="p">([</span>
            <span class="p">{</span> <span class="na">from</span><span class="p">:</span> <span class="s1">'./angularApp/images/*.*'</span><span class="p">,</span> <span class="na">to</span><span class="p">:</span> <span class="s1">'assets/'</span><span class="p">,</span> <span class="na">flatten</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}</span>
        <span class="p">])</span>
    <span class="p">]</span>

<span class="p">};</span></code></pre></figure>

<p><strong>webpack.prod.js</strong></p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'path'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'webpack'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">HtmlWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'html-webpack-plugin'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">CopyWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'copy-webpack-plugin'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">CleanWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'clean-webpack-plugin'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">helpers</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./webpack.helpers'</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'@@@@@@@@@ USING PRODUCTION @@@@@@@@@@@@@@@'</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>

    <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
        <span class="s1">'vendor'</span><span class="p">:</span> <span class="s1">'./angularApp/vendor.ts'</span><span class="p">,</span>
        <span class="s1">'polyfills'</span><span class="p">:</span> <span class="s1">'./angularApp/polyfills.ts'</span><span class="p">,</span>
        <span class="s1">'app'</span><span class="p">:</span> <span class="s1">'./angularApp/main-aot.ts'</span> <span class="c1">// AoT compilation</span>
    <span class="p">},</span>

    <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">path</span><span class="p">:</span> <span class="s1">'./wwwroot/'</span><span class="p">,</span>
        <span class="na">filename</span><span class="p">:</span> <span class="s1">'dist/[name].[hash].bundle.js'</span><span class="p">,</span>
        <span class="na">chunkFilename</span><span class="p">:</span> <span class="s1">'dist/[id].[hash].chunk.js'</span><span class="p">,</span>
        <span class="na">publicPath</span><span class="p">:</span> <span class="s1">'/'</span>
    <span class="p">},</span>

    <span class="na">resolve</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">extensions</span><span class="p">:</span> <span class="p">[</span><span class="s1">'.ts'</span><span class="p">,</span> <span class="s1">'.js'</span><span class="p">,</span> <span class="s1">'.json'</span><span class="p">,</span> <span class="s1">'.css'</span><span class="p">,</span> <span class="s1">'.scss'</span><span class="p">,</span> <span class="s1">'.html'</span><span class="p">]</span>
    <span class="p">},</span>

    <span class="na">devServer</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">historyApiFallback</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="na">stats</span><span class="p">:</span> <span class="s1">'minimal'</span><span class="p">,</span>
        <span class="na">outputPath</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'wwwroot/'</span><span class="p">)</span>
    <span class="p">},</span>

    <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">rules</span><span class="p">:</span> <span class="p">[</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">ts$/</span><span class="p">,</span>
                <span class="na">loaders</span><span class="p">:</span> <span class="p">[</span>
                    <span class="s1">'awesome-typescript-loader'</span><span class="p">,</span>
                    <span class="s1">'angular-router-loader?aot=true&amp;genDir=aot/'</span>
                <span class="p">]</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.(</span><span class="sr">png|jpg|gif|woff|woff2|ttf|svg|eot</span><span class="se">)</span><span class="sr">$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'file-loader?name=assets/[name]-[hash:6].[ext]'</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/favicon.ico$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'file-loader?name=/[name].[ext]'</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">css$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'style-loader!css-loader'</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">scss$/</span><span class="p">,</span>
                <span class="na">exclude</span><span class="p">:</span> <span class="sr">/node_modules/</span><span class="p">,</span>
                <span class="na">loaders</span><span class="p">:</span> <span class="p">[</span><span class="s1">'style-loader'</span><span class="p">,</span> <span class="s1">'css-loader'</span><span class="p">,</span> <span class="s1">'sass-loader'</span><span class="p">]</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">html$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'raw-loader'</span>
            <span class="p">}</span>
        <span class="p">],</span>
        <span class="na">exprContextCritical</span><span class="p">:</span> <span class="kc">false</span>
    <span class="p">},</span>

    <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
        <span class="k">new</span> <span class="nx">CleanWebpackPlugin</span><span class="p">(</span>
            <span class="p">[</span>
                <span class="s1">'./wwwroot/dist'</span><span class="p">,</span>
                <span class="s1">'./wwwroot/assets'</span>
            <span class="p">]</span>
        <span class="p">),</span>
        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">NoEmitOnErrorsPlugin</span><span class="p">(),</span>
        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">UglifyJsPlugin</span><span class="p">({</span>
            <span class="na">compress</span><span class="p">:</span> <span class="p">{</span>
                <span class="na">warnings</span><span class="p">:</span> <span class="kc">false</span>
            <span class="p">},</span>
            <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
                <span class="na">comments</span><span class="p">:</span> <span class="kc">false</span>
            <span class="p">},</span>
            <span class="na">sourceMap</span><span class="p">:</span> <span class="kc">false</span>
        <span class="p">}),</span>
        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">CommonsChunkPlugin</span><span class="p">(</span>
            <span class="p">{</span>
                <span class="na">name</span><span class="p">:</span> <span class="p">[</span><span class="s1">'vendor'</span><span class="p">,</span> <span class="s1">'polyfills'</span><span class="p">]</span>
            <span class="p">}),</span>

        <span class="k">new</span> <span class="nx">HtmlWebpackPlugin</span><span class="p">({</span>
            <span class="na">filename</span><span class="p">:</span> <span class="s1">'index.html'</span><span class="p">,</span>
            <span class="na">inject</span><span class="p">:</span> <span class="s1">'body'</span><span class="p">,</span>
            <span class="na">template</span><span class="p">:</span> <span class="s1">'angularApp/index.html'</span>
        <span class="p">}),</span>

        <span class="k">new</span> <span class="nx">CopyWebpackPlugin</span><span class="p">([</span>
            <span class="p">{</span> <span class="na">from</span><span class="p">:</span> <span class="s1">'./angularApp/images/*.*'</span><span class="p">,</span> <span class="na">to</span><span class="p">:</span> <span class="s1">'assets/'</span><span class="p">,</span> <span class="na">flatten</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}</span>
        <span class="p">])</span>
    <span class="p">]</span>
<span class="p">};</span></code></pre></figure>

<h2 id="webpack-production-build">Webpack Production build</h2>

<p>The production build has to be run from the command line. At present ngc, the angular compiler, can only be used from the command line.</p>

<p>See also (Using ngc) <a href="http://blog.mgechev.com/2016/06/26/tree-shaking-angular2-production-build-rollup-javascript/">http://blog.mgechev.com/2016/06/26/tree-shaking-angular2-production-build-rollup-javascript/</a></p>

<p>It can be run using npm run build-production which is configured in the package.json.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>"build-production": "npm run ngc &amp;&amp; npm run webpack-prodroduction"
</code></pre>
</div>

<p>The production build uses tsconfig-aot.json and main-aot.ts as an entry point.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">"compilerOptions"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"target"</span><span class="err">:</span> <span class="s2">"es5"</span><span class="p">,</span>
    <span class="s2">"module"</span><span class="err">:</span> <span class="s2">"es2015"</span><span class="p">,</span>
    <span class="s2">"moduleResolution"</span><span class="err">:</span> <span class="s2">"node"</span><span class="p">,</span>
    <span class="s2">"sourceMap"</span><span class="err">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="s2">"emitDecoratorMetadata"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"experimentalDecorators"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"removeComments"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"noImplicitAny"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"suppressImplicitAnyIndexErrors"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"skipLibCheck"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"lib"</span><span class="err">:</span> <span class="p">[</span>
      <span class="s2">"es2015"</span><span class="p">,</span>
      <span class="s2">"dom"</span>
    <span class="p">]</span>
  <span class="p">},</span>
  <span class="s2">"files"</span><span class="err">:</span> <span class="p">[</span>
    <span class="s2">"angularApp/app/app.module.ts"</span><span class="p">,</span>
    <span class="s2">"angularApp/app/modules/about/about.module.ts"</span><span class="p">,</span>
    <span class="s2">"angularApp/main-aot.ts"</span>
  <span class="p">],</span>
  <span class="s2">"angularCompilerOptions"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"genDir"</span><span class="err">:</span> <span class="s2">"aot"</span><span class="p">,</span>
    <span class="s2">"skipMetadataEmit"</span><span class="err">:</span> <span class="kc">true</span>
  <span class="p">},</span>
  <span class="s2">"compileOnSave"</span><span class="err">:</span> <span class="kc">false</span><span class="p">,</span>
  <span class="s2">"buildOnSave"</span><span class="err">:</span> <span class="kc">false</span>
<span class="p">}</span></code></pre></figure>

<h2 id="webpackdevjs">webpack.dev.js</h2>

<p>Lets dive into the webpack.dev.js a bit:</p>

<p>Firstly, all plugins are loaded which are required to process all the js, ts, … files which are included, or used in the project.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'path'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'webpack'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">HtmlWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'html-webpack-plugin'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">CopyWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'copy-webpack-plugin'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">CleanWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'clean-webpack-plugin'</span><span class="p">);</span></code></pre></figure>

<p>The npm environment variable NODE_ENV is used to define the type of build, either a development build or a production build. The entries are configured depending on this parameter.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js">    <span class="nx">entry</span><span class="err">:</span> <span class="p">{</span>
        <span class="s1">'app'</span><span class="err">:</span> <span class="s1">'./angularApp/main.ts'</span> <span class="c1">// JiT compilation</span>
    <span class="p">},</span></code></pre></figure>

<p>for webpack.prod.js</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js">    <span class="nx">entry</span><span class="err">:</span> <span class="p">{</span>
        <span class="s1">'app'</span><span class="err">:</span> <span class="s1">'./angularApp/main-aot.ts'</span> <span class="c1">// AoT compilation</span>
    <span class="p">},</span></code></pre></figure>

<p>The entries provide Webpack with the required information, where to start from, or where to hook in to.</p>

<p>Webpack knows which paths to run and includes the corresponding files and packages.</p>

<p>The “loaders” section and the “modules” section in the configuration provides Webpack with the following information: which files it needs to get and how to read the files. The modules tells Webpack what to do with the files exactly. Like minifying or whatever.</p>

<p>In this project configuration, if a production node parameter is set, different plugins are pushed into the sections because the files should be treated differently.</p>

<h3 id="the-output">The output</h3>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">output</span><span class="err">:</span> <span class="p">{</span>
        <span class="nl">path</span><span class="p">:</span> <span class="s2">"./wwwroot/"</span><span class="p">,</span>
        <span class="nx">filename</span><span class="err">:</span> <span class="s1">'dist/[name].bundle.js'</span><span class="p">,</span>
		<span class="nx">chunkFilename</span><span class="err">:</span> <span class="s1">'dist/[id].chunk.js'</span><span class="p">,</span>
        <span class="nx">publicPath</span><span class="err">:</span> <span class="s2">"/"</span>
    <span class="p">},</span></code></pre></figure>

<p>output for production adds a hash:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">output</span><span class="err">:</span> <span class="p">{</span>
        <span class="nl">path</span><span class="p">:</span> <span class="s2">"./wwwroot/"</span><span class="p">,</span>
        <span class="nx">filename</span><span class="err">:</span> <span class="s1">'dist/[name].[hash].bundle.js'</span><span class="p">,</span>
		<span class="nx">chunkFilename</span><span class="err">:</span> <span class="s1">'dist/[id].[hash].chunk.js'</span><span class="p">,</span>
        <span class="nx">publicPath</span><span class="err">:</span> <span class="s2">"/"</span>
    <span class="p">},</span></code></pre></figure>

<p>tells webpack where to put the files in the end. You can use like wildcards to use the “name” or an “hash” or something like that.</p>

<h3 id="the-module-loaders">The module loaders</h3>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">module</span><span class="err">:</span> <span class="p">{</span>
        <span class="nl">rules</span><span class="p">:</span> <span class="p">[</span>
           <span class="c1">//...loaders here</span>
        <span class="p">]</span>
    <span class="p">},</span></code></pre></figure>

<p>tell webpack how to react when a certain file extension comes into play. It will then use loaders to handle that file.</p>

<p>The plugins you are providing in the end are necessary to configure how the files should be processed.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js">    <span class="nx">plugins</span><span class="err">:</span> <span class="p">[</span>
        <span class="c1">//...loaders here</span>
    <span class="p">]</span></code></pre></figure>

<h2 id="angular-indexhtml">Angular index.html</h2>

<p>The index.html contains all the references required for the Angular client. The scripts are added as part of the build and not manually. The developer only needs to use the imports.</p>

<p>Source index.html file in the angularApp/public folder:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;base</span> <span class="na">href=</span><span class="s">"./"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;title&gt;</span>Angular Webpack Template<span class="nt">&lt;/title&gt;</span>

    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"content-type"</span> <span class="na">content=</span><span class="s">"text/html; charset=utf-8"</span> <span class="nt">/&gt;</span>

    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span> <span class="nt">/&gt;</span>

<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;my-app&gt;</span>Loading...<span class="nt">&lt;/my-app&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span></code></pre></figure>

<p>And the produced build file in the wwwroot folder. The script for the app has been added using Webpack. Hashes are used in a production build for cache busting.</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;base</span> <span class="na">href=</span><span class="s">"./"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;title&gt;</span>Angular Webpack Template<span class="nt">&lt;/title&gt;</span>

    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"content-type"</span> <span class="na">content=</span><span class="s">"text/html; charset=utf-8"</span> <span class="nt">/&gt;</span>

    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span> <span class="nt">/&gt;</span>

    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"css/bootstrap.css"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;my-app&gt;</span>Loading...<span class="nt">&lt;/my-app&gt;</span>
<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"/dist/app.bundle.js"</span><span class="nt">&gt;&lt;/script&gt;&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span></code></pre></figure>

<h2 id="visual-studio-tools">Visual Studio Tools</h2>

<h3 id="npm-custom-task-runner">npm custom Task Runner</h3>

<p>The NPM Task Runner can be used to build  the client SPA application from inside Visual Studio. This task runner can be downloaded from:</p>

<p><a href="https://marketplace.visualstudio.com/items?itemName=MadsKristensen.NPMTaskRunner">https://marketplace.visualstudio.com/items?itemName=MadsKristensen.NPMTaskRunner</a></p>

<p>The task runners need to be configured correctly. 
Go to Tools –&gt; Options –&gt; Projects and Solutions –&gt; External Web Tools.</p>

<p>Check that are options are checked. See:</p>

<p><a href="https://blogs.msdn.microsoft.com/webdev/2015/03/19/customize-external-web-tools-in-visual-studio-2015/">https://blogs.msdn.microsoft.com/webdev/2015/03/19/customize-external-web-tools-in-visual-studio-2015/</a></p>

<h3 id="npm-scripts">npm scripts</h3>

<p>The npm scripts are used to build, watch the client application as required. The scripts can be run from the command line or the npm task runner.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="s2">"ngc"</span><span class="err">:</span> <span class="s2">"ngc -p ./tsconfig-aot.json"</span><span class="p">,</span>
<span class="s2">"start"</span><span class="err">:</span> <span class="s2">"concurrently \"webpack-dev-server --hot --inline --port 8080\" \"dotnet run\" "</span><span class="p">,</span>
<span class="s2">"webpack-dev"</span><span class="err">:</span> <span class="s2">"set NODE_ENV=development&amp;&amp; webpack"</span><span class="p">,</span>
<span class="s2">"webpack-production"</span><span class="err">:</span> <span class="s2">"set NODE_ENV=production&amp;&amp; webpack"</span><span class="p">,</span>
<span class="s2">"build-dev"</span><span class="err">:</span> <span class="s2">"npm run webpack-dev"</span><span class="p">,</span>
<span class="s2">"build-production"</span><span class="err">:</span> <span class="s2">"npm run ngc &amp;&amp; npm run webpack-production"</span><span class="p">,</span>
<span class="s2">"watch-webpack-dev"</span><span class="err">:</span> <span class="s2">"set NODE_ENV=development&amp;&amp; webpack --watch --color"</span><span class="p">,</span>
<span class="s2">"watch-webpack-production"</span><span class="err">:</span> <span class="s2">"npm run build-production --watch --color"</span><span class="p">,</span>
<span class="s2">"publish-for-iis"</span><span class="err">:</span> <span class="s2">"npm run build-production &amp;&amp; dotnet publish -c Release"</span> </code></pre></figure>

<p>The watch-webpack-dev npm script can be automatically be started in Visual Studio by adding the following to the package.json</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="s2">"-vs-binding"</span><span class="err">:</span> <span class="p">{</span> <span class="s2">"ProjectOpened"</span><span class="err">:</span> <span class="p">[</span> <span class="s2">"watch-webpack-dev"</span> <span class="p">]</span> <span class="p">}</span></code></pre></figure>

<p><b>Note</b> Webpack task runner cannot be used to build the Angular webpack application as it uses the wrong options and cannot be used to do a production build due to the ngc.</p>

<h3 id="webpack-sass">Webpack SASS</h3>

<p><a href="http://sass-lang.com/">SASS</a> is used to style the SPA application. The SASS files can be built using the SASS. Webpack can build all the styles inline or as an external file, depending on your Webpack config.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="nl">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">scss$/</span><span class="p">,</span>
  <span class="nx">exclude</span><span class="err">:</span> <span class="o">/</span><span class="nx">node_modules</span><span class="o">/</span><span class="p">,</span>
  <span class="nx">loaders</span><span class="err">:</span> <span class="p">[</span><span class="s2">"style"</span><span class="p">,</span> <span class="s2">"css"</span><span class="p">,</span> <span class="s2">"sass"</span><span class="p">]</span>
<span class="p">},</span></code></pre></figure>

<p>See: <a href="https://damienbod.com/2016/10/14/using-sass-with-webpack-angular2-and-visual-studio/">https://damienbod.com/2016/10/14/using-sass-with-webpack-angular2-and-visual-studio/</a></p>

<h3 id="webpack-clean">Webpack Clean</h3>

<p><a href="https://github.com/johnagan/clean-webpack-plugin/">clean-webpack-plugin</a> is used to clean up the deployment folder inside the wwwroot. This ensures that the application uses the latest files.</p>

<p>The clean task can be configured as follows:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">CleanWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'clean-webpack-plugin'</span><span class="p">);</span></code></pre></figure>

<p>And used in Webpack.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js">  <span class="k">new</span> <span class="nx">CleanWebpackPlugin</span><span class="p">([</span><span class="s1">'./wwwroot/dist'</span><span class="p">]),</span></code></pre></figure>

<h2 id="angular-component-files">Angular component files</h2>

<p>Note: require cannot be used because AoT does not work with this.</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">Thing</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'./../../../models/thing'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">TestDataService</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'./../../../services/testDataService'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">OnInit</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>

<span class="err">@</span><span class="nx">Component</span><span class="p">({</span>
    <span class="na">selector</span><span class="p">:</span> <span class="s1">'home-component'</span><span class="p">,</span>
    <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'home.component.html'</span>
<span class="p">})</span>

<span class="k">export</span> <span class="kr">class</span> <span class="nx">HomeComponent</span> <span class="k">implements</span> <span class="nx">OnInit</span> <span class="p">{</span>

    <span class="k">public</span> <span class="nx">message</span><span class="err">:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="k">public</span> <span class="nx">things</span><span class="err">:</span> <span class="nx">Thing</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">public</span> <span class="nx">thing</span><span class="err">:</span> <span class="nx">Thing</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Thing</span><span class="p">();</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">_dataService</span><span class="err">:</span> <span class="nx">TestDataService</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">message</span> <span class="o">=</span> <span class="s2">"Things from the ASP.NET Core API"</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nx">ngOnInit</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">getAllThings</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">addThing</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_dataService</span>
            <span class="p">.</span><span class="nx">Add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">thing</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">subscribe</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">getAllThings</span><span class="p">();</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">thing</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Thing</span><span class="p">();</span>
            <span class="p">},</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
            <span class="p">});</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">deleteThing</span><span class="p">(</span><span class="na">thing</span><span class="p">:</span> <span class="nx">Thing</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_dataService</span>
            <span class="p">.</span><span class="nx">Delete</span><span class="p">(</span><span class="nx">thing</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">subscribe</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">getAllThings</span><span class="p">();</span>
            <span class="p">},</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
            <span class="p">});</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="nx">getAllThings</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_dataService</span>
            <span class="p">.</span><span class="nx">GetAll</span><span class="p">()</span>
            <span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span>
            <span class="nx">data</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">things</span> <span class="o">=</span> <span class="nx">data</span><span class="p">,</span>
            <span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">),</span>
            <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Get all complete'</span><span class="p">)</span>
            <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h2 id="tslint-file">tslint file</h2>

<p><a href="https://github.com/damienbod/AngularWebpackVisualStudio/blob/master/src/AngularWebpackVisualStudio/tslint.json">https://github.com/damienbod/AngularWebpackVisualStudio/blob/master/src/AngularWebpackVisualStudio/tslint.json</a></p>

<h2 id="the-aspnet-core-api">The ASP.NET Core API</h2>

<p>The ASP.NET Core API is quite small and tiny. It just provides a demo CRUD service.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Angular2WebpackVisualStudio.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Angular2WebpackVisualStudio.Repositories.Things</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.JsonPatch</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Angular2WebpackVisualStudio.Controller</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ThingsController</span> <span class="p">:</span> <span class="n">Microsoft</span><span class="p">.</span><span class="n">AspNetCore</span><span class="p">.</span><span class="n">Mvc</span><span class="p">.</span><span class="n">Controller</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IThingsRepository</span> <span class="n">_thingsRepository</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">ThingsController</span><span class="p">(</span><span class="n">IThingsRepository</span> <span class="n">thingsRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_thingsRepository</span> <span class="p">=</span> <span class="n">thingsRepository</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Get</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">_thingsRepository</span><span class="p">.</span><span class="nf">GetAll</span><span class="p">());</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Add</span><span class="p">([</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">Thing</span> <span class="n">thing</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">thing</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">ModelState</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">Thing</span> <span class="n">newThing</span> <span class="p">=</span> <span class="n">_thingsRepository</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">thing</span><span class="p">);</span>

            <span class="k">return</span> <span class="nf">CreatedAtRoute</span><span class="p">(</span><span class="s">"GetSingleThing"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">newThing</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">newThing</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpPatch</span><span class="p">(</span><span class="s">"{id:int}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">PartiallyUpdate</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="p">[</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">JsonPatchDocument</span><span class="p">&lt;</span><span class="n">Thing</span><span class="p">&gt;</span> <span class="n">patchDoc</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">patchDoc</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">Thing</span> <span class="n">existingEntity</span> <span class="p">=</span> <span class="n">_thingsRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">existingEntity</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">Thing</span> <span class="n">thing</span> <span class="p">=</span> <span class="n">existingEntity</span><span class="p">;</span>
            <span class="n">patchDoc</span><span class="p">.</span><span class="nf">ApplyTo</span><span class="p">(</span><span class="n">thing</span><span class="p">,</span> <span class="n">ModelState</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">ModelState</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">Thing</span> <span class="n">updatedThing</span> <span class="p">=</span> <span class="n">_thingsRepository</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">thing</span><span class="p">);</span>

            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">updatedThing</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"{id:int}"</span><span class="p">,</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">"GetSingleThing"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Single</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Thing</span> <span class="n">thing</span> <span class="p">=</span> <span class="n">_thingsRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">thing</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">thing</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="n">HttpDelete</span><span class="p">]</span>
        <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"{id:int}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Remove</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Thing</span> <span class="n">thing</span> <span class="p">=</span> <span class="n">_thingsRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">thing</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_thingsRepository</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="n">HttpPut</span><span class="p">]</span>
        <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"{id:int}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Update</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="p">[</span><span class="n">FromBody</span><span class="p">]</span><span class="n">Thing</span> <span class="n">thing</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">thingToCheck</span> <span class="p">=</span> <span class="n">_thingsRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">thingToCheck</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">thing</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="s">"Ids do not match"</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">ModelState</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">Thing</span> <span class="n">updatedThing</span> <span class="p">=</span> <span class="n">_thingsRepository</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">thing</span><span class="p">);</span>

            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">updatedThing</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h3 id="the-angular-http-service">The Angular Http-Service</h3>

<p>Note that in a normal environment, you should always return the typed classes and never the plain HTTP response like here. This application only has strings to return, and this is enough for the demo.</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">Thing</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'./../models/thing'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Injectable</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Http</span><span class="p">,</span> <span class="nx">Response</span><span class="p">,</span> <span class="nx">Headers</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/http'</span><span class="p">;</span>
<span class="k">import</span> <span class="s1">'rxjs/add/operator/map'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Observable</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'rxjs/Observable'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Configuration</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../app.constants'</span><span class="p">;</span>

<span class="err">@</span><span class="nx">Injectable</span><span class="p">()</span>
<span class="k">export</span> <span class="kr">class</span> <span class="nx">TestDataService</span> <span class="p">{</span>

    <span class="k">private</span> <span class="nx">actionUrl</span><span class="err">:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="k">private</span> <span class="nx">headers</span><span class="err">:</span> <span class="nx">Headers</span><span class="p">;</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">_http</span><span class="err">:</span> <span class="nx">Http</span><span class="p">,</span> <span class="k">private</span> <span class="nx">_configuration</span><span class="err">:</span> <span class="nx">Configuration</span><span class="p">)</span> <span class="p">{</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span> <span class="o">=</span> <span class="nx">_configuration</span><span class="p">.</span><span class="nx">Server</span> <span class="o">+</span> <span class="s1">'api/things/'</span><span class="p">;</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Headers</span><span class="p">();</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'Content-Type'</span><span class="p">,</span> <span class="s1">'application/json'</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'Accept'</span><span class="p">,</span> <span class="s1">'application/json'</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">GetAll</span> <span class="o">=</span> <span class="p">()</span><span class="err">:</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">Thing</span><span class="p">[]</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span><span class="p">).</span><span class="nx">map</span><span class="p">((</span><span class="na">response</span><span class="p">:</span> <span class="nx">Response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">Thing</span><span class="p">[]</span><span class="o">&gt;</span><span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">GetSingle</span> <span class="o">=</span> <span class="p">(</span><span class="na">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">Thing</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span> <span class="o">+</span> <span class="nx">id</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">Thing</span><span class="o">&gt;</span><span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">Add</span> <span class="o">=</span> <span class="p">(</span><span class="na">thingToAdd</span><span class="p">:</span> <span class="nx">Thing</span><span class="p">):</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">Thing</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">toAdd</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">name</span><span class="p">:</span> <span class="nx">thingToAdd</span><span class="p">.</span><span class="nx">name</span> <span class="p">});</span>

        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span><span class="p">,</span> <span class="nx">toAdd</span><span class="p">,</span> <span class="p">{</span> <span class="na">headers</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">headers</span> <span class="p">}).</span><span class="nx">map</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">Thing</span><span class="o">&gt;</span><span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">Update</span> <span class="o">=</span> <span class="p">(</span><span class="na">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="na">itemToUpdate</span><span class="p">:</span> <span class="kr">any</span><span class="p">):</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">Thing</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_http</span>
            <span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span> <span class="o">+</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">itemToUpdate</span><span class="p">),</span> <span class="p">{</span> <span class="na">headers</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">headers</span> <span class="p">})</span>
            <span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">Thing</span><span class="o">&gt;</span><span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">Delete</span> <span class="o">=</span> <span class="p">(</span><span class="na">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_http</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span> <span class="o">+</span> <span class="nx">id</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h2 id="notes">Notes</h2>

<p>The Webpack configuration could also build all of the scss and css files to a separate app.css or app.”hash”.css which could be loaded as a single file in the distribution. Some of the vendor js and css could also be loaded directly in the html header using the index.html file and not included in the Webpack build.</p>

<p>If you are building both the client application and the server application in separate projects, you could also consider angular-cli of angular2-webpack for the client application.</p>

<p>Debugging the Angular in Visual Studio with breakpoints is not possible with this setup. The SPA app can be debugged in chrome.</p>

<h2 id="links">Links</h2>

<p><a href="https://github.com/preboot/angular2-webpack">https://github.com/preboot/angular2-webpack</a></p>

<p><a href="https://webpack.github.io/docs/">https://webpack.github.io/docs/</a></p>

<p><a href="https://github.com/jtangelder/sass-loader">https://github.com/jtangelder/sass-loader</a></p>

<p><a href="https://github.com/petehunt/webpack-howto/blob/master/README.md">https://github.com/petehunt/webpack-howto/blob/master/README.md</a></p>

<p><a href="http://blog.mgechev.com/2016/06/26/tree-shaking-angular2-production-build-rollup-javascript/">http://blog.mgechev.com/2016/06/26/tree-shaking-angular2-production-build-rollup-javascript/</a></p>

<p><a href="https://angular.io/docs/ts/latest/guide/webpack.html">https://angular.io/docs/ts/latest/guide/webpack.html</a></p>

<p><a href="http://blog.thoughtram.io/angular/2016/06/08/component-relative-paths-in-angular-2.html">http://blog.thoughtram.io/angular/2016/06/08/component-relative-paths-in-angular-2.html</a></p>

<p><a href="http://sass-lang.com/">http://sass-lang.com/</a></p>

<p><a href="https://marketplace.visualstudio.com/items?itemName=MadsKristensen.NPMTaskRunner">https://marketplace.visualstudio.com/items?itemName=MadsKristensen.NPMTaskRunner</a></p>

<p><a href="https://blogs.msdn.microsoft.com/webdev/2015/03/19/customize-external-web-tools-in-visual-studio-2015/">https://blogs.msdn.microsoft.com/webdev/2015/03/19/customize-external-web-tools-in-visual-studio-2015/</a></p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2016/06/12/asp-net-core-angular-2-webpack-visual-studio</wp:post_id>
        <wp:post_date>2016-06-12T22:10:00+02:00</wp:post_date>
        <wp:post_date_gmt>2016-06-12T22:10:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="angular"><![CDATA[["angular",]]></category>
        
          <category domain="post_tag" nicename="aspnet"><![CDATA["aspnet",]]></category>
        
          <category domain="post_tag" nicename="core"><![CDATA["core",]]></category>
        
          <category domain="post_tag" nicename="webpack"><![CDATA["webpack"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Kurs - Frontend-Entwicklung mit AngularJS]]></title>
        <link>http://offering.solutions/blog/articles/2016/05/25/kurs-frontend-entwicklung-mit-angularjs/</link>
        <pubDate>2016-05-25T18:30:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In diesem Blogpost stelle ich meinen Kurs: <em>Frontend-Entwicklung mit AngularJS</em> vor.</p>

<p><img src="/assets/images/Angular_With_Digicomp.png" alt="Angular_With_Digicomp" /></p>

<p>Anfang dieses Jahres kam Digicomp auf mich zu und hat mich gefragt ob ich neben meinen Talks auch mal einen Kurs geben möchte. Natürlich habe ich nicht “Nein” gesagt.</p>

<p>Ich began Unterlagen zu schreiben und am 19. und 20.05. hielt ich einen AngularJs Kurs zum ersten Mal.</p>

<p><a href="https://www.digicomp.ch/weiterbildung/softwareentwicklungs-trainings/web-und-mobile-app-entwicklung/webentwicklung/javascript-kurse-und-workshops/frontend-entwicklung-mit-angularjs">Digicomp Kurs</a></p>

<p>In dem Kurs werden Controller und Databinding behandelt genauso wie Expressions, Filter, Direktiven, Events, Services, Forms und Validation, Routing und das Testing. Dazu schauen wir uns Builds mit dem Task-Runner <em>Gulp</em> an. <em>NPM</em> ist natürlich auch mit dabei. Jedes Kapitel bekommt ein eigenes Hands-On, damit die Kursteilnehmer das gelernte auch anwenden können.</p>

<p>Am Ende des Kurses habe ich mir als Ziel gesetzt mit den Teilnehmern ein Review einer kleinen Beispielapplikation zu machen, die all das behandelt, was zuvor im Kurs gelernt und behandelt wurde.</p>

<p><a href="https://github.com/FabianGosebrink/ASPNET-ASPNETCore-AngularJS-Angular">GitHub: Beispielapplikation</a></p>

<p>Zum Schluss können die Teilnehmer Feedback geben und den Kurs bewerten.</p>

<p>Im Feedback wurde der Kurs insgesamt mit 96/100 Punkten bewertet!</p>

<p>“AngularJs-Wissen vom Feinsten”</p>

<p>“Sehr guter Trainer”</p>

<p>“Der Kurs hat viel Spass gemacht”</p>

<p>“Das Wissen wurde ausführlich vermittelt”</p>

<p>“Viel gelernt in zwei Tagen”</p>

<p>Mir hat der Kurs sehr sehr viel Spass gemacht und ich würde mich freuen noch mehr davon zu halten.</p>

<p>Für (An)Fragen über (In-House) Kurse zur modernen Web-Entwicklung: <a href="http://fabian-gosebrink.com/">Kontakt via Homepage</a></p>

<p>Gruss</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2016/05/25/kurs-frontend-entwicklung-mit-angularjs</wp:post_id>
        <wp:post_date>2016-05-25T18:30:00+02:00</wp:post_date>
        <wp:post_date_gmt>2016-05-25T18:30:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="angularjs"><![CDATA[["angularjs",]]></category>
        
          <category domain="post_tag" nicename="courses"><![CDATA["courses",]]></category>
        
          <category domain="post_tag" nicename="training"><![CDATA["training",]]></category>
        
          <category domain="post_tag" nicename="speaking"><![CDATA["speaking",]]></category>
        
          <category domain="post_tag" nicename="talks"><![CDATA["talks"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[How you can organise gulp in your applications]]></title>
        <link>http://offering.solutions/blog/articles/2016/05/16/how-you-can-organise-gulp-in-your-applications/</link>
        <pubDate>2016-05-16T08:30:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this blogpost I want to show one possibility of organising your gulp tasks in a way that you as a developer can find them quickly and print them to the console in an ordered way.</p>

<blockquote>
  <p>I have taken all these examples from my cross platform examples on <a href="https://github.com/FabianGosebrink?tab=repositories">GitHub</a>. Especially from <a href="https://github.com/FabianGosebrink/Foodchooser-ASPNET-Angular-Cross-Platform">Foodchooser</a>.</p>
</blockquote>

<h2 id="motivation">Motivation</h2>

<p>No matter what you do with web development today you will have to have a task runner when it comes to distribute to a customer at the latest.</p>

<p>Gulp is one task runner which it makes easy to fulfill all then tasks like concatination and uglify-things we actually need to reduce request and optimize our performance etc.</p>

<p>But we as developers have also different tasks to face: We want a web application in dev-mode for our development environment. But we also want to have a distribution-ready environment for our staging and test environments etc.</p>

<p>When you are heading towards cross platfrom development this thing is even more important. Because your outputs differ from a webpage only with an additional executable (electron) and mobile apps for your phones.</p>

<h2 id="organising-your-files">Organising your files</h2>

<h3 id="gulp-and-its-config">Gulp and its config</h3>

<p>I think the best practice here is to seperate gulp itself on the one hand and the paths to the files and folders on the other in different files.</p>

<p>The <code class="highlighter-rouge">gulpfile.js</code> only contains the tasks whereas a file named like <code class="highlighter-rouge">gulp.config.js</code> is containing all your files, (temp-)paths, … .</p>

<p><img src="/assets/articles/wp-content/uploads/2016/05/gulpAndConfigFile.png" alt="How you can organise gulp in your applications" title="gulptask folder" /></p>

<p>You can include your config file in the gulpfile like this:</p>

<p><code class="highlighter-rouge">var buildConfig = require('./gulp.config');</code></p>

<p>If the files are on the same level.</p>

<p>The <code class="highlighter-rouge">gulp.config.js</code> can look like this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">general</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">appName</span><span class="p">:</span> <span class="s2">"FoodChooserAppAngular2"</span><span class="p">,</span>
        <span class="na">rootFolder</span><span class="p">:</span> <span class="s2">"app/"</span><span class="p">,</span>
        <span class="na">indexHtml</span><span class="p">:</span> <span class="s2">"./index.html"</span>
    <span class="p">},</span>
    <span class="na">sources</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">sourceFolder</span><span class="p">:</span> <span class="s2">"src/"</span><span class="p">,</span>
        <span class="na">allAppJsFiles</span><span class="p">:</span> <span class="p">[</span>
            <span class="s2">"./app/*.js"</span><span class="p">,</span>
            <span class="s2">"./app/*/**/*.js"</span><span class="p">,</span>
        <span class="p">],</span>
        <span class="na">allAppHtmlFiles</span><span class="p">:</span> <span class="p">[</span>
            <span class="s2">"./app/**/*.html"</span>
        <span class="p">],</span>
        <span class="na">allVendorJsFiles</span><span class="p">:</span> <span class="p">[</span>
            <span class="s2">"./js/*.js"</span>
        <span class="p">],</span>
        <span class="na">allAppCssFiles</span><span class="p">:</span> <span class="p">[</span>
            <span class="s2">"./node_modules/bootstrap/dist/css/bootstrap.min.css"</span><span class="p">,</span>
            <span class="s2">"./css/*.css"</span>
        <span class="p">],</span>
        <span class="na">allAppImgFiles</span><span class="p">:</span> <span class="p">[</span>
            <span class="s2">"./img/*.*"</span><span class="p">,</span>
            <span class="s2">"./img/windows/*.*"</span>
        <span class="p">],</span>
        <span class="na">vendorScripts</span><span class="p">:</span> <span class="p">[</span>
            <span class="s2">"node_modules/zone.js/dist/zone.js"</span><span class="p">,</span>
            <span class="s2">"node_modules/reflect-metadata/Reflect.js"</span><span class="p">,</span>
            <span class="s2">"node_modules/systemjs/dist/system.src.js"</span><span class="p">,</span>
            <span class="s2">"node_modules/jquery/dist/jquery.js"</span><span class="p">,</span>
            <span class="s2">"node_modules/bootstrap/dist/js/bootstrap.js"</span>
        <span class="p">],</span>
        <span class="c1">// ...</span>
    <span class="p">},</span>
    <span class="c1">// ...</span>
    <span class="na">targets</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">webAppOutputPath</span><span class="p">:</span> <span class="s2">"../.dist/webapp/"</span><span class="p">,</span>
        <span class="na">electronOutputPath</span><span class="p">:</span> <span class="s2">"../.dist/electron/"</span><span class="p">,</span>
        <span class="na">cordovaOutputPath</span><span class="p">:</span> <span class="s2">"../.dist/cordova/"</span><span class="p">,</span>
<span class="p">};</span></code></pre></figure>

<p>It is only containing all the files, paths and general information you want to use.</p>

<p>The gulp-file itself is now only containing the tasks and is consuming the config file.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">'web-copy-index-to-webapp-folder'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="nx">buildConfig</span><span class="p">.</span><span class="nx">general</span><span class="p">.</span><span class="nx">indexHtml</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="nx">buildConfig</span><span class="p">.</span><span class="nx">targets</span><span class="p">.</span><span class="nx">webAppOutputPath</span><span class="p">));</span>
<span class="p">});</span></code></pre></figure>

<p>This makes the gulp tasks more generic.</p>

<h3 id="tasks-in-folders">Tasks in folders</h3>

<p>I’ve seen many ways how people organise the gulp tasks but it turned out for me it was the best way to have a folder called “gulpTasks” (or similar) where I put all my gulptasks in. I’ve seen this on many other repositories and also on conferences etc. It’s always good to have a folder encapsulating all your gulpTasks like this:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/05/folderGulpTasks.png" alt="alt text" title="gulptask folder" /></p>

<p>Here I seperate all the different systems I want to have an output for.</p>

<p>But that also means, that the task seen above is moving to the <code class="highlighter-rouge">web.js</code> file.</p>

<p>How do I build up the “architecture” for my gulp-tasks now?</p>

<h2 id="manage-your-tasks">Manage your tasks</h2>

<p>Well we have to go one step back before clarifying how to solve this:</p>

<p>Getting an app ready for distribution or even for development purposes is more than one task. Although I know the task-dependency-system in gulp where all the dependent tasks are executed in parallel before the called task is going to run I think it’s easier to run the things in sequence. It’s easier to read and easier to maintain IMHO.</p>

<p>Therefore you need to install a <code class="highlighter-rouge">run-sequence</code>-plugin available <a href="https://www.npmjs.com/package/run-sequence">here</a>. With this you can divide your tasks and seperate the responsibilities in your web gulpfile (e.g.) like this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'gulp'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">runSeq</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'run-sequence'</span><span class="p">);</span>

 <span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">'build:web:prod'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">runSeq</span><span class="p">(</span>
        <span class="s1">'web-clean-webapp'</span><span class="p">,</span>
        <span class="s1">'web-copy-index-to-webapp-folder'</span><span class="p">,</span>
        <span class="s1">'web-copy-images-to-webapp-folder'</span><span class="p">,</span>
        <span class="s1">'web-copy-css-to-webapp-folder'</span><span class="p">,</span>
        <span class="s1">'web-concat-uglify-and-copy-vendor-scripts'</span><span class="p">,</span>
        <span class="c1">// all the other tasks</span>
        <span class="nx">done</span><span class="p">);</span>
<span class="p">});</span></code></pre></figure>

<p>I think this is a very good and clear documentation of what is done if I call the main task.</p>

<blockquote>
  <p>As a tip: I do also use this for “debugging” when something is going wrong. I can easily comment out the single tasks and the which one is causing trouble</p>
</blockquote>

<p>What we also did in this step is: We defined a <em>main task</em>! This task can be referenced and executed from the main gulp file.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">require</span><span class="p">(</span><span class="s1">'./gulpTasks/web'</span><span class="p">);</span>
<span class="c1">//...</span>
<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">'build:all'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">runSeq</span><span class="p">(</span>
        <span class="s1">'build:web:prod'</span><span class="p">,</span>
        <span class="c1">// maybe other main build tasks</span>
        <span class="nx">done</span><span class="p">);</span>
<span class="p">});</span></code></pre></figure>

<p>You can repeat that for all your files and main tasks.</p>

<blockquote>
  <p>I recommend to have 2 main tasks per file at the maximum: Dev and Prod.</p>
</blockquote>

<p>So here we are building a small architecture and get some order in our tasks-, file- and folder-structure.</p>

<h3 id="the-default-tasks">The default tasks</h3>

<p>Often I see that the default task is executing logic. It does something. And when the default task is doing something it’s most likely something like a main task. Like “build-all” or something?</p>

<p>Let’s picture the situation you cloned a repository and you just want to get started. Thats all you want to do. First step: “Let me see what you have got for me”.</p>

<p>If you run <code class="highlighter-rouge">gulp</code> which executes the default task and something starts to run and I as a developer have NO IDEA what exactly runs there - that scares me.</p>

<p>Wouldn’t it be better to have a kind of more defensive behaviour? This is why I prefer to list all the tasks the repo offers to the delevoper. And the developer can then decide which one he wants to execute.</p>

<p>But with this option I mentioned above we have <strong>many</strong> small tasks which can be executed.</p>

<p>This is why I do name the tasks in a special way:</p>

<p>All main tasks are divided with a “:”, all child tasks with “-“.</p>

<p>For the task-listing feature there is also an npm package available <a href="https://www.npmjs.com/package/gulp-task-listing">here</a>.</p>

<p>“gulp-task-listing - Adds the ability to provide a task listing for your gulpfile”</p>

<p>You can define filters to define which one is a main task and which one is a child task.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">taskListing</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'gulp-task-listing'</span><span class="p">);</span>
<span class="c1">//...</span>
<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">'help'</span><span class="p">,</span> <span class="nx">taskListing</span><span class="p">.</span><span class="nx">withFilters</span><span class="p">(</span><span class="sr">/-/</span><span class="p">));</span></code></pre></figure>

<p>Everything we need to do now is to point the default task on this help task to list all the tasks:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">taskListing</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'gulp-task-listing'</span><span class="p">);</span>
<span class="c1">//...</span>
<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">'default'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'help'</span><span class="p">]);</span>
<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">'help'</span><span class="p">,</span> <span class="nx">taskListing</span><span class="p">.</span><span class="nx">withFilters</span><span class="p">(</span><span class="sr">/-/</span><span class="p">));</span></code></pre></figure>

<p>Which brings the following output:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/05/gulpTasks.png" alt="tasks output" title="gulp task output" /></p>

<h2 id="further-steps">Further steps</h2>

<h3 id="commonjs">common.js</h3>

<p>One possibility would be going along and define some “main”-tasks and be more generic which can be executed from the <code class="highlighter-rouge">web.js</code> and other files. Like a <code class="highlighter-rouge">common.js</code> containing generic tasks like:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">copySourcesTo</span><span class="p">(</span><span class="nx">targetFolder</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="nx">getSourceFiles</span><span class="p">(</span><span class="nx">buildConfig</span><span class="p">.</span><span class="nx">source</span><span class="p">.</span><span class="nx">folder</span><span class="p">),</span> <span class="p">{</span>
        <span class="na">base</span><span class="p">:</span> <span class="nx">buildConfig</span><span class="p">.</span><span class="nx">source</span><span class="p">.</span><span class="nx">folder</span>
    <span class="p">})</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="nx">targetFolder</span><span class="p">));</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">copyFromTo</span><span class="p">(</span><span class="nx">sourceFolder</span><span class="p">,</span> <span class="nx">targetFolder</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">sourceFolder</span><span class="p">,</span> <span class="s1">'**'</span><span class="p">,</span> <span class="s1">'*.*'</span><span class="p">))</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="nx">targetFolder</span><span class="p">));</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">cleanTemp</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">del</span><span class="p">(</span><span class="nx">buildConfig</span><span class="p">.</span><span class="nx">targets</span><span class="p">.</span><span class="nx">tempFolder</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="nx">done</span><span class="p">();</span>
    <span class="p">});</span>
<span class="p">}</span>
<span class="c1">//...</span></code></pre></figure>

<p>For tasks which are all the same in every step. Perhaps this can be useful</p>

<blockquote>
  <p>I did this in this repository <a href="https://github.com/FabianGosebrink/Foodchooser-ASPNET-Angular-Cross-Platform">here</a></p>
</blockquote>

<h3 id="prefixes">Prefixes</h3>

<p>You could also prefix your private tasks with a “[private]-…” tag or something to clearify in the task overview that this task should be private.</p>

<h2 id="conclusion">Conclusion</h2>

<p>I hope with this post I could give you a small idea of how to treat your gulp files and tasks in order. Keep them seperated and let them have single tasks to do. I think with this you can keep also a big system organised.</p>

<h2 id="links">Links</h2>

<p><a href="https://github.com/FabianGosebrink/ASPNET-Foodchooser-Cross-Platform-Angular2/">https://github.com/FabianGosebrink/ASPNET-Foodchooser-Cross-Platform-Angular2</a></p>

<p><a href="https://github.com/FabianGosebrink/ASPNET-WebAPI-AngularJs-XPlatform-Example">https://github.com/FabianGosebrink/ASPNET-WebAPI-AngularJs-XPlatform-Example</a></p>

<p><a href="https://www.npmjs.com/package/run-sequence">https://www.npmjs.com/package/run-sequence</a></p>

<p><a href="https://www.npmjs.com/package/gulp-task-listing">https://www.npmjs.com/package/gulp-task-listing</a></p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2016/05/16/how-you-can-organise-gulp-in-your-applications</wp:post_id>
        <wp:post_date>2016-05-16T08:30:00+02:00</wp:post_date>
        <wp:post_date_gmt>2016-05-16T08:30:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="gulp"><![CDATA[["gulp",]]></category>
        
          <category domain="post_tag" nicename="javascript"><![CDATA["javascript"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Writing custom validators in Angular]]></title>
        <link>http://offering.solutions/blog/articles/2016/05/10/writing-custom-validators-in-angular-2/</link>
        <pubDate>2016-05-10T17:42:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this blogpost I want to show you how you are writing custom validators in Angular.</p>

<p><a href="https://github.com/OfferingSolutions/Offering-Solutions-Angular-Course/tree/master/Angular-Course/09_Forms/end/app/validators">https://github.com/OfferingSolutions/Offering-Solutions-Angular-Course/tree/master/Angular-Course/09_Forms/end/app/validators</a></p>

<blockquote>
  <p>Updated to new Syntax</p>
</blockquote>

<p>When dealing with forms in Angular you can use the build-in validators like: required, minLength or maxLength, pattern… . Sooner or later you need a custom validator fulfilling a special validation.</p>

<p>Let’s have a form first:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;form</span> <span class="err">#</span><span class="na">f=</span><span class="s">"ngForm"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"calories"</span><span class="nt">&gt;</span>Calories<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"calories"</span> <span class="na">placeholder=</span><span class="s">"Calories"</span> <span class="err">[(</span><span class="na">ngModel</span><span class="err">)]="</span><span class="na">foodItem</span><span class="err">.</span><span class="na">calories</span><span class="err">"</span>
             <span class="na">name=</span><span class="s">"calories"</span><span class="nt">&gt;</span>
   
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">class=</span><span class="s">"btn btn-default"</span> <span class="err">(</span><span class="na">click</span><span class="err">)="</span><span class="na">AddOrUpdateFood</span><span class="err">()"</span> <span class="err">[</span><span class="na">disabled</span><span class="err">]="!</span><span class="na">f</span><span class="err">?.</span><span class="na">valid</span><span class="err">"</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/form&gt;</span></code></pre></figure>

<p>We see a form which has a variable “f” representing the form with which we can ask for the current state. We also have an input control in which we can add a number - calories in this case.</p>

<blockquote>
  <p>I know that we could change the type of the input to number but in this post we want to check if whether the things the user typed are number or not.</p>
</blockquote>

<p>So lets write a validator which exactly checks for that:</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">Directive</span><span class="p">,</span> <span class="nx">forwardRef</span><span class="p">,</span> <span class="nx">Attribute</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Validator</span><span class="p">,</span> <span class="nx">FormControl</span><span class="p">,</span> <span class="nx">NG_VALIDATORS</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/forms'</span><span class="p">;</span>

<span class="err">@</span><span class="nx">Directive</span><span class="p">({</span>
    <span class="na">selector</span><span class="p">:</span> <span class="s1">'[isNumber][formControlName],[isNumber][formControl],[isNumber][ngModel]'</span><span class="p">,</span>
    <span class="na">providers</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span> <span class="na">provide</span><span class="p">:</span> <span class="nx">NG_VALIDATORS</span><span class="p">,</span> <span class="na">useExisting</span><span class="p">:</span> <span class="nx">forwardRef</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">IsNumberValidator</span><span class="p">),</span> <span class="na">multi</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}</span>
    <span class="p">]</span>
<span class="p">})</span>

<span class="k">export</span> <span class="kr">class</span> <span class="nx">IsNumberValidator</span> <span class="k">implements</span> <span class="nx">Validator</span> <span class="p">{</span>

    <span class="nx">validate</span><span class="p">(</span><span class="nx">c</span><span class="err">:</span> <span class="nx">FormControl</span><span class="p">)</span><span class="err">:</span> <span class="p">{</span> <span class="p">[</span><span class="nx">key</span><span class="err">:</span> <span class="kr">string</span><span class="p">]</span><span class="err">:</span> <span class="kr">any</span> <span class="p">}</span> <span class="p">{</span>

        <span class="k">if</span> <span class="p">(</span><span class="nb">isNaN</span><span class="p">(</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">value</span><span class="p">))</span> <span class="p">{</span>
            <span class="c1">// console.log(c.value + " is not a number");</span>
            <span class="k">return</span> <span class="p">{</span>
                <span class="na">isNumber</span><span class="p">:</span>
                <span class="p">{</span>
                    <span class="na">valid</span><span class="p">:</span> <span class="kc">false</span>
                <span class="p">}</span>
            <span class="p">};</span>
        <span class="p">}</span>

        <span class="c1">// console.log(c.value + " is a number");</span>
        <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>This validator is named “IsNumberValidator” and has a function with a FormControl as a parameter. After the imports we define a directive here and adding the selectors we want. The “providers” let us extend the build-in NG_VALIDATORS and add our new validator. The class implements the validator class with the “validate”-Method which takes a FormControl and returns null if everything is okay and not null if the validation fails.</p>

<p>Before we can use it in our form we have to include it in our module. I built a shared module which I include in my app.module.</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">NgModule</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">BrowserModule</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/platform-browser'</span><span class="p">;</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">IsNumberValidator</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../validators/isNumber.validator'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">IsInRangeValidator</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../validators/isInRange.validator'</span><span class="p">;</span>

<span class="err">@</span><span class="nx">NgModule</span><span class="p">({</span>
    <span class="na">imports</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// Modules</span>
        <span class="nx">BrowserModule</span>
    <span class="p">],</span>

    <span class="na">declarations</span><span class="p">:</span> <span class="p">[</span>

        <span class="c1">// Components &amp;amp; directives</span>

        <span class="nx">IsNumberValidator</span><span class="p">,</span>
         <span class="nx">IsInRangeValidator</span>
    <span class="p">],</span>

    <span class="na">providers</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// Services</span>
    <span class="p">],</span>

    <span class="na">exports</span><span class="p">:</span> <span class="p">[</span>
        <span class="nx">IsNumberValidator</span><span class="p">,</span>
        <span class="nx">IsInRangeValidator</span>
    <span class="p">]</span>
<span class="p">})</span>

<span class="k">export</span> <span class="kr">class</span> <span class="nx">SharedModule</span> <span class="p">{</span> <span class="p">}</span> </code></pre></figure>

<p>and in our app.module:</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="c1">// ...</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">SharedModule</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'./modules/shared.module'</span><span class="p">;</span>


<span class="err">@</span><span class="nx">NgModule</span><span class="p">({</span>
    <span class="na">imports</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// ...</span>
        <span class="nx">SharedModule</span>
    <span class="p">],</span>

    <span class="na">declarations</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// ...</span>
    <span class="p">],</span>

    <span class="na">providers</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// ...</span>
    <span class="p">],</span>

    <span class="na">bootstrap</span><span class="p">:</span> <span class="p">[</span><span class="nx">AppComponent</span><span class="p">]</span>
<span class="p">})</span>

<span class="k">export</span> <span class="kr">class</span> <span class="nx">AppModule</span> <span class="p">{</span> <span class="p">}</span> </code></pre></figure>

<p>We can use it in the form like</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;form</span> <span class="err">#</span><span class="na">f=</span><span class="s">"ngForm"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"calories"</span><span class="nt">&gt;</span>Calories<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"calories"</span> <span class="na">placeholder=</span><span class="s">"Calories"</span> <span class="err">[(</span><span class="na">ngModel</span><span class="err">)]="</span><span class="na">foodItem</span><span class="err">.</span><span class="na">calories</span><span class="err">"</span>
            <span class="na">isNumber</span> <span class="na">name=</span><span class="s">"calories"</span><span class="nt">&gt;</span>
   
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">class=</span><span class="s">"btn btn-default"</span> <span class="err">(</span><span class="na">click</span><span class="err">)="</span><span class="na">AddOrUpdateFood</span><span class="err">()"</span> <span class="err">[</span><span class="na">disabled</span><span class="err">]="!</span><span class="na">f</span><span class="err">?.</span><span class="na">valid</span><span class="err">"</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/form&gt;</span> </code></pre></figure>

<p>Here we add the validator to the input field of our form. It is only a directive so we can treat it this way like we did with every directive before.</p>

<p>So now the validator directive fires everytime a key is hit. We can now add a</p>

<p><code class="highlighter-rouge">... #calories="ngModel" ...</code></p>

<p>to the form and check if the variable we introduced is valid with</p>

<p><code class="highlighter-rouge">... calories.valid ...</code></p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;form</span> <span class="err">#</span><span class="na">f=</span><span class="s">"ngForm"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"calories"</span><span class="nt">&gt;</span>Calories<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"calories"</span> <span class="na">placeholder=</span><span class="s">"Calories"</span> <span class="err">[(</span><span class="na">ngModel</span><span class="err">)]="</span><span class="na">foodItem</span><span class="err">.</span><span class="na">calories</span><span class="err">"</span>
            <span class="na">isNumber</span> <span class="na">name=</span><span class="s">"calories"</span> <span class="err">#</span><span class="na">calories=</span><span class="s">"ngModel"</span><span class="nt">&gt;</span>
   
    <span class="nt">&lt;div</span> <span class="err">*</span><span class="na">ngIf=</span><span class="s">"!calories.valid"</span> <span class="na">class=</span><span class="s">"alert alert-danger"</span><span class="nt">&gt;</span>
            Field is not valid
        <span class="nt">&lt;/div&gt;</span>
   
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">class=</span><span class="s">"btn btn-default"</span> <span class="err">(</span><span class="na">click</span><span class="err">)="</span><span class="na">AddOrUpdateFood</span><span class="err">()"</span> <span class="err">[</span><span class="na">disabled</span><span class="err">]="!</span><span class="na">f</span><span class="err">?.</span><span class="na">valid</span><span class="err">"</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/form&gt;</span> </code></pre></figure>

<p>But it would be nice to show <em>specific</em> error messages to the users and not only if the filed is valid or not. Combining the variable with the dirty-check and our validator-naming we can show the user messages exactly to what was going wrong in the form.</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;form</span> <span class="err">#</span><span class="na">f=</span><span class="s">"ngForm"</span> <span class="na">novalidate</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"calories"</span><span class="nt">&gt;</span>Calories<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"calories"</span> <span class="na">placeholder=</span><span class="s">"Calories"</span> <span class="err">[(</span><span class="na">ngModel</span><span class="err">)]="</span><span class="na">currentFood</span><span class="err">.</span><span class="na">calories</span><span class="err">"</span> <span class="na">required</span>
            <span class="na">isNumber</span> <span class="na">name=</span><span class="s">"calories"</span> <span class="err">#</span><span class="na">calories=</span><span class="s">"ngModel"</span><span class="nt">&gt;</span> 
            
        <span class="nt">&lt;div</span> <span class="err">*</span><span class="na">ngIf=</span><span class="s">"calories.errors?.required &amp;amp;&amp;amp; (calories?.dirty &amp;amp;&amp;amp; !f.submitted)"</span> <span class="na">class=</span><span class="s">"alert alert-danger"</span><span class="nt">&gt;</span>
            *
        <span class="nt">&lt;/div&gt;</span>

        <span class="nt">&lt;div</span> <span class="err">*</span><span class="na">ngIf=</span><span class="s">"calories.errors?.isNumber &amp;amp;&amp;amp; (calories?.dirty &amp;amp;&amp;amp; !f.submitted)"</span> <span class="na">class=</span><span class="s">"alert alert-danger"</span><span class="nt">&gt;</span>
            Please enter a number in a valid range
        <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">class=</span><span class="s">"btn btn-default"</span> <span class="err">(</span><span class="na">click</span><span class="err">)="</span><span class="na">AddOrUpdateFood</span><span class="err">()"</span> <span class="err">[</span><span class="na">disabled</span><span class="err">]="!</span><span class="na">f</span><span class="err">?.</span><span class="na">valid</span><span class="err">"</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/form&gt;</span></code></pre></figure>

<p>And that’s basically it.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/05/Angular2CustomValidators.jpg" alt="Angular2CustomValidators" /></p>

<p>HTH</p>

<p>Regards
<a href="https://github.com/OfferingSolutions/Offering-Solutions-Angular-Course/tree/master/Angular-Course/09_Forms/end/app/validators">https://github.com/OfferingSolutions/Offering-Solutions-Angular-Course/tree/master/Angular-Course/09_Forms/end/app/validators</a></p>

<p><a href="http://blog.thoughtram.io/angular/2016/03/14/custom-validators-in-angular-2.html">http://blog.thoughtram.io/angular/2016/03/14/custom-validators-in-angular-2.html</a></p>

<p>Thanks to <a href="http://www.gutsch-online.de/">Jürgen Gutsch</a> for doing a review of this blogpost.</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2016/05/10/writing-custom-validators-in-angular-2</wp:post_id>
        <wp:post_date>2016-05-10T17:42:00+02:00</wp:post_date>
        <wp:post_date_gmt>2016-05-10T17:42:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="angular"><![CDATA[["angular",]]></category>
        
          <category domain="post_tag" nicename="customvalidation"><![CDATA["customvalidation"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Angular, ASP.NET WebAPI, Azure & Cordova, Cross Platform – My Private Hackathon Part 2]]></title>
        <link>http://offering.solutions/blog/articles/2016/04/26/angular-asp-net-webapi-azure-cordova-cross-platform-my-private-hackathon-part-2/</link>
        <pubDate>2016-04-26T10:05:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In the last <a href="http://offering.solutions/blog/articles/2016/04/19/angular-asp-net-webapi-azure-cordova-cross-platform-2/">blogpost</a>I lost a few words about the REST-API the FoodChooser is talking to. In this blog I want to talk about the clients I developed. This is: Angular, ASP.NET WebAPI, Azure &amp; Cordova, Cross Platform – My Private Hackathon Part 2.</p>

<p>Well I started coding an AngularJs 1.x Client with Typecript which is available here</p>

<p><a href="https://github.com/FabianGosebrink/ASPNET-Foodchooser-Cross-Platform-AngularJS">https://github.com/FabianGosebrink/ASPNET-Foodchooser-Cross-Platform-AngularJS</a></p>

<p>Of course I could not stop looking and digging into Angular. So I wrote this client too which is available here:</p>

<p><a href="https://github.com/FabianGosebrink/Foodchooser-ASPNET-Angular-Cross-Platform">https://github.com/FabianGosebrink/Foodchooser-ASPNET-Angular-Cross-Platform</a></p>

<p>Inside this blog I want to loose a few words about how I wrote them what the pitfalls were and how I came up with this solution.</p>

<blockquote>
  <p>I will only show Angular2 examples here because it’s the only client which is still maintained</p>
</blockquote>

<h3 id="architecture">Architecture</h3>

<p>The application is divieded into several components with its child components. Due to the fact that the application is not that big at all there is no huge hierarchy.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/04/SiteMap.png" alt="Angular 2, ASP.NET WebAPI, Azure &amp; Cordova, Cross Platform" /></p>

<p>So the only interesting thing is the Food-Component which has two child Components “FoodForm” and “FoodList”.</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="err">@</span><span class="nx">Component</span><span class="p">({</span>
<span class="err">   </span> <span class="na">selector</span><span class="p">:</span> <span class="s1">'food-component'</span><span class="p">,</span>
<span class="err">   </span> <span class="na">directives</span><span class="p">:</span> <span class="p">[</span><span class="nx">ROUTER_DIRECTIVES</span><span class="p">,</span> <span class="nx">CORE_DIRECTIVES</span><span class="p">,</span> <span class="nx">FoodListComponent</span><span class="p">,</span> <span class="nx">FoodListFormComponent</span><span class="p">],</span>
<span class="err">   </span> <span class="na">providers</span><span class="p">:</span> <span class="p">[</span><span class="nx">FoodDataService</span><span class="p">,</span> <span class="nx">FoodListDataService</span><span class="p">],</span>
<span class="err">   </span> <span class="na">template</span><span class="p">:</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./food.component.html'</span><span class="p">)</span>
<span class="p">})</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="c">&lt;!-- Page Content --&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
    <span class="c">&lt;!-- Introduction Row --&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-lg-12"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">"page-header"</span><span class="nt">&gt;</span>Foodlists
                    <span class="nt">&lt;small&gt;</span>See all your food lists<span class="nt">&lt;/small&gt;</span>
                <span class="nt">&lt;/h1&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>

    <span class="nt">&lt;foodListForm-component&gt;&lt;/foodListForm-component&gt;</span>
    <span class="nt">&lt;foodlists-component&gt;&lt;/foodlists-component&gt;</span>

<span class="nt">&lt;/div&gt;</span></code></pre></figure>

<p>The list component itself is not containing the details-view but redirecting to it while iterating through all the foodItems:</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">OnInit</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">CORE_DIRECTIVES</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/common'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">RouteConfig</span><span class="p">,</span> <span class="nx">ROUTER_DIRECTIVES</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/router-deprecated'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">FoodDataService</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../../shared/services/food.dataService'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">FoodListDataService</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../../shared/services/foodList.dataService'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">FoodList</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../../models/FoodList'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">NeedsAuthentication</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../../decorators/needsAuthentication'</span><span class="p">;</span>

<span class="err">@</span><span class="nx">Component</span><span class="p">({</span>
<span class="err">   </span> <span class="na">selector</span><span class="p">:</span> <span class="s1">'foodlists-component'</span><span class="p">,</span>
<span class="err">   </span> <span class="na">directives</span><span class="p">:</span> <span class="p">[</span><span class="nx">ROUTER_DIRECTIVES</span><span class="p">,</span> <span class="nx">CORE_DIRECTIVES</span><span class="p">],</span>
<span class="err">   </span> <span class="na">template</span><span class="p">:</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./foodlists.component.html'</span><span class="p">)</span>
<span class="p">})</span>

<span class="err">@</span><span class="nx">NeedsAuthentication</span><span class="p">()</span>
<span class="k">export</span> <span class="kr">class</span> <span class="nx">FoodListComponent</span> <span class="k">implements</span> <span class="nx">OnInit</span> <span class="p">{</span>

    <span class="nl">allLists</span><span class="p">:</span> <span class="nx">FoodList</span><span class="p">[];</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">_foodListDataService</span><span class="err">:</span> <span class="nx">FoodListDataService</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">_foodListDataService</span><span class="p">.</span><span class="nx">foodListAdded</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">((</span><span class="nx">foodList</span><span class="err">:</span> <span class="nx">FoodList</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">getAllLists</span><span class="p">();</span>
        <span class="p">});</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">ngOnInit</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">getAllLists</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="nx">getAllLists</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_foodListDataService</span>
            <span class="p">.</span><span class="nx">GetAllLists</span><span class="p">()</span>
            <span class="p">.</span><span class="nx">subscribe</span><span class="p">((</span><span class="na">response</span><span class="p">:</span> <span class="nx">FoodList</span><span class="p">[])</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">allLists</span> <span class="o">=</span> <span class="nx">response</span><span class="p">;</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
            <span class="p">},</span> <span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">errorMessage</span> <span class="o">=</span> <span class="nx">error</span><span class="p">;</span>
            <span class="p">});</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>and the template</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="c">&lt;!-- Team Members Row --&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-lg-12"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;h2</span> <span class="na">class=</span><span class="s">"page-header"</span><span class="nt">&gt;</span>Your Lists  <span class="nt">&lt;small&gt;&lt;/small&gt;&lt;/h2&gt;</span>
    <span class="nt">&lt;/div&gt;</span>

    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-lg-12"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"list-group"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;a</span> <span class="err">*</span><span class="na">ngFor=</span><span class="s">"let item of allLists; let i=index"</span> <span class="err">[</span><span class="na">routerLink</span><span class="err">]="['/</span><span class="na">FoodListDetails</span><span class="err">',</span> <span class="err">{</span><span class="na">id:</span> <span class="na">item</span><span class="err">.</span><span class="na">Id</span><span class="err">}]"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"list-group-item"</span><span class="nt">&gt;&lt;/li&gt;</span>
            <span class="nt">&lt;/a&gt;</span>
        <span class="nt">&lt;/ul&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span></code></pre></figure>

<h3 id="authentication">Authentication</h3>

<p>The WebAPI is providing a token endpoint to get tokens from after the login process. I do use a “CurrentUserService” to save this token in the storage and read it again.</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">Injectable</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">StorageService</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'./storage.service'</span><span class="p">;</span>

<span class="err">@</span><span class="nx">Injectable</span><span class="p">()</span>
<span class="k">export</span> <span class="kr">class</span> <span class="nx">CurrentUserService</span> <span class="p">{</span>

<span class="err">   </span> <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">_storageService</span><span class="err">:</span> <span class="nx">StorageService</span><span class="p">)</span> <span class="p">{</span>

<span class="err">   </span> <span class="p">}</span>

<span class="err">   </span> <span class="k">public</span> <span class="nx">get</span> <span class="nx">token</span><span class="p">()</span><span class="err">:</span> <span class="kr">string</span> <span class="p">{</span>
<span class="err">       </span> <span class="kd">let</span> <span class="nx">token</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_storageService</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="s1">'auth'</span><span class="p">);</span>

<span class="err">       </span> <span class="k">return</span> <span class="nx">token</span><span class="p">;</span>
<span class="err">   </span> <span class="p">}</span>

<span class="err">   </span> <span class="k">public</span> <span class="nx">set</span> <span class="nx">token</span><span class="p">(</span><span class="nx">token</span><span class="err">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
<span class="err">       </span> <span class="k">this</span><span class="p">.</span><span class="nx">_storageService</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="s1">'auth'</span><span class="p">,</span> <span class="nx">token</span><span class="p">);</span>
<span class="err">   </span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>With this I can read if the user is authenticated in a very basic way.</p>

<p>Further I took a decorator to hook into the creation of components to check if the user is authenticated or not. If not the decorator will redirect to the login page:</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">CanActivate</span><span class="p">,</span> <span class="nx">ComponentInstruction</span><span class="p">,</span> <span class="nx">Router</span><span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/router-deprecated'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Injector</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">appInjector</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../shared/services/appInjector'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">StorageService</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../shared/services/storage.service'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">NeedsAuthentication</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="err">   </span> <span class="k">return</span> <span class="nx">CanActivate</span><span class="p">((</span><span class="na">to</span><span class="p">:</span> <span class="nx">ComponentInstruction</span><span class="p">,</span> <span class="na">from</span><span class="p">:</span> <span class="nx">ComponentInstruction</span><span class="p">,</span> <span class="nx">target</span> <span class="o">=</span> <span class="p">[</span><span class="s1">'/'</span><span class="p">])</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="err">       </span> <span class="kd">let</span> <span class="na">injector</span><span class="p">:</span> <span class="nx">Injector</span> <span class="o">=</span> <span class="nx">appInjector</span><span class="p">();</span>
<span class="err">       </span> <span class="kd">let</span> <span class="na">router</span><span class="p">:</span> <span class="nx">Router</span> <span class="o">=</span> <span class="nx">injector</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">Router</span><span class="p">);</span>
<span class="err">       </span> <span class="kd">let</span> <span class="na">storageService</span><span class="p">:</span> <span class="nx">StorageService</span> <span class="o">=</span> <span class="nx">injector</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">StorageService</span><span class="p">);</span>

<span class="err">       </span> <span class="k">if</span> <span class="p">(</span><span class="nx">storageService</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="s1">'auth'</span><span class="p">))</span> <span class="p">{</span>
<span class="err">           </span> <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
<span class="err">       </span> <span class="p">}</span>

<span class="err">       </span> <span class="nx">router</span><span class="p">.</span><span class="nx">navigate</span><span class="p">([</span><span class="s1">'/Login'</span><span class="p">,</span> <span class="p">{</span> <span class="nx">target</span> <span class="p">}]);</span>

<span class="err">       </span> <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
<span class="err">   </span> <span class="p">});</span>
<span class="p">}</span></code></pre></figure>

<p>With every request I have to prepare the header which I do in a wrapped Http service.</p>

<p><a href="https://github.com/FabianGosebrink/Foodchooser-ASPNET-Angular-Cross-Platform/blob/0903dd96b731416a6e2f96ab30f21456f1efd9a0/Client/app/core/services/httpWrapper.service.ts">https://github.com/FabianGosebrink/Foodchooser-ASPNET-Angular-Cross-Platform/blob/0903dd96b731416a6e2f96ab30f21456f1efd9a0/Client/app/core/services/httpWrapper.service.ts</a></p>

<p>Sneak peek:</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">private</span> <span class="nx">prepareOptions</span><span class="p">(</span><span class="nx">options</span><span class="err">:</span> <span class="nx">RequestOptionsArgs</span><span class="p">)</span><span class="err">:</span> <span class="nx">RequestOptionsArgs</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">token</span><span class="err">:</span> <span class="kr">string</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_currentUserService</span><span class="p">.</span><span class="nx">token</span><span class="p">;</span>

    <span class="nx">options</span> <span class="o">=</span> <span class="nx">options</span> <span class="o">||</span> <span class="p">{};</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">options</span><span class="p">.</span><span class="nx">headers</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">options</span><span class="p">.</span><span class="nx">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Headers</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">token</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">options</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'Authorization'</span><span class="p">,</span> <span class="s1">'Bearer '</span> <span class="o">+</span> <span class="nx">token</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">options</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'Content-Type'</span><span class="p">,</span> <span class="s1">'application/json'</span><span class="p">);</span>
    <span class="nx">options</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'Accept'</span><span class="p">,</span> <span class="s1">'application/json'</span><span class="p">);</span>

    <span class="k">return</span> <span class="nx">options</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>So I check the headers, append a token if available, set the content-type and accept-properties and give the options back to use it in the REST-Call.</p>

<h3 id="cross-platform-with-gulp">Cross Platform with Gulp</h3>

<p>To give this whole thing a go as an exe and as an app on mobile devices I used cordova and electron with gulp as a taskrunner.</p>

<p>I seperated all the files in the tasks for “electron”, “cordova” and “web”. In the main gulp file I am just gathering all the information and point the default task only to list all available tasks to _not- start something the developer does not know when he only types “gulp” without a specific command.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">buildConfig</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./gulp.config'</span><span class="p">);</span>

<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">'default'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'help'</span><span class="p">]);</span>
<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">'help'</span><span class="p">,</span> <span class="nx">taskListing</span><span class="p">.</span><span class="nx">withFilters</span><span class="p">(</span><span class="sr">/-/</span><span class="p">));</span>

<span class="nx">require</span><span class="p">(</span><span class="s1">'./gulpTasks/web'</span><span class="p">);</span>
<span class="nx">require</span><span class="p">(</span><span class="s1">'./gulpTasks/electron'</span><span class="p">);</span>
<span class="nx">require</span><span class="p">(</span><span class="s1">'./gulpTasks/cordova'</span><span class="p">);</span>

<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">'build:all'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">runSeq</span><span class="p">(</span>
        <span class="s1">'build:web:prod'</span><span class="p">,</span>
        <span class="s1">'build:electron:prod'</span><span class="p">,</span>
        <span class="s1">'build:apps'</span><span class="p">,</span>
        <span class="nx">done</span><span class="p">);</span>
<span class="p">});</span></code></pre></figure>

<p>For example here is the electron gulp file, which turns this application into an exe</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">'build:electron:prod'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
<span class="err">   </span> <span class="nx">runSeq</span><span class="p">(</span>
<span class="err">       </span> <span class="s1">'electron-clean-temp'</span><span class="p">,</span>
<span class="err">       </span> <span class="s1">'electron-compile-with-webpack'</span><span class="p">,</span>
<span class="err">       </span> <span class="s1">'electron-copy-index-to-temp-folder'</span><span class="p">,</span>
<span class="err">       </span> <span class="s1">'electron-inject-in-html'</span><span class="p">,</span>
<span class="err">       </span> <span class="s1">'electron-copy-assets-to-temp-folder'</span><span class="p">,</span>
<span class="err">       </span> <span class="s1">'electron-build-win'</span><span class="p">,</span>
<span class="err">       </span> <span class="nx">done</span><span class="p">);</span>
<span class="p">});</span></code></pre></figure>

<p>For cordova</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">'build:apps'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
<span class="err">   </span> <span class="nx">runSeq</span><span class="p">(</span>
<span class="err">       </span> <span class="s1">'cordova-clean-temp'</span><span class="p">,</span>
<span class="err">       </span> <span class="s1">'cordova-copy-config-to-temp'</span><span class="p">,</span>
<span class="err">       </span> <span class="s1">'cordova-copy-winstore-to-temp'</span><span class="p">,</span>
<span class="err">       </span> <span class="s1">'cordova-copy-index-to-temp-folder'</span><span class="p">,</span>
<span class="err">       </span> <span class="s1">'cordova-copy-images-to-temp-folder'</span><span class="p">,</span>
<span class="err">       </span> <span class="s1">'cordova-compile-with-webpack'</span><span class="p">,</span>
<span class="err">       </span> <span class="s1">'cordova-inject-in-html'</span><span class="p">,</span>
<span class="err">       </span> <span class="s1">'cordova-build-windows'</span><span class="p">,</span>
<span class="err">       </span> <span class="c1">//  'cordova-build-android',</span>
<span class="err">       </span> <span class="s1">'cordova-clean-dist'</span><span class="p">,</span>
<span class="err">       </span> <span class="s1">'cordova-copy-to-dist'</span><span class="p">,</span>
<span class="err">       </span> <span class="nx">done</span><span class="p">);</span>
<span class="p">});</span></code></pre></figure>

<h3 id="conclusion">Conclusion:</h3>

<p>I hope with this blog posts I gave you an idea and an introduction in what you can achieve with javascript and ASP.NET WebAPI. Having all the tools like Cordova, gulp. you can build real cross-platform applications.</p>

<p>Hope you liked reading it as i liked making it :)</p>

<p>HTH</p>

<p>Regards</p>

<p>Fabian</p>

<h3 id="links">Links</h3>

<p><a href="http://blog.thoughtram.io/angular/2015/05/03/the-difference-between-annotations-and-decorators.html">http://blog.thoughtram.io/angular/2015/05/03/the-difference-between-annotations-and-decorators.html</a></p>

<p><a href="https://github.com/thinktecture/boardz-cross-platform-sample">https://github.com/thinktecture/boardz-cross-platform-sample</a></p>

<p><a href="https://www.xplatform.rocks/2016/02/14/angular2-and-electron-the-definitive-guide/">https://www.xplatform.rocks/2016/02/14/angular2-and-electron-the-definitive-guide/</a></p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2016/04/26/angular-asp-net-webapi-azure-cordova-cross-platform-my-private-hackathon-part-2</wp:post_id>
        <wp:post_date>2016-04-26T10:05:00+02:00</wp:post_date>
        <wp:post_date_gmt>2016-04-26T10:05:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="angular"><![CDATA[["angular",]]></category>
        
          <category domain="post_tag" nicename="aspnet"><![CDATA["aspnet",]]></category>
        
          <category domain="post_tag" nicename="azure"><![CDATA["azure",]]></category>
        
          <category domain="post_tag" nicename="cordova"><![CDATA["cordova",]]></category>
        
          <category domain="post_tag" nicename="crossplatform"><![CDATA["crossplatform",]]></category>
        
          <category domain="post_tag" nicename="gulp"><![CDATA["gulp",]]></category>
        
          <category domain="post_tag" nicename="webapi"><![CDATA["webapi"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Angular, ASP.NET WebAPI, Azure & Cordova, Cross Platform – My Private Hackathon Part 1]]></title>
        <link>http://offering.solutions/blog/articles/2016/04/19/angular-asp-net-webapi-azure-cordova-cross-platform-2/</link>
        <pubDate>2016-04-19T17:34:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p><img src="/assets/articles/wp-content/uploads/2016/04/foodchooser.jpg" alt="foodchooser" /></p>

<h3 id="motivation">Motivation</h3>

<p>I had a few free hours and was curious and wanted to know what you can achieve in 9 hours of coding. Due to the fact that I am very into ASP.NET development with Angular I coded a small application which is based on ASP.NET Web API, AngularJs/Angular2 with Typescript &amp; co. So the question is: How far will I go in 9 hours? This is my private Hackathon!!</p>

<h3 id="code">Code</h3>

<p><a href="https://github.com/FabianGosebrink/Foodchooser-ASPNET-Angular-Cross-Platform">https://github.com/FabianGosebrink/Foodchooser-ASPNET-Angular-Cross-Platform</a></p>

<h3 id="goal---the-foodchooser">Goal - The FoodChooser</h3>

<p>When I am not coding I love to stand in the kitchen but I do always have the problem of know knowing what I should cook. I know there are tons of cooking websites out there with a lot of inspiration but my problem is not getting a recipe for the meals but instead I got no idea what to search for. So my idea was to develop a small application where I can manage my food ideas without recipes. Because everybody is doing the meals the way they want to because every taste is different. However: A small application where I can manage my food should be the application I wanted to write: The FoodChooser</p>

<h3 id="backlog-for-first-version">Backlog for first Version</h3>

<p>So I wanted to make it basically usable for everyone. So I need a user account or a login for users. The users should add their food items, update and delete them. This is handled the best way in categories or lists. So the users should also create, add, update and delete those lists. The idea is getting random food immediately when getting onto the page without a user account. But every mentioned managing feature should only be available when logged in. But perhaps not every user wants his food items to be public. So users have to switch between publish and unpublishing their food. If you want to get random food only from a list of food items there should also be a button available for this. Because its your food and you don’t care about public or not: You just want to have a random item out of your food list.</p>

<p>In the end it should also be available for mobile devices. So I need a responsive design which concentrates on the things I need. Basic things. Because I am really not a UI-designer. ;-)</p>

<p>To keep a long story short:</p>

<ol>
  <li>Login/Logout</li>
  <li>CRUD: Food Items</li>
  <li>CRUD: Food Lists</li>
  <li>Getting random food from public foods</li>
  <li>Getting random food from a single list</li>
  <li>Un/Publishing food items</li>
  <li>Responsive and easy design also for mobile devices</li>
</ol>

<h3 id="technologies--tools">Technologies &amp; Tools</h3>

<p>The backlog mentioned above are leading to the technologies and tools I wanted to use to get a kick-start. Because ASP.NET 5 is not released yet I used WebAPI 2.2 for this. On client side I wanted to use Typescript with Angular and all tools which are connected to this. This whole thing should be hosted on azure in the end.</p>

<ol>
  <li>ASP.NET WebAPI with Bearer-Token-Identity and OWIN</li>
  <li>Typescript</li>
  <li>AngularJs and Angular2 Clients</li>
  <li>Automapper</li>
  <li>Bootstrap</li>
  <li>Azure</li>
</ol>

<p>My tools would be Visual Studio 2015 and Visual Studio Code.</p>

<p>So my timebox was 9 hours. Not a minute more. I know some of the technologies mentioned but not by 100%. Well, lets start coding and learning something!</p>

<h3 id="the-viewmodels">The (View)Models</h3>

<p>We have CRUD operations for food items, and food lists. And we are going to map them with Automapper. So we need ViewModels for every model.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">FoodItem</span>
<span class="p">{</span>
    <span class="p">[</span><span class="n">Key</span><span class="p">]</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">ItemName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="n">FoodList</span> <span class="n">FoodList</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">FoodListId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="n">DateTime</span> <span class="n">Created</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">bool</span> <span class="n">IsPublic</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">FoodList</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">UserId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="n">ICollection</span><span class="p">&lt;</span><span class="n">FoodItem</span><span class="p">&gt;</span> <span class="n">Foods</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">FoodItemViewModel</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">[</span><span class="n">Required</span><span class="p">]</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">ItemName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Rating</span><span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">FoodListId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="n">DateTime</span> <span class="n">Created</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">bool</span> <span class="n">IsPublic</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs">   
<span class="k">public</span> <span class="k">class</span> <span class="nc">FoodListViewModel</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">[</span><span class="n">Required</span><span class="p">]</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">UserId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="n">ICollection</span><span class="p">&lt;</span><span class="n">FoodItem</span><span class="p">&gt;</span> <span class="n">Foods</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>in the OWIN-Configuration we can go ahead and initialize the mappings:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"> 
<span class="n">Mapper</span><span class="p">.</span><span class="nf">Initialize</span><span class="p">(</span><span class="n">mapper</span> <span class="p">=&gt;</span>
<span class="p">{</span>
    <span class="n">mapper</span><span class="p">.</span><span class="n">CreateMap</span><span class="p">&lt;</span><span class="n">FoodItem</span><span class="p">,</span> <span class="n">FoodItemViewModel</span><span class="p">&gt;().</span><span class="nf">ReverseMap</span><span class="p">();</span>
    <span class="n">mapper</span><span class="p">.</span><span class="n">CreateMap</span><span class="p">&lt;</span><span class="n">FoodList</span><span class="p">,</span> <span class="n">FoodListViewModel</span><span class="p">&gt;().</span><span class="nf">ReverseMap</span><span class="p">();</span>
<span class="p">});</span></code></pre></figure>

<p>Of course you need to add Automapper to your project which I did via <a href="https://www.nuget.org/packages/AutoMapper/4.1.1">Nuget</a>.</p>

<h3 id="the-api">The API</h3>

<p>I mostly start coding server-side.</p>

<p>So the API has to handle FoodItems and FoodLists. Two Models, two controllers.
Beside the whole authorization features this is basically it. The API is quite small but I think it clarifies the principle.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs">   
<span class="na">[Authorize]</span>
<span class="na">[RoutePrefix("api")]</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">FoodsController</span> <span class="p">:</span> <span class="n">BaseController</span>
<span class="p">{</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">MaxPageSize</span> <span class="p">=</span> <span class="m">10</span><span class="p">;</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IFoodRepository</span> <span class="n">_foodRepository</span><span class="p">;</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IFoodListRepository</span> <span class="n">_foodListRepository</span><span class="p">;</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IRandomNumberGenerator</span> <span class="n">_randomNumberGenerator</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">FoodsController</span><span class="p">(</span><span class="n">IFoodRepository</span> <span class="n">foodRepository</span><span class="p">,</span> <span class="n">IFoodListRepository</span> <span class="n">foodListRepository</span><span class="p">,</span>
        <span class="n">IRandomNumberGenerator</span> <span class="n">randomNumberGenerator</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_foodRepository</span> <span class="p">=</span> <span class="n">foodRepository</span><span class="p">;</span>
        <span class="n">_foodListRepository</span> <span class="p">=</span> <span class="n">foodListRepository</span><span class="p">;</span>
        <span class="n">_randomNumberGenerator</span> <span class="p">=</span> <span class="n">randomNumberGenerator</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"foodlists/{id:int}/foods"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">GetFoodsFromList</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="n">FoodList</span> <span class="n">foodList</span> <span class="p">=</span> <span class="n">_foodListRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">,</span> <span class="s">"Foods"</span><span class="p">);</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">foodList</span><span class="p">.</span><span class="n">Foods</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">FoodItemViewModel</span><span class="p">&gt;(</span><span class="n">x</span><span class="p">)));</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">InternalServerError</span><span class="p">(</span><span class="n">exception</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"foodlists/{listId:int}/food/{foodItemId:int}"</span><span class="p">)]</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"foods/{foodItemId:int}"</span><span class="p">,</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">"GetSingleFood"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">GetSingleFood</span><span class="p">(</span><span class="kt">int</span> <span class="n">foodItemId</span><span class="p">,</span> <span class="kt">int</span><span class="p">?</span> <span class="n">listId</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="n">FoodItem</span> <span class="n">foodItem</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">listId</span><span class="p">.</span><span class="n">HasValue</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">foodItem</span> <span class="p">=</span> <span class="n">_foodRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">foodItemId</span> <span class="p">&amp;&amp;</span> <span class="n">x</span><span class="p">.</span><span class="n">FoodList</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">listId</span><span class="p">.</span><span class="n">Value</span><span class="p">,</span>
                    <span class="n">includeProperties</span><span class="p">:</span> <span class="s">"FoodList"</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="n">foodItem</span> <span class="p">=</span> <span class="n">_foodRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">foodItemId</span><span class="p">,</span> <span class="s">"FoodList"</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">foodItem</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">foodItem</span><span class="p">.</span><span class="n">FoodList</span> <span class="p">==</span> <span class="k">null</span> <span class="p">||</span> <span class="n">foodItem</span><span class="p">.</span><span class="n">FoodList</span><span class="p">.</span><span class="n">UserId</span> <span class="p">!=</span> <span class="n">CurrentUserId</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">(</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">Forbidden</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">FoodItemViewModel</span><span class="p">&gt;(</span><span class="n">foodItem</span><span class="p">));</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">InternalServerError</span><span class="p">(</span><span class="n">exception</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
    <span class="p">[</span><span class="n">AllowAnonymous</span><span class="p">]</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"foods/getrandomfood"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">GetRandomFood</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>

            <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">FoodItem</span><span class="p">&gt;</span> <span class="n">foodItems</span> <span class="p">=</span> <span class="n">_foodRepository</span><span class="p">.</span><span class="nf">GetAll</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">IsPublic</span><span class="p">,</span> <span class="n">includeProperties</span><span class="p">:</span> <span class="s">"FoodList"</span><span class="p">).</span><span class="nf">AsEnumerable</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">foodItems</span><span class="p">.</span><span class="nf">Any</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">FoodItem</span><span class="p">&gt;</span> <span class="n">enumerable</span> <span class="p">=</span> <span class="n">foodItems</span> <span class="k">as</span> <span class="n">IList</span><span class="p">&lt;</span><span class="n">FoodItem</span><span class="p">&gt;</span> <span class="p">??</span> <span class="n">foodItems</span><span class="p">.</span><span class="nf">ToList</span><span class="p">();</span>
            <span class="n">FoodItem</span> <span class="n">elementAt</span> <span class="p">=</span> <span class="n">enumerable</span><span class="p">.</span><span class="nf">ElementAt</span><span class="p">(</span><span class="n">_randomNumberGenerator</span><span class="p">.</span><span class="nf">GetRandomNumber</span><span class="p">(</span><span class="n">enumerable</span><span class="p">.</span><span class="nf">Count</span><span class="p">()));</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">elementAt</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">FoodItemViewModel</span><span class="p">&gt;(</span><span class="n">elementAt</span><span class="p">));</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">InternalServerError</span><span class="p">(</span><span class="n">exception</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"foods"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">AddFoodToList</span><span class="p">([</span><span class="n">FromBody</span><span class="p">]</span><span class="n">FoodItemViewModel</span> <span class="n">viewModel</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">viewModel</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">ModelState</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">FoodList</span> <span class="n">singleFoodList</span> <span class="p">=</span> <span class="n">_foodListRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">FoodListId</span><span class="p">,</span> <span class="s">"Foods"</span><span class="p">);</span>
            <span class="n">FoodItem</span> <span class="n">item</span> <span class="p">=</span> <span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">FoodItem</span><span class="p">&gt;(</span><span class="n">viewModel</span><span class="p">);</span>
            <span class="n">item</span><span class="p">.</span><span class="n">Created</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
            <span class="n">singleFoodList</span><span class="p">.</span><span class="n">Foods</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">item</span><span class="p">);</span>
            <span class="n">_foodListRepository</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="n">singleFoodList</span><span class="p">);</span>

            <span class="kt">int</span> <span class="n">save</span> <span class="p">=</span> <span class="n">_foodListRepository</span><span class="p">.</span><span class="nf">Save</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">save</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">CreatedAtRoute</span><span class="p">(</span><span class="s">"GetSingleFood"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">foodItemId</span> <span class="p">=</span> <span class="n">item</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">FoodItemViewModel</span><span class="p">&gt;(</span><span class="n">item</span><span class="p">));</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">InternalServerError</span><span class="p">(</span><span class="n">exception</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">HttpPut</span><span class="p">]</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"foods/{foodItemId:int}"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">UpdateFoodInList</span><span class="p">(</span><span class="kt">int</span> <span class="n">foodItemId</span><span class="p">,</span> <span class="p">[</span><span class="n">FromBody</span><span class="p">]</span><span class="n">FoodItemViewModel</span> <span class="n">viewModel</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">viewModel</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">ModelState</span><span class="p">);</span>
            <span class="p">}</span>


            <span class="n">FoodItem</span> <span class="n">singleById</span> <span class="p">=</span> <span class="n">_foodRepository</span><span class="p">.</span><span class="nf">GetSingleById</span><span class="p">(</span><span class="n">foodItemId</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">singleById</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">singleById</span><span class="p">.</span><span class="n">ItemName</span> <span class="p">=</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">ItemName</span><span class="p">;</span>
            <span class="n">singleById</span><span class="p">.</span><span class="n">IsPublic</span> <span class="p">=</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">IsPublic</span><span class="p">;</span>

            <span class="n">_foodRepository</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="n">singleById</span><span class="p">);</span>
            <span class="kt">int</span> <span class="n">save</span> <span class="p">=</span> <span class="n">_foodRepository</span><span class="p">.</span><span class="nf">Save</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">save</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">FoodItemViewModel</span><span class="p">&gt;(</span><span class="n">singleById</span><span class="p">));</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">InternalServerError</span><span class="p">(</span><span class="n">exception</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">HttpDelete</span><span class="p">]</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"foods/{foodItemId:int}"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">DeleteFoodFromList</span><span class="p">(</span><span class="kt">int</span> <span class="n">foodItemId</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="n">FoodItem</span> <span class="n">singleById</span> <span class="p">=</span> <span class="n">_foodRepository</span><span class="p">.</span><span class="nf">GetSingleById</span><span class="p">(</span><span class="n">foodItemId</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">singleById</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_foodRepository</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="n">foodItemId</span><span class="p">);</span>
            <span class="kt">int</span> <span class="n">save</span> <span class="p">=</span> <span class="n">_foodRepository</span><span class="p">.</span><span class="nf">Save</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">save</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">(</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">NoContent</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">InternalServerError</span><span class="p">(</span><span class="n">exception</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h3 id="foodlistcontroller">FoodListController:</h3>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs">   
<span class="na">[Authorize]</span>
<span class="na">[RoutePrefix("api")]</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">FoodListsController</span> <span class="p">:</span> <span class="n">BaseController</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IFoodListRepository</span> <span class="n">_foodListRepository</span><span class="p">;</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">MaxPageSize</span> <span class="p">=</span> <span class="m">10</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">FoodListsController</span><span class="p">(</span><span class="n">IFoodListRepository</span> <span class="n">foodListRepository</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_foodListRepository</span> <span class="p">=</span> <span class="n">foodListRepository</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"foodlists"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">GetAllLists</span><span class="p">(</span><span class="kt">int</span> <span class="n">page</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pageSize</span> <span class="p">=</span> <span class="n">MaxPageSize</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">pageSize</span> <span class="p">&gt;</span> <span class="n">MaxPageSize</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">pageSize</span> <span class="p">=</span> <span class="n">MaxPageSize</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">FoodList</span><span class="p">&gt;</span> <span class="n">foodLists</span> <span class="p">=</span> <span class="n">_foodListRepository</span>
                <span class="p">.</span><span class="nf">GetAll</span><span class="p">()</span>
                <span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">UserId</span> <span class="p">==</span> <span class="n">CurrentUserId</span><span class="p">);</span>

            <span class="kt">var</span> <span class="n">paginationHeader</span> <span class="p">=</span> <span class="k">new</span>
            <span class="p">{</span>
                <span class="n">totalCount</span> <span class="p">=</span> <span class="n">foodLists</span><span class="p">.</span><span class="nf">Count</span><span class="p">()</span>
                <span class="c1">// Add more headers here if you want...
</span>                <span class="c1">// Link to next and previous page etc.
</span>                <span class="c1">// Also see OData-Options for this
</span>            <span class="p">};</span>

            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">foodLists</span>
                <span class="p">.</span><span class="nf">OrderBy</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">Skip</span><span class="p">(</span><span class="n">pageSize</span> <span class="p">*</span> <span class="p">(</span><span class="n">page</span> <span class="p">-</span> <span class="m">1</span><span class="p">))</span>
                <span class="p">.</span><span class="nf">Take</span><span class="p">(</span><span class="n">pageSize</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">ToList</span><span class="p">();</span>

            <span class="n">HttpContext</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="nf">AppendHeader</span><span class="p">(</span><span class="s">"X-Pagination"</span><span class="p">,</span> <span class="n">JsonConvert</span><span class="p">.</span><span class="nf">SerializeObject</span><span class="p">(</span><span class="n">paginationHeader</span><span class="p">));</span>

            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">FoodListViewModel</span><span class="p">&gt;(</span><span class="n">x</span><span class="p">)));</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">InternalServerError</span><span class="p">(</span><span class="n">exception</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"foodlists/{id:int}"</span><span class="p">,</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">"GetSingleList"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">GetSingleList</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="n">FoodList</span> <span class="n">singleFoodList</span> <span class="p">=</span> <span class="n">_foodListRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">singleFoodList</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">singleFoodList</span><span class="p">.</span><span class="n">UserId</span> <span class="p">!=</span> <span class="n">CurrentUserId</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">(</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">Forbidden</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">FoodListViewModel</span><span class="p">&gt;(</span><span class="n">singleFoodList</span><span class="p">));</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">InternalServerError</span><span class="p">(</span><span class="n">exception</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"foodlists"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">AddList</span><span class="p">([</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">FoodListViewModel</span> <span class="n">viewModel</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">viewModel</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">ModelState</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">FoodList</span> <span class="n">item</span> <span class="p">=</span> <span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">FoodList</span><span class="p">&gt;(</span><span class="n">viewModel</span><span class="p">);</span>
            <span class="n">item</span><span class="p">.</span><span class="n">UserId</span> <span class="p">=</span> <span class="n">CurrentUserId</span><span class="p">;</span>
            <span class="n">_foodListRepository</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">item</span><span class="p">);</span>
            <span class="kt">int</span> <span class="n">save</span> <span class="p">=</span> <span class="n">_foodListRepository</span><span class="p">.</span><span class="nf">Save</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">save</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">CreatedAtRoute</span><span class="p">(</span><span class="s">"GetSingleList"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">item</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">item</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">InternalServerError</span><span class="p">(</span><span class="n">exception</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">HttpDelete</span><span class="p">]</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"foodlists/{id:int}"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">DeleteList</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="n">FoodList</span> <span class="n">singleFoodList</span> <span class="p">=</span> <span class="n">_foodListRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">,</span> <span class="s">"Foods"</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">singleFoodList</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">singleFoodList</span><span class="p">.</span><span class="n">UserId</span> <span class="p">!=</span> <span class="n">CurrentUserId</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">(</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">Forbidden</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">_foodListRepository</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="n">singleFoodList</span><span class="p">);</span>
            <span class="kt">int</span> <span class="n">save</span> <span class="p">=</span> <span class="n">_foodListRepository</span><span class="p">.</span><span class="nf">Save</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">save</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">(</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">NoContent</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">InternalServerError</span><span class="p">(</span><span class="n">exception</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Next we will do the clients</p>

<h3 id="the-clients">The Clients</h3>

<p>Concerning the clients I was torn between Angular 1.x with Typescript in Visual Studio and Angular 2. Because I could not make a descision whats better I made both. (You can find them in two different approaches in two different GitHub Repositories)</p>

<p>The first approach was the Visual Studio approach with making everything inside VS to be able to make this “right-click –&gt; Publish”-thing in the end.</p>

<p>The advantage of this is that you can maintain everything from VS like the API, the client code etc. But with this approach you do not have the sexy client- and serverside code separated. We are developing a RESTApi to develop client and server separate. You can handle the client like you want and modify it without touching the server. This is why I tried Angular2 in the second approach making a “client” and “server” folder where the client contains all *.ts, *.js and other files and the server contains (the same) REST API we build.</p>

<blockquote>
  <p>The GitHub repos are both full functional examples with these different approaches. Choose the one you want. Both do not rely on each other.</p>
</blockquote>

<p>So we are building two clients. At this point I could not go for 9 hours anymore, so I build up one client during these 9 hours of coding and build the other one afterwards. Because it’s fun :)</p>

<p>I will describe the clients in other blog posts after this one…</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2016/04/19/angular-asp-net-webapi-azure-cordova-cross-platform-2</wp:post_id>
        <wp:post_date>2016-04-19T17:34:00+02:00</wp:post_date>
        <wp:post_date_gmt>2016-04-19T17:34:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="angular"><![CDATA[["angular",]]></category>
        
          <category domain="post_tag" nicename="aspnet"><![CDATA["aspnet",]]></category>
        
          <category domain="post_tag" nicename="azure"><![CDATA["azure",]]></category>
        
          <category domain="post_tag" nicename="cordova"><![CDATA["cordova",]]></category>
        
          <category domain="post_tag" nicename="crossplatform"><![CDATA["crossplatform",]]></category>
        
          <category domain="post_tag" nicename="gulp"><![CDATA["gulp",]]></category>
        
          <category domain="post_tag" nicename="webapi"><![CDATA["webapi"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Microsoft TechDays 2016]]></title>
        <link>http://offering.solutions/blog/articles/2016/02/20/talk-on-the-microsoft-techdays-2016-in-baden/</link>
        <pubDate>2016-02-20T11:30:00+01:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p><a href="https://www.microsoft.com/de-ch/events/techdays">TechDays 2016 Baden</a></p>

<p>===== UPDATE======</p>

<p>I just got the feedback from Microsoft and my talk was rated with 4.5 in Content and 4.6 in Speaker Performance. This means it was rated as the best Talk at the TechDays. Im really happy to read that so thanks to everybody who was in the audience :)</p>

<p><img src="/assets/articles/wp-content/uploads/2016/02/Feedback.jpg" alt="Feedback" /></p>

<p>Hope to see you again on some events.</p>

<p>Greetings</p>

<p>Fabian</p>

<p>=================</p>

<p>I am so happy to announce that I will speak on the TechDays 2016 in Baden for the first time! I never expected Microsoft to ask me about doing a presentation at this event but they did :) And so I got a slot in the afternoon of the 1st of March. I know this is the last slot of the day and also the end of the TechDays this year but I will do my very best to give you a great technical and entertaining fade-out of this event.</p>

<p>The talks is about Web development with Angular2 in combination with SignalR and we will have a demo working on ASP.NET Core 1.0. I will hold it in german.</p>

<blockquote>
  <p>I know the title shows “ASP.NET 5” but the ASP.NET-Team did the renaming just after I gave Microsoft my title. I will mention that in my talk but just to know: We will of course work with ASP.NET Core 1.0</p>
</blockquote>

<p><a href="http://damienbod.com/">DamienBod</a> (many thanks to him at this place) and we will take a look at some pitfalls I discovered and how to avoid them.</p>

<p>Hope to see you there! Looking forward to this!</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2016/02/20/talk-on-the-microsoft-techdays-2016-in-baden</wp:post_id>
        <wp:post_date>2016-02-20T11:30:00+01:00</wp:post_date>
        <wp:post_date_gmt>2016-02-20T11:30:00+01:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="talks"><![CDATA[["talks",]]></category>
        
          <category domain="post_tag" nicename="techdays"><![CDATA["techdays",]]></category>
        
          <category domain="post_tag" nicename="microsoft"><![CDATA["microsoft",]]></category>
        
          <category domain="post_tag" nicename="speaking"><![CDATA["speaking"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Consuming a REST API with Angular Http-Service in Typescript]]></title>
        <link>http://offering.solutions/blog/articles/2016/02/01/consuming-a-rest-api-with-angular-http-service-in-typescript/</link>
        <pubDate>2016-02-01T12:23:00+01:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p><strong>Updated to new syntax</strong></p>

<p>Hey,</p>

<p>with this blog pot I want to show you how to create a Dataservice to consume (not only) an ASP.NET REST API with the angular2 http module.</p>

<p>In my recent blog post <a href="http://offering.solutions/blog/articles/2015/12/03/getting-started-with-visual-studio-code-angularjs-and-typescript/">Getting started with Visual Studio Code, AngularJS and Typescript</a> I have already mentioned how to start and to install the complete angular2 environment with corresponding tools.</p>

<p>Now I want to show you an example dataservice to call your favourite API.</p>

<h3 id="configuration">Configuration</h3>

<p>Its always a good thing if you have your configuration seperated stored anywhere in your application. I always go for a file like “app.constants.ts” where I store all my values. If anything changes there, like a version of the api which is stored in the url or the endpoint/server whatever, I can do those changes immediatelly at one point.</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">Injectable</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>

<span class="err">@</span><span class="nx">Injectable</span><span class="p">()</span>
<span class="k">export</span> <span class="kr">class</span> <span class="nx">Configuration</span> <span class="p">{</span>
    <span class="k">public</span> <span class="nx">Server</span><span class="err">:</span> <span class="kr">string</span> <span class="o">=</span> <span class="s1">'http://localhost:5000/'</span><span class="p">;</span>
    <span class="k">public</span> <span class="nx">ApiUrl</span><span class="err">:</span> <span class="kr">string</span> <span class="o">=</span> <span class="s1">'api/'</span><span class="p">;</span>
    <span class="k">public</span> <span class="nx">ServerWithApiUrl</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">Server</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">ApiUrl</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>Notice the injectable attribute to generate the metadata to make the service available through DI in other modules.</p>

<blockquote>
  <p>You can read more about DI in Angular in this blog post <a href="http://blog.thoughtram.io/angular/2015/05/18/dependency-injection-in-angular-2.html">Dependency Injection in Angular</a></p>
</blockquote>

<p>Now we have this going we can generate our service:</p>

<h3 id="the-service">The Service</h3>

<p>First of all you have to create a module which only contains a service which is only responsible for calling an API with a specific endpoint.</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">Injectable</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Http</span><span class="p">,</span> <span class="nx">Response</span><span class="p">,</span> <span class="nx">Headers</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/http'</span><span class="p">;</span>
<span class="k">import</span> <span class="s1">'rxjs/add/operator/map'</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Observable</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'rxjs/Observable'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">MyTypedItem</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../models/MyTypedItem'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Configuration</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../app.constants'</span><span class="p">;</span>

<span class="err">@</span><span class="nx">Injectable</span><span class="p">()</span>
<span class="k">export</span> <span class="kr">class</span> <span class="nx">DataService</span> <span class="p">{</span>

    <span class="k">private</span> <span class="nx">actionUrl</span><span class="err">:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="k">private</span> <span class="nx">headers</span><span class="err">:</span> <span class="nx">Headers</span><span class="p">;</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">_http</span><span class="err">:</span> <span class="nx">Http</span><span class="p">,</span> <span class="k">private</span> <span class="nx">_configuration</span><span class="err">:</span> <span class="nx">Configuration</span><span class="p">)</span> <span class="p">{</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span> <span class="o">=</span> <span class="nx">_configuration</span><span class="p">.</span><span class="nx">ServerWithApiUrl</span> <span class="o">+</span> <span class="s1">'myItem/'</span><span class="p">;</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Headers</span><span class="p">();</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'Content-Type'</span><span class="p">,</span> <span class="s1">'application/json'</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'Accept'</span><span class="p">,</span> <span class="s1">'application/json'</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">GetAll</span> <span class="o">=</span> <span class="p">()</span><span class="err">:</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">MyTypedItem</span><span class="p">[]</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="na">response</span><span class="p">:</span> <span class="nx">Response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">MyTypedItem</span><span class="p">[]</span><span class="o">&gt;</span><span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
            <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">handleError</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">GetSingle</span> <span class="o">=</span> <span class="p">(</span><span class="na">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">MyTypedItem</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span> <span class="o">+</span> <span class="nx">id</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="na">response</span><span class="p">:</span> <span class="nx">Response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">MyTypedItem</span><span class="o">&gt;</span><span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
            <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">handleError</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">Add</span> <span class="o">=</span> <span class="p">(</span><span class="na">itemName</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">MyTypedItem</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nx">toAdd</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">ItemName</span><span class="p">:</span> <span class="nx">itemName</span> <span class="p">});</span>

        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span><span class="p">,</span> <span class="nx">toAdd</span><span class="p">,</span> <span class="p">{</span> <span class="na">headers</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">headers</span> <span class="p">})</span>
            <span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="na">response</span><span class="p">:</span> <span class="nx">Response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">MyTypedItem</span><span class="o">&gt;</span><span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
            <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">handleError</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">Update</span> <span class="o">=</span> <span class="p">(</span><span class="na">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="na">itemToUpdate</span><span class="p">:</span> <span class="nx">MyTypedItem</span><span class="p">):</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">MyTypedItem</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_http</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span> <span class="o">+</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">itemToUpdate</span><span class="p">),</span> <span class="p">{</span> <span class="na">headers</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">headers</span> <span class="p">})</span>
            <span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="na">response</span><span class="p">:</span> <span class="nx">Response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">MyTypedItem</span><span class="o">&gt;</span><span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
            <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">handleError</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">Delete</span> <span class="o">=</span> <span class="p">(</span><span class="na">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">Response</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_http</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span> <span class="o">+</span> <span class="nx">id</span><span class="p">)</span>
            <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">handleError</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="nx">handleError</span><span class="p">(</span><span class="na">error</span><span class="p">:</span> <span class="nx">Response</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">Observable</span><span class="p">.</span><span class="k">throw</span><span class="p">(</span><span class="nx">error</span><span class="p">.</span><span class="nx">json</span><span class="p">().</span><span class="nx">error</span> <span class="o">||</span> <span class="s1">'Server error'</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>This dataservice gets the configuration we just did and the HTTP-Service via DI. We included it over the new module-loading-syntax. Also notice the typed items we included and the configuration we have to pull in to make it available.</p>

<p>It is also important to tell the http-calls which header to use. “Application/Json” in this case.</p>

<p>Now you can include, inject and use this service to make http-calls to your API like this:</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">OnInit</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">DataService</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../services/dataService'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">MyTypedItem</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../models/MyTypedItem '</span><span class="p">;</span>

<span class="err">@</span><span class="nx">Component</span><span class="p">({</span>
    <span class="na">selector</span><span class="p">:</span> <span class="s1">'my-item-component'</span><span class="p">,</span>
    <span class="na">providers</span><span class="p">:</span> <span class="p">[</span><span class="nx">DataService</span><span class="p">],</span>
    <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'app/myItem/myItem.component.html'</span>
<span class="p">})</span>

<span class="k">export</span> <span class="kr">class</span> <span class="nx">MyItemComponent</span> <span class="k">implements</span> <span class="nx">OnInit</span> <span class="p">{</span>
    <span class="k">public</span> <span class="nx">myItems</span><span class="err">:</span> <span class="nx">MyTypedItem</span> <span class="p">[];</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">_dataService</span><span class="err">:</span> <span class="nx">DataService</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>

    <span class="nx">ngOnInit</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">getAllItems</span><span class="p">();</span>
    <span class="p">}</span>
    
    <span class="c1">//...</span>

    <span class="k">private</span> <span class="nx">getAllItems</span><span class="p">()</span><span class="err">:</span> <span class="k">void</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_dataService</span>
            <span class="p">.</span><span class="nx">GetAll</span><span class="p">()</span>
            <span class="p">.</span><span class="nx">subscribe</span><span class="p">((</span><span class="na">data</span><span class="p">:</span><span class="nx">MyTypedItem</span><span class="p">[])</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">myItems</span> <span class="o">=</span> <span class="nx">data</span><span class="p">,</span>
                <span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">),</span>
                <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Get all Items complete'</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>I think this should be basically it. Pay attention to the typed answer you get from the service</p>

<p><code class="highlighter-rouge">(response:MyTypedItem[]) =&gt;</code></p>

<p>and to the subsribe after calling the “GetAll”-Method from the service.</p>

<p>Hope you enjoyed it and a lot more: I hope this helps.</p>

<p>Bye</p>

<p>Fabian</p>

<h3 id="github">GitHub:</h3>

<p><a href="https://github.com/FabianGosebrink/ASPNETCore-Angular-SignalR-Typescript">Angular ASP.NET CORE Template With SignalR</a></p>

<p>or</p>

<p><a href="https://github.com/FabianGosebrink/ASPNET-ASPNETCore-Angular-Webpack/tree/master/AngularCLI">https://github.com/FabianGosebrink/ASPNET-ASPNETCore-Angular-Webpack/tree/master/AngularCLI</a></p>

<h3 id="links">Links:</h3>

<p><a href="https://auth0.com/blog/2015/05/14/creating-your-first-real-world-angular-2-app-from-authentication-to-calling-an-api-and-everything-in-between/">https://auth0.com/blog/2015/05/14/creating-your-first-real-world-angular-2-app-from-authentication-to-calling-an-api-and-everything-in-between/</a></p>

<p><a href="https://auth0.com/blog/2015/10/15/angular-2-series-part-3-using-http/">https://auth0.com/blog/2015/10/15/angular-2-series-part-3-using-http/</a></p>

<p><a href="https://auth0.com/blog/2015/09/17/angular-2-series-part-2-domain-models-and-dependency-injection/">https://auth0.com/blog/2015/09/17/angular-2-series-part-2-domain-models-and-dependency-injection/</a></p>

<p><a href="https://auth0.com/blog/2015/09/03/angular2-series-working-with-pipes/">https://auth0.com/blog/2015/09/03/angular2-series-working-with-pipes/</a></p>

<p><a href="https://angular.io/docs/ts/latest/guide/architecture.html">https://angular.io/docs/ts/latest/guide/architecture.html</a></p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2016/02/01/consuming-a-rest-api-with-angular-http-service-in-typescript</wp:post_id>
        <wp:post_date>2016-02-01T12:23:00+01:00</wp:post_date>
        <wp:post_date_gmt>2016-02-01T12:23:00+01:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="angular"><![CDATA[["angular",]]></category>
        
          <category domain="post_tag" nicename="restapi"><![CDATA["restapi",]]></category>
        
          <category domain="post_tag" nicename="typescript"><![CDATA["typescript"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Angular and ASP.NET Core Starter]]></title>
        <link>http://offering.solutions/blog/articles/2016/01/25/angular-2-asp-net-core-starter/</link>
        <pubDate>2016-01-25T19:47:00+01:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>With this bIog I want to give you an Angular and ASP.NET Core Starter.</p>

<p>Code here:</p>

<p><a href="https://github.com/FabianGosebrink/ASPNETCore-Angular-StarterTemplate">https://github.com/FabianGosebrink/ASPNETCore-Angular-StarterTemplate</a></p>

<p><strong>Updated to the newest Version!</strong></p>

<p>Nowadays you hear a lot of new technologies around the web stuff and with this post I want to show you a get-starting-guide how to start with the following technologies in general. I want to show how to set up an environment where you can start programming ASP.NET and Angular. As I started I spent a lot of time setting up all my tools and stuff. If you want to save this time: Go ahead reading.</p>

<p>So I want to have an environment where I can build an Angular web application with typescript, having an api where I can call to build with ASP.NET Core. We will also use <a href="https://code.visualstudio.com/">Visual Studio Code</a> to get the client-side programming going.</p>

<h2 id="lets-start">Lets start:</h2>

<p>First thing to do is setting up our Visual Studio. Create a new application and choose the ASP.NET 5 Templates. I guess they will be renamed later ;-)</p>

<p><img src="/assets/articles/wp-content/uploads/2016/01/AspNetCoreAngular2Demo_1.jpg" alt="AspNetCoreAngular2Demo_1" />
<img src="/assets/articles/wp-content/uploads/2016/01/AspNetCoreAngular2Demo_2.jpg" alt="AspNetCoreAngular2Demo_2" /></p>

<p>You will get an empty solution with no dependencies so far. Lets go and add some: open up the “project.json” and add this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
    <span class="s2">"dependencies"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"Microsoft.NETCore.App"</span><span class="err">:</span> <span class="p">{</span>
            <span class="s2">"version"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
            <span class="s2">"type"</span><span class="err">:</span> <span class="s2">"platform"</span>
        <span class="p">},</span>
        <span class="s2">"Microsoft.AspNetCore.Server.IISIntegration"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
        <span class="s2">"Microsoft.AspNetCore.Server.Kestrel"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
        <span class="s2">"Microsoft.Extensions.Configuration.FileExtensions"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
        <span class="s2">"Microsoft.AspNetCore.Mvc.Core"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
        <span class="s2">"Microsoft.AspNetCore.StaticFiles"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
        <span class="s2">"Microsoft.Extensions.Configuration.Json"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
        <span class="s2">"Microsoft.AspNetCore.Mvc"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
        <span class="s2">"Microsoft.Extensions.Logging.Console"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
        <span class="s2">"Microsoft.Extensions.Logging.Debug"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
        <span class="s2">"Microsoft.Extensions.Configuration.EnvironmentVariables"</span><span class="err">:</span> <span class="s2">"1.0.0"</span>
    <span class="p">},</span>

    <span class="s2">"tools"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"Microsoft.AspNetCore.Server.IISIntegration.Tools"</span><span class="err">:</span> <span class="s2">"1.0.0-preview2-final"</span>
    <span class="p">},</span>

    <span class="s2">"frameworks"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"netcoreapp1.0"</span><span class="err">:</span> <span class="p">{}</span>
    <span class="p">},</span>

    <span class="s2">"buildOptions"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"emitEntryPoint"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="s2">"preserveCompilationContext"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="s2">"debugType"</span><span class="err">:</span> <span class="s2">"portable"</span><span class="p">,</span>
        <span class="s2">"compile"</span><span class="err">:</span> <span class="p">{</span>
            <span class="s2">"include"</span><span class="err">:</span> <span class="p">[</span>
                <span class="s2">"**/*.cs"</span>
            <span class="p">],</span>
            <span class="s2">"exclude"</span><span class="err">:</span> <span class="p">[</span>
                <span class="s2">"**/node_modules/"</span>
            <span class="p">]</span>
        <span class="p">}</span>
    <span class="p">},</span>

    <span class="s2">"runtimeOptions"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"configProperties"</span><span class="err">:</span> <span class="p">{</span>
            <span class="s2">"System.GC.Server"</span><span class="err">:</span> <span class="kc">true</span>
        <span class="p">}</span>
    <span class="p">},</span>

    <span class="s2">"publishOptions"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"include"</span><span class="err">:</span> <span class="p">[</span>
            <span class="s2">"wwwroot"</span><span class="p">,</span>
            <span class="s2">"web.config"</span>
        <span class="p">]</span>
    <span class="p">},</span>

    <span class="s2">"scripts"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"postpublish"</span><span class="err">:</span> <span class="p">[</span> <span class="s2">"dotnet publish-iis --publish-folder %publish:OutputPath% --framework %publish:FullTargetFramework%"</span> <span class="p">]</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>What we are adding is MVC, because we will need it for setting up the API, some logging things and AutoMappers to map between our DTOs and our real Entities. We wont use it in this tutorial, but for a kickstart its good to have them.</p>

<p>Visual Studio should now go ahead and resolve, download and install these packages.</p>

<p>Now go on and add an “app”-Folder, a “js”-folder and a “css”-folder to the wwwroot-folder.</p>

<blockquote>
  <p>Everything in the wwwroot-folder is going to be served to the client. This is where our app lives. You can also build your application outside this folder and copy the relevant files in it via gulp etc. I am not doing this in this case because its easier to debug in the when launching. If you have a better approach I would love to hear it :)</p>
</blockquote>

<p><img src="/assets/articles/wp-content/uploads/2016/01/04.png" alt="04" /></p>

<p>To get started with our web application we need an index.html. Lets add it and put nothing in it so far.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/01/05.png" alt="05" /></p>

<h2 id="the-serversideapi">The Serverside/API</h2>

<p>Lets get started with the serverside: To wire up everything we need to configure our application in the Startup.cs.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Builder</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Hosting</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Configuration</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.DependencyInjection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Logging</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ASPNETCoreAngular2Demo</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Startup</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">IConfigurationRoot</span> <span class="n">Configuration</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// This method gets called by the runtime. Use this method to add services to the container.
</span>        <span class="c1">// For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=398940
</span>        <span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">services</span><span class="p">.</span><span class="nf">AddCors</span><span class="p">();</span>
            <span class="n">services</span><span class="p">.</span><span class="nf">AddMvc</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="nf">Startup</span><span class="p">(</span><span class="n">IHostingEnvironment</span> <span class="n">env</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ConfigurationBuilder</span><span class="p">()</span>
                <span class="p">.</span><span class="nf">SetBasePath</span><span class="p">(</span><span class="n">env</span><span class="p">.</span><span class="n">ContentRootPath</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="s">"appsettings.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">true</span><span class="p">,</span> <span class="n">reloadOnChange</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="err">$</span><span class="s">"appsettings.{env.EnvironmentName}.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">true</span><span class="p">);</span>

            <span class="n">builder</span><span class="p">.</span><span class="nf">AddEnvironmentVariables</span><span class="p">();</span>
            <span class="n">Configuration</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>
        <span class="p">}</span>


        <span class="c1">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
</span>        <span class="k">public</span> <span class="k">void</span> <span class="nf">Configure</span><span class="p">(</span><span class="n">IApplicationBuilder</span> <span class="n">app</span><span class="p">,</span> <span class="n">ILoggerFactory</span> <span class="n">loggerFactory</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">loggerFactory</span><span class="p">.</span><span class="nf">AddConsole</span><span class="p">(</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetSection</span><span class="p">(</span><span class="s">"Logging"</span><span class="p">));</span>
            <span class="n">loggerFactory</span><span class="p">.</span><span class="nf">AddDebug</span><span class="p">();</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseCors</span><span class="p">(</span><span class="n">config</span> <span class="p">=&gt;</span>
                <span class="n">config</span><span class="p">.</span><span class="nf">AllowAnyHeader</span><span class="p">()</span>
                    <span class="p">.</span><span class="nf">AllowAnyMethod</span><span class="p">()</span>
                    <span class="p">.</span><span class="nf">AllowAnyOrigin</span><span class="p">());</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseDefaultFiles</span><span class="p">();</span>
            <span class="n">app</span><span class="p">.</span><span class="nf">UseStaticFiles</span><span class="p">();</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseMvc</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Because at the beginning of this page we are consuming an “appsettings.json” we should also create it. Create a new file called like this beside the Startup.cs and paste some logging information to it. You can add some informations you want to have in there later if you want. For the start, this should be okay.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
    <span class="s2">"Logging"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"IncludeScopes"</span><span class="err">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="s2">"LogLevel"</span><span class="err">:</span> <span class="p">{</span>
            <span class="s2">"Default"</span><span class="err">:</span> <span class="s2">"Debug"</span><span class="p">,</span>
            <span class="s2">"System"</span><span class="err">:</span> <span class="s2">"Information"</span><span class="p">,</span>
            <span class="s2">"Microsoft"</span><span class="err">:</span> <span class="s2">"Information"</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Our application should now be able to start up. Just go to the commandline and type “dotnet run” in it. This will start a webserver and serve all files in wwwroot.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/01/AspNetCoreAngular2Demo_3.jpg" alt="AspNetCoreAngular2Demo_3" /></p>

<p><img src="/assets/articles/wp-content/uploads/2016/01/07.png" alt="07" /></p>

<p>Great so far! Now we can add a controller!</p>

<p>For this go ahead in the root of the project and add a folder “Controller” which wil hold all the controllers for us. Then you can add an standardcontroller for the first run.</p>

<blockquote>
  <p>I like to stay to IActionResult-Interface in my controllers. It just gives me a way I am used to and is clearer for me. You do not have to do this. The controller is just for demo purposes.</p>
</blockquote>

<p><img src="/assets/articles/wp-content/uploads/2016/01/08.png" alt="08" /></p>

<p>If we now run the server again with “dotnet run” it will start and via Postman we can check if everything works correctly:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/01/09.png" alt="Angular and ASP.NET Core Starter" /></p>

<h2 id="the-client">The Client</h2>

<p>Great. So lets start clientside. What we need is an Angular environment. For the tooling I made the best experiences using <a href="https://code.visualstudio.com/">Visual Studio Code</a>.</p>

<p>We already defined the wwwroot-Folder which holds every file which is transported to the client.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/01/11.png" alt="11" /></p>

<p>As we start developing Angular we have to prepare our environment for working with Typescript. I already have an instruction how to start in a previous Blogpost <a href="http://offering.solutions/blog/articles/2015/12/03/getting-started-with-visual-studio-code-angularjs-and-typescript/">Getting started with Visual Studio Code &amp; Typescript</a>. But lets cover some thing in short to get it customised for this Angular case.</p>

<p>Lets add a file for configuring the typescript-options for our project: tsconfig.json to the root of our project.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">"compilerOptions"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"target"</span><span class="err">:</span> <span class="s2">"es5"</span><span class="p">,</span>
    <span class="s2">"module"</span><span class="err">:</span> <span class="s2">"commonjs"</span><span class="p">,</span>
    <span class="s2">"moduleResolution"</span><span class="err">:</span> <span class="s2">"node"</span><span class="p">,</span>
    <span class="s2">"sourceMap"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"emitDecoratorMetadata"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"experimentalDecorators"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"lib"</span><span class="err">:</span> <span class="p">[</span>
      <span class="s2">"es2015"</span><span class="p">,</span>
      <span class="s2">"dom"</span>
    <span class="p">],</span>
    <span class="s2">"noImplicitAny"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"suppressImplicitAnyIndexErrors"</span><span class="err">:</span> <span class="kc">true</span>
  <span class="p">},</span>
  <span class="s2">"exclude"</span><span class="err">:</span> <span class="p">[</span>
    <span class="s2">"node_modules"</span><span class="p">,</span>
    <span class="s2">"wwwroot/**/*"</span>
  <span class="p">]</span>
<span class="p">}</span></code></pre></figure>

<h3 id="adding-angular">Adding Angular</h3>

<p>Angular is served via npm. To get Angular we have to add a package.json to the root of our project. “npm start” will run the lite-server, compile the *.ts files and start the watcher :)</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">"name"</span><span class="err">:</span> <span class="s2">"ng2app"</span><span class="p">,</span>
  <span class="s2">"version"</span><span class="err">:</span> <span class="s2">"0.0.0"</span><span class="p">,</span>
  <span class="s2">"license"</span><span class="err">:</span> <span class="s2">"MIT"</span><span class="p">,</span>
  <span class="s2">"angular-cli"</span><span class="err">:</span> <span class="p">{},</span>
  <span class="s2">"scripts"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"start"</span><span class="err">:</span> <span class="s2">"tsc &amp;&amp; gulp get:started &amp;&amp; concurrently \"npm run tsc:w\" \"dotnet run\" \"npm run lite\" \"gulp start-watch\""</span><span class="p">,</span>
    <span class="s2">"lite"</span><span class="err">:</span> <span class="s2">"lite-server"</span><span class="p">,</span>
    <span class="s2">"tsc"</span><span class="err">:</span> <span class="s2">"tsc"</span><span class="p">,</span>
    <span class="s2">"tsc:w"</span><span class="err">:</span> <span class="s2">"tsc -w"</span><span class="p">,</span>
    <span class="s2">"lint"</span><span class="err">:</span> <span class="s2">"tslint ./angular2app/**/*.ts -t verbose"</span>
  <span class="p">},</span>
  <span class="s2">"private"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="s2">"dependencies"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"@angular/common"</span><span class="err">:</span> <span class="s2">"~2.4.0"</span><span class="p">,</span>
    <span class="s2">"@angular/compiler"</span><span class="err">:</span> <span class="s2">"~2.4.0"</span><span class="p">,</span>
    <span class="s2">"@angular/core"</span><span class="err">:</span> <span class="s2">"~2.4.0"</span><span class="p">,</span>
    <span class="s2">"@angular/forms"</span><span class="err">:</span> <span class="s2">"~2.4.0"</span><span class="p">,</span>
    <span class="s2">"@angular/http"</span><span class="err">:</span> <span class="s2">"~2.4.0"</span><span class="p">,</span>
    <span class="s2">"@angular/platform-browser"</span><span class="err">:</span> <span class="s2">"~2.4.0"</span><span class="p">,</span>
    <span class="s2">"@angular/platform-browser-dynamic"</span><span class="err">:</span> <span class="s2">"~2.4.0"</span><span class="p">,</span>
    <span class="s2">"@angular/router"</span><span class="err">:</span> <span class="s2">"~3.4.0"</span><span class="p">,</span>
    <span class="s2">"angular-in-memory-web-api"</span><span class="err">:</span> <span class="s2">"~0.2.2"</span><span class="p">,</span>
    <span class="s2">"angular2-toaster"</span><span class="err">:</span> <span class="s2">"^1.0.1"</span><span class="p">,</span>
    <span class="s2">"bootstrap"</span><span class="err">:</span> <span class="s2">"^3.3.7"</span><span class="p">,</span>
    <span class="s2">"core-js"</span><span class="err">:</span> <span class="s2">"^2.4.1"</span><span class="p">,</span>
    <span class="s2">"jquery"</span><span class="err">:</span> <span class="s2">"2.2.4"</span><span class="p">,</span>
    <span class="s2">"ng2-loading-bar"</span><span class="err">:</span> <span class="s2">"0.0.6"</span><span class="p">,</span>
    <span class="s2">"reflect-metadata"</span><span class="err">:</span> <span class="s2">"^0.1.8"</span><span class="p">,</span>
    <span class="s2">"rxjs"</span><span class="err">:</span> <span class="s2">"5.0.1"</span><span class="p">,</span>
    <span class="s2">"systemjs"</span><span class="err">:</span> <span class="s2">"0.19.40"</span><span class="p">,</span>
    <span class="s2">"zone.js"</span><span class="err">:</span> <span class="s2">"^0.7.4"</span>
  <span class="p">},</span>
  <span class="s2">"devDependencies"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"@types/jasmine"</span><span class="err">:</span> <span class="s2">"^2.5.36"</span><span class="p">,</span>
    <span class="s2">"@types/node"</span><span class="err">:</span> <span class="s2">"^6.0.46"</span><span class="p">,</span>
    <span class="s2">"canonical-path"</span><span class="err">:</span> <span class="s2">"0.0.2"</span><span class="p">,</span>
    <span class="s2">"concurrently"</span><span class="err">:</span> <span class="s2">"^3.1.0"</span><span class="p">,</span>
    <span class="s2">"gulp"</span><span class="err">:</span> <span class="s2">"^3.9.1"</span><span class="p">,</span>
    <span class="s2">"http-server"</span><span class="err">:</span> <span class="s2">"^0.9.0"</span><span class="p">,</span>
    <span class="s2">"lite-server"</span><span class="err">:</span> <span class="s2">"^2.2.2"</span><span class="p">,</span>
    <span class="s2">"lodash"</span><span class="err">:</span> <span class="s2">"^4.16.4"</span><span class="p">,</span>
    <span class="s2">"protractor"</span><span class="err">:</span> <span class="s2">"~4.0.14"</span><span class="p">,</span>
    <span class="s2">"rimraf"</span><span class="err">:</span> <span class="s2">"^2.5.4"</span><span class="p">,</span>
    <span class="s2">"run-sequence"</span><span class="err">:</span> <span class="s2">"^1.2.2"</span><span class="p">,</span>
    <span class="s2">"tslint"</span><span class="err">:</span> <span class="s2">"^3.15.1"</span><span class="p">,</span>
    <span class="s2">"typescript"</span><span class="err">:</span> <span class="s2">"~2.0.10"</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>or just type “npm init” to answer all questions and get an project.json file generated.</p>

<p>After this you can install Angular and all other dependencies via “npm install” or Visual Studio will do this for you automatically. Just just have to wait a few seconds. It will add a node_modules folder to your root application and copy all files, also the *.d.ts-files you need to develop with typescript.</p>

<h4 id="systemjs">System.js</h4>

<p>Now we have to configure the system.js as so:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="cm">/**
 * System configuration for Angular 2 samples
 * Adjust as necessary for your application needs.
 */</span>
<span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">global</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">System</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span>
    <span class="na">paths</span><span class="p">:</span> <span class="p">{</span>
      <span class="c1">// paths serve as alias</span>
      <span class="s1">'npm:'</span><span class="p">:</span> <span class="s1">'js/'</span>
    <span class="p">},</span>
    <span class="c1">// map tells the System loader where to look for things</span>
    <span class="na">map</span><span class="p">:</span> <span class="p">{</span>
      <span class="c1">// our app is within the app folder</span>
      <span class="na">app</span><span class="p">:</span> <span class="s1">'app'</span><span class="p">,</span>
      <span class="c1">// angular bundles</span>
      <span class="s1">'@angular/core'</span><span class="p">:</span> <span class="s1">'npm:@angular/core/bundles/core.umd.js'</span><span class="p">,</span>
      <span class="s1">'@angular/common'</span><span class="p">:</span> <span class="s1">'npm:@angular/common/bundles/common.umd.js'</span><span class="p">,</span>
      <span class="s1">'@angular/compiler'</span><span class="p">:</span> <span class="s1">'npm:@angular/compiler/bundles/compiler.umd.js'</span><span class="p">,</span>
      <span class="s1">'@angular/platform-browser'</span><span class="p">:</span> <span class="s1">'npm:@angular/platform-browser/bundles/platform-browser.umd.js'</span><span class="p">,</span>
      <span class="s1">'@angular/platform-browser-dynamic'</span><span class="p">:</span> <span class="s1">'npm:@angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js'</span><span class="p">,</span>
      <span class="s1">'@angular/http'</span><span class="p">:</span> <span class="s1">'npm:@angular/http/bundles/http.umd.js'</span><span class="p">,</span>
      <span class="s1">'@angular/router'</span><span class="p">:</span> <span class="s1">'npm:@angular/router/bundles/router.umd.js'</span><span class="p">,</span>
      <span class="s1">'@angular/forms'</span><span class="p">:</span> <span class="s1">'npm:@angular/forms/bundles/forms.umd.js'</span><span class="p">,</span>

      <span class="c1">// Third Party</span>
      <span class="s1">'angular2-toaster'</span><span class="p">:</span> <span class="s1">'npm:angular2-toaster'</span><span class="p">,</span>
      <span class="c1">// 'ng2-slim-loading-bar': 'npm:ng2-slim-loading-bar/bundles/index.umd.js',</span>
      <span class="s2">"ng2-loading-bar"</span><span class="p">:</span> <span class="s2">"npm:ng2-loading-bar"</span><span class="p">,</span>

      <span class="c1">// other libraries</span>
      <span class="s1">'rxjs'</span><span class="p">:</span> <span class="s1">'npm:rxjs'</span>
    <span class="p">},</span>
    <span class="c1">// packages tells the System loader how to load when no filename and/or no extension</span>
    <span class="na">packages</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">app</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">main</span><span class="p">:</span> <span class="s1">'./main.js'</span><span class="p">,</span>
        <span class="na">defaultExtension</span><span class="p">:</span> <span class="s1">'js'</span>
      <span class="p">},</span>
      <span class="na">rxjs</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">defaultExtension</span><span class="p">:</span> <span class="s1">'js'</span>
      <span class="p">},</span>
      <span class="s1">'angular2-toaster'</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">defaultExtension</span><span class="p">:</span> <span class="s1">'js'</span>
      <span class="p">},</span>
      <span class="s1">'ng2-slim-loading-bar'</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">defaultExtension</span><span class="p">:</span> <span class="s1">'js'</span>
      <span class="p">},</span>
      <span class="s2">"ng2-loading-bar"</span><span class="p">:</span> <span class="p">{</span> <span class="s2">"main"</span><span class="p">:</span> <span class="s2">"index.js"</span><span class="p">,</span> <span class="s2">"defaultExtension"</span><span class="p">:</span> <span class="s2">"js"</span> <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">})(</span><span class="k">this</span><span class="p">);</span></code></pre></figure>

<p>Now go ahead in you index.html and link to the files in the client js folder:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>

<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;base</span> <span class="na">href=</span><span class="s">"/"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;title&gt;</span>ASP.NET Core 1.0 Angular 2 Demo<span class="nt">&lt;/title&gt;</span>

    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">type=</span><span class="s">"text/css"</span> <span class="na">href=</span><span class="s">"css/bootstrap.css"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">type=</span><span class="s">"text/css"</span> <span class="na">href=</span><span class="s">"css/toaster.css"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">type=</span><span class="s">"text/css"</span> <span class="na">href=</span><span class="s">"css/style.css"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/head&gt;</span>

<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;my-app&gt;</span>Loading...<span class="nt">&lt;/my-app&gt;</span>

     <span class="c">&lt;!-- 1. Load libraries --&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"js/shim.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"js/zone.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"js/Reflect.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"js/system.src.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"js/jquery.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"js/bootstrap.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    
    <span class="c">&lt;!-- 2. Configure SystemJS --&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"system.config.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script&gt;</span>
      <span class="nx">System</span><span class="p">.</span><span class="kr">import</span><span class="p">(</span><span class="s1">'app'</span><span class="p">).</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span> <span class="p">});</span>
    <span class="nt">&lt;/script&gt;</span>

<span class="nt">&lt;/body&gt;</span>

<span class="nt">&lt;/html&gt;</span></code></pre></figure>

<h2 id="finally">Finally…</h2>

<p>We are done so far:</p>

<p>You can now go ahead and develop you application in Typescript and Angular. You could start with the <a href="https://angular.io/docs/ts/latest/quickstart.html">Angular</a> quickstart. All files you need should be there. Its important to add the <a href="https://github.com/FabianGosebrink/ASPNETCore-Angular-StarterTemplate/blob/master/src/ASPNETCoreAngular2Demo/angularApp/main.ts">main.ts</a> , the <a href="https://github.com/FabianGosebrink/ASPNETCore-Angular-StarterTemplate/blob/master/src/ASPNETCoreAngular2Demo/angularApp/app.component.ts">app.component.ts</a> and <a href="https://github.com/FabianGosebrink/ASPNETCore-Angular-StarterTemplate/blob/master/src/ASPNETCoreAngular2Demo/angularApp/app.module.ts">app.module.ts</a> to get an entry point and bootstrapping your application.</p>

<blockquote>
  <p>If you, like me, always forget to compile the typescript files: open a cmd in the app folder and just type “npm run tsc:w”. This activates a typescript watcher using the tsconfig in the root of the project and will always compile the *.ts files into *.js files if there are some changes</p>
</blockquote>

<h3 id="further-steps">Further steps:</h3>

<p>You could now start using gulp/grunt to copy files to the locations automatically instead of doing it manually. Or you could start consuming the api using the http-Service like shown <a href="https://auth0.com/blog/2015/10/15/angular-2-series-part-3-using-http/">here</a>. I have done that all in my example repository here on Github. Hope you like it.</p>

<p><a href="https://github.com/FabianGosebrink/ASPNETCore-Angular-StarterTemplate">https://github.com/FabianGosebrink/ASPNETCore-Angular-StarterTemplate</a></p>

<p>Regards &amp; HTH</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2016/01/25/angular-2-asp-net-core-starter</wp:post_id>
        <wp:post_date>2016-01-25T19:47:00+01:00</wp:post_date>
        <wp:post_date_gmt>2016-01-25T19:47:00+01:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="angular"><![CDATA[["angular",]]></category>
        
          <category domain="post_tag" nicename="aspnet"><![CDATA["aspnet",]]></category>
        
          <category domain="post_tag" nicename="core"><![CDATA["core",]]></category>
        
          <category domain="post_tag" nicename="vscode"><![CDATA["vscode"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Get started with ASP.NET Core and Entity Framework 6]]></title>
        <link>http://offering.solutions/blog/articles/2015/12/13/get-started-with-asp-net-core-and-entity-framework-6/</link>
        <pubDate>2015-12-13T20:20:00+01:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>Hey,</p>

<p>today I want to show you how to get started with ASP.NET 5 and Entity Framework 6.</p>

<p>If you start with the new templates for ASP.NET 5 you will notice in a short time that examples are going the EF 7 way. But if you want to stay at Entity Framework 6 as long as 7 is not in a final release or just to move from an older version step by step you can follow this instructions here. In this blog post I want to show you how to include a database with a connectionstring saved in a json file with the new ASP.NET Core.</p>

<blockquote>
  <p>Note: At the time of this post ASP.NET was at RC1 status. There might be changes until its completely an final released. However: If you want to dive into new functionalities: Keep reading.</p>
</blockquote>

<h2 id="get-started-with-aspnet-core-and-entity-framework-6-">Get started with ASP.NET Core and Entity Framework 6 :</h2>

<p>First of all you need to start an new project with the new ASP.NET like this:</p>

<p><img src="/assets/articles/wp-content/uploads/2015/12/Ef6Example.jpg" alt="Ef6Example" /></p>

<p>This will create you a new nearly empty solution following the new standards with all configs in *.json files and so on.</p>

<blockquote>
  <p>This example is only made fot the full version of the .net-Framework. So the core version will not be supported with this example.</p>
</blockquote>

<p>The first step we a re going to do is adding the dependency of the Entity Framework to our solution via the project.json file. For this only put the line</p>

<p><code class="highlighter-rouge">"EntityFramework": "6.1.3"</code></p>

<p>at the end of you dependencies section like this:</p>

<p><img src="/assets/articles/wp-content/uploads/2015/12/Ef6Example_02.jpg" alt="Ef6Example_02" /></p>

<p>This will get Visual Studio 2015 to update your dependencies including the Entity Framework.</p>

<p>Now you can create a new class named like your Context. in this case this will be “MyEf6EntityFrameworkContext”.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/12/Ef6Example_03.jpg" alt="Ef6Example_03" /></p>

<p>Be sure to use the “base”-functionality, because we will need it when passing the connectionstring to the context reading it out of the *.json file.</p>

<p>Back in our Startup.cs-File we are including a file called “appsettings.json”. Lets go and add our Connectionstring to this file:</p>

<p><img src="/assets/articles/wp-content/uploads/2015/12/Ef6Example_04.jpg" alt="Ef6Example_04" /></p>

<p>This should look quite familiar because of the connectionstring you knew from the web.config in the previous asp.net-versions.</p>

<h2 id="what-we-did-so-far">What we did so far:</h2>

<p>At this point we added the connectionstring to the config file we will consume in the startup.cs and we created a databasecontext like we know it which will provide us any data in the future.</p>

<h2 id="go-ahead">Go ahead!</h2>

<p>Next thing we have to do is getting the config and our databasecontext married :-)</p>

<p>This can be done putting a single line in our “Startup.cs”-File.</p>

<p>Just add</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="n">services</span><span class="p">.</span><span class="n">AddScoped</span><span class="p">&lt;</span><span class="n">MyEf6EntityFrameworkContext</span><span class="p">&gt;((</span><span class="n">s</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">MyEf6EntityFrameworkContext</span><span class="p">(</span><span class="n">Configuration</span><span class="p">[</span><span class="s">"Data:Ef6ExampleConnectionString"</span><span class="p">]));</span></code></pre></figure>

<p>in the method “ConfigureServices” in your Startup.cs.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Add framework services.
</span>    <span class="n">services</span><span class="p">.</span><span class="nf">AddMvc</span><span class="p">();</span>
    <span class="n">services</span><span class="p">.</span><span class="n">AddScoped</span><span class="p">&lt;</span><span class="n">MyEf6EntityFrameworkContext</span><span class="p">&gt;((</span><span class="n">s</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">MyEf6EntityFrameworkContext</span><span class="p">(</span><span class="n">Configuration</span><span class="p">[</span><span class="s">"Data:Ef6ExampleConnectionString"</span><span class="p">]));</span>
<span class="p">}</span></code></pre></figure>

<p>This line will read the configuration and get the connection-string out of it and use it for establishing the connection. pay attention to the scoped adding. This is because the context should be generated for every single request. You can grab an overview of all lifestyles here, even it’s a bit outdated: <a href="http://blogs.msdn.com/b/webdev/archive/2014/06/17/dependency-injection-in-asp-net-vnext.aspx">Dependency Injection in ASP.NET vNext</a></p>

<h2 id="the-model">The Model</h2>

<p>You can now go ahead and install my <a href="https://github.com/OfferingSolutions/OfferingSolutions-RepositoryPattern-UnitOfWork">Unit of Work</a> via nuget and create a repository like this:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">interface</span> <span class="n">IExampleRepository</span> <span class="p">:</span> <span class="n">IRepositoryContext</span><span class="p">&lt;</span><span class="n">MyModel</span><span class="p">&gt;</span>
    <span class="p">{</span>
    <span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">ExampleRepository</span> <span class="p">:</span> <span class="n">RepositoryContextImpl</span><span class="p">&lt;</span><span class="n">MyModel</span><span class="p">&gt;,</span> <span class="n">IExampleRepository</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nf">ExampleRepository</span><span class="p">(</span><span class="n">MyEf6EntityFrameworkContext</span> <span class="n">databaseContext</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">databaseContext</span><span class="p">)</span>
    <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>With a model like this (for example):</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">MyModel</span>
    <span class="p">{</span>
        <span class="p">[</span><span class="n">Key</span><span class="p">]</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span></code></pre></figure>

<p>Meanwhile I also added <a href="https://github.com/AutoMapper/AutoMapper/wiki/Getting-started">Automappers</a> and a ViewModel to map between those two:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">MyModelViewModel</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">[</span><span class="n">Required</span><span class="p">]</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Now we have to bring it to the build in DI in ASP.NET:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Add framework services.
</span>    <span class="n">services</span><span class="p">.</span><span class="nf">AddMvc</span><span class="p">();</span>
    <span class="n">services</span><span class="p">.</span><span class="n">AddScoped</span><span class="p">&lt;</span><span class="n">IExampleRepository</span><span class="p">,</span> <span class="n">ExampleRepository</span><span class="p">&gt;();</span>
    <span class="n">services</span><span class="p">.</span><span class="n">AddScoped</span><span class="p">&lt;</span><span class="n">MyEf6EntityFrameworkContext</span><span class="p">&gt;((</span><span class="n">s</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">MyEf6EntityFrameworkContext</span><span class="p">(</span><span class="n">Configuration</span><span class="p">[</span><span class="s">"Data:Ef6ExampleConnectionString"</span><span class="p">]));</span>
<span class="p">}</span></code></pre></figure>

<p>and the automapping:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">void</span> <span class="nf">Configure</span><span class="p">(</span><span class="n">IApplicationBuilder</span> <span class="n">app</span><span class="p">,</span> <span class="n">IHostingEnvironment</span> <span class="n">env</span><span class="p">,</span> <span class="n">ILoggerFactory</span> <span class="n">loggerFactory</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Mapper</span><span class="p">.</span><span class="nf">Initialize</span><span class="p">(</span><span class="n">config</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
        <span class="n">config</span><span class="p">.</span><span class="n">CreateMap</span><span class="p">&lt;</span><span class="n">MyModel</span><span class="p">,</span> <span class="n">MyModelViewModel</span><span class="p">&gt;().</span><span class="nf">ReverseMap</span><span class="p">();</span>
    <span class="p">});</span>

    <span class="c1">//...
</span><span class="p">}</span></code></pre></figure>

<p>In the end you only have to build up a controller which gives and takes the values as your API:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="na">[Route("api/[controller]</span><span class="s">")]
</span><span class="k">public</span> <span class="k">class</span> <span class="nc">MyModelController</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IExampleRepository</span> <span class="n">_exampleRepository</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">MyModelController</span><span class="p">(</span><span class="n">IExampleRepository</span> <span class="n">exampleRepository</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_exampleRepository</span> <span class="p">=</span> <span class="n">exampleRepository</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// GET: api/mymodel
</span>    <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">""</span><span class="p">,</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">"GetAll"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Get</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="n">List</span><span class="p">&lt;</span><span class="n">MyModel</span><span class="p">&gt;</span> <span class="n">MyModels</span> <span class="p">=</span> <span class="n">_exampleRepository</span><span class="p">.</span><span class="nf">GetAll</span><span class="p">().</span><span class="nf">ToList</span><span class="p">();</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">JsonResult</span><span class="p">(</span><span class="n">MyModels</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">MyModelViewModel</span><span class="p">&gt;(</span><span class="n">x</span><span class="p">)));</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//Do something with the exception
</span>            <span class="k">return</span> <span class="k">new</span> <span class="nf">HttpStatusCodeResult</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">InternalServerError</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// GET api/values/5
</span>    <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">,</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">"GetSingle"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Get</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="n">MyModel</span> <span class="n">MyModel</span> <span class="p">=</span> <span class="n">_exampleRepository</span><span class="p">.</span><span class="nf">GetSingleById</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">MyModel</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nf">HttpNotFoundResult</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="k">new</span> <span class="nf">HttpOkObjectResult</span><span class="p">(</span><span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">MyModelViewModel</span><span class="p">&gt;(</span><span class="n">MyModel</span><span class="p">));</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//Do something with the exception
</span>            <span class="k">return</span> <span class="k">new</span> <span class="nf">HttpStatusCodeResult</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">InternalServerError</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// POST api/values
</span>    <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
    <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Post</span><span class="p">([</span><span class="n">FromBody</span><span class="p">]</span><span class="n">MyModelViewModel</span> <span class="n">viewModel</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">viewModel</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nf">BadRequestResult</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">MyModel</span> <span class="n">item</span> <span class="p">=</span> <span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">MyModel</span><span class="p">&gt;(</span><span class="n">viewModel</span><span class="p">);</span>

            <span class="n">_exampleRepository</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">item</span><span class="p">);</span>
            <span class="kt">int</span> <span class="n">save</span> <span class="p">=</span> <span class="n">_exampleRepository</span><span class="p">.</span><span class="nf">Save</span><span class="p">();</span>

            <span class="k">return</span> <span class="k">new</span> <span class="nf">CreatedAtRouteResult</span><span class="p">(</span><span class="s">"GetSingle"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">controller</span> <span class="p">=</span> <span class="s">"MyModel"</span><span class="p">,</span> <span class="n">id</span> <span class="p">=</span> <span class="n">item</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">item</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//Do something with the exception
</span>            <span class="k">return</span> <span class="k">new</span> <span class="nf">HttpStatusCodeResult</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">InternalServerError</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// PUT api/values/5
</span>    <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Put</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="p">[</span><span class="n">FromBody</span><span class="p">]</span><span class="n">MyModelViewModel</span> <span class="n">viewModel</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">viewModel</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nf">BadRequestResult</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">MyModel</span> <span class="n">singleById</span> <span class="p">=</span> <span class="n">_exampleRepository</span><span class="p">.</span><span class="nf">GetSingleById</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">singleById</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nf">HttpNotFoundResult</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">singleById</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">Name</span><span class="p">;</span>

            <span class="n">_exampleRepository</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="n">singleById</span><span class="p">);</span>
            <span class="kt">int</span> <span class="n">save</span> <span class="p">=</span> <span class="n">_exampleRepository</span><span class="p">.</span><span class="nf">Save</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">save</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nf">HttpOkObjectResult</span><span class="p">(</span><span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">MyModelViewModel</span><span class="p">&gt;(</span><span class="n">singleById</span><span class="p">));</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="k">new</span> <span class="nf">BadRequestResult</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//Do something with the exception
</span>            <span class="k">return</span> <span class="k">new</span> <span class="nf">HttpStatusCodeResult</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">InternalServerError</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// DELETE api/values/5
</span>    <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Delete</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="n">MyModel</span> <span class="n">singleById</span> <span class="p">=</span> <span class="n">_exampleRepository</span><span class="p">.</span><span class="nf">GetSingleById</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">singleById</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nf">HttpNotFoundResult</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_exampleRepository</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="kt">int</span> <span class="n">save</span> <span class="p">=</span> <span class="n">_exampleRepository</span><span class="p">.</span><span class="nf">Save</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">save</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nf">NoContentResult</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="k">new</span> <span class="nf">BadRequestResult</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//Do something with the exception
</span>            <span class="k">return</span> <span class="k">new</span> <span class="nf">HttpStatusCodeResult</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">InternalServerError</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Thats it. If you now going to use the DatabaseContext it will create the database for you with the new ASP.NET 5 RC1.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/12/Ef6Example_05.jpg" alt="Ef6Example_05" /></p>

<p>You can now go ahead and add an item with e.g. postman:</p>

<p><img src="/assets/articles/wp-content/uploads/2015/12/Ef6Example_06.jpg" alt="Ef6Example_06" /></p>

<p>and it will be stored in the database:</p>

<p><a href="https://github.com/FabianGosebrink/Asp.Net5WithEntityFramework6">Github</a></p>

<p>Hope this helps</p>

<p>Regards</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2015/12/13/get-started-with-asp-net-core-and-entity-framework-6</wp:post_id>
        <wp:post_date>2015-12-13T20:20:00+01:00</wp:post_date>
        <wp:post_date_gmt>2015-12-13T20:20:00+01:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="aspnet"><![CDATA[["aspnet",]]></category>
        
          <category domain="post_tag" nicename="mvc"><![CDATA["mvc",]]></category>
        
          <category domain="post_tag" nicename="automapper"><![CDATA["automapper",]]></category>
        
          <category domain="post_tag" nicename="codefirst"><![CDATA["codefirst",]]></category>
        
          <category domain="post_tag" nicename="database"><![CDATA["database",]]></category>
        
          <category domain="post_tag" nicename="context"><![CDATA["context",]]></category>
        
          <category domain="post_tag" nicename="entityframework"><![CDATA["entityframework",]]></category>
        
          <category domain="post_tag" nicename="json"><![CDATA["json",]]></category>
        
          <category domain="post_tag" nicename="webapi"><![CDATA["webapi"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[ASP.NET Unit Of Work with Entity Framework]]></title>
        <link>http://offering.solutions/blog/articles/2015/12/09/asp-net-unit-of-work-with-entity-framework/</link>
        <pubDate>2015-12-09T21:37:00+01:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>I just implemented a solution for the ASP.NET Unit Of Work with Entity Framework (see <a href="http://offering.solutions/blog/articles/2014/07/01/asp-net-mvc-generic-repositories-and-unitofwork/">this</a> post) and put all this into a NuGet-Package. And finally: Here it is!</p>

<h3 id="code">Code</h3>

<p>Nuget: <a href="https://www.nuget.org/packages/OfferingSolutions.UnitOfWork.Structure/">UnitOfWork by Offering.Solutions</a></p>

<p>Github: <a href="https://github.com/OfferingSolutions/OfferingSolutions-RepositoryPattern-UnitOfWork">OfferingSolutions UnitOfWork with Entity Framework</a></p>

<p>This blogpost has a sample-solution attached. Feel free to look into it. But before you do let me explain this package a bit. It will use the UnitOfWork, you will be able to use GenericRepositories and Customrepositories and everything is cached so that if you use the repositories in one using they only have to be created once.</p>

<p>I wont go into details about the sense of the UnitOfWork-thing but I want to give you code-examples how you can start with this in just a few minutes of your time.</p>

<p>If you want to work with the UnitOfWork in this NuGet-Package you will have two different possibilities:</p>

<ol>
  <li>Use generic repositories</li>
  <li>Extend the generic repositories to use your own functions additional to the given CRUD-operations</li>
</ol>

<p>I want to handle both cases in this post:</p>

<p>Lets start:</p>

<p>First of all you have to install the NuGet-Package. It will add you the needed dll you can work with.</p>

<h3 id="use-generic-repositories">1) Use generic repositories</h3>

<p>The common case is that you have a DatabaseContext and DbSets of you entities stored in it. After adding the package you can use the OsUnitOfWorkContext as follows</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">using</span> <span class="p">(</span><span class="n">IOsUnitOfWorkContext</span> <span class="n">unitOfWorkContext</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">OsUnitOfWorkContext</span><span class="p">(</span><span class="k">new</span> <span class="nf">DatabaseContext</span><span class="p">()))</span>
<span class="p">{</span>
    <span class="n">Person</span> <span class="n">person</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Person</span><span class="p">()</span> <span class="p">{</span> <span class="n">Age</span> <span class="p">=</span> <span class="m">28</span><span class="p">,</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">"Fabian"</span> <span class="p">};</span>

    <span class="c1">//Adding a new Entity, for example "Person"
</span>    <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">person</span><span class="p">);</span>

    <span class="c1">//Savechanges
</span>    <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">Save</span><span class="p">();</span>

    <span class="c1">//or...
</span>    <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">SaveASync</span><span class="p">();</span>

    <span class="c1">// Get all Persons
</span>    <span class="n">List</span> <span class="n">allPersons</span> <span class="p">=</span> <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">GetAll</span><span class="p">().</span><span class="nf">ToList</span><span class="p">();</span>

    <span class="c1">// Get all Persons with the age of 35
</span>    <span class="n">List</span> <span class="n">allPersonsOnAge35</span> <span class="p">=</span> <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">GetAll</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Age</span> <span class="p">==</span> <span class="m">35</span><span class="p">).</span><span class="nf">ToList</span><span class="p">();</span>

    <span class="c1">// Get all Persons with the age of 35 ordered by Name
</span>    <span class="n">List</span> <span class="n">allPersonsOnAge35Ordered</span> <span class="p">=</span> <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">GetAll</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Age</span> <span class="p">==</span> <span class="m">35</span><span class="p">,</span> <span class="n">orderBy</span><span class="p">:</span> <span class="n">q</span> <span class="p">=&gt;</span> <span class="n">q</span><span class="p">.</span><span class="nf">OrderBy</span><span class="p">(</span><span class="n">d</span> <span class="p">=&gt;</span> <span class="n">d</span><span class="p">.</span><span class="n">Name</span><span class="p">)).</span><span class="nf">ToList</span><span class="p">();</span>

    <span class="c1">// Get all Persons with the age of 35 ordered by Name and include its properties
</span>    <span class="n">List</span> <span class="n">allPersonsOnAge35OrderedAndWithThings</span> <span class="p">=</span> <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">GetAll</span><span class="p">(</span>
        <span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Age</span> <span class="p">==</span> <span class="m">35</span><span class="p">,</span>
        <span class="n">orderBy</span><span class="p">:</span> <span class="n">q</span> <span class="p">=&gt;</span> <span class="n">q</span><span class="p">.</span><span class="nf">OrderBy</span><span class="p">(</span><span class="n">d</span> <span class="p">=&gt;</span> <span class="n">d</span><span class="p">.</span><span class="n">Name</span><span class="p">),</span>
        <span class="n">includeProperties</span><span class="p">:</span> <span class="s">"Things"</span><span class="p">).</span><span class="nf">ToList</span><span class="p">();</span>

    <span class="c1">// Get all Persons and include its properties
</span>    <span class="n">List</span> <span class="n">allPersonsWithThings</span> <span class="p">=</span> <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">GetAll</span><span class="p">(</span><span class="n">includeProperties</span><span class="p">:</span> <span class="s">"Things"</span><span class="p">).</span><span class="nf">ToList</span><span class="p">();</span>

    <span class="c1">// Find a single Person with a specific name
</span>    <span class="n">Person</span> <span class="n">findBy</span> <span class="p">=</span> <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="s">"Fabian"</span><span class="p">);</span>

    <span class="c1">// Find a single Person with a specific name and include its siblings
</span>    <span class="n">Person</span> <span class="n">findByWithThings</span> <span class="p">=</span> <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="s">"Fabian"</span><span class="p">,</span> <span class="n">includeProperties</span><span class="p">:</span> <span class="s">"Things"</span><span class="p">);</span>

    <span class="c1">// Find a person by id 
</span>    <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">GetSingleById</span><span class="p">(</span><span class="m">6</span><span class="p">);</span>

    <span class="c1">//Update an existing person
</span>    <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="n">person</span><span class="p">);</span>

    <span class="c1">//Add or Update a Person
</span>    <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">AddOrUpdate</span><span class="p">(</span><span class="n">person</span><span class="p">);</span>

    <span class="c1">//Deleting a Person by Id or by entity
</span>    <span class="c1">//unitOfWorkContext.Delete(person.Id);
</span>    <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="n">person</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<h3 id="use-extended-repositories">2) Use extended repositories</h3>

<p>If you want the normal repository to extend a bit with your own functions this is also possible. Everything you have to do is writing your own repository. You can even overwrite the normal CRUD-Methods to do whateer you like in there.</p>

<p>Attention to inherit it from the “IRepositoryContext<YourEntity>" respectively the "RepositoryContextImpl<YourEntity>". The code should look like this:</YourEntity></YourEntity></p>

<p>Interface:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">interface</span> <span class="n">IPersonRepository</span> <span class="p">:</span> <span class="n">IRepositoryContext</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;</span>
<span class="p">{</span>
    <span class="k">void</span> <span class="nf">MyNewFunction</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>Implementation:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">PersonRepository</span> <span class="p">:</span> <span class="n">RepositoryContextImpl</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;,</span> <span class="n">IPersonRepository</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nf">PersonRepository</span><span class="p">(</span><span class="n">DbContext</span> <span class="n">dbContext</span><span class="p">)</span>
        <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">dbContext</span><span class="p">)</span>
    <span class="p">{</span>

    <span class="p">}</span>

    <span class="k">public</span> <span class="k">void</span> <span class="nf">MyNewFunction</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">//Do Something
</span>    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>You can then use it with</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">using</span> <span class="p">(</span><span class="n">IPersonRepository</span> <span class="n">personRepository</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">PersonRepository</span><span class="p">(</span><span class="k">new</span> <span class="nf">DatabaseContext</span><span class="p">()))</span>
<span class="p">{</span>
    <span class="n">personRepository</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Person</span><span class="p">());</span>
    <span class="n">personRepository</span><span class="p">.</span><span class="nf">Save</span><span class="p">();</span>
    <span class="n">List</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;</span> <span class="n">persons</span> <span class="p">=</span> <span class="n">personRepository</span><span class="p">.</span><span class="nf">GetAll</span><span class="p">();</span>
    <span class="n">personRepository</span><span class="p">.</span><span class="nf">MyNewFunction</span><span class="p">(</span><span class="m">6</span><span class="p">);</span>
    <span class="c1">//...
</span><span class="p">}</span></code></pre></figure>

<p>With this you can build your own repositories and they are build up modular and are replacable in an easy way.</p>

<p>Thats it. I think this is nice and smooth. I hope you can get along with it. Have fun.</p>

<p>See <a href="http://www.asp.net/mvc/tutorials/getting-started-with-ef-5-using-mvc-4/implementing-the-repository-and-unit-of-work-patterns-in-an-asp-net-mvc-application" target="_blank">here</a> and <a href="http://codereview.stackexchange.com/questions/31822/unit-of-work-and-repository-design-pattern-implementation" target="_blank">here </a>for inspiration.</p>

<p>See also <a title="ASP.NET MVC Architecture (Part III): Generic Repositories and UnitOfWork" href="http://offering.solutions/blog/articles/2014/07/01/asp-net-mvc-generic-repositories-and-unitofwork/" target="_blank">here </a>for another related BlogEntry (when this Nuget was not released so far ;) )</p>

<p>Regards</p>

<p>Fabian</p>

<p>Download <a href="/assets/articles/wp-content/uploads/2014/08/OfferingSolutions.UnitOfWork.Sample.0.6.1.zip">OfferingSolutions.UnitOfWork.Sample.0.6.1</a></p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2015/12/09/asp-net-unit-of-work-with-entity-framework</wp:post_id>
        <wp:post_date>2015-12-09T21:37:00+01:00</wp:post_date>
        <wp:post_date_gmt>2015-12-09T21:37:00+01:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="entityframework"><![CDATA[["entityframework",]]></category>
        
          <category domain="post_tag" nicename="nuget"><![CDATA["nuget",]]></category>
        
          <category domain="post_tag" nicename="unitofwork"><![CDATA["unitofwork",]]></category>
        
          <category domain="post_tag" nicename="aspnet"><![CDATA["aspnet"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Getting started with Visual Studio Code, AngularJS and Typescript]]></title>
        <link>http://offering.solutions/blog/articles/2015/12/03/getting-started-with-visual-studio-code-angularjs-and-typescript/</link>
        <pubDate>2015-12-03T14:17:00+01:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>This time I want to show you how getting started with Visual Studio Code, AngularJS and Typescript.</p>

<p>Before we start: A new Typescript version was announced!! You can see whats new <a href="https://github.com/Microsoft/TypeScript/wiki/roadmap">here</a> and further information <a href="http://www.typescriptlang.org/">here</a>.</p>

<p>I always wanted to get to know Typescript and see the advantages of it compared to the “normal” javascript and so I just took my plain old sample application and tried to build it up with Typescript. I have to say: Typescript in combination with Visual Studio Code is absolutely awesome! I loved it.</p>

<h2 id="getting-started">Getting Started:</h2>

<p>Fist of all you need to install npm/nodejs from the installers <a href="https://nodejs.org/en/">here </a>if you are running a windows machine.</p>

<p>if you have npm installed you can install typescript with the command</p>

<p><code class="highlighter-rouge">npm install -g typescript</code></p>

<p>which will install typescript globally. With this installed you can run the typescript compiler “tsc” and compile typescript.</p>

<p>With</p>

<p><code class="highlighter-rouge">npm install tsd -g</code></p>

<p>You can install the <a href="http://definitelytyped.org/tsd/">TypeScript Definition manager for DefinitelyTyped</a> to get the strong typed advantages from Typescript going.</p>

<p>In Visual Studio Code the first file you need when working with Typescript is the “tsconfig.json” which sets the basic behaviour of your typescript compiler.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
    <span class="s2">"compilerOptions"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"target"</span><span class="err">:</span> <span class="s2">"ES5"</span>
    <span class="p">},</span>
    <span class="s2">"exclude"</span><span class="err">:</span> <span class="p">[</span>
        <span class="s2">"node_modules"</span><span class="p">,</span>
        <span class="s2">"wwwroot"</span>
    <span class="p">]</span>
<span class="p">}</span></code></pre></figure>

<p>The “compilerOptions” tell typescript in which language the typescript code should be compiled. The exclude-block, you guessed it, excluded several folders from being checked by the compiler.</p>

<p>Now you can write and compile Typescript files. :-)</p>

<p>In Visual Studio Code if you now press the CRTL-SHIFT-B-Buttons you should trigger Visual Studio Code to compile your written files. If you create a taskrunner Visual Studio Code generates a .vscode-folder with a “tasks.json” in it.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/12/tyepscript01.jpg" alt="Getting started with Visual Studio Code, AngularJS and Typescript" /></p>

<p>See that the “args” is not containing any files explicitly. That triggers the taskrunner to compile the whole code. Not only several files.</p>

<p>If you now type Typescript-code in a *.ts file, save it and compile you will see a progress running in vs code for a short time. After this your file should be compiled into Typescript and appear in Visual Studio Code since Visual Studio Code is file based.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/12/tyepscript02.jpg" alt="Getting started with Visual Studio Code, AngularJS and Typescript" />
<img src="/assets/articles/wp-content/uploads/2015/12/tyepscript03.jpg" alt="Getting started with Visual Studio Code, AngularJS and Typescript" /></p>

<blockquote>
  <p>If you do NOT see any compiled js/ts-files checking your typescript version is always a good hint.</p>
</blockquote>

<h3 id="adding-angularjs-files">Adding AngularJs-Files</h3>

<p>If you want to get also started with AngularJs (and have installed the tsd like mentioned above) you can go to the root of your application, open the console and simply type</p>

<p><code class="highlighter-rouge">tsd install angular --resolve --save</code></p>

<p>which causes the Typescript Definition Manager (tsd) to install the *.d.ts files for AngularJs. The resolve parameter resolves all dependencies angular has (like jQuery in this case).</p>

<p><img src="/assets/articles/wp-content/uploads/2015/12/tyepscript04.jpg" alt="Getting started with Visual Studio Code, Angular and Typescript" /></p>

<p>As you can see the typings-folder was generated with a “tsd.d.ts” file which holds the references and a tsd.json on the root of the application which holds all installed plugins for our project. This gets updated every time you install a new typescript.d-reference.</p>

<p>Thats it. You can now go ahead and implement Typescript with Visual Studio Code.</p>

<p>Check out the github repository of this code <a href="https://github.com/FabianGosebrink/ASPNET-WebAPI-AngularJs-Typescript">here</a>.</p>

<p>Hope this helps.</p>

<p>Regards</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2015/12/03/getting-started-with-visual-studio-code-angularjs-and-typescript</wp:post_id>
        <wp:post_date>2015-12-03T14:17:00+01:00</wp:post_date>
        <wp:post_date_gmt>2015-12-03T14:17:00+01:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="angularjs"><![CDATA[["angularjs",]]></category>
        
          <category domain="post_tag" nicename="typescript"><![CDATA["typescript",]]></category>
        
          <category domain="post_tag" nicename="vscode"><![CDATA["vscode"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[How to use tag helpers in ASP.NET MVC]]></title>
        <link>http://offering.solutions/blog/articles/2015/11/16/how-to-use-tag-helpers-in-asp-net-mvc/</link>
        <pubDate>2015-11-16T20:18:00+01:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>Hey,</p>

<p>in this post I want to show you how to use tag helpers in ASP.NET.</p>

<p>First of all: What are the tag helpers good for?</p>

<p>If you are coding your links in your MVC-Views with normal strings its really hard to refactor or correct them in case you rename your routing, controller or your action. So you need a kind of generic approach to do this.</p>

<p>Razor in previous versions had this</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="n">Url</span><span class="p">.</span><span class="nf">Action</span><span class="p">(</span><span class="s">"MyAction"</span><span class="p">,</span> <span class="s">"MyController"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="s">"123"</span> <span class="p">})</span></code></pre></figure>

<p>which returned an url like <code class="highlighter-rouge">MyController/MyAction/123</code></p>

<p>ASP.NET is now introducing a new more readable way to achieve the same result called TagHelpers.</p>

<blockquote>
  <p>If you are using the normal Template from Visual Studio ASP-NET TagHelpers are already included! However, I will mention the necessary steps anyway.</p>
</blockquote>

<p>Getting started:</p>

<p>First make sure you included a reference to the tag helpers in your project.json</p>

<p><img src="/assets/articles/wp-content/uploads/2015/11/TagHelpers_1.png" alt="TagHelpers_1" /></p>

<p>And Because tag helpers do not throw an exception if you use them and they do not work you should also include a _ViewImports.cshtml which is responsible to load all extra functionality to your views. You can simply add it via the context menu Add –&gt; New Item.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/11/TagHelpers_2.png" alt="TagHelpers_2" />
<img src="/assets/articles/wp-content/uploads/2015/11/TagHelpers_3.png" alt="TagHelpers_3" /></p>

<p>Now all the cshtml files are able to handle ASP.NET-TagHelpers which get easily in your html like this:</p>

<p><code class="highlighter-rouge">&lt;li&gt;&lt;a asp-controller="Home" asp-action="Contact"&gt;Contact&lt;/a&gt;&lt;/li&gt;</code></p>

<p>which is rendered to</p>

<p><code class="highlighter-rouge">&lt;li&gt;&lt;a href="/Home/Contact"&gt;Contact&lt;/a&gt;&lt;/li&gt;</code></p>

<p>That is great because you do not have to use a non-html-syntax anymore and it it easier to understand and to read.</p>

<p>You can also write forms in this Html-Tag-Helper-Syntax which is really nice to understand</p>

<div class="highlighter-rouge"><pre class="highlight"><code>&lt;form asp-controller="Home" asp-action="SendData" method="post" class="form-horizontal" role="form"&gt;
    &lt;div asp-validation-summary="ValidationSummary.All" class="text-danger"&gt;&lt;/div&gt;
    &lt;div class="form-group"&gt;
        &lt;label asp-for="Name" class="col-md-2 control-label"&gt;&lt;/label&gt;
        &lt;div class="col-md-10"&gt;
            &lt;input asp-for="Name" class="form-control" /&gt;
            &lt;span asp-validation-for="Name" class="text-danger"&gt;&lt;/span&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="form-group"&gt;
        &lt;label asp-for="Age" class="col-md-2 control-label"&gt;&lt;/label&gt;
        &lt;div class="col-md-10"&gt;
            &lt;input asp-for="Age" class="form-control" /&gt;
            &lt;span asp-validation-for="Age" class="text-danger"&gt;&lt;/span&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="form-group"&gt;
        &lt;div class="col-md-offset-2 col-md-10"&gt;
            &lt;button type="submit" class="btn btn-default"&gt;Send person&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/form&gt;
</code></pre>
</div>

<p>instead of using the “ugly” @-like Sytax before.</p>

<p>Hope to make you curious about tag helpers. Go and use them in your next ASP.NET-Project :)</p>

<p>Regards</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2015/11/16/how-to-use-tag-helpers-in-asp-net-mvc</wp:post_id>
        <wp:post_date>2015-11-16T20:18:00+01:00</wp:post_date>
        <wp:post_date_gmt>2015-11-16T20:18:00+01:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="aspnet"><![CDATA[["aspnet",]]></category>
        
          <category domain="post_tag" nicename="mvc"><![CDATA["mvc",]]></category>
        
          <category domain="post_tag" nicename="taghelpers"><![CDATA["taghelpers"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Talk bei den Microsoft Evolution Days in Zürich]]></title>
        <link>http://offering.solutions/blog/articles/2015/11/12/talk-bei-den-microsoft-evolution-days-in-zurich/</link>
        <pubDate>2015-11-12T21:42:00+01:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>Am 29. Oktober hielt ich einen Talk bei den Microsoft Evolution Days in Zürich, die Digicomp ausgerichtet hat. Ich habe einen <span id="snippet_meta" class="desc" contenteditable="true">Talk bei den Microsoft Evolution Days in Zürich</span> über AngularJs &amp; REST mit einer ASP.NET WebAPI gehalten. Die Folien gibts direkt bei <a href="http://digiblog.s3-eu-central-1.amazonaws.com/app/1446644382/30_agularjs-und-rest_fabian-gosebrink.pdf">Digicomp</a>. Alle Beispiele gibts auch auf <a href="https://github.com/FabianGosebrink">Github</a>.</p>

<blockquote>
  <p>Mein erster Vortrag als MVP :-)</p>
</blockquote>

<p>Früher hatten die Evolution Days keinen Developer-Track. Dieses Jahr war aber einer dabei und ich bin froh, dass ich eingeladen wurde. Zusammen mit <a href="https://twitter.com/mallibone">Mark Allibone</a> und Hanspeter Bornhauser habe ich einen von insgesamt 5 Vorträgen im Developertrack gehalten.</p>

<p>Das komplette Programm gibts <a href="https://www.digicomp.ch/media/misc/MicrosoftEvolutionDay-2015-DigicompZuerich-29.10.pdf">hier</a>.</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">.<a href="https://twitter.com/FabianGosebrink">@FabianGosebrink</a> about <a href="https://twitter.com/hashtag/angular?src=hash">#angular</a> and <a href="https://twitter.com/hashtag/webapi?src=hash">#webapi</a> at the <a href="https://twitter.com/hashtag/msevolutionday?src=hash">#msevolutionday</a> from <a href="https://twitter.com/DigicompCH">@digicompch</a> /cc <a href="https://twitter.com/Noser_Eng">@Noser_Eng</a> <a href="https://t.co/T73OdWRuiB">pic.twitter.com/T73OdWRuiB</a></p>&mdash; Mark Allibone (@mallibone) <a href="https://twitter.com/mallibone/status/659736379954495488">October 29, 2015</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>Natürlich bedanke ich mich bei Digicomp und Microsoft, dass ich auf dem Event reden durfte. Es hat Spass gemacht. Gerne wieder :-)</p>

<p>Hier ein Auszug aus den Folien:</p>

<p><img src="/assets/articles/wp-content/uploads/2015/11/Folie12.png" alt="Folie12" /></p>

<p>Ich denke es ist wichtig klarzustellen, dass “REST” nicht gleich “WebAPI” ist. REST ist eine Form, die ein Web-Service erfüllen kann. ASP.NET WebAPI ist eine Technologie, mit der man solche Services umsetzen kann. Das ist ein fundamentaler Unterschied.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/11/Folie13.png" alt="Folie13" /></p>

<p>Hier beschreibe ich eine klassische REST-API. Das PATCH-Attribut habe ich auf der nächsten Folie. Es ging also nicht vergessen. Jeder Link stellt eine eindeutige Aktion dar. Alle CRUDOperationen sind durch diese Links für eine Entität abgedeckt.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/11/Folie30.png" alt="Folie30" /></p>

<p>Diese Folie beschreibt wohl das, was AngularJS so mächtig macht. Das Framework bietet einen clientseitige Architektur mit Javascript (oder Typescript), die es ermöglicht komplexe Web-Apllikationen zu bauen.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/11/Folie41.png" alt="Folie41" />
<img src="/assets/articles/wp-content/uploads/2015/11/Folie44.png" alt="Folie44" /></p>

<p>“$scope” ist wohl das Wort, was bei vielen ein Erleichtern auslöst. Es entspricht etwa dem ViewModel, welches man schon von anderen Applikationsarten kennt. Hierauf kann man im AngularJS Funktionen und Werte definieren, die man dann von der View aus via DataBinding konsumieren kann.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/11/Folie59.png" alt="Folie59" /></p>

<p>Bis dahin</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2015/11/12/talk-bei-den-microsoft-evolution-days-in-zurich</wp:post_id>
        <wp:post_date>2015-11-12T21:42:00+01:00</wp:post_date>
        <wp:post_date_gmt>2015-11-12T21:42:00+01:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="angularjs"><![CDATA[["angularjs",]]></category>
        
          <category domain="post_tag" nicename="restapi"><![CDATA["restapi",]]></category>
        
          <category domain="post_tag" nicename="talks"><![CDATA["talks",]]></category>
        
          <category domain="post_tag" nicename="speaking"><![CDATA["speaking"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Zu Gast beim MVP Global Summit bei Microsoft]]></title>
        <link>http://offering.solutions/blog/articles/2015/11/04/zu-gast-beim-mvp-global-summit-bei-microsoft/</link>
        <pubDate>2015-11-04T17:36:00+01:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>Hi,</p>

<p>heute ist Halbzeit. Die Hälfte ist vorbei und ich hab gedacht, dass dies ein guter Zeitpunkt ist um mal das erste Fazit von meinem ersten MVP Global Summit zu ziehen.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/11/IMG-20151104-WA0001.jpg" alt="Zu Gast beim MVP Global Summit bei Microsoft" /></p>

<p>Was ich hier im Global Summit erleben und erfahren darf hätte ich mir so niemals ausgemalt. Der Flug war sehr lang, aber das Event ist es mehr als Wert.</p>

<p>Es gibt sehr viele Sessions, die während der Woche parallel laufen. Aufgrund seiner Expertise (bei mir vormals <em>“ASP.NET/IIS”</em>, jetzt <em>“Visual Studio &amp; Development Categories”</em>) wird man Sessions zugeteilt die über die 5 Tage gehen, kann den Plan aber verändern.</p>

<p>So entstehen den ganzen Tag von 0800 Uhr morgens bis 1700 Uhr Nachmittags Vorträge über die verschiedensten Themen rund um seine Expertise.</p>

<p>Ich darf über die Inhalte wirklich nichts sagen, manche Sachen sind aber auf Channel 9 oder auf https://live.asp.net/ verfügbar.</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Listening to <a href="https://twitter.com/bradlygreen">@bradlygreen</a> from <a href="https://twitter.com/Google">@google</a> talk about <a href="https://twitter.com/angularjs">@angularjs</a> to the <a href="https://twitter.com/aspnet">@aspnet</a> MVPs on <a href="https://twitter.com/Microsoft">@Microsoft</a> campus <a href="https://t.co/YwzRdHKgDi">pic.twitter.com/YwzRdHKgDi</a></p>&mdash; Scott Hanselman (@shanselman) <a href="https://twitter.com/shanselman/status/661659280995520513">November 3, 2015</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>Fakt ist, man bekommt die Chance mit Leuten zu reden, die nicht nur <strong>mit</strong> den Technologien arbeiten, die wir Entwickler jeden Tag verwenden, sondern man bekommt die Leute zu Gesicht, die genau diese Technologien entwickeln. Und sie halten Präsentationen und sind verfügbar für Smalltalk oder technische Diskussionen. Das fängt bei Asp.Net Entwicklern an und hört bei (zumindest mir) sehr bekannten Pluralsight-Autoren lange nicht auf.</p>

<blockquote>
  <p>Ich habe mit Scott Hanselman, John Papa, Jeremy Likness, Damian Edwards … geredet und sitze mit ihnen in Sessions…jeder Speaker und Entwickler weiss, dass das nicht alltäglich ist und man sowas einfach aufsaugen muss.</p>
</blockquote>

<p>Dies ist natürlich phänomenal, da man diese Gelegenheit nicht allzu oft bekommt ;-)</p>

<p>Der Abend ist ebenfalls meist mit organisierten Parties gefüllt, bei denen man nochmal Gelegenheit hat die Leute kennenzulernen. Das Ganze unterstützt durch ein kühles Bier rundet die Sache natürlich sehr gut ab.</p>

<p>Jetzt müssen wir nur noch hoffen, dass die Lufthansa am Samstag nicht streikt. ;-) Ansonsten bleiben Benjamin Abt  und ich halt noch ein bisschen hier.</p>

<p>Alles in allem ist das Event bisher ein absolutes Highlight und man kann nur alles dafür tun nächstes Jahr wieder dabei zu sein.</p>

<p>Gruss</p>

<p> </p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2015/11/04/zu-gast-beim-mvp-global-summit-bei-microsoft</wp:post_id>
        <wp:post_date>2015-11-04T17:36:00+01:00</wp:post_date>
        <wp:post_date_gmt>2015-11-04T17:36:00+01:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="global"><![CDATA[["global",]]></category>
        
          <category domain="post_tag" nicename="mvp"><![CDATA["mvp",]]></category>
        
          <category domain="post_tag" nicename="summit"><![CDATA["summit",]]></category>
        
          <category domain="post_tag" nicename="microsoft"><![CDATA["microsoft"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[WebHooks with ASP.NET on Azure - DropBox and GitHub]]></title>
        <link>http://offering.solutions/blog/articles/2015/10/18/webhooks-with-asp-net-on-azure-dropbox-and-github/</link>
        <pubDate>2015-10-18T19:50:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>Hi,</p>

<p>in this post I want to show you how to use ASP.NET-WebHooks with an example of DropBox and Github. This app will be hostet on Windows-Azure and we’ll be using Visual Studio 2015.</p>

<p>The code in this example will be available on <a href="https://github.com/FabianGosebrink/ASPNET-WebHooks">GitHub</a>.</p>

<p>You can find a great summary <a href="http://blogs.msdn.com/b/webdev/archive/2015/09/04/introducing-microsoft-asp-net-webhooks-preview.aspx">here</a> and <a href="http://www.hanselman.com/blog/IntroducingASPNETWebHooksReceiversWebHooksMadeEasy.aspx">here</a> of what WebHooks exactly are. In short: You can receive updates from Websites and catch them with your own staying always up to date and seeing what is happening to your subscribed websites like Instagram, DropBox, GitHub etc. (We will only cover <a href="https://github.com/">GitHub</a>and <a href="https://www.dropbox.com/">DropBox</a> here)</p>

<p>WebHooks on GitHub: <a href="https://github.com/aspnet/WebHooks">Gogogo!</a></p>

<blockquote>
  <p>You really should take a look at this repository. Its providing you a nice overview of which services are supported out-of-the-box. That is making the stuff nice and easy.</p>
</blockquote>

<p>First of all we take the current stable Version of WebAPI 2.2 and create a new project.</p>

<p>After this you can either install the Nuget-Packages for DropBox and GitHub support seperately (<a href="https://www.nuget.org/packages/Microsoft.AspNet.WebHooks.Receivers.Dropbox/1.2.0-beta3a">here</a> and <a href="https://www.nuget.org/packages/Microsoft.AspNet.WebHooks.Receivers.GitHub/1.2.0-beta3a">here</a>), or you can install the extension for Visual Studio which can be found here. (Tools –&gt; Extensions and Updates):</p>

<p><img src="/assets/articles/wp-content/uploads/2015/10/11.jpg" alt="WebHooks with ASP.NET on Azure - DropBox and GitHub" /></p>

<p>once installed you will be able to add new services like this:</p>

<p><img src="/assets/articles/wp-content/uploads/2015/10/21.jpg" alt="WebHooks with ASP.NET on Azure - DropBox and GitHub" />
<img src="/assets/articles/wp-content/uploads/2015/10/32.jpg" alt="WebHooks with ASP.NET on Azure - DropBox and GitHub" /></p>

<p>But before we do so, lets prepare GitHub and DropBox to send events when something is happening.</p>

<p>How Github is prepared you can see on the posted link above. But once again: <a href="http://blogs.msdn.com/b/webdev/archive/2015/09/04/introducing-microsoft-asp-net-webhooks-preview.aspx">here</a></p>

<h3 id="prepare-dropbox-for-webhooks">Prepare DropBox for WebHooks:</h3>

<p>First check this link: <a href="https://www.dropbox.com/developers/apps">Apps for DropBox </a>and create a new app which is responsible for invoking the WebHooks.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/10/42.jpg" alt="WebHooks with ASP.NET on Azure - DropBox and GitHub" /> I chose the whole DropBox-thing for this example.</p>

<p>After creating this new app we are interested in the details of this app. Click on it and you will ssee something like this:</p>

<p><img src="/assets/articles/wp-content/uploads/2015/10/5.jpg" alt="WebHooks with ASP.NET on Azure - DropBox and GitHub" /></p>

<p>We are interested in the secret for your app and in the link we define for the target of our WebHooks.</p>

<blockquote>
  <p>I will take the placeholder “<em>[MyDropBoxAppKey]</em>” as the key for this blogpost. You will have to replace this with your own secret yu get when you click on “show” above.</p>
</blockquote>

<p>Once we have the secret we can go back to our Visual Studio and select the both WebHook receivers we want to create: GitHub and DropBox.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/10/6.jpg" alt="WebHooks with ASP.NET on Azure - DropBox and GitHub" /></p>

<p>Add your secrets here and click finish:</p>

<p><img src="/assets/articles/wp-content/uploads/2015/10/7.jpg" alt="WebHooks with ASP.NET on Azure - DropBox and GitHub" /></p>

<p>If everything worked fine the extension created everything for you: The handlers, the startup cofnig which can be in addition to your existing config and it updated the Web.config-file with your settings.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/10/8.jpg" alt="WebHooks with ASP.NET on Azure - DropBox and GitHub" /></p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">namespace</span> <span class="nn">WebHooksExample</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">WebHookConfig</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Register</span><span class="p">(</span><span class="n">HttpConfiguration</span> <span class="n">config</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">config</span><span class="p">.</span><span class="nf">InitializeReceiveGitHubWebHooks</span><span class="p">();</span>
            <span class="n">config</span><span class="p">.</span><span class="nf">InitializeReceiveDropboxWebHooks</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Be sure to call this register method from your app start. In this case I use Owin-Startup class. In your case this can be global.asax etc.</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;configuration&gt;</span>
    <span class="nt">&lt;appSettings&gt;</span>
    <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">"MS_WebHookReceiverSecret_GitHub"</span> <span class="na">value=</span><span class="s">"[MyGitHubKey]"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">"MS_WebHookReceiverSecret_Dropbox"</span> <span class="na">value=</span><span class="s">"[MyDropBoxAppKey]"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/appSettings&gt;</span>
    ...
<span class="nt">&lt;/configuration&gt;</span></code></pre></figure>

<p>The handlers itself are self explaining. Note that you are only deriving a class from the the WebHookHandler-Class. You have to decide in the class itself whether this call is the one you want or not.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">DropboxWebHookHandler</span> <span class="p">:</span> <span class="n">WebHookHandler</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">override</span> <span class="n">Task</span> <span class="nf">ExecuteAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">receiver</span><span class="p">,</span> <span class="n">WebHookHandlerContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">// make sure we're only processing the intended type of hook
</span>            <span class="k">if</span><span class="p">(</span><span class="s">"Dropbox"</span><span class="p">.</span><span class="nf">Equals</span><span class="p">(</span><span class="n">receiver</span><span class="p">,</span> <span class="n">System</span><span class="p">.</span><span class="n">StringComparison</span><span class="p">.</span><span class="n">CurrentCultureIgnoreCase</span><span class="p">))</span>
            <span class="p">{</span>
                <span class="c1">// todo: replace this placeholder functionality with your own code
</span>                <span class="kt">string</span> <span class="n">action</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">Actions</span><span class="p">.</span><span class="nf">First</span><span class="p">();</span>
                <span class="n">JObject</span> <span class="n">incoming</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">GetDataOrDefault</span><span class="p">&lt;</span><span class="n">JObject</span><span class="p">&gt;();</span>
            <span class="p">}</span>
            
            <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="nf">FromResult</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span></code></pre></figure>

<p>Once you have done this your app is ready for deploying it to Azure. Deploy it (Right-clikc your project in Visual Studio and deploy) and check the values in the application settings using portal.azure.com:</p>

<p><a href="/assets/articles/wp-content/uploads/2015/10/9.jpg">WebHooks with ASP.NET on Azure - DropBox and GitHub</a></p>

<p>There your two secrets should appear now. If not: Get them in there manually. The keys are
<code class="highlighter-rouge">MS_WebHookReceiverSecret_GitHub</code>
and
<code class="highlighter-rouge">MS_WebHookReceiverSecret_Dropbox</code></p>

<p>Now your app is ready to receive WebHooks. But how do we connect DropBox to fire againt our application? Well, the github case mentioned in the <a href="http://blogs.msdn.com/b/webdev/archive/2015/09/04/introducing-microsoft-asp-net-webhooks-preview.aspx">link above</a> is valid for dropbox, too! So lets enter the page in the dropbox-app we have been creating a few minutes before:</p>

<p><code class="highlighter-rouge">https://[host]/api/webhooks/incoming/[receiver]</code></p>

<p>is the form. So in our case this is:</p>

<p><code class="highlighter-rouge">https://[host]/api/webhooks/incoming/dropbox</code></p>

<p><img src="/assets/articles/wp-content/uploads/2015/10/10.jpg" alt="WebHooks with ASP.NET on Azure - DropBox and GitHub" /></p>

<p>After a short check this should be working and get the state “Enabled” from DropBox.</p>

<p>If you now change something in your entire dropbox-space the webhook should be triggered like this:</p>

<p><img src="/assets/articles/wp-content/uploads/2015/10/111.jpg" alt="WebHooks with ASP.NET on Azure - DropBox and GitHub" /></p>

<p>If you only want to watch a specific part of your dropbox you have to spcify this in your app. Above we selected “Full Dropbox”.</p>

<p>In the WebHookHandler itself you can now do what you want with the POST-request from dropbox. Sending an Email, notify your apge with SignalR etc. Same applies for github. Any change should trigger a webhook and you can work with in on your website in a way you want to.</p>

<p>I hope this helps anybody and happy coding.</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2015/10/18/webhooks-with-asp-net-on-azure-dropbox-and-github</wp:post_id>
        <wp:post_date>2015-10-18T19:50:00+02:00</wp:post_date>
        <wp:post_date_gmt>2015-10-18T19:50:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="aspnet"><![CDATA[["aspnet",]]></category>
        
          <category domain="post_tag" nicename="azure"><![CDATA["azure",]]></category>
        
          <category domain="post_tag" nicename="dropbox"><![CDATA["dropbox",]]></category>
        
          <category domain="post_tag" nicename="github"><![CDATA["github",]]></category>
        
          <category domain="post_tag" nicename="visualstudio"><![CDATA["visualstudio",]]></category>
        
          <category domain="post_tag" nicename="webhooks"><![CDATA["webhooks"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Token Authentication with Claims and ASP.NET WebAPI]]></title>
        <link>http://offering.solutions/blog/articles/2015/10/03/token-authentication-with-claims-and-asp-net-webapi/</link>
        <pubDate>2015-10-03T14:20:52+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this post I would like to show you the most simple example about TToken Authentication with Claims and ASP.NET WebAPI.</p>

<p>The sense behind this is:</p>

<ol>
  <li>We ask the Server for a token</li>
  <li>We receive the token, store it client side and…</li>
  <li>…send it in the header on every request</li>
</ol>

<p>The “problem” is that we do want to use all build in things Asp.Net WebAPI provides us. Microsoft serves us everything we need. So lets do this :)</p>

<p>First of all we configure our WebAPI to create a “controller” which is taking our requests. Here is the first unusual thing: The controller we create is kind of a virtual controller. We only provide it as a string.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="n">OAuthOptions</span> <span class="p">=</span> <span class="k">new</span> <span class="n">OAuthAuthorizationServerOptions</span>
    <span class="p">{</span>
        <span class="n">TokenEndpointPath</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">PathString</span><span class="p">(</span><span class="s">"/Token"</span><span class="p">),</span>
        <span class="n">Provider</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ApplicationOAuthProvider</span><span class="p">(),</span>
        <span class="n">AuthorizeEndpointPath</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">PathString</span><span class="p">(</span><span class="s">"/api/Account/ExternalLogin"</span><span class="p">),</span>
        <span class="n">AccessTokenExpireTimeSpan</span> <span class="p">=</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="nf">FromDays</span><span class="p">(</span><span class="m">14</span><span class="p">),</span>
        <span class="c1">//ONLY FOR DEVELOPING: ALLOW INSECURE HTTP!
</span>        <span class="n">AllowInsecureHttp</span> <span class="p">=</span> <span class="k">true</span>
    <span class="p">};</span>

<span class="c1">// Enable the application to use bearer tokens to authenticate users
</span><span class="n">app</span><span class="p">.</span><span class="nf">UseOAuthBearerTokens</span><span class="p">(</span><span class="n">OAuthOptions</span><span class="p">);</span></code></pre></figure>

<p>The “TokenEndpointPath” can be treated like a controller without really having one in your project. You will not find such a class there, so stop looking ;-) Other Properties speak for themselves. Well, now we have to take a look at the ApplicationOAuthProvider, we mentioned in the code, because this is a class which consumes the token request and gives us the token in the end.</p>

<p>Lets have a look at this.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">ApplicationOAuthProvider</span> <span class="p">:</span> <span class="n">OAuthAuthorizationServerProvider</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">override</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">ValidateClientAuthentication</span><span class="p">(</span><span class="n">OAuthValidateClientAuthenticationContext</span> <span class="n">context</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">context</span><span class="p">.</span><span class="nf">Validated</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">GrantResourceOwnerCredentials</span><span class="p">(</span><span class="n">OAuthGrantResourceOwnerCredentialsContext</span> <span class="n">context</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">context</span><span class="p">.</span><span class="n">OwinContext</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="n">Headers</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"Access-Control-Allow-Origin"</span><span class="p">,</span> <span class="k">new</span><span class="p">[]</span> <span class="p">{</span> <span class="s">"*"</span> <span class="p">});</span>

        <span class="k">if</span><span class="p">(</span><span class="n">context</span><span class="p">.</span><span class="n">UserName</span> <span class="p">!=</span> <span class="n">context</span><span class="p">.</span><span class="n">Password</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">context</span><span class="p">.</span><span class="nf">SetError</span><span class="p">(</span><span class="s">"invalid_grant"</span><span class="p">,</span> <span class="s">"The user name or password is incorrect."</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="kt">var</span> <span class="n">identity</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ClaimsIdentity</span><span class="p">(</span><span class="n">context</span><span class="p">.</span><span class="n">Options</span><span class="p">.</span><span class="n">AuthenticationType</span><span class="p">);</span>
        <span class="n">identity</span><span class="p">.</span><span class="nf">AddClaim</span><span class="p">(</span><span class="k">new</span> <span class="nf">Claim</span><span class="p">(</span><span class="s">"sub"</span><span class="p">,</span> <span class="n">context</span><span class="p">.</span><span class="n">UserName</span><span class="p">));</span>
        <span class="n">identity</span><span class="p">.</span><span class="nf">AddClaim</span><span class="p">(</span><span class="k">new</span> <span class="nf">Claim</span><span class="p">(</span><span class="n">ClaimTypes</span><span class="p">.</span><span class="n">Role</span><span class="p">,</span> <span class="s">"user"</span><span class="p">));</span>

        <span class="n">context</span><span class="p">.</span><span class="nf">Validated</span><span class="p">(</span><span class="n">identity</span><span class="p">);</span>

    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>The first line is a CORS-Line. You can get information about CORS looking <a href="http://www.asp.net/web-api/overview/security/enabling-cross-origin-requests-in-web-api">here</a> or <a href="http://enable-cors.org/server_aspnet.html">here</a>.</p>

<p>ATTENTION: I am only comparing username and password here for equality. Normally you yould take your own User-Repository or the Asp.Net-Identity thing.</p>

<p>If everything is alright we can create a new identity and add claims to it.</p>

<p>Thats it! For server side.</p>

<p>But how to consume it?</p>

<p>So we have created the enpoint…lets request it with a POST-Request. (I am using Postman here)</p>

<p><img src="/assets/articles/wp-content/uploads/2015/10/1.jpg" alt="1" /></p>

<p>So send a post request to the token enpoint we created. Take a look at the “x-www-form-urlencoded” which is very important! Also see the “grant_type” which is set to “password”. Without this you will not reach the token endpoint. username and password are equal due to the fact we check it for equality in your OAuthProvider we introduced before.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/10/2.jpg" alt="2" />
Also check that in the Headers-Section we set the content-type to “application/x-www-form-encoded”. Firing this request reaches the endpoint and is giving us a valid token:</p>

<p><img src="/assets/articles/wp-content/uploads/2015/10/31.jpg" alt="3" /></p>

<p>There you go. if we now copy this token and send it to a controller we tagged with the [authorize]-Attribute like this:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="na">[Authorize]</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">ValuesController</span> <span class="p">:</span> <span class="n">ApiController</span>
<span class="p">{</span>
    <span class="c1">// GET api/&lt;controller&gt;
</span>    <span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">Get</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">ClaimsIdentity</span> <span class="n">claimsIdentity</span> <span class="p">=</span> <span class="n">User</span><span class="p">.</span><span class="n">Identity</span> <span class="k">as</span> <span class="n">ClaimsIdentity</span><span class="p">;</span>

        <span class="kt">var</span> <span class="n">claims</span> <span class="p">=</span> <span class="n">claimsIdentity</span><span class="p">.</span><span class="n">Claims</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="p">{</span> <span class="n">type</span> <span class="p">=</span> <span class="n">x</span><span class="p">.</span><span class="n">Type</span><span class="p">,</span> <span class="k">value</span> <span class="p">=</span> <span class="n">x</span><span class="p">.</span><span class="n">Value</span> <span class="p">});</span>

        <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">claims</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><img src="/assets/articles/wp-content/uploads/2015/10/41.jpg" alt="Token Authentication with Claims and ASP.NET WebAPI" /></p>

<p>Note that we added the “Authorization”.Header with the “Bearer” and the token we just received. We can send it and receive the protected resource.</p>

<p>Thats it :)</p>

<p>You can also check the roles you added in the claims by just mentioning the roles in your Autorize-Attribute:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="na">[Authorize(Roles = "user")]</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">ValuesController</span> <span class="p">:</span> <span class="n">ApiController</span>
<span class="p">{</span>
    <span class="c1">// GET api/&lt;controller&gt;
</span>    <span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">Get</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">ClaimsIdentity</span> <span class="n">claimsIdentity</span> <span class="p">=</span> <span class="n">User</span><span class="p">.</span><span class="n">Identity</span> <span class="k">as</span> <span class="n">ClaimsIdentity</span><span class="p">;</span>

        <span class="kt">var</span> <span class="n">claims</span> <span class="p">=</span> <span class="n">claimsIdentity</span><span class="p">.</span><span class="n">Claims</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="p">{</span> <span class="n">type</span> <span class="p">=</span> <span class="n">x</span><span class="p">.</span><span class="n">Type</span><span class="p">,</span> <span class="k">value</span> <span class="p">=</span> <span class="n">x</span><span class="p">.</span><span class="n">Value</span> <span class="p">});</span>

        <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">claims</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>The roles are added via claims in your OAuthProvider.</p>

<p>Hope this helps anybody.</p>

<p>Happy coding :)</p>

<p><a href="https://github.com/FabianGosebrink/ASPNET-WebAPI-TokenAuthentication">Github repository here</a></p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2015/10/03/token-authentication-with-claims-and-asp-net-webapi</wp:post_id>
        <wp:post_date>2015-10-03T14:20:52+02:00</wp:post_date>
        <wp:post_date_gmt>2015-10-03T14:20:52+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="aspnet"><![CDATA[["aspnet",]]></category>
        
          <category domain="post_tag" nicename="authentication"><![CDATA["authentication",]]></category>
        
          <category domain="post_tag" nicename="authorization"><![CDATA["authorization",]]></category>
        
          <category domain="post_tag" nicename="claims"><![CDATA["claims",]]></category>
        
          <category domain="post_tag" nicename="oauthprovider"><![CDATA["oauthprovider",]]></category>
        
          <category domain="post_tag" nicename="roles"><![CDATA["roles"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[WebAPI with ASP.NET Core 1.0 and ASP.NET]]></title>
        <link>http://offering.solutions/blog/articles/2015/09/02/webapi-with-asp-net-core-1-0-and-asp-net/</link>
        <pubDate>2015-09-02T17:04:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>I just released two sample APIs on Github: WebAPI with ASP.NET Core 1.0 and ASP.NET</p>

<p>One of them is done with the “old” approach but heads in the direction of my understanding of a modern WebAPI using OData and having DTOs instead of delivering the plain entitites down to the client.</p>

<p>I will cover the most important information now:</p>

<p>The get method includes odata and is restricting the page-size to 50 to prevent anyone from getting <em>all</em> entries which can cause problems. I also added a paginationheader to enable paging and give the information included in the header “X-Pagination” value. Here you can add more stuff like link to the next page, link ot the previous page etc.</p>

<p>I am also using mapper to get a DataTransferObject (DTO) to send it to the client instead of my plain “entity”.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="na">[HttpGet]</span>
<span class="na">[EnableQuery(PageSize = 50)]</span>
<span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">Get</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">paginationHeader</span> <span class="p">=</span> <span class="k">new</span>
    <span class="p">{</span>
        <span class="n">totalCount</span> <span class="p">=</span> <span class="n">Singleton</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">Houses</span><span class="p">.</span><span class="n">Count</span>
        <span class="c1">// Add more headers here if you want...
</span>    <span class="p">};</span>

    <span class="n">HttpContext</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="nf">AppendHeader</span><span class="p">(</span><span class="s">"X-Pagination"</span><span class="p">,</span> <span class="n">JsonConvert</span><span class="p">.</span><span class="nf">SerializeObject</span><span class="p">(</span><span class="n">paginationHeader</span><span class="p">));</span>

    <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">Singleton</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">Houses</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">_houseMapper</span><span class="p">.</span><span class="nf">MapToDto</span><span class="p">(</span><span class="n">x</span><span class="p">)));</span>
<span class="p">}</span></code></pre></figure>

<p>The only important thing to mention about the Create-Method is that we are returning a CreatedAtRoute-Actionresult. This causes, that we have a link to the created resource in the header so we can either redirect on the client directly to it, provide the link to the user or work with it in another way.
Also take care about sending back the Modelstate in case of an invalid dto.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="na">[HttpPost]</span>
<span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">Create</span><span class="p">([</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">HouseDto</span> <span class="n">houseDto</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">houseDto</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(!</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">ModelState</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">HouseEntity</span> <span class="n">houseEntity</span> <span class="p">=</span> <span class="n">_houseMapper</span><span class="p">.</span><span class="nf">MapToEntity</span><span class="p">(</span><span class="n">houseDto</span><span class="p">);</span>

    <span class="n">Singleton</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">Houses</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">houseEntity</span><span class="p">);</span>

    <span class="k">return</span> <span class="nf">CreatedAtRoute</span><span class="p">(</span><span class="s">"DefaultApi"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">houseEntity</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">_houseMapper</span><span class="p">.</span><span class="nf">MapToDto</span><span class="p">(</span><span class="n">houseEntity</span><span class="p">));</span>
<span class="p">}</span></code></pre></figure>

<p>Mostly forgotten: The Http-Patch-Verb. Its receiving a generic Delta-Object which can be applied to an existing entity and then can be updated.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="na">[HttpPatch]</span>
<span class="na">[Route("{id:int}")]</span>
<span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">Patch</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Delta</span><span class="p">&lt;</span><span class="n">HouseDto</span><span class="p">&gt;</span> <span class="n">houseDto</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">houseDto</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(!</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">ModelState</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">HouseEntity</span> <span class="n">houseEntityToUpdate</span> <span class="p">=</span> <span class="n">Singleton</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">Houses</span><span class="p">.</span><span class="nf">FirstOrDefault</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">houseEntityToUpdate</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="n">HouseDto</span> <span class="n">existingHouse</span> <span class="p">=</span> <span class="n">_houseMapper</span><span class="p">.</span><span class="nf">MapToDto</span><span class="p">(</span><span class="n">houseEntityToUpdate</span><span class="p">);</span>
    <span class="n">houseDto</span><span class="p">.</span><span class="nf">Patch</span><span class="p">(</span><span class="n">existingHouse</span><span class="p">);</span>

    <span class="kt">int</span> <span class="n">index</span> <span class="p">=</span> <span class="n">Singleton</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">Houses</span><span class="p">.</span><span class="nf">FindIndex</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">);</span>
    <span class="n">Singleton</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">Houses</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="p">=</span> <span class="n">_houseMapper</span><span class="p">.</span><span class="nf">MapToEntity</span><span class="p">(</span><span class="n">existingHouse</span><span class="p">);</span>

    <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">existingHouse</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>And last but not least the delete-method. See the fact that one has to return a nocontent (204) which tells the client that the delete was successful.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="na">[HttpDelete]</span>
<span class="na">[Route("{id:int}")]</span>
<span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">Delete</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">HouseEntity</span> <span class="n">houseEntityToDelete</span> <span class="p">=</span> <span class="n">Singleton</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">Houses</span><span class="p">.</span><span class="nf">FirstOrDefault</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">houseEntityToDelete</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="n">Singleton</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">Houses</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">houseEntityToDelete</span><span class="p">);</span>

    <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">(</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">NoContent</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>You can find it here:</p>

<p><a href="https://github.com/FabianGosebrink/ASPNET-WebAPI-Sample">https://github.com/FabianGosebrink/ASPNET-WebAPI-Sample</a></p>

<p>It supports the GET/POST/PUT/PATCH/DELETE, so the normal CRUD-Approach. OData is included.</p>

<p>The ASP.NET Core-approach is present in another repository.
<a href="https://github.com/FabianGosebrink/ASPNET-Core-WebAPI-Sample">https://github.com/FabianGosebrink/ASPNET-Core-WebAPI-Sample</a></p>

<p>Comment if you have suggestions to make these examples better! Let me know.</p>

<p>HTH</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2015/09/02/webapi-with-asp-net-core-1-0-and-asp-net</wp:post_id>
        <wp:post_date>2015-09-02T17:04:00+02:00</wp:post_date>
        <wp:post_date_gmt>2015-09-02T17:04:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="aspnet"><![CDATA[["aspnet",]]></category>
        
          <category domain="post_tag" nicename="web"><![CDATA["web",]]></category>
        
          <category domain="post_tag" nicename="architecture"><![CDATA["architecture",]]></category>
        
          <category domain="post_tag" nicename="webapi"><![CDATA["webapi"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[AngularJS with gulp, wiredep and bower]]></title>
        <link>http://offering.solutions/blog/articles/2015/08/30/angularjs-with-gulp-wiredep-and-bower/</link>
        <pubDate>2015-08-30T11:18:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>With this blogpost I want to show you how to use AngularJS with gulp, wiredep and bower to provide the files to an angular application.</p>

<p>I just introduced Gulp in my AngularJSDemoApp on GitHub.</p>

<p>Check it out <a href="https://github.com/FabianGosebrink/ASPNET-WebAPI-AngularJs">here</a>.</p>

<h3 id="angularjs-with-gulp-wiredep-and-bower">AngularJS with gulp wiredep and bower</h3>

<h4 id="gulpjs">gulp.js</h4>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"gulp"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">jshint</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"gulp-jshint"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">jscs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"gulp-jscs"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">del</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"del"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">inject</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'gulp-inject'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"./gulp.config"</span><span class="p">)();</span>

<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s2">"vet"</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">srcJSFiles</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">jscs</span><span class="p">())</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">jshint</span><span class="p">())</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">jshint</span><span class="p">.</span><span class="nx">reporter</span><span class="p">(</span><span class="s2">"jshint-stylish"</span><span class="p">,</span> <span class="p">{</span> <span class="na">verbose</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}));</span>
<span class="p">});</span>

<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">'injectJsIntoIndex'</span><span class="p">,</span> <span class="p">[</span><span class="s2">"vet"</span><span class="p">],</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">wiredep</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'wiredep'</span><span class="p">).</span><span class="nx">stream</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="nx">config</span><span class="p">.</span><span class="nx">getWiredepDefaultOptions</span><span class="p">();</span>

    <span class="kd">var</span> <span class="nx">target</span> <span class="o">=</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">targetIndexHtmlFile</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">sources</span> <span class="o">=</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">srcJSFiles</span><span class="p">);</span>

    <span class="k">return</span> <span class="nx">target</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">inject</span><span class="p">(</span><span class="nx">sources</span><span class="p">,</span> <span class="p">{</span>
            <span class="na">addRootSlash</span><span class="p">:</span> <span class="kc">false</span>
        <span class="p">}))</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">wiredep</span><span class="p">(</span><span class="nx">options</span><span class="p">))</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">root</span><span class="p">));</span>
<span class="p">});</span></code></pre></figure>

<p>The gulp task is checking via wiredep all dependencies and is injecting them into the index.html automatically. After this it is passing out the file into the destination.</p>

<h4 id="gulpconfigjs">gulp.config.js</h4>

<p>The gulp-config is seperated:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">srcJSFiles</span><span class="p">:</span> <span class="p">[</span>
            <span class="s2">"./app/*.js"</span><span class="p">,</span>
            <span class="s2">"./app/*/*.js"</span><span class="p">,</span>
            <span class="s2">"./app/*/*/*.js"</span><span class="p">,</span>
            <span class="s2">"!./node_modules/**/*.js"</span>
        <span class="p">],</span>
        <span class="na">targetIndexHtmlFile</span><span class="p">:</span> <span class="s2">"index.html"</span><span class="p">,</span>
        <span class="na">root</span><span class="p">:</span> <span class="s2">"./"</span><span class="p">,</span>

        <span class="na">bower</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">json</span><span class="p">:</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"./bower.json"</span><span class="p">),</span>
            <span class="na">directory</span><span class="p">:</span> <span class="s2">"./libs"</span><span class="p">,</span>
            <span class="na">ignorePath</span><span class="p">:</span> <span class="s2">"../.."</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nx">config</span><span class="p">.</span><span class="nx">getWiredepDefaultOptions</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>

        <span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">bowerJson</span><span class="p">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">bower</span><span class="p">.</span><span class="nx">json</span><span class="p">,</span>
            <span class="na">directory</span><span class="p">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">bower</span><span class="p">.</span><span class="nx">directory</span><span class="p">,</span>
            <span class="na">ignorePath</span><span class="p">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">bower</span><span class="p">.</span><span class="nx">ignorePath</span>
        <span class="p">};</span>

        <span class="k">return</span> <span class="nx">options</span><span class="p">;</span>
    <span class="p">};</span>

    <span class="k">return</span> <span class="nx">config</span><span class="p">;</span>
<span class="p">};</span></code></pre></figure>

<p>Just run the corresponding gulp commands to start the default gulp task. Or, if you do not like gulp, just comment in all the files explicitly. That will do it, too :)</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"libs/angular/angular.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"libs/angular-animate/angular-animate.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"libs/angular-bootstrap/ui-bootstrap-tpls.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"libs/angular-loading-bar/build/loading-bar.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"libs/angular-resource/angular-resource.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"libs/angular-route/angular-route.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"libs/angular-toastr/dist/angular-toastr.tpls.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"libs/jquery/dist/jquery.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"libs/bootstrap/dist/js/bootstrap.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"libs/lodash/lodash.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="c">&lt;!-- endbower --&gt;</span>

<span class="c">&lt;!-- inject:js --&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"app/application.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"app/Contact/contactModule.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"app/Home/homeModule.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"app/Contact/Controllers/contactController.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"app/Home/Controllers/homeController.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"app/Home/Services/peopleServices.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="c">&lt;!-- endinject --&gt;</span></code></pre></figure>

<p>Regards and have fun. Happy coding</p>

<p>If you have VS 2013 you can install the <a href="https://visualstudiogallery.msdn.microsoft.com/8e1b4368-4afb-467a-bc13-9650572db708">Task Runner Explorer</a>, which is included in VS 2015 or you just run the commands from the command line being on the level of the gulp.js-file.</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2015/08/30/angularjs-with-gulp-wiredep-and-bower</wp:post_id>
        <wp:post_date>2015-08-30T11:18:00+02:00</wp:post_date>
        <wp:post_date_gmt>2015-08-30T11:18:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="angularjs"><![CDATA[["angularjs",]]></category>
        
          <category domain="post_tag" nicename="bower"><![CDATA["bower",]]></category>
        
          <category domain="post_tag" nicename="github"><![CDATA["github",]]></category>
        
          <category domain="post_tag" nicename="gulp"><![CDATA["gulp",]]></category>
        
          <category domain="post_tag" nicename="wiredep"><![CDATA["wiredep"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[AngularJS NgResource Demo with ASP.NET WebAPI]]></title>
        <link>http://offering.solutions/blog/articles/2015/08/25/angularjs-ngresource-demo-with-asp-net-webapi/</link>
        <pubDate>2015-08-25T11:45:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this blogpost I want to show a simple AngularJS NgResource Demo with ASP.NET WebAPI querying data as JSON.</p>

<p>Code: <a href="https://github.com/FabianGosebrink/ASPNET-WebAPI-AngularJs-NgResource-Demo">https://github.com/FabianGosebrink/ASPNET-WebAPI-AngularJs-NgResource-Demo</a></p>

<p>NgResource: <a href="https://docs.AngularJS.org/api/ngResource/service/$resource">https://docs.AngularJS.org/api/ngResource/service/$resource</a></p>

<h4 id="the-application">The application</h4>

<p>The application follows the “normal” way of seperating the data access also on client side into services.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/08/folders.png" alt="AngularJS NgResource Demo with ASP.NET WebAPI" /></p>

<h4 id="preparation">Preparation:</h4>

<p>Before you can use angulars ng resource you have to include it into your application like this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="s2">"use strict"</span><span class="p">;</span>
    <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'AngularJSDemoApp'</span><span class="p">,</span>
    <span class="p">[</span>
        <span class="s1">'ngRoute'</span><span class="p">,</span>
        <span class="s1">'ngAnimate'</span><span class="p">,</span>
        <span class="s1">'ngResource'</span><span class="p">,</span>
        <span class="s2">"ui.bootstrap"</span><span class="p">,</span>
        <span class="s1">'angular-loading-bar'</span><span class="p">,</span>
        <span class="s2">"toastr"</span><span class="p">,</span>

        <span class="s1">'home.homeModule'</span><span class="p">,</span>
        <span class="s1">'contact.contactModule'</span>
    <span class="p">]).</span><span class="nx">config</span><span class="p">([</span><span class="s1">'cfpLoadingBarProvider'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">cfpLoadingBarProvider</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">cfpLoadingBarProvider</span><span class="p">.</span><span class="nx">includeSpinner</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}]);</span>
<span class="p">}());</span></code></pre></figure>

<p>So here you are providing “ngResource” to your app.</p>

<p>After this you can inject the ngResource service provided by angular into your services:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="s2">"use strict"</span><span class="p">;</span>
    <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'home.homeModule'</span><span class="p">).</span><span class="nx">factory</span><span class="p">(</span><span class="s2">"home.services.peopleService"</span><span class="p">,</span>
        <span class="p">[</span>
            <span class="s2">"$resource"</span><span class="p">,</span> 
            <span class="kd">function</span> <span class="p">(</span><span class="nx">$resource</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nx">$resource</span><span class="p">(</span><span class="s2">"api/home/:id"</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span>
                <span class="p">{</span>
                    <span class="s1">'update'</span><span class="p">:</span> <span class="p">{</span>
                        <span class="na">method</span><span class="p">:</span> <span class="s1">'PUT'</span>
                    <span class="p">}</span>
                <span class="p">});</span>
            <span class="p">}</span>
        <span class="p">]);</span>
<span class="p">}());</span></code></pre></figure>

<p>The first argument you pass in is the url with the optional id (:id). The ng resource service now can call get create and delete methods ist a rest convenient way.</p>

<p>ngresource is providing you the following methods:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span> 
  <span class="s1">'get'</span><span class="err">:</span>    <span class="p">{</span><span class="nl">method</span><span class="p">:</span><span class="s1">'GET'</span><span class="p">},</span>
  <span class="s1">'save'</span><span class="err">:</span>   <span class="p">{</span><span class="nl">method</span><span class="p">:</span><span class="s1">'POST'</span><span class="p">},</span>
  <span class="s1">'query'</span><span class="err">:</span>  <span class="p">{</span><span class="nl">method</span><span class="p">:</span><span class="s1">'GET'</span><span class="p">,</span> <span class="nx">isArray</span><span class="err">:</span><span class="kc">true</span><span class="p">},</span>
  <span class="s1">'remove'</span><span class="err">:</span> <span class="p">{</span><span class="nl">method</span><span class="p">:</span><span class="s1">'DELETE'</span><span class="p">},</span>
  <span class="s1">'delete'</span><span class="err">:</span> <span class="p">{</span><span class="nl">method</span><span class="p">:</span><span class="s1">'DELETE'</span><span class="p">}</span> 
<span class="p">};</span></code></pre></figure>

<h4 id="usage">Usage</h4>

<p>Querying all resources:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">peopleService</span><span class="p">.</span><span class="nx">query</span><span class="p">({},</span>
    <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//Success</span>
        <span class="nx">vm</span><span class="p">.</span><span class="nx">allPeople</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
    <span class="p">},</span>
    <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="c1">//Error</span>
    <span class="p">});</span></code></pre></figure>

<p>Pay attention to the empty object we are passing in. You could add a single id here if you only want to query one single resource.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">peopleService</span><span class="p">.</span><span class="nx">query</span><span class="p">({</span><span class="na">id</span><span class="p">:</span> <span class="mi">4</span><span class="p">},</span>
    <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//Success</span>
    <span class="p">},</span>
    <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="c1">//Error</span>
    <span class="p">});</span></code></pre></figure>

<p>In case you want to add a new resource, a person in this case, you can just call the “save” method and pass in the person you want to save:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">peopleService</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="nx">vm</span><span class="p">.</span><span class="nx">newPerson</span><span class="p">,</span>
    <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//Success</span>
    <span class="p">},</span>
    <span class="kd">function</span> <span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//Error</span>
    <span class="p">});</span></code></pre></figure>

<p>The service maps the “save”-method to the POST-Action from REST and is executing a POST- call against the API.</p>

<p>Deleting is self explaining:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">peopleService</span><span class="p">.</span><span class="k">delete</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">personToDelete</span><span class="p">.</span><span class="nx">Id</span> <span class="p">},</span> 
    <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="c1">// success</span>
    <span class="p">},</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="c1">//Error</span>
    <span class="p">});</span></code></pre></figure>

<h4 id="conclusion">Conclusion:</h4>

<p>The ngResource provides a good way to interact with a rest api using very very small code but providing big functionality.</p>

<p>HTH</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2015/08/25/angularjs-ngresource-demo-with-asp-net-webapi</wp:post_id>
        <wp:post_date>2015-08-25T11:45:00+02:00</wp:post_date>
        <wp:post_date_gmt>2015-08-25T11:45:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="angularjs"><![CDATA[["angularjs",]]></category>
        
          <category domain="post_tag" nicename="github"><![CDATA["github",]]></category>
        
          <category domain="post_tag" nicename="json"><![CDATA["json",]]></category>
        
          <category domain="post_tag" nicename="ngresource"><![CDATA["ngresource",]]></category>
        
          <category domain="post_tag" nicename="webapi"><![CDATA["webapi",]]></category>
        
          <category domain="post_tag" nicename="aspnet"><![CDATA["aspnet"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[How to build a great RESTful Service]]></title>
        <link>http://offering.solutions/blog/articles/2015/07/20/how-to-build-a-great-restful-service/</link>
        <pubDate>2015-07-20T21:13:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this blogpost I want to get you an idea of how to build a great RESTful Service. The idea for this blogpost came after I spent a whole <a href="http://blog.noser.com/implementieren-von-paging-in-einer-asp-net-webapi-mitangularjs/">post</a> about implementing paging in a web API. Paging is a very important feature a REST API should offer. However, there are a lot more. Here I want to mention a few of them hoping to cover as much as you need to build great API’s ;-)</p>

<p>Before we dive deeper into what an API can do you may think that all this stuff can also be done on the client. But you do not know which kind of client in the future will consume your web API. This can be an intelligent client that can do all the stuff on client side. So why do you have to offer those features then? Because instead of an intelligent client this can also be a “stupid” client which does not support any features at all. And if it only supports simple http-calls it has to use the features you offer with your API. The more you offer, the better it is for those clients. Keep this in your mind during coding your API’s.</p>

<p><strong>Correct status codes</strong></p>

<p><em>Always</em> return the correct status codes in your web API. If you created a database entry, send the HTML-Code for “Created” (201). If something is forbidden send a different status code than for not authenticated and so on.</p>

<p>Modern web API’s are also consumed by applications which live in the internet (and not on a mobile device) like an Asp.Net MVC Application. They all rely on your status codes to get information about what was happening with their request. Moreover, you give them the chance to react to these codes accordingly.</p>

<p>So if you are handling exceptions, not authenticated states etc.: Always get clear information about what was happening to your client with status codes and messages.</p>

<p><strong>Paging</strong></p>

<p>On this point I want to refer to the blogpost I have already written. In addition to this I want to mention that the <em>pagination Header</em> should also be filled up with the link to the next page, the link to the last page, the current page size, the total pages, the current page etc.</p>

<p>Yes, you can solve this in a modern client like the one I did in the blogpost with AngularJS. However, for clients which do not support those features: These links are essential to get paging working! So do include them and thank me later. ;-)</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">paginationHeader</span> <span class="o">=</span> <span class="k">new</span>
<span class="p">{</span>
<span class="nx">totalCount</span> <span class="o">=</span> <span class="nx">myItems</span><span class="p">.</span><span class="nx">Count</span><span class="p">(),</span>
<span class="c1">//other Items here…</span>
<span class="p">};</span></code></pre></figure>

<p><strong>Datashaping</strong></p>

<p>Datashaping describes the possibility to strip the data you want to send to the client based on what the client was demanding.</p>

<p>If the client only demands the Id, maybe the time point and a description of the objects in a query your API should be able to handle this an only send the requested information.</p>

<p>*Example:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">https</span><span class="err">:</span><span class="c1">//myurl.com/api/test?fields=Id,Description,EntryDate</span></code></pre></figure>

<p>Of course, this should also be possible for child classes that are related to your parent class.</p>

<p>*Example:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">https</span><span class="err">:</span><span class="c1">//myurl.com/api/test?fields=Id,Description,EntryDate,ChildClass.Id,Childclass.Title</span></code></pre></figure>

<p>Yes, I know OData. Moreover, I love it! I really do. Again: Your API <em>must</em> give the client the opportunity to request only the data he wants to have. To achieve this web API should offer the data-shaping feature.</p>

<p>For this feature, I created a Nuget-Package and a Github-repository that can be downloaded and used.</p>

<p><strong>Sorting</strong></p>

<p>The client should also have the possibility to request the items he wants in a special order. Here think of ascending and descending order and this should be possible for every field on the request object the controller was built for. Ascending sort order should be the default while descending can be marked with an minus “-“ in the front of the field to sort after. This is usually a feature which you apply at the very end of your methods. Usually short before returning the data to the client.</p>

<p>Api:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">Get</span><span class="p">(</span><span class="err">…</span><span class="p">,</span> <span class="kt">string</span> <span class="n">sort</span> <span class="p">=</span> <span class="s">"Id"</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">//use the Sort-string
</span><span class="p">}</span></code></pre></figure>

<p>*Example: ´https://myurl.com/api/test?sort=Added´</p>

<p>Where “Added” is a Property of the receiving DTOs.</p>

<p><strong>Filtered Update</strong></p>

<p>A mostly forgotten HTTP verb in my opinion is the <em>Patch</em> verb that allows partial updates of an object. So sending the update back to the server (like a post/put action) the patch only has the fields to change and the corresponding values included. After this you can apply the new object to the existing one and update the entry in your database.</p>

<p>Example <a href="http://aspnet.codeplex.com/sourcecontrol/latest#Samples/WebApi/DeltaJsonDeserialization/DeltaJsonDeserialization.Server/Controllers/PatchController.cs">here</a> and <a href="http://www.asp.net/web-api/overview/odata-support-in-aspnet-web-api/odata-v4/create-an-odata-v4-endpoint">here</a>.</p>

<p><strong>Https</strong></p>

<p>Finally yet importantly it has to be mentioned to always use https to communicate with your server. All the data you are passing between your API and your clients has to be secure.</p>

<p><strong>Summing-up</strong></p>

<p>In the end building REST-APIs is great. You are very flexible choosing your clients. But always consider giving the client every possible mechanism to get, create, update and delete the data it neds. Thinking about this during the development of a RESTful-API may save you a lot of work later.</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2015/07/20/how-to-build-a-great-restful-service</wp:post_id>
        <wp:post_date>2015-07-20T21:13:00+02:00</wp:post_date>
        <wp:post_date_gmt>2015-07-20T21:13:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="github"><![CDATA[["github",]]></category>
        
          <category domain="post_tag" nicename="restapi"><![CDATA["restapi",]]></category>
        
          <category domain="post_tag" nicename="webapi"><![CDATA["webapi",]]></category>
        
          <category domain="post_tag" nicename="aspnet"><![CDATA["aspnet"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Meine ersten Tage mit dem Surface Pro 3]]></title>
        <link>http://offering.solutions/blog/articles/2015/07/01/meine-ersten-tage-mit-dem-surface-3/</link>
        <pubDate>2015-07-01T06:00:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>Nun ist es endlich da. Das Surface der dritten Generation. Ich habe mich ja schon drauf gefreut aber wenn es dann da ist, ist es natürlich nochmal was ganz anderes. Man hört ja so viel, man liest noch mehr und am Ende schimpfen alle auf die Kacheln. Mir völlig unverständlich, aber trotzdem habe ich gedacht, dass ich das Surface mal einem Review unterziehen kann. Die Ergebnisse davon will ich in diesem Beitrag beschreiben.</p>

<blockquote>
  <p><em>Achtung: Ich werde in dem Beitrag immer wieder Vergleiche zu einem Surface RT der ersten Generation anschlagen. Einfach weil ich SurfaceRT-Besitzer der ersten Stunde bin. Dass das schwer vergleichbar ist, ist mir bewusst. Dennoch sind manche Unterschiede und Parallelen erwähnenswert.</em></p>
</blockquote>

<p><a href="https://de.wikipedia.org/wiki/Microsoft_Surface#Surface_RT">Wikipedia Surface RT</a></p>

<h2 id="grundlegendes">Grundlegendes</h2>

<p>In meinem „Test“ habe ich ein Surface Pro 3 - 128 GB mit einem Intel i5 und 4GB RAM vorliegen
<a href="http://www.microsoftstore.com/store/mseea/de_CH/pdp/Surface-Pro-3/productID.300223100?WT.mc_id=SurfaceBG=Surface-Pro-3">Surface Pro 3 im MSStore</a>
Dazu ein Type-Cover:
<a href="http://www.microsoftstore.com/store/mseea/de_CH/pdp/Surface-3-Type-Cover/productID.314948500">TypeCover im MSStore</a>
und einen Stift zum Bedienen:
<a href="http://www.microsoftstore.com/store/mseea/de_CH/pdp/Surface-Stift/productID.314951700">Stift im MSStore</a></p>

<p><img src="/assets/articles/wp-content/uploads/2015/06/03.jpg" alt="Meine ersten Tage mit dem Surface Pro 3" />
<img src="/assets/articles/wp-content/uploads/2015/06/01.jpg" alt="Meine ersten Tage mit dem Surface Pro 3" />
<img src="/assets/articles/wp-content/uploads/2015/06/02.jpg" alt="Meine ersten Tage mit dem Surface Pro 3" />
<img src="/assets/articles/wp-content/uploads/2015/06/13.jpg" alt="Meine ersten Tage mit dem Surface Pro 3" /></p>

<h2 id="usserliche-erscheinung-und-haptik">Äusserliche Erscheinung und Haptik</h2>

<p>Das Surface soll ja nicht nur gute Leistung bringen, sondern ebenso gut in der Hand liegen, sich gut anfühlen, gut verarbeitet sein und dazu noch gut aussehen. Soweit die Theorie.</p>

<p>Das Gerät wurde in einer gut verpackten Hülle geliefert und wackelte nicht in der Verpackung sondern war passförmig in eine dafür vorgesehene Mulde eingelassen. Das Surface selber fasst sich absolut gut an und scheint gut verarbeitet. Es gibt keine scharfen Kanten, wackelnde Knöpfe oder ähnliches. Selbst die ausklappbare Halterung, die das Surface stehen lässt, klappert nicht und liegt gut an dem Gerät an. Dazu aber später mehr.</p>

<p>Als erstes fällt mir der Lüftungsschlitz positiv auf, der um das halbe Surface gezogen ist. In meinen Augen eine sehr dezente, fast sogar hübsche, Lösung für das „Lüftungsproblem“ bei Tablets.</p>

<p>Als zweites fallen mir die dezent verarbeiteten Kameras an der Front- sowie der Rückseite des Geräts auf. Diese merkt man kaum beim darüber fühlen mit dem Finger und sie sind gut in das Gerät verarbeitet. An der Front verschwinden sie sogar unter der Oberfläche, so dass man sie gar nicht spürt. Beide haben 5 Megapixel, was mir im praktischen Betrieb nicht so wichtig ist. Denn alles, was ich damit machen würde, wäre skypen. Und dafür reicht es allemal. Auch wenn ich das Surface mag renne ich nicht damit rum und mache Urlaubsbilder direkt mit dem Tablet ;)</p>

<p><img src="/assets/articles/wp-content/uploads/2015/06/12.jpg" alt="Meine ersten Tage mit dem Surface Pro 3" /></p>

<p>Die Touchoberfläche hat zwei kleine circa 3 cm lange Schlitze, die als Lautsprecher dienen. Sie sind zwischen der Oberfläche und dem Rahmen platziert. So dezent, dass sie mir erst gar nicht aufgefallen sind. Hier muss man aufpassen, dass das gerade während des mobilen Gebrauchs kein Dreckfänger wird. Allerdings hätte ich keinen Vorschlag dies besser zu verarbeiten. Meine „Kritik“ ist somit nicht sehr konstruktiv. Angegeben sind die Lautsprecher mit „Dolby-Sound“. Ich weiss nicht, ob Microsoft hier extra den Begriff „Dolby-Surround“ ausgelassen hat oder ob der Hersteller dies damit ausdrücken wollte. Wie dem auch sei: Ich bin Musik-Affin und mir ist von vornerein klar, dass die Lautsprecher keine Standboxen ersetzen können. Jeder Dolby-Surround wäre nur ansatzweise zu erahnen. Die Lautsprecher erweisen sich aber beim Musikhören als gut und nicht zu schwach auf der Brust. Selbst bei basslastigen Stücken vibriert nichts. Klangfülle ist kaum vorhanden, was aber bei solchen Lautsprechern aufgrund der Grösse etc. auch nicht zu erwarten war.</p>

<p>Das Surface hat einen Standfuss hinten, den man stufenlos einstellen kann. Dieser wirkt in keiner Position klapprig oder „schwach auf den Beinen“. Im Gegenteil: Ich bin überrascht wie massiv das Gerät egal in welcher Lage steht. Wozu natürlich die tiefste Einstellung ist bleibt wohl Microsoft vorbehalten. Die einzige Gefahr, die man dann hat, ist, dass man die Halterung abbricht. Aber auf so ein teures Gerät sollte man eben aufpassen ;-) Draufsetzen war da noch nie eine gute Idee.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/06/09.jpg" alt="Meine ersten Tage mit dem Surface Pro 3" />
<img src="/assets/articles/wp-content/uploads/2015/06/08.jpg" alt="Meine ersten Tage mit dem Surface Pro 3" />
<img src="/assets/articles/wp-content/uploads/2015/06/07.jpg" alt="Meine ersten Tage mit dem Surface Pro 3" /></p>

<p>Verglichen mit dem SurfaceRT ist das Gerät ein wenig grösser, was es aber auch sein darf. Ich empfinde das als sehr angenehm. Die Grösse des Displays ist keinesfalls zu gross für ein Tablet. Es ist minimal schwerer (Angaben laut Microsoft: Surface RT: 680 Gramm, Surface 3 Pro: 800 Gramm) was ich aber laut Gefühl eher als gleichschwer angegeben hätte. Das beeindruckt mich, denn für die Grösse des Surface 3 Pro wirkt das Gerät sehr leicht. Zum Mitnehmen und in der Tasche rumtragen absolut perfekt.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/06/19.jpg" alt="Meine ersten Tage mit dem Surface Pro 3" />
<img src="/assets/articles/wp-content/uploads/2015/06/22.jpg" alt="Meine ersten Tage mit dem Surface Pro 3" />
<img src="/assets/articles/wp-content/uploads/2015/06/18.jpg" alt="Meine ersten Tage mit dem Surface Pro 3" /> 
<img src="/assets/articles/wp-content/uploads/2015/06/17.jpg" alt="Meine ersten Tage mit dem Surface Pro 3" />
<img src="/assets/articles/wp-content/uploads/2015/06/16.jpg" alt="Meine ersten Tage mit dem Surface Pro 3" /></p>

<p>Der mitgelieferte Stift ist gerade so schwer, dass man das Gefühl hat, etwas in der Hand zu haben. Es wirkt nicht wie billiges Plastik. Der Stift hat auf etwa einem Drittel der Länge zwei Knöpfe übereinander angebracht, die für meinen Geschmack zu viel Spiel haben. Sie lassen sich in ihrer Fassung minimal hin- und herschieben. Das ist nicht schlimm, geht aber sicher besser.</p>

<p>Der Stift hat gerade Kanten, liegt aber gut in der Hand, was zum grossen Teil dem Gewicht zuzuschreiben ist.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/06/24.jpg" alt="Meine ersten Tage mit dem Surface Pro 3" />
<img src="/assets/articles/wp-content/uploads/2015/06/21.jpg" alt="Meine ersten Tage mit dem Surface Pro 3" /></p>

<p>Das Type Cover ist dünner als seine Vorgänger und hat auf der Unterseite einen feinen Filzüberzug. Ich finde das sehr praktisch, da ich so die Wahl habe das Tablet auf die Metalloberfläche oder auf eine weiche Fläche zu legen. Dies war jedoch schon beim Touch Cover beim Surface RT nicht anders. Das anfügen und ablösen des Covers vom Tablet geht mit der Magnet-Lösung einwandfrei.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/06/15.jpg" alt="Meine ersten Tage mit dem Surface Pro 3" />
<img src="/assets/articles/wp-content/uploads/2015/06/14.jpg" alt="Meine ersten Tage mit dem Surface Pro 3" /></p>

<p>Man kann das Cover so anbringen, dass zwischen der Stellfläche des Tablets und der Tastatur ein Hohlraum ist. Entgegen meinen Erwartungen wippt die Tastatur jedoch nicht mit sondern bietet genau den gleichen Druckpunkt als ob sie auf einem normalen Untergrund platziert wäre. Das überrascht mich wieder sehr positiv.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/06/20.jpg" alt="Meine ersten Tage mit dem Surface Pro 3" /></p>

<h2 id="display">Display</h2>

<p>Das Display ist absolut überzeugend in allen Belangen. Es ist gross genug, dass alles wichtige angezeigt werden kann und mit der Auflösung von 2160x1440 bei 12 Zoll ein echter „Hingucker“. Die Helligkeit lässt sich sehr granular einstellen und man kann auch draussen damit arbeiten. Man muss festhalten, dass das Surface ein 4:3-Display mitbringt und 16:9-Formate wie Serien oder Filme einen schwarzen Rand oben und unten nach sich ziehen. Das ist nicht weiter schlimm, man sieht es jedoch.</p>

<h2 id="akkulaufzeit">Akkulaufzeit</h2>

<p>Die Akkulaufzeit ist mit 9 (!) Stunden angegeben. Das mag vielleicht auch realistisch sein, wenn man es fast gar nicht nutzt. Die Nutzung ist hier der entscheidende Faktor. In meinem normalen Gebrauch, was Surfen, Schreiben, YouTube mit Sound und „herumspielen“ mit dem Betriebssystem umfasst, hielt der Akku ca. sechs Stunden, was ein absolut akzeptabler Wert ist. Auffallend ist, dass das Gerät recht warm wird im oberen rechten Bereich. Das stört nicht, ob das nun Akku oder WLAN-Modul ist, habe ich nicht weiter überprüft.</p>

<h2 id="bedienung">Bedienung</h2>

<p>Über die Bedienung will ich nicht allzu viele Worte verlieren, denn sie fügt sich nahtlos in die Windows 8 Bedienung, die man schon kennt. Den Stift zu benutzen ist kein Hindernis. Im Gegenteil: Mit ihm lassen sich Ordner, Dateien und sonstiges sehr gut aus- und anwählen. Wohl auch durch den Prozessor reagiert das Surface sehr schnell und, zu meiner Überraschung, bootet es auch in Sekundenschnelle. Dies war ich von meinem Surface RT anders gewohnt. Dort hat das Booten erheblich länger gedauert.</p>

<p>Der Windows-Button ist gegenüber dem SurfaceRT von der unten mittigen Position an den rechten Rand gewandert. Das ist für mich erstmal ungewohnt, erweist sich als durchaus praktisch, denn wenn das Surface hingestellt wird ist der Button rechts um ein Vielfaches angenehmer zu erreichen als der Button am unteren Rand.</p>

<p>Die Programme wie Browser, Word, Excel etc. starten so, wie man das von einem normalen Desktop-PC erwarten würde. Hier merkt man keinen Unterschied. Durch den Slogan, dass das Gerät einen Laptop durchaus ersetzen kann und soll, erwarte ich dies jedoch auch. Alles andere wäre eine Enttäuschung.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/06/05.jpg" alt="Meine ersten Tage mit dem Surface Pro 3" />
<img src="/assets/articles/wp-content/uploads/2015/06/11.jpg" alt="Meine ersten Tage mit dem Surface Pro 3" />
<img src="/assets/articles/wp-content/uploads/2015/06/06.jpg" alt="Meine ersten Tage mit dem Surface Pro 3" />
<img src="/assets/articles/wp-content/uploads/2015/06/04.jpg" alt="Meine ersten Tage mit dem Surface Pro 3" /></p>

<h2 id="fazit">Fazit</h2>

<p>Ich habe das Surface drei nun ein paar Tage im Einsatz und ich bin absolut positiv überrascht. Natürlich ist der Sprung von einem SurfaceRT zu einem Pro 3 Gerät riesig, dennoch enttäuscht mich das Gerät in keinerlei Hinsicht. Es ist handlich wie ein Tablet mit einer Leistung, die wenige Wünsche offen lässt und sieht noch gut aus dabei. Das hat jedoch auch seinen Preis.</p>

<p>Die Frage, ob es meinen Laptop ersetzen kann, muss ich klar positiv beantworten. Ich traue dem Gerät das absolut zu. Ob es in Kombination mit einer Dockingstation meinen Desktop-PC ersetzen kann? Meinen geliebten mühsam selbst zusammengebauten Desktop PC? Ich würde es gerne ausprobieren! Das heisst aber auch, dass ich dem Surface in der Ausstattung diese Hürde absolut zutraue! Ein Super-Gerät, welches Spass macht und ich nur schweren Herzens wieder hergeben würde.</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2015/07/01/meine-ersten-tage-mit-dem-surface-3</wp:post_id>
        <wp:post_date>2015-07-01T06:00:00+02:00</wp:post_date>
        <wp:post_date_gmt>2015-07-01T06:00:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="microsoft"><![CDATA[["microsoft",]]></category>
        
          <category domain="post_tag" nicename="surface3"><![CDATA["surface3",]]></category>
        
          <category domain="post_tag" nicename="pro"><![CDATA["pro"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Paging in einer ASP.Net WebAPI und AngularJS]]></title>
        <link>http://offering.solutions/blog/articles/2015/06/09/paging-in-einer-asp-net-webapi-und-angularjs/</link>
        <pubDate>2015-06-09T12:14:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In diesem Blogpost will ich zeigen, wie man paging in einer ASP.Net WebAPI und AngularJS realisieren kann.</p>

<p>Eine gute API sollte mehrere Features anbieten. Eins davon ist Paging. In diesem Beispiel zeige ich Paging mit AngularJS und wie man es auf dem Client konsumieren kann.</p>

<p>Als erstes sollte man dem Client anbieten per Parameter nur eine bestimmte Anzahl von Einträgen abzurufen.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="na">[Route("myRoute")]</span>
<span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">Get</span><span class="p">(</span><span class="kt">int</span> <span class="n">start</span> <span class="p">=</span> <span class="m">0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">count</span> <span class="p">=</span> <span class="m">10</span><span class="p">)</span>
<span class="p">{</span>
     <span class="c1">//...
</span><span class="p">}</span></code></pre></figure>

<p>Man definiert ein Start und eine Anzahl von Items, die abgerufen werden. Per default weisen wir hier zehn Items zu (Range 0-10).</p>

<p>Somit geben wir als Ergebnis per LINQ nur die Anzahl der Items zurück, die der Client angefordert hat.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="na">[Route("schedules")]</span>
<span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">Get</span><span class="p">(</span><span class="kt">int</span> <span class="n">start</span> <span class="p">=</span> <span class="m">0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">count</span> <span class="p">=</span> <span class="m">10</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">try</span>
    <span class="p">{</span>
        <span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">MyItem</span><span class="p">&gt;</span> <span class="n">myItems</span> <span class="p">=</span> <span class="n">_repository</span><span class="p">.</span><span class="nf">getMyItems</span><span class="p">();</span>

        <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">myItems</span>
            <span class="p">.</span><span class="nf">Skip</span><span class="p">(</span><span class="n">start</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">Take</span><span class="p">(</span><span class="n">count</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">ToList</span><span class="p">();</span>

        <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nf">InternalServerError</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Das Problem an der Stelle ist nun, dass der Client wissen muss, wieviele Items es insgesamt gibt, damit er die richtige Anzahl der Seiten darstellen kann.</p>

<p>Um dem Client die komplette Anzahl der Items mitzuteilen erweitern wir den ResponseHeader um Informationen.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="na">[Route("schedules")]</span>
<span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">Get</span><span class="p">(</span><span class="kt">int</span> <span class="n">start</span> <span class="p">=</span> <span class="m">0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">count</span> <span class="p">=</span> <span class="m">10</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">try</span>
    <span class="p">{</span>
        <span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">MyItem</span><span class="p">&gt;</span> <span class="n">myItems</span> <span class="p">=</span> <span class="n">_repository</span><span class="p">.</span><span class="nf">getMyItems</span><span class="p">();</span>
    
        <span class="kt">var</span> <span class="n">paginationHeader</span> <span class="p">=</span> <span class="k">new</span>
        <span class="p">{</span>
            <span class="n">totalCount</span> <span class="p">=</span> <span class="n">myItems</span><span class="p">.</span><span class="nf">Count</span><span class="p">(),</span>
        <span class="p">};</span>

        <span class="n">HttpContext</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="n">Headers</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"X-Pagination"</span><span class="p">,</span>
           <span class="n">JsonConvert</span><span class="p">.</span><span class="nf">SerializeObject</span><span class="p">(</span><span class="n">paginationHeader</span><span class="p">));</span>

        <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">myItems</span>
            <span class="p">.</span><span class="nf">Skip</span><span class="p">(</span><span class="n">start</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">Take</span><span class="p">(</span><span class="n">count</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">ToList</span><span class="p">();</span>

        <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nf">InternalServerError</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Im Response-Header steht nun die Anzahl der kompletten Items:</p>

<p><img src="/assets/articles/wp-content/uploads/2015/06/1.png" alt="Paging in einer ASP.Net WebAPI und AngularJS" /></p>

<p>Diese brauchen wir dann nur noch im Client parsen bzw. lesen.</p>

<p>Ich benutze die Pagination-Komponente der <a href="https://angular-ui.github.io/bootstrap/#/pagination">Bootstrap-Direktiven</a>.</p>

<p>Html:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;pagination</span> 
<span class="na">ng-show=</span><span class="s">"totalItems &gt; maximalItemsPerPage"</span> 
<span class="na">items-per-page=</span><span class="s">"maximalItemsPerPage"</span> 
<span class="na">total-items=</span><span class="s">"totalItems"</span> 
<span class="na">ng-model=</span><span class="s">"currentPage"</span> 
<span class="na">ng-change=</span><span class="s">"pageChanged()"</span><span class="nt">&gt;&lt;/pagination&gt;</span></code></pre></figure>

<p>Hierbei wird die Leiste zum navigieren nur angezeigt, wenn die Anzahl der Items grösser ist als die, die maximal auf einer Seite angezeigt werden sollen.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">myModule</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'myController'</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">'$scope'</span><span class="p">,</span> <span class="s2">"myRepository"</span><span class="p">,</span>
    <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">myRepository</span><span class="p">)</span> <span class="p">{</span>

        <span class="nx">$scope</span><span class="p">.</span><span class="nx">currentPage</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="nx">$scope</span><span class="p">.</span><span class="nx">maximalItemsPerPage</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>

    <span class="kd">var</span> <span class="nx">getMyItems</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">start</span><span class="p">,</span> <span class="nx">count</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">myRepository</span><span class="p">.</span><span class="nx">getAllItems</span><span class="p">(</span><span class="nx">start</span><span class="p">,</span> <span class="nx">count</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span>
                <span class="kd">function</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
                    <span class="c1">//Success</span>
                    <span class="kd">var</span> <span class="nx">totalPagesObject</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">headers</span><span class="p">()[</span><span class="s1">'x-pagination'</span><span class="p">]);</span>
                    <span class="nx">$scope</span><span class="p">.</span><span class="nx">totalItems</span> <span class="o">=</span> <span class="nx">totalPagesObject</span><span class="p">.</span><span class="nx">totalCount</span><span class="p">;</span>
                <span class="p">},</span>
                <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                    <span class="c1">//Error</span>
                <span class="p">});</span>
        <span class="p">};</span>

        <span class="c1">//...</span>
     
        <span class="nx">$scope</span><span class="p">.</span><span class="nx">pageChanged</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Page changed to: '</span> <span class="o">+</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">currentPage</span><span class="p">);</span>
            <span class="nx">getMyItems</span> <span class="p">((</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">currentPage</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">maximalItemsPerPage</span><span class="p">,</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">maximalItemsPerPage</span><span class="p">);</span>
        <span class="p">};</span>
    <span class="p">}</span>
<span class="p">]);</span></code></pre></figure>

<p>Hier werden die Standardwerte gesetzt und beim erfolgreichen Abrufen der Items wird der Header ausgelesen und die Variable “totalItems” gesetzt, auf die dann gebunden wird.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/06/2.png" alt="Paging in einer ASP.Net WebAPI und AngularJS" /></p>

<p>Grüsse</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2015/06/09/paging-in-einer-asp-net-webapi-und-angularjs</wp:post_id>
        <wp:post_date>2015-06-09T12:14:00+02:00</wp:post_date>
        <wp:post_date_gmt>2015-06-09T12:14:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="angularjs"><![CDATA[["angularjs",]]></category>
        
          <category domain="post_tag" nicename="aspnet"><![CDATA["aspnet"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[ASP.NET WebAPI Datashaper to strip your json data]]></title>
        <link>http://offering.solutions/blog/articles/2015/05/30/asp-net-webapi-datashaper-to-strip-your-json-data/</link>
        <pubDate>2015-05-30T18:23:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>With this blogpost I want to introduce you the ASP.NET WebAPI Datashaper to strip your json data before sending it back to the client.</p>

<p>The Datashaper gives you the possibility to strip the data you want to send based on the query of the client if you can not use Odata for a reason.</p>

<p><a href="https://github.com/OfferingSolutions/OfferingSolutions-Datashaper">GitHub</a>
<a href="http://fabian-gosebrink.de/Projects/Datashaper">Project-Page</a>
<a href="http://www.nuget.org/packages/OfferingSolutions.DataShaper/">NuGet</a></p>

<p><a href="https://github.com/OfferingSolutions/OfferingSolutions-Datashaper-Demo">Demo</a></p>

<p>With this Nuget you can add the fields you want to receive in your request like:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">GET</span> <span class="o">/</span><span class="nx">api</span><span class="o">/</span><span class="nx">test</span><span class="p">?</span><span class="nx">fields</span><span class="o">=</span><span class="nx">Id</span><span class="p">,</span><span class="nx">Title</span><span class="p">,</span><span class="nb">Date</span></code></pre></figure>

<p>or</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">GET</span> <span class="o">/</span><span class="nx">api</span><span class="o">/</span><span class="nx">test</span><span class="p">?</span><span class="nx">fields</span><span class="o">=</span><span class="nx">Id</span><span class="p">,</span><span class="nx">Title</span><span class="p">,</span><span class="nb">Date</span><span class="p">,</span><span class="nx">ChildClasses</span><span class="p">.</span><span class="nx">Description</span><span class="p">,</span><span class="nx">ChildClasses</span><span class="p">.</span><span class="nx">Id</span> <span class="p">...</span></code></pre></figure>

<p>You only have to call</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="n">Datashaper</span><span class="p">.</span><span class="nf">CreateDataShapedObject</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">listOfFields</span><span class="p">)</span></code></pre></figure>

<p>in the end which is going to apply the list of Properties to your data.</p>

<p>This can be useful if you wnat to display a table of your data with only selected fields. You do not have to have every property from your model onto the client and display it. You only need specific fields which you can strip out with this package.</p>

<p>This is equivalent to the OData “$select”-Query option. But this package gives you the opportunity to get the same behaviour without using OData. But if you are interested you should take a look onto <a href="http://www.odata.org/">Odata</a>, too.</p>

<p>Here is an example</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="na">[Route("myroute")]</span>
<span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">Get</span><span class="p">(</span><span class="kt">string</span> <span class="n">fields</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">try</span>
    <span class="p">{</span>
        <span class="c1">//...
</span>        
        <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">listOfFields</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;();</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">fields</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">listOfFields</span> <span class="p">=</span> <span class="n">fields</span><span class="p">.</span><span class="nf">Split</span><span class="p">(</span><span class="sc">','</span><span class="p">).</span><span class="nf">ToList</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">MyItems</span><span class="p">&gt;</span> <span class="n">myItems</span> <span class="p">=</span> <span class="n">_repository</span><span class="p">.</span><span class="nf">GetMyItems</span><span class="p">();</span>

        <span class="c1">//...
</span>        
        <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">myItems</span>
            <span class="p">.</span><span class="nf">ToList</span><span class="p">()</span>
            <span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">Datashaper</span><span class="p">.</span><span class="nf">CreateDataShapedObject</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">listOfFields</span><span class="p">));</span>

        <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span><span class="p">)</span>
    <span class="p">{</span>
         <span class="k">return</span> <span class="nf">InternalServerError</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><img src="/assets/articles/wp-content/uploads/2015/05/datashaper_1.png" alt="ASP.NET WebAPI Datashaper to strip your json data" /></p>

<p><img src="/assets/articles/wp-content/uploads/2015/05/datashaper_2.png" alt="ASP.NET WebAPI Datashaper to strip your json data" /></p>

<p><img src="/assets/articles/wp-content/uploads/2015/05/datashaper_3.png" alt="ASP.NET WebAPI Datashaper to strip your json data" /></p>

<p><img src="/assets/articles/wp-content/uploads/2015/05/datashaper_4.png" alt="ASP.NET WebAPI Datashaper to strip your json data" /></p>

<p>Regards &amp; HTH</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2015/05/30/asp-net-webapi-datashaper-to-strip-your-json-data</wp:post_id>
        <wp:post_date>2015-05-30T18:23:00+02:00</wp:post_date>
        <wp:post_date_gmt>2015-05-30T18:23:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="datashaping"><![CDATA[["datashaping",]]></category>
        
          <category domain="post_tag" nicename="github"><![CDATA["github",]]></category>
        
          <category domain="post_tag" nicename="restapi"><![CDATA["restapi",]]></category>
        
          <category domain="post_tag" nicename="webapi"><![CDATA["webapi"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Eine REST API ist mehr als eine API – Moderne Architekturen für verteilte Systeme]]></title>
        <link>http://offering.solutions/blog/articles/2015/05/01/eine-rest-api-ist-mehr-als-eine-api-moderne-architekturen-fur-verteilte-systeme/</link>
        <pubDate>2015-05-01T17:35:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In diesem Blogpost möchte ich zeigen, wie wichtig eine API heutzutage ist. Frei nach dem Motto: Eine REST API ist mehr als eine API – Moderne Architekturen für verteilte Systeme</p>

<p>In der heutigen Zeit ist es absolut unabdingbar eine Software, die man für internen oder externen Gebrauch schreibt, auf mehreren Wegen verfügbar bzw. konsumierbar zu machen. Wichtig sind hierbei sicherlich Desktop-PCs, Smartphones und Tablets.</p>

<p>Völlig unabhängig der eingesetzten Technologie (ASP.NET WebAPI, AngularJS, Xamarin, ASP.NET MVC, etc.) möchte ich mit diesem Blog einen Schritt zurückgehen und den Blick auf die Architektur lenken, die moderne Software-Lösungen voranbringen können. Hierbei werde ich zwar auch Technologien als Beispiel erwähnen, diese sind aber nur als Beispiel zu betrachten. Die Lösungen in dieser Hinsicht sind sicherlich vielfältiger als das hier geschriebene.</p>

<h3 id="die-ganze-welt-schreibt-apis"><em>Die ganze Welt schreibt Apis</em></h3>

<p>Trotz dem gemeinsamen Fakt, dass vom Kunden maximale Verfügbarkeit gefordert wird, sind Lösungen in diesem Bereich sehr individuell anzusehen. Kunde A braucht eine Lösung in einer bestimmten Richtung, für Kunde B ist wiederum etwas anderes interessant, etc.</p>

<p>Was viele gemeinsam haben ist jedoch, dass sie Daten aus einer bestimmten Quelle beziehen und ablegen und auf dem anderen Ende anzeigen müssen. Hierbei verwendet man heutzutage REST-APIs. Auf einer Entwicklerkonferenz habe ich ein Zitat aufgeschnappt, was mich nicht mehr loslässt:</p>

<blockquote>
  <p>„Die ganze Welt schreibt APIs“</p>
</blockquote>

<p>Egal mit welcher Lösung man auf die Datensenke zugreift, also welche Anwendung der Kunde wünscht, ist es doch das Beste, man hat ein einheitliche Schnittstelle, gegen die man implementieren kann, die alle Operationen zur Verfügung stellt, die der Kunde braucht. Hierbei rede ich nicht nur von Daten, die abgerufen und abgelegt werden können. Hierbei geht es auch um Sortierungen, Paging, Datashaping, Autorisierung, Authentifizierung und und und. Moderne APIs stellen so etwas standardmässig zur Verfügung. Je nachdem ob der Client dies benutzen muss oder nicht: Die Funktionalität sollte auf jeden Fall implementiert sein. Wer weiss schon, welcher Client mit meiner Api kommuniziert? Die API sollte auf einem einheitlichen Standard basieren. Hier bietet sich der Standard an, der sich seit Jahren durchgesetzt hat: REST. Die API kann Http-Calls interpretieren und wie gewünscht auch mit einer entsprechenden Inhalt antworten.</p>

<p>Nehmen wir als Beispiel den Kurznachrichtendienst Twitter. Twitter ist ein Unternehmen, das moderne Architekturen implementiert, fördert und lebt. Es gibt unendlich viele Twitter Clients für nahezu jede (!) Plattform. Diese kommunizieren alle gegen die Twitter API, die ein und dieselbe Funktionalität zur Verfügung stellt. Es kann REST-Calls interpretieren und ist somit in jede Richtung offen.</p>

<p>Die Implementierung der API, auch im Twitter-Fall, erfolgt nach den Regeln von HTML. Das REST-Prinzip stellt hierbei alle Funktionen zur Verfügung, die ich brauche und ist ein Standard, den alle Endsysteme ausnahmslos sprechen. Ob Android, MVC, iOS, Windows: HTML bzw. die HTML-Verben sind Sprach, System und Plattformunabhängig.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/05/1.png" alt="1" /></p>

<p>Somit ist eine modern entwickelte API das A und O einer modernen Architektur. Cloud-Systeme wie Microsofts Azure machen es einfacher denn je solche Systeme zu hosten. Um eine standardisierte Sprache zwischen den Clients und der API einzusetzen hat sich JSON durchgesetzt und hält auch in modernen Technologien (ASP.NET 5, Bower, …) auch als Konfigurationsmodell Einzug.</p>

<p>Vor dem Hintergrund ist nun die einzige Anforderung an einen Client nur noch, dass er online http-Calls absetzen kann. Clientseitiges Caching sorgt hingegen dafür, dass die Applikation auch offline benutzt werden kann. Synchronisierungen finden natürlich nur im Online-Zustand statt. Aber wer ist denn heutzutage schon lange offline ;-)</p>

<p>Die Clients könne vielfältig und in verschiedenen Sprachen entwickelt worden sein.</p>

<p><em>Web: Asp.Net MVC, JavaScript (bspw. AngularJS)</em>
<em>Mobile: Xamarin, Native, AngularJS</em>
<em>Desktop: WPF, AngularJS (Node WebKit)</em></p>

<p><img src="/assets/articles/wp-content/uploads/2015/05/2.png" alt="2" /></p>

<p>Eine REST-Api kann also, unabhängig vom Client, Daten und Datenoperationen zur Verfügung stellen. Sie sollte heutzutage mehr bieten als nur GET und POST-Methoden, sondern auch Paging, Sorting, Datashaping etc. unterstützen um wirklich eine flexible und fähige API zu bieten. Mit solch einer REST-API im Hintergrund können für den Kunden individuelle Lösungen entwickelt werden, die alle letztendlich die gleiche Datensenke konsumieren.</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2015/05/01/eine-rest-api-ist-mehr-als-eine-api-moderne-architekturen-fur-verteilte-systeme</wp:post_id>
        <wp:post_date>2015-05-01T17:35:00+02:00</wp:post_date>
        <wp:post_date_gmt>2015-05-01T17:35:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="angularjs"><![CDATA[["angularjs",]]></category>
        
          <category domain="post_tag" nicename="architecture"><![CDATA["architecture",]]></category>
        
          <category domain="post_tag" nicename="aspnet"><![CDATA["aspnet",]]></category>
        
          <category domain="post_tag" nicename="development"><![CDATA["development",]]></category>
        
          <category domain="post_tag" nicename="spa"><![CDATA["spa"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[MyCSharp.de - Kooperation mit der Basta!]]></title>
        <link>http://offering.solutions/blog/articles/2015/04/24/mycsharp-de-kooperation-mit-der-basta/</link>
        <pubDate>2015-04-24T17:30:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>MyCSharp.de - Kooperation mit der Basta!</p>

<p>Ich freue mich wirklich zu sagen, dass das Team von MyCSharp.de und die Basta! eine Kooperation eingegangen sind und MyCSharp.de Partner der Basta! wird.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/04/Basta-Banner.png" alt="MyCSharp.de - Kooperation mit der Basta!" /></p>

<p>Was ist die BASTA!?</p>

<blockquote>
  <p>Die BASTA! ist die führende unabhängige Konferenz für Microsoft-Technologien im deutschsprachigen Raum. Durch ihre einmalige Expertendichte, die Aktualität sowie ausgeprägte Praxisrelevanz gehört sie zu den jährlichen Pflichtterminen für Windows- und .NET-Entwickler, Architekten und Projektleiter. Das Konferenzprogramm umfasst die immer größere werdende Technologieplattform der Microsoft-Welt – und darüber hinaus.</p>
</blockquote>

<p>Siehe auch hier:</p>

<p><a href="http://www.mycsharp.de/wbb2/thread.php?postid=3771978" target="_blank">15% Rabatt - Kooperation mit der Basta! 2015</a></p>

<p>MyCSharp.de bekommt also noch weitere Vorteile, wie in dem Beitrag erwähnt. Wir sind mächtig stolz, dass eine der führenden deutschen Konferenzen uns angefragt hat und Interesse an unserer Platform sowie unserer Reichweite zeigt. Das veranschaulicht, dass die Arbeit, die wir nebenbei quasi ehrenamtlich machen, Früchte trägt.</p>

<p>Natürlich hoffen wir, dass noch viele weitere Kooperationen folgen und wir MyCSharp.de noch bekannter und besser machen können. Das heisst auch, dass wir an Kooperationen über die Basta hinaus interessiert sind. Falls jemand weitere Informationen benötigt soll er bitte einfach eine Nachricht schreiben an <a href="http://www.mycsharp.de/wbb2/thread.php?threadid=88787">Kontakt zum Team</a></p>

<p>Alles im Sinne von: Community Rocks :)</p>

<p>Gruss und viel Spass auf der Basta! Wir sehen uns vielleicht dort.</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2015/04/24/mycsharp-de-kooperation-mit-der-basta</wp:post_id>
        <wp:post_date>2015-04-24T17:30:00+02:00</wp:post_date>
        <wp:post_date_gmt>2015-04-24T17:30:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="basta"><![CDATA[["basta",]]></category>
        
          <category domain="post_tag" nicename="mycsharp"><![CDATA["mycsharp"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Find me on GitHub]]></title>
        <link>http://offering.solutions/blog/articles/2015/04/22/find-me-on-github/</link>
        <pubDate>2015-04-22T17:53:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>I just wanted to mention that you can find me on GitHub from now on. I am available on GitHub with my personal profile.</p>

<p>I want to publish all my repositories I do code like new trials, hands-on-anythings and examples which will kick you off to get started with what the repository is about.</p>

<p>In every talk I do I will always refer to this repo so that the audience can code what I did in the talk right away.</p>

<p>Feel free to do pull requests and contribute on what I coded.</p>

<p><a href="https://github.com/FabianGosebrink">https://github.com/FabianGosebrink</a></p>

<p><img src="/assets/articles/wp-content/uploads/2015/04/FabianGosebrinkGithub.jpg" alt="Find me on GitHub" /></p>

<p>Sometimes you will find a “_gitAssets”-Folder in my repos which are not for holding anything code specific but they hold pictures or anything used in the readme markdown. Just to ensure the repository is complete I would like to host them directly within the repository.</p>

<p>If anything is not working or not compiling at all please leave me a note because every repository shall be possible to get started right away.</p>

<p>You can also use the normal included git functionalities of issues and so on to report anything which is not working right away.</p>

<p>I will try to include all the required steps into the README.md file which is displayed in the repository itself.</p>

<p>Hopefully it helps anybody for a good start.</p>

<p>Enjoy and HTH</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2015/04/22/find-me-on-github</wp:post_id>
        <wp:post_date>2015-04-22T17:53:00+02:00</wp:post_date>
        <wp:post_date_gmt>2015-04-22T17:53:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="github"><![CDATA[["github"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Microsoft TechTalk in Wallisellen]]></title>
        <link>http://offering.solutions/blog/articles/2015/04/19/microsoft-techtalk-in-wallisellen/</link>
        <pubDate>2015-04-19T17:52:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>Hallo zusammen, in diesem Blog will ich kurz den Microsoft TechTalk in Wallisellen zusammenfassen.</p>

<p>Am 19.03.2015 waren Hans Peter Bornhauser und ich Guestspeaker beim Microsoft Techtalk in Wallisellen. Dass Ereignis war mit mehr als 100 Leuten komplett ausverkauft und drehte sich innerhalb von 3 Vorträgen rund um das Thema ASP.NET und Azure.</p>

<p>Hans Peter stellte in einer 50-minütigen Session ASP.NET vNext vor. Mit praktischen Beispielen zeigte er, was alles auf Entwickler zukommt mit dem neuen ASP.NET vNext und Visual Studio 2015. Neben dem Zusammenschluss von WebAPI und Mvc-Controllern und dem Wegfallen der web.config ist hierbei sicher das Live-Editieren interessant, bei dem Änderungen in Dateien ohne Rebuild direkt in den Browser übernommen werden.</p>

<p>Ich habe in einer vierzig-minütigen Session (wieso hatte ich nur 40?) ASP.NET WebApi mit AngularJS vorgestellt. AngularJS ist ein Single-Page-Application-Framework aus dem Hause Google. Clientseitige Programmierung ist nicht neu. Clientseitige Programmierung mit Struktur, mit Ordnung und Architektur jedoch schon. Javascript war vor Angular “Vogelwild” oder von Versuchen geprägt, dies zu ändern. Aus mittlerweile vielen Frameworks hat sich Angular herauskristallisiert und sich als State-of-the-Art etabliert. Out of the Box bringt Angular Features wie Dependency-Injection, Two-Way Databinding, SoC, Ui-Templating etc. mit.</p>

<p>Somit ist es möglich, verteilte Applikationen mit einer API als Backend zu erstellen. Im Frontend kann ein Client mit Angular zum Einsatz kommen. Richtig implementiert lassen sich hieraus IOS/Android und Windows-Phone Implementierungen erstellen. Alles mit einer Code-Basis.</p>

<p>Mit SignalR dreht man sprichwörtlich den Spiess um: Was, wenn der Server dem Client initiativ mal etwas mitteilen möchte? Das kann er tun. Mit SignalR kann der Server dem Client Push-Notifications senden. Das geht auch in einem WPF-Client!</p>

<p>Die Beispiele zu meinem Teil findet ihr auf GitHub:</p>

<p><a href="https://github.com/FabianGosebrink">https://github.com/FabianGosebrink</a></p>

<p>Von unserer Seite aus ist zu sagen, dass der Vortrag sowie die anschliessende Diskussion sehr sehr viel Spass gemacht hat. Die Reaktionen waren sehr positiv. Vielen dank an alle Beteiligten und Zuhörer.</p>

<p>Nächste Station ist der TechTalk am 23. April 2015 in Basel. Wir freuen uns!!!</p>

<p>Gruss</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2015/04/19/microsoft-techtalk-in-wallisellen</wp:post_id>
        <wp:post_date>2015-04-19T17:52:00+02:00</wp:post_date>
        <wp:post_date_gmt>2015-04-19T17:52:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="microsoft"><![CDATA[["microsoft",]]></category>
        
          <category domain="post_tag" nicename="techtalk"><![CDATA["techtalk",]]></category>
        
          <category domain="post_tag" nicename="wallisellen"><![CDATA["wallisellen",]]></category>
        
          <category domain="post_tag" nicename="talks"><![CDATA["talks",]]></category>
        
          <category domain="post_tag" nicename="speaking"><![CDATA["speaking"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[User Stories vs Bugs vs Product Backlog Items]]></title>
        <link>http://offering.solutions/blog/articles/2015/04/01/user-stories-vs-bugs-vs-product-backlog-items/</link>
        <pubDate>2015-04-01T04:00:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In diesem Blog greife ich eine ewig brennende Diskussion auf: User Stories vs Bugs vs Product Backlog Items!</p>

<p>Der Product-Backlog ist eines der wichtigsten Artefakte im Scrum-Prozess und wohl eines der am meisten unterschätzten zugleich.</p>

<p>In ihm sammeln sich alle Ideen, alle Anforderungen und Gedankenblitze, die der Kunde oder auch der Entwickler beim Arbeiten mit einem Produkt haben. Egal ob ausgereift oder fern in der Zukunft: Der Product-Backlog bietet zukünftigen Arbeiten an einem Produkt ein Zuhause.</p>

<blockquote>
  <p><em>Dieses Zuhause ist ein <strong>lebendes</strong> Artefakt. Durch Refinements werden seine Einträge darin gepflegt und sortiert.</em></p>
</blockquote>

<p>Oft werde ich Zeuge einer Diskussion, die davon handelt, was der Product-Backlog wirklich beinhaltet? Sind die enthaltenen Einträge ganz naheliegend <em>Product-Backlog-Items</em>? Oder sind es <em>User Stories</em>? Und dürfen Bugs auch eine Rolle spielen, auch wenn sie weder User-Story noch PBI sind?</p>

<p>Für mich beschreibt ein Product-Backlog-Item erstmal einen Eintrag im Product-Backlog. Nicht mehr und nicht weniger. Dies ist etwas, was für das fertige Produkt getan werden muss, aber es ist erstmal keine User-Story und es ist kein Bug o.ä. Schaut man sich den Product-Backlog jedoch näher an, muss man unterscheiden. Allein schon, um alles, was der Eintrag hergeben soll so aussehen zu lassen, dass er möglichst viele Informationen enthält, ohne das „Wie setzen wir es um“ zu beantworten.</p>

<p><strong>User-Stories</strong></p>

<p>Eine User-Story beschreibt ein fehlendes Feature eines Produkts und gibt dem Team Informationen und einen Kontext zu diesem Feature. Die Schreibweise „As a … [someone] want[s] … to …, so that…“ enthält so viele nützliche Dinge, dass das Team …</p>

<ol>
  <li>… das Problem erkennt</li>
  <li>… das Verhalten der Software <em>nach</em> dem Problem versteht</li>
  <li>… die Möglichkeit gibt, eventuell etwas besseres vorzuschlagen</li>
</ol>

<p>All diese Punkte wären ohne die Formulierung, die im Übrigen nur einen Satz umfasst, in der Kürze nicht möglich. Eine User-Story gibt immer genug Kontext, eine Umgebung, wenn auch nur gedanklich, um das Team in die Situation von jemandem zu versetzen, das Problem zu verstehen und das Zielverhalten zu erkennen. Nur so kann man das Knowhow im Team durch Scrum nutzen und vielleicht eine besser Lösung finden.</p>

<p>Somit gibt es Product-Backlog-Items, die ohne weiteres eine User-Story sein sollten. Eine Formulierung, die der Product-Owner, der Kunde, das Team oder eine Kombination der genannten machen kann (im Review beispielsweise) sollte eine User-Story immer als eine solche erkennbar machen.</p>

<p>Somit: Nicht jedes Product-Backlog-Item ist eine User-Story wert. Aber manche Product-Backlog-Items sind als User-Story formuliert ideale Möglichkeiten die besten Lösungen umzusetzen und das maximale rauszuholen.</p>

<p><strong>Bugs</strong></p>

<p>Meiner Meinung nach gehören Bugs, ohne Wenn und Aber, in den Product-Backlog. Sie gehören geplant. Sie gehören priorisiert. Bugs sind keine User-Stories und Bugs sind keine Product-Backlog-Items. Sie sind natürlich ein Eintrag im Product-Backlog. Aber sie bleiben ein Bug. Trotzdem muss die Frage geklärt werden: „Ist der Bug wichtiger, als die User Story xyz und Product-Backlog-Item abc?“. Woher soll das Team sonst wissen, was es zuerst bearbeiten soll?</p>

<p>Bugs haben meistens eine Menge Informationen. Dazu gehören Schritte zum Nachstellen, aktuelles Verhalten, gewolltes Verhalten, also die Beschreibung des Fehlverhaltens. Im Idealfall noch Infos zum Betriebssystem, Screenshots/Videos und und und. Beim Lesen wird das Team also in die Lage versetzt schon alle möglichen Informationen über den Eintrag zu haben. Zwar in mehr als einem Satz, aber alle Infos sind da. Ein Bug erfüllt also auch hier den Zweck, alles zu wissen, was man wissen muss um den Bug zu beheben. Der Kontext ist vorhanden, es sollten wenig Fragen offen sein.</p>

<p><strong>Product-Backlog-Items</strong></p>

<p>Product-Backlog-Items sind meiner Ansicht nach Sachen, die in sich schon so informativ gereift sind, dass jedes Umformulieren keinen Mehrwert mehr erzeugen würde.</p>

<p>„<em>Reduziere die Ladezeit der Seite xyz beim erstmaligen Laden auf unter eine Sekunde</em>“ wäre ein Kandidat, der keine User-Story verdienen würde. Es ist klar, was gemacht werden muss, der Kontext ergibt sich ebenso. Die Frage „Wie wird es umgesetzt“ bleibt beim Team, die Anforderung ist absolut klar.</p>

<p><strong>Zusammenfassung</strong></p>

<p>Ein Product-Backlog hat von aussen gesehen viele Einträge. Eben Product-Backlog-Items. Diese können User-Stories sein, sie können Bugs sein. Oder eben Product-Backlog-Items bleiben. Man muss unterscheiden. Am Besten im Refinement im Team oder in der Diskussion. Wichtig ist, dass zwischen den verschiedenen Formen unterschieden wird und dass die Information, <em>was</em> getan werden muss, zweifelsohne übermittelt werden ohne die Frage zu beantworten, <em>wie</em> das Item umgesetzt werden soll. Der Kontext für das Team muss gegeben sein. Dies kann und sollte aber auch über Refinements geschehen. Der Product-Backlog ist ein lebendes Artefakt und sollte es durch die dynamik in den Items bleiben und so ein geeignetes Ort für Anforderungen und Wünsche jeder Art bieten. So bleibt er interessant und wird hoffentlich in Zukunft nicht mehr so sehr unterschätzt ;)</p>

<p>Links:</p>

<p><a href="http://programmers.stackexchange.com/questions/102523/pbi-vs-user-story">http://programmers.stackexchange.com/questions/102523/pbi-vs-user-story</a></p>

<p><a href="https://social.msdn.microsoft.com/Forums/vstudio/en-US/f8ec9ec0-95c2-4cfa-8bdb-f9f4220d6698/whats-the-different-between-product-backlog-item-and-user-stories?forum=tfsworkitemtracking">https://social.msdn.microsoft.com/Forums/vstudio/en-US/f8ec9ec0-95c2-4cfa-8bdb-f9f4220d6698/whats-the-different-between-product-backlog-item-and-user-stories?forum=tfsworkitemtracking</a></p>

<p><a href="http://blogs.adobe.com/agile/2012/06/20/does-every-item-in-the-product-backlog-require-a-user-story/">http://blogs.adobe.com/agile/2012/06/20/does-every-item-in-the-product-backlog-require-a-user-story/</a></p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2015/04/01/user-stories-vs-bugs-vs-product-backlog-items</wp:post_id>
        <wp:post_date>2015-04-01T04:00:00+02:00</wp:post_date>
        <wp:post_date_gmt>2015-04-01T04:00:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="bug"><![CDATA[["bug",]]></category>
        
          <category domain="post_tag" nicename="productbacklog"><![CDATA["productbacklog",]]></category>
        
          <category domain="post_tag" nicename="item"><![CDATA["item",]]></category>
        
          <category domain="post_tag" nicename="scrum"><![CDATA["scrum",]]></category>
        
          <category domain="post_tag" nicename="userstory"><![CDATA["userstory"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[How to modularize your angular application]]></title>
        <link>http://offering.solutions/blog/articles/2015/03/17/how-to-modularize-your-angular-application/</link>
        <pubDate>2015-03-17T04:43:00+01:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this blogpost I want to show you a way on how to modularize your angular application in a way I did it so far. Enjoy reading :)</p>

<p>Due to the fact that angular.js gets more and more important you are forced to think about a nice architecture to develop easy. Especially if you develop in mulitple teams.</p>

<p>Well one of the killer features for me in angular is its modularization. Even when you are starting an app you realize that the whole app is nothing else than a module.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'TestApp'</span><span class="p">,</span>
    <span class="p">[</span>
       <span class="c1">//...</span>
    <span class="p">]);</span></code></pre></figure>

<p>Now we could add all our services, and controllers to our defined app. Which would make them all accessable. Behind the scenes angularJS uses dependency injection to offer us our parts of our software and these services are singletons, so they are accessable everywhere out of the box.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/02/Folie30.jpg" alt="Folie30" /></p>

<p>But this is not a nice architecture and we are not using modularization. You do not have an overview of you application when you are using at your application.js file. You are using angularJS to build architectures, so lets do so!</p>

<p>Go and build a folder for every Module you want to create:</p>

<p><img src="/assets/articles/wp-content/uploads/2015/02/Folders.png" alt="Folders" /></p>

<p>And register your services on these modules.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">homeModule</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'home.homeModule'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'ngRoute'</span><span class="p">]);</span>

<span class="nx">homeModule</span><span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$routeProvider</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">$routeProvider</span>
        <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s2">"/"</span><span class="p">,</span> <span class="p">{</span>
            <span class="na">controller</span><span class="p">:</span> <span class="s2">"home.controllers.homeController"</span><span class="p">,</span>
            <span class="na">templateUrl</span><span class="p">:</span> <span class="s2">"/app/Home/Templates/overview.html"</span>
        <span class="p">})</span>
        <span class="p">.</span><span class="nx">otherwise</span><span class="p">({</span> <span class="na">redirectTo</span><span class="p">:</span> <span class="s2">"/"</span> <span class="p">});</span>
<span class="p">});</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="s2">"use strict"</span><span class="p">;</span>
<span class="nx">homeModule</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'home.controllers.homeController'</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">'$scope'</span><span class="p">,</span> <span class="s1">'home.services.peopleService'</span><span class="p">,</span> <span class="s1">'toaster'</span><span class="p">,</span> <span class="s1">'cfpLoadingBar'</span><span class="p">,</span>
    <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">peopleService</span><span class="p">,</span> <span class="nx">toaster</span><span class="p">,</span> <span class="nx">cfpLoadingBar</span><span class="p">)</span> <span class="p">{</span>

       <span class="c1">//...</span>
    <span class="p">}</span>
<span class="p">]);</span></code></pre></figure>

<p>Then you have to load your modules in your app like this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'TestApp'</span><span class="p">,</span>
    <span class="p">[</span>
        <span class="s1">'ngRoute'</span><span class="p">,</span>
        <span class="s1">'ngResource'</span><span class="p">,</span>
        <span class="s1">'toaster'</span><span class="p">,</span>
        <span class="s1">'chieffancypants.loadingBar'</span><span class="p">,</span>

        <span class="s1">'home.homeModule'</span><span class="p">,</span>
        <span class="s1">'contact.contactModule'</span>
    <span class="p">]);</span></code></pre></figure>

<p><img src="/assets/articles/wp-content/uploads/2015/02/Folie31.jpg" alt="How to modularize your angular application" /></p>

<p>With this you have your application divided in modules and you can add or remove the modules as you want with no effort. You can also easily see which modules your application is based on.</p>

<p>Regards</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2015/03/17/how-to-modularize-your-angular-application</wp:post_id>
        <wp:post_date>2015-03-17T04:43:00+01:00</wp:post_date>
        <wp:post_date_gmt>2015-03-17T04:43:00+01:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="angularjs"><![CDATA[["angularjs",]]></category>
        
          <category domain="post_tag" nicename="modules"><![CDATA["modules"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[ASP.NET Helpers by Offering Solutions]]></title>
        <link>http://offering.solutions/blog/articles/2015/03/04/asp-net-helpers-by-offering-solutions/</link>
        <pubDate>2015-03-04T21:08:00+01:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>I just released a new version of the ASP.NET Helpers by Offering Solutions:</p>

<p><a href="https://www.nuget.org/packages/OfferingSolutions.AspNetHelpers/">Nuget: AspNetHelpers by Offering Solutions</a></p>

<p>which includes</p>

<ul>
  <li>ViewModelBase</li>
  <li>SubmitModelBase</li>
  <li>ModelValidator (for easier validation)</li>
</ul>

<p>and features like</p>

<ul>
  <li>Nullcheck with Exception</li>
  <li>Nullcheck with returning the type if not null, otherwise exception</li>
  <li>Return bool value if something is null</li>
  <li>Checking enumerable if its null or empty</li>
  <li>Checks if a string is a timespan</li>
  <li>Checks if a string is an email</li>
  <li>Converts a string to datetime</li>
  <li>Converts s tring to timespan</li>
  <li>Checks a string for null, empty or a given lenght (e.g. for password purposes)</li>
  <li>Checks if a HttpPostedFile has a specific format</li>
  <li>Checks if a HttpPostedFile is an image</li>
  <li>Checks if a string can be converted to double</li>
  <li>Converts a string to double</li>
</ul>

<p>Why ViewModels and Submitmodels you can read this <a href="http://blog.noser.com/what-are-submitmodels-and-how-to-use-them/">here</a> and <a href="http://blog.noser.com/why-and-how-to-avoid-viewbag-and-viewdata-in-asp-net-mvc/">here</a></p>

<p>ViewModelBase and SubmitModelBase are two baseclasses for the introduced view- and submitmodels.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">AccountRegisterViewModel</span> <span class="p">:</span> <span class="n">ViewModelBase</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="n">AccountRegisterSubmitModel</span> <span class="n">SubmitModel</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="nf">AccountRegisterViewModel</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Url</span> <span class="p">=</span> <span class="s">"~/Here/Goes/My/Url.cshtml"</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>And you can access InfoMessages, SuccessMessages and  ErrorMessages now from your ViewModel.</p>

<p>In your view you are filling up your submitmodel and sending it again to your Server. There you can now validate it:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="n">AccountRegisterViewModel</span> <span class="nf">RegisterUser</span><span class="p">(</span><span class="n">AccountRegisterSubmitModel</span> <span class="n">submitModel</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">AccountRegisterViewModel</span> <span class="n">viewModel</span> <span class="p">=</span> <span class="nf">GetAccountRegisterViewMmodel</span><span class="p">(</span><span class="n">submitModel</span><span class="p">);</span>

    <span class="k">try</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(!</span><span class="n">_modelValidator</span><span class="p">.</span><span class="nf">IsSubmitModelValid</span><span class="p">(</span><span class="n">viewModel</span><span class="p">,</span> <span class="n">submitModel</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">viewModel</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// Do some stuff
</span>    <span class="p">}</span>
    <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">viewModel</span><span class="p">.</span><span class="n">ErrorMessages</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"There was an error. Can not register."</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">viewModel</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>In this exampe the ModelValidator in the NuGet above is used which you can simply register</p>

<p>with Ninject for example like this:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="n">kernel</span><span class="p">.</span><span class="nf">Bind</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">IModelValidator</span><span class="p">)).</span><span class="nf">To</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">ModelValidatorImpl</span><span class="p">));</span></code></pre></figure>

<p>If you validate with the validator, your Errormessages are getting automatically filled with those defined in your submitmodel and you can easily return it. Of course you can do it the long way like this:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="n">AccountRegisterViewModel</span> <span class="nf">RegisterUser</span><span class="p">(</span><span class="n">AccountRegisterSubmitModel</span> <span class="n">submitModel</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">AccountRegisterViewModel</span> <span class="n">viewModel</span> <span class="p">=</span> <span class="nf">GetAccountRegisterViewMmodel</span><span class="p">(</span><span class="n">submitModel</span><span class="p">);</span>

    <span class="k">try</span>
    <span class="p">{</span>
        <span class="n">ReadOnlyCollection</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">errors</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(!</span><span class="n">submitModel</span><span class="p">.</span><span class="nf">IsValid</span><span class="p">(</span><span class="k">out</span> <span class="n">errors</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="n">viewModel</span><span class="p">.</span><span class="n">ErrorMessages</span><span class="p">.</span><span class="nf">AddRange</span><span class="p">(</span><span class="n">errors</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">viewModel</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// Do some stuff
</span>    <span class="p">}</span>
    <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">viewModel</span><span class="p">.</span><span class="n">ErrorMessages</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"There was an error. Can not register."</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">viewModel</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p> </p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">//Throws an exception
</span>    <span class="n">Person</span> <span class="n">person</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
    <span class="n">person</span><span class="p">.</span><span class="nf">CheckIsNull</span><span class="p">();</span>

    <span class="c1">// Throws an exception if null, gives you back the type otherwise --&gt; Good for DI in public methods
</span>    <span class="n">Person</span> <span class="n">myPerson</span> <span class="p">=</span> <span class="n">person</span><span class="p">.</span><span class="nf">CheckIsNull</span><span class="p">(</span><span class="s">"Person must not be null"</span><span class="p">);</span>

    <span class="c1">// Is true in this case
</span>    <span class="kt">bool</span> <span class="n">personIsNull</span> <span class="p">=</span> <span class="n">person</span><span class="p">.</span><span class="nf">IsNull</span><span class="p">();</span>

    <span class="n">person</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Person</span><span class="p">()</span> <span class="p">{</span><span class="n">Id</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">"Fabian"</span><span class="p">};</span>
    <span class="n">List</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;</span> <span class="n">listOfPersons</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;()</span> <span class="p">{</span><span class="n">person</span><span class="p">};</span>

    <span class="c1">//should be false
</span>    <span class="kt">bool</span> <span class="n">isNullOrEmpty</span> <span class="p">=</span> <span class="n">listOfPersons</span><span class="p">.</span><span class="nf">IsNullOrEmpty</span><span class="p">();</span>

    <span class="c1">// Checks a string for a valid TimeSpan
</span>    <span class="kt">string</span> <span class="n">timeSpanToCheck</span> <span class="p">=</span> <span class="s">"11:20"</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="n">isTimeSpan</span> <span class="p">=</span> <span class="n">timeSpanToCheck</span><span class="p">.</span><span class="nf">IsTimeSpan</span><span class="p">();</span>

    <span class="c1">// Checks if a string is a valid email or not
</span>    <span class="kt">string</span> <span class="n">email</span> <span class="p">=</span> <span class="s">"dont@ask.me"</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="n">isEmail</span> <span class="p">=</span> <span class="n">email</span><span class="p">.</span><span class="nf">IsEmail</span><span class="p">();</span>

    <span class="c1">//Converts a string to datetime
</span>    <span class="kt">string</span> <span class="n">toDateTime</span> <span class="p">=</span> <span class="s">"01.01.2010"</span><span class="p">;</span>
    <span class="n">DateTime</span> <span class="n">dateTime</span> <span class="p">=</span> <span class="n">toDateTime</span><span class="p">.</span><span class="nf">ToDateTime</span><span class="p">();</span>

    <span class="c1">// COnverts a string to Timespan
</span>    <span class="n">timeSpanToCheck</span> <span class="p">=</span> <span class="s">"11:20"</span><span class="p">;</span>
    <span class="n">TimeSpan</span> <span class="n">timeSpan</span> <span class="p">=</span> <span class="n">timeSpanToCheck</span><span class="p">.</span><span class="nf">ToTimeSpan</span><span class="p">();</span>

    <span class="c1">//Cheks, if a password has a specific length or is null or empty
</span>    <span class="kt">string</span> <span class="n">password</span> <span class="p">=</span> <span class="s">"TheseAreAtLeastEightSigns"</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="n">isValidPassword</span> <span class="p">=</span> <span class="n">password</span><span class="p">.</span><span class="nf">IsValidPassword</span><span class="p">(</span><span class="m">8</span><span class="p">);</span>

    <span class="c1">// Checks if a file has a given format...
</span>    <span class="n">HttpPostedFileBase</span> <span class="n">httpPostedFile</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span><span class="c1">//...
</span>    <span class="kt">bool</span> <span class="n">hasFormat</span> <span class="p">=</span> <span class="n">httpPostedFile</span><span class="p">.</span><span class="nf">HasFormat</span><span class="p">(</span><span class="s">"txt"</span><span class="p">);</span>

    <span class="c1">// ... or wth multiple extensions
</span>    <span class="n">hasFormat</span> <span class="p">=</span> <span class="n">httpPostedFile</span><span class="p">.</span><span class="nf">HasFormat</span><span class="p">(</span><span class="s">"txt"</span><span class="p">,</span> <span class="s">"pdf"</span><span class="p">);</span>

    <span class="c1">// Checks if a file is an image...
</span>    <span class="kt">bool</span> <span class="n">isImage</span> <span class="p">=</span> <span class="n">httpPostedFile</span><span class="p">.</span><span class="nf">IsImage</span><span class="p">();</span>

    <span class="c1">// ...also with formats
</span>    <span class="n">isImage</span> <span class="p">=</span> <span class="n">httpPostedFile</span><span class="p">.</span><span class="nf">IsImage</span><span class="p">(</span><span class="s">"jpg"</span><span class="p">,</span> <span class="s">"gif"</span><span class="p">);</span>

    <span class="c1">//Checks if a value is a double value (separation with . or ,
</span>    <span class="kt">string</span> <span class="n">doubleToCheck</span> <span class="p">=</span> <span class="s">"3.5"</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="n">isDouble</span> <span class="p">=</span> <span class="n">doubleToCheck</span><span class="p">.</span><span class="nf">IsDouble</span><span class="p">();</span>

    <span class="c1">//COnverts a string to double
</span>    <span class="n">doubleToCheck</span> <span class="p">=</span> <span class="s">"3.5"</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">doubleValue</span> <span class="p">=</span> <span class="n">doubleToCheck</span><span class="p">.</span><span class="nf">ToDouble</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<p>So, this is it. Hope you enjoy!</p>

<p>Regards</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2015/03/04/asp-net-helpers-by-offering-solutions</wp:post_id>
        <wp:post_date>2015-03-04T21:08:00+01:00</wp:post_date>
        <wp:post_date_gmt>2015-03-04T21:08:00+01:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="mvchelper"><![CDATA[["mvchelper",]]></category>
        
          <category domain="post_tag" nicename="nuget"><![CDATA["nuget",]]></category>
        
          <category domain="post_tag" nicename="submitmodel"><![CDATA["submitmodel",]]></category>
        
          <category domain="post_tag" nicename="viewmodel"><![CDATA["viewmodel"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[How to work with the q promise syntax in AngularJS]]></title>
        <link>http://offering.solutions/blog/articles/2015/03/01/how-to-work-with-the-q-promise-syntax-in-angularjs/</link>
        <pubDate>2015-03-01T03:27:00+01:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this blogpost I want to show you how to work with the q promise syntax in AngularJS</p>

<h4 id="the-thensuccesserror-syntax">The “Then(success/error)”-Syntax</h4>

<p>If you are developing with <strong>angularJs</strong> you have to work with promises angular gives to you. Its the syntax you have when you can react with a “then(success/error)” on it. And if you work with this syntax you will notice that its very mighty because it is one very clean way to react to your server responses or whatever in case of an error. So the “then(success/error)”-syntax is giving you error handling out of the box. You get the promise and react on it in case of a good or an error result.</p>

<p>Very cool, hm?</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">"/here/goes/my/Api"</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
              <span class="c1">// Success</span>
          <span class="p">},</span>
          <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
              <span class="c1">// Error</span>
          <span class="p">});</span></code></pre></figure>

<h4 id="structure-which-tiers-that-have-no-clue">Structure which tiers that have no clue!</h4>

<p>Working client-side also needs structure and architecture to get to all these files and their responsibilities. This means: Giving your application modularity, making several single responsibilities to your controller, perhaps modal-controllers and working with repositories (which are also called “<em>services” or “</em>dataservices” or whatever. I use to call the repositories because on the client side its where i get the data from. I will handle this in a special blog post by the time.</p>

<p>The thing is: We have different levels ob abstraction and the “then(success/error)” syntax can be used once. Once we received a promise, we can react in a positive or a negative way on it. And thats it. Our tier calling a method which uses the promise has no idea id the success was good or not. because it was already resolved.</p>

<p>An example:</p>

<p>Repository:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">"/here/goes/my/Api"</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
              <span class="c1">// Success</span>
              <span class="k">return</span> <span class="s2">"good"</span><span class="p">;</span>
          <span class="p">},</span>
          <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
              <span class="c1">// Error</span>
              <span class="k">return</span> <span class="s2">"bad"</span><span class="p">;</span>
          <span class="p">});</span></code></pre></figure>

<p>and your controller could be like:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">loadMyData</span><span class="p">()</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">myRepository</span><span class="p">.</span><span class="nx">getSomeData</span><span class="p">(</span><span class="nx">$routeParams</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="nx">result</span> <span class="o">==</span> <span class="s2">"good"</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">//Success</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">result</span> <span class="o">==</span> <span class="s2">"bad"</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">//Error</span>
            <span class="p">}</span>
        <span class="p">};</span></code></pre></figure>

<p>So the controller does not have an idea about the promise anymore. It only has the variables to work with. And this is ugly. In fact: We are losing our promise as soon as we return something else. Here this is in the repository (or (data)service)</p>

<h4 id="the-solution">The solution</h4>

<p>The solutions for this brings us the q-syntax. With this syntax we are able to keep our promise to the upcoming layers. So we are calling our webAPI, angular gives us a promise via the http-syntax (seen above). And we do not reject hardcoded data, but we keep the promise and make it returning either good or bad depending on which case it has.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">app</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s2">"myRepository"</span><span class="p">,</span> <span class="p">[</span><span class="s2">"$http"</span><span class="p">,</span> <span class="s2">"$q"</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$http</span><span class="p">,</span> <span class="nx">$q</span><span class="p">)</span> <span class="p">{</span> 
<span class="p">...</span>
<span class="kd">var</span> <span class="nx">_getMyData</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>

        <span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">"here/goes/my/api"</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
              <span class="c1">// Successful</span>
              <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
          <span class="p">},</span>
          <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
              <span class="c1">// Error</span>
              <span class="nx">deferred</span><span class="p">.</span><span class="nx">reject</span><span class="p">();</span>
          <span class="p">});</span>

        <span class="k">return</span> <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
    <span class="p">};</span>
<span class="p">...</span>
<span class="p">}</span></code></pre></figure>

<p>So the $q-sign gives us the possibility to access our promise and store it in a variable called “deferred” here. And in case of an error, we keep this promise alive, resolving it positively and on top of that we are passing our data in it which shall be available to whoever is going to resolve this promise from the outside. This is what “deferred.resolve(result);” does. But in case of an error we reject the promise. So again: We are keeping it, but we are telling the caller “This promise was not resolved positive”. In the last line we are returning our promise.</p>

<p>The advantage now is that an outside caller can react on it with the same syntax he already knows, the “then(success/error)”-thing. Because this function shown above returns a normal promise!</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">getMyData</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">myRepository</span><span class="p">.</span><span class="nx">getMyData</span><span class="p">(...)</span>
        <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// success</span>
                <span class="nx">$scope</span><span class="p">.</span><span class="nx">myResultData</span> <span class="o">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
            <span class="p">},</span>
            <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                <span class="c1">//error</span>
                <span class="nx">$scope</span><span class="p">.</span><span class="nx">errorMessage</span> <span class="o">=</span> <span class="s2">"Bad bad bad"</span><span class="p">;</span>
            <span class="p">});</span>
<span class="p">};</span></code></pre></figure>

<p>So this is way better than the error handling with any strings or bools or whatever.</p>

<p>Hope you enjoyed reading.</p>

<p>Regards</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2015/03/01/how-to-work-with-the-q-promise-syntax-in-angularjs</wp:post_id>
        <wp:post_date>2015-03-01T03:27:00+01:00</wp:post_date>
        <wp:post_date_gmt>2015-03-01T03:27:00+01:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="angularjs"><![CDATA[["angularjs",]]></category>
        
          <category domain="post_tag" nicename="architecture"><![CDATA["architecture",]]></category>
        
          <category domain="post_tag" nicename="promises"><![CDATA["promises",]]></category>
        
          <category domain="post_tag" nicename="spa"><![CDATA["spa"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[WPF CallMemberName for INotifyPropertyChanged]]></title>
        <link>http://offering.solutions/blog/articles/2015/02/08/wpf-callmembername-for-inotifypropertychanged/</link>
        <pubDate>2015-02-08T23:08:00+01:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this blogpost I want to show you how to use WPF CallMemberName for INotifyPropertyChanged.</p>

<p>Regarding to this blogpost <a href="http://offering.solutions/blog/articles/2014/09/14/wpf-basics-ii-the-inotifypropertychanged-interface/">here</a> I showed up how to implement the INotifyPropertyChanged.</p>

<p>Well with .Net-Framework 4.5 a new solution came up to make it even more simple:</p>

<p>Instead of the “old” (but working) base-class</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">NotifyPropertyChangedBase</span> <span class="p">:</span> <span class="n">INotifyPropertyChanged</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">event</span> <span class="n">PropertyChangedEventHandler</span> <span class="n">PropertyChanged</span><span class="p">;</span>

    <span class="k">protected</span> <span class="k">virtual</span> <span class="k">void</span> <span class="n">OnPropertyChanged</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">Expression</span><span class="p">&lt;</span><span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;&gt;</span> <span class="n">propertyExpression</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">MemberExpression</span> <span class="n">memberExpr</span> <span class="p">=</span> <span class="n">propertyExpression</span><span class="p">.</span><span class="n">Body</span> <span class="k">as</span> <span class="n">MemberExpression</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">memberExpr</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="s">"propertyExpression should represent access to a member"</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="n">PropertyChangedEventHandler</span> <span class="n">handler</span> <span class="p">=</span> <span class="n">PropertyChanged</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">handler</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="nf">handler</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="k">new</span> <span class="nf">PropertyChangedEventArgs</span><span class="p">(</span><span class="n">memberExpr</span><span class="p">.</span><span class="n">Member</span><span class="p">.</span><span class="n">Name</span><span class="p">));</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>The OnPropertyChanged can be replaced with:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">NotifyPropertyChangedBase</span> <span class="p">:</span> <span class="n">INotifyPropertyChanged</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">event</span> <span class="n">PropertyChangedEventHandler</span> <span class="n">PropertyChanged</span><span class="p">;</span>

    <span class="k">protected</span> <span class="k">void</span> <span class="nf">NotifyPropertyChanged</span><span class="p">([</span><span class="n">CallerMemberName</span><span class="p">]</span> <span class="kt">string</span> <span class="n">propertyName</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">PropertyChangedEventHandler</span> <span class="n">propChanged</span> <span class="p">=</span> <span class="n">PropertyChanged</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">propChanged</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="nf">propChanged</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="k">new</span> <span class="nf">PropertyChangedEventArgs</span><span class="p">(</span><span class="n">propertyName</span><span class="p">));</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>The CallMemberName-Attribute is automatically set to the PropertyName which calls it. So the usage in the ViewModel (or whereever you throw the event) is now a simple:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="kt">string</span> <span class="n">NameToDisplay</span>
<span class="p">{</span>
    <span class="k">get</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">_nameToDisplay</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">set</span>
    <span class="p">{</span>
        <span class="n">_nameToDisplay</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
        <span class="nf">NotifyPropertyChanged</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>See: You do not need to give a func. instead you are only calling the method whithout any paramters.</p>

<p>Solution with a command-implementation can be found here: <a href="/assets/articles/wp-content/uploads/2015/02/DataBindingGettingStarted.zip">DataBindingGettingStarted</a></p>

<p>Happy coding!</p>

<p>Regards</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2015/02/08/wpf-callmembername-for-inotifypropertychanged</wp:post_id>
        <wp:post_date>2015-02-08T23:08:00+01:00</wp:post_date>
        <wp:post_date_gmt>2015-02-08T23:08:00+01:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="callmembername"><![CDATA[["callMemberName",]]></category>
        
          <category domain="post_tag" nicename="inotifypropertychanged"><![CDATA["inotifypropertychanged",]]></category>
        
          <category domain="post_tag" nicename="wpf"><![CDATA["wpf"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Jeder braucht einen Scrum-Master!]]></title>
        <link>http://offering.solutions/blog/articles/2015/01/20/jeder-braucht-einen-scrum-master/</link>
        <pubDate>2015-01-20T08:00:00+01:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In diesem Blogpost möchte ich mal herausstellen, wie wichtig Scrum-Master sind: Jeder braucht einen Scrum-Master!</p>

<p>Jeden Tag eine gute Tat. Dieses Gefühl abends ins Bett zu steigen und zu wissen: Ich habe etwas Gutes gemacht heute. Leuten helfen zum Beispiel. Bei Fragen zur Seite stehen. Hilfestellung geben. Man hilft ja gern. Warum auch nicht? Man ist ja Scrum-Master. Macht ja auch Spass.</p>

<p><strong>Innerhalb des Teams</strong></p>

<p>Man sorgt dafür, dass SCRUM eingehalten wird und kontrolliert den Prozess. Wird alles Scrum-mässig umgesetzt? Falls Fragen im Team auftreten ist man zur Stelle, kann aus dem Scrum-Guide und Literatur zitieren, begründen und belegen. Man leistet Überzeugungsarbeit und hilft so, das Maximale aus dem Team herauszuholen. Das ist wohl eine der motivierendsten Arbeiten überhaupt: Zusammenarbeit so zu optimieren, dass alles reibungslos funktioniert.</p>

<p>Auch falls es Probleme gibt zeigt man vollen Einsatz und versucht diese zu beseitigen. Und wenn das gemacht wurde, ja dann ist man spätestens wieder direkt bei der guten Tat.</p>

<blockquote>
  <p><em>Das Team braucht keinen Scrum-Master, wenn es Scrum richtig macht</em></p>
</blockquote>

<p>„Das Team organisiert sich selbst“ ist wohl eine Überschrift, die Scrum ohne weiteres ebenfalls tragen könnte. Das Team steht für das gerade, was es Ende des Sprints liefert. Das ist wichtig! Und auch gut so! Lass sie mal machen. Das „Wie?“ soll das Team beantworten. Aber was, wenn sie das wirklich mal tun? Liebe Scrum-Master da draussen: Stellt euch mal vor, ihr werdet einfach nicht mehr gebraucht, geschweige denn gefragt! Das Team arbeitet reibungslos zusammen und hat keine Hindernisse. Alles läuft reibungslos, Scrum ist komplett verstanden worden und wird exakter umgesetzt als eine Operation am offenen Herzen. Eine - sagen wir einfach - ungewohnte Vorstellung. Und das ist nicht mal böse gemeint. Dass Scrum schwierig ist, ist allseits bekannt. Und es ist noch kein Meister vom Himmel gefallen.</p>

<p><strong>Ausserhalb des Teams</strong></p>

<p>„Das Team braucht keinen Scrum-Master, wenn es Scrum richtig macht“ habe ich schon so oft gehört und anfangs war ich der Aussage gegenüber skeptisch. Später auch. Zu Recht, wenn man den Gedanken weiter verfolgt. Heisst das, dass, wenn man seinen Job gut macht, man nicht mehr gebraucht wird und ihn somit nicht machen muss? Das wäre ja paradox.</p>

<p>Denkt man den Gedanken fertig, merkt man, dass dieser so nicht stimmt. Oftmals gibt es neben dem Entwicklungs-Team auch einen eifrigen und sehr engagierten Product-Owner, vor dem man das Team manchmal „schützen“ muss. Der Product-Owner muss den Product-Backlog auf dem aktuellsten Stand halten und kann dabei ebenso die Hilfe eines Scrum-Masters benötigen.</p>

<p>Und selbst wenn das Team sich organisieren und der Product-Owner den Product-Backlog pflegen kann, gibt es vielleicht in der Firma noch weitere Teams, die auch auf den Scrum-Zug aufspringen wollen. Diese sollte man, gerade in der Anfangsphase, unterstützen. Wenn die Arbeit gut läuft werden sicher auch ganz schnell andere Vorgesetze aufmerksam, die es zu unterrichten gilt. All das gehört zum Scrum-Master-Sein hinzu. Diese Aufgaben werden recht schnell vergessen, wenn man über den Scrum-Master redet.</p>

<p>Völlig unabhängig welcher Teil nun beraten wird: Beispielsweise der Product-Owner beim Anordnen der Backlog-Items, das Team bei allgemeinen Scrum-Fragen oder Aussenstehende, denen gesagt werden muss, wie ihr Input dem Team und dem Wert des Produkts am meisten bringt: Der Scrum-Master-Posten verlangt eine Rundumsicht. 360 Grad, die man, sofern es möglich ist, immer im Blick haben sollte.</p>

<p>Wenn ein Scrum-Master sich nicht mit dem Team beschäftigt, ist er manchmal auch mit gleichgesinnten zu finden. Der Austausch mit anderen Scrum-Mastern ist absolut wichtig und sinnvoll. Welche Methoden kommen an, warum kommen sie an? Welche sind eher schlechter geeignet, wofür? Wer hat was ausprobiert und gute oder schlechte Erfahrungen gemacht? All das sind Fragen, die direkt im Scrum nicht erwähnt werden. Aber dem Team, und damit meine ich das komplette Scrum-Team, zugutekommen. So kann Neues in den nächsten Sprint einfliessen oder zumindest in der Retrospektive besprochen werden. Das ist wichtig, sogar essentiell. Denn das ist Scrum.</p>

<p><strong>Zusammenfassung</strong></p>

<p>Scrum-Master helfen dem Team. Das ist soweit klar. Und sie machen ihre Arbeit gut, wenn das Team reibungslos funktioniert. Aber Scrum-Master sein ist so viel mehr als nur dem Team zu helfen. Es gibt noch so viele andere Faktoren im Scrum-Prozess, die eine Produktivitätssteigerung ausmachen können. Es geht auch darum ein gemeinsames Verständnis innerhalb einer Organisation zu schaffen, das das Produkt in den Mittelpunkt rückt. Das ist auch ein Fokus des Scrum-Masters. Und das hört beim Entwicklungs-Team noch lange nicht auf…</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2015/01/20/jeder-braucht-einen-scrum-master</wp:post_id>
        <wp:post_date>2015-01-20T08:00:00+01:00</wp:post_date>
        <wp:post_date_gmt>2015-01-20T08:00:00+01:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="scrum"><![CDATA[["scrum",]]></category>
        
          <category domain="post_tag" nicename="master"><![CDATA["master"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[SCRUM - Wege zu einer erfolgreichen Retrospektive]]></title>
        <link>http://offering.solutions/blog/articles/2014/12/04/scrum-wege-zu-einer-erfolgreichen-retrospektive/</link>
        <pubDate>2014-12-04T07:05:00+01:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>Die Retrospektive sollte immer am Ende des Sprints stattfinden und der Ort sein, an dem die Weichen gestellt werden für den nächsten Sprint. Nicht, was den Inhalt des Sprints angeht, also die Frage beantwortet wird, <em>was</em> gemacht werden soll, sondern <em>wie</em> man es besser tun kann.</p>

<p>Hierbei spielt eine grosse Rolle ob die Leute aktiv dabei sind, ob sie also daran interessiert sind sich und ihren Prozess zu verbessern. Die Motivation ist hierbei sehr entscheidend.</p>

<p>Die Retrospektive ist mit dem DailyStandup-Meeting eines der wichtigsten Meetings im Sprint. Sie sollte unbedingt ernstgenommen werden. Ausschliesslich in diesem Meeting können Sachen verändert, verbessert oder ausprobiert werden. Das Team braucht ein offenes Ohr. Für alle Anliegen, die hervorgebracht werden.</p>

<blockquote>
  <p><em>Tipp: Falls das Team eher introvertiert ist, gelangen Sie über die Frage „Was lief denn gut in dem Sprint“ ganz einfach in die Diskussion, was schlecht lief.</em></p>
</blockquote>

<h4 id="sollte-der-product-owner-dabei-sein"><strong>Sollte der Product Owner dabei sein?</strong></h4>

<p>Das Team sollte sich zusammenfinden und Schwachstellen suchen, falls diese nicht während des Sprints schon herausgekommen sind und versuchen diese zu beseitigen. Ob der Product Owner (PO) dabei anwesend sein muss sollte individuell pro Team entschieden werden. Ich habe schon Meinungen gehört, dass der PO nicht dabei sein sollte, damit das Team ungestört reden kann. Dies heisst jedoch nur, dass das Team mit anwesendem PO nicht reden könnte, was die Beziehung des Teams zum PO in Frage stellt. Ausserdem kann der PO auch abschliessend, also nachdem alle Team-Argumente vorgebracht sind, wertvollen Input in die Retro bringen und eventuell dabei helfen die Dinge zu verbessern, die in der Retro hochgekommen sind. Somit will ich dort nicht zu einem eindeutigen Schluss kommen. Sinnvoll kann beides sein. Und falls die Retro einmal mit bzw. ohne PO gemacht wurde, heisst das ja nicht, dass es ewig so bleiben muss. Man kann es ja verändern. Ein Hoch auf die Retrospektive!</p>

<h4 id="anstze-fr-eine-erfolgreiche-retro"><strong>Ansätze für eine erfolgreiche Retro</strong></h4>

<p><strong>Stand Up!</strong></p>

<p>Lassen Sie das Team stehen (nicht im Regen). Es sollte jedoch nicht sitzen. Leute sind aktiver, wenn sie stehen. Falls sie also Aktivität fordern und fördern wollen, bitten Sie jeden, der an der Retrospektive teilnehmen will, aufzustehen.</p>

<p><strong>Write Down!</strong></p>

<p>Benutzen Sie etwas zum Aufschreiben. Ein Flipchart. Ein grosses Blatt Papier auf dem Tisch. Rote Karten (schlecht), grüne Karten (gut). Wichtig: Jeder sollte hierbei etwas zu schreiben in der Hand haben.</p>

<p><strong>Take Time:</strong></p>

<p>Nehmen Sie sich Zeit! Es gibt nichts Schlimmeres als eine gehetzte Retrospektive. Zeit um Sachen aufzuschreiben. Zeit, um Sachen auszuwählen. Zeit, zu diskutieren. Planen Sie für die Retro mit ruhigem Gewissen gute 60 Minuten ein. Wenn es mehr wird ist das erstmal positiv, nicht negativ. Man kann sich am Ende immer noch auf 2-3 Themen begrenzen, die es zu behandeln gilt.</p>

<p><strong>Allseits bekannt: Die Technik ist entscheidend!</strong></p>

<p>Mit verschiedenen Techniken lassen sich abweichende Ergebnisse erzielen. Somit probieren Sie aus, welche der Folgenden Ihnen am besten passt:</p>

<p><em>Achtung: Die gezeigten Techniken hier sind nur ein Bruchteil derer, die es für erfolgreiche Retrospektiven gilt. Die Beispiele sollen jedoch zeigen, wie Facettenreich solch ein Meeting gestaltet werden kann.</em></p>

<p><strong>Das Karten-Prinzip:</strong></p>

<p>Jeder Teilnehmer schreibt einen Punkt auf eine Karte, der ihm gut bzw. weniger gut gefallen hat. Hierbei gibt es viele Karten, jeder Teilnehmer kann so viel schreiben wie er möchte. In der Zeit kann der Scrum-Master eine Wand präparieren, die eine Skala zeigt. Diese hat beispielsweise die Form eines langen Dreiecks. Auf der einen Seite dicker (gut) auf der anderen Seite dünner (schlecht).</p>

<p><img src="/assets/articles/2014-12-04/RetroGoodBad.jpg" alt="SCRUM - Wege zu einer erfolgreichen Retrospektive" /></p>

<p>Wenn die Teammitglieder fertig sind heften sie die Zettel an die Wand bis keine beschriebenen Zettel mehr auf dem Tisch liegen. Danach wird das Ergebnis betrachtet und diskutiert. Natürlich im Stehen. Hierbei spielt nicht nur eine Rolle, warum der Zettel wo hängt, sondern auch, was drauf steht. Also Inhalt, und Ort sind von Nutzen. Wenn Sie einen Schritt weiter gehen wollen, können sie die Höhe, also die y-Achse, noch als Priorität definieren. Dann legen die Team-Mitglieder neben der Sache selber, der Einordnung in „Gut“ und „Schlecht“ auch noch die Priorität (wichtig/nicht so wichtig) fest.</p>

<p><strong>MKL-Prinzip:</strong></p>

<p>MKL steht demnach für die drei Statuswerte „<em>More</em>“, „<em>Keep</em>“ und „<em>Less</em>“. Die Methode ähnelt dem Karten-Prinzip. Hierbei sind die Grenzen zu „gut“ und „schlecht“ jedoch klar abgegrenzt.</p>

<p>Bereiten Sie ein Flipchart oder eine Magnetwand (oder oder oder…) vor und zeichnen Sie drei Spalten „More“, „Keep“ und „Less“. Lassen Sie das Team bewaffnet mit jeweils einem Stift pro Person an die Wand treten (Jeder einen Stift ist hierbei sehr wichtig. So hat niemand die Möglichkeit zu sagen „ich kann nichts schreiben, ich hab ja den Stift nicht“). Nun soll jeder aufschreiben was gut war an diesem Sprint bzw. was noch verstärkt gemacht werden soll („More“). Neutral bzw. ausreichend ist, was in der Spalte „Keep“ eingetragen wird, und „Less“ sollte sich mit Sachen füllen, die man im nächsten Sprint weniger finden will.</p>

<p><strong>Rory Cubes:</strong></p>

<p>lIlya Pavlichenko stellt im Scrum.org-Blog eine weitere Methode vor, wie man Retrospektiven gestalten kann. Hierbei greift er auf Spielwürfel zurück.</p>

<p>Zu finden ist das Ganze hier: <a href="http://blog.scrum.org/rory-cubes-for-sprint-retrospective/">http://blog.scrum.org/rory-cubes-for-sprint-retrospective/</a></p>

<p><strong>Briefe:</strong></p>

<p>Eine weitere Möglichkeit ist, dem Sprint Briefe schreiben zu lassen. Was auf den ersten Blick völlig albern erscheint, ist auf den zweiten Blick gar nicht mal so abwegig:</p>

<p>Geben Sie jedem Teilnehmer der Retro ein leeres Blatt Papier. Hierauf sollen sie dem Sprint einen Liebes- und einen Hassbrief schreiben. Dies kann auch gern im Team von zwei bis drei Leuten geschehen. Timeboxed auf ca. 15 Minuten können daraus Punkte zur Verbesserung abgeleitet werden und erforderliche Massnahmen ergriffen werden. Ausserdem bringt diese Methode sicher einige Lacher mit sich, die gerade in einem etwas schwierigeren Meeting wie der Retro enorm wichtig sind.</p>

<p><strong><em>Generell: Halten Sie die Ergebnisse fest!</em></strong></p>

<p>Halten Sie das Ergebnis der Retrospektive fest. Nichts ist schlimmer als eine Retro, deren Ergebnis nachher in Luft verpufft. Daher halten Sie das Ergebnis irgendwie fest. Natürlich im Einverständnis aller. Hierbei geht es gar nicht mal um die Form. Foto, Zeichnung, Protokoll. Völlig egal: Hauptsache das Ergebnis steht bei der nächsten Planung zur Verfügung. Besser noch: Hängen Sie das Ergebnis der Retro offen für jeden sichtbar auf, damit das Team daran erinnert wird, was es verbessern wollte. Greifen Sie es in der nächsten Retro wieder auf. Haben sie nach einer Zeit einige Punkte gesammelt und verbessert können sie allein schon mit der Retro eine Reihe von Erfolgen vorweisen. Das bessert die Stimmung und zeigt auch Zweiflern, dass ihr Zweifel unbegründet ist.</p>

<p><em> </em></p>

<p><strong><em>Beschränken Sie sich auf die Punkte, die realistisch sind:</em></strong></p>

<p>Wie wichtig es ist, Ergebnisse gleich während der Retro festzuhalten zeigt auch der folgende Ansatz: Angenommen ihr Team hat etwaige Punkte gefunden, die verbessert werden können: Nehmen Sie nur den Teil davon auf, der zum Umsetzen realistisch ist. Vielleicht die ersten beiden Punkte? Oder immer nur einen? Gerade am Anfang sind die Erfolge leichter zu sehen, wenn kleine Sachen recht einfach umgesetzt werden können. Das Vertrauen in das Meeting wächst und die Skepsis verfliegt langsam.</p>

<p>Aber Achtung: Sie sollten niemals aus einer Retro gehen und nichts zum Verbessern haben. Hand aufs Herz: So gut ist auch Ihr Team nicht, als dass es nichts zu verbessern gäbe ;-)</p>

<p><strong>Das wichtigste zum Schluss:</strong></p>

<p>Seien sie offen für alles. Falls etwas nicht passt, fliegt es raus. Probieren Sie Sachen aus. Natürlich geht es um Verbesserungen. Aber ob es nun wirklich besser oder schlechter geht mit einer Veränderung stellen Sie erst fest, wenn sie es probiert haben. Fordern Sie das Team aktiv auf etwas auszuprobieren. Im schlimmsten Fall fliegt die Veränderung in der nächsten Retro wieder raus. Und selbst dann hat man an Erfahrung gewonnen.</p>

<p><em>Mit diesem Blog habe ich nur einen Bruchteil von Ansätzen gezeigt, die eine Retro schmackhaft und erfolgreich machen können. Es gibt Ansätze wie Sand am Meer. Die Kunst ist, den zu finden, der auf ihr Team passt. Ich hoffe jedoch ich konnte Möglichkeiten aufzeigen, die zeigen, dass eine Retro mehr sein kann, als die Frage, was alles schlecht ist.</em></p>

<p>Gruss Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2014/12/04/scrum-wege-zu-einer-erfolgreichen-retrospektive</wp:post_id>
        <wp:post_date>2014-12-04T07:05:00+01:00</wp:post_date>
        <wp:post_date_gmt>2014-12-04T07:05:00+01:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="retrospektive"><![CDATA[["retrospektive",]]></category>
        
          <category domain="post_tag" nicename="scrum"><![CDATA["scrum"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[ASP.NET - Clientseitige Webarchitekturen mit AngularJS]]></title>
        <link>http://offering.solutions/blog/articles/2014/11/02/asp-net-clientseitige-webarchitekturen-mit-angularjs/</link>
        <pubDate>2014-11-02T07:05:00+01:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>ASP.NET MVC hat, wie der Name schon sagt, die MVC-Struktur auf dem Server etabliert und es ist somit möglich saubere Architekturen auf dem Server zu erstellen.</p>

<p>Mehr und mehr geht die Richtung jedoch hin zu Mobile-First-Implementierungen. Hierbei spielt der Client, dabei meine ich die Tatsache, <em>dass</em> es ein Client ist, nicht welche Art von Client (Handy, Tablet etc.), eine immer grössere Rolle.</p>

<p>Wir tragen heute Rechner in unseren Hosentaschen, die stärker sind als die Desktop-Rechner vor 5 Jahren und man findet Rechenpower sehr viel schneller als zu damaliger Zeit. Tablets, Handys, Phablets und und und sind internetfähig und die Seiten müssen mobile Ansichten einfach in den Fokus stellen. MediaQueries tun ihre Arbeit, aber moderne WebApplikationen müssen auch fähig sein, dem Benutzer die Usability einer mobilen App zu geben. Die Arbeit findet also auf dem Client, statt auf dem Server, statt. Aufgrund der Leistung ist dies ohne Probleme möglich. Aber je mehr Arbeit auf dem Client getan werden muss, desto mehr muss auch bei dem Erstellen der Appltikation clientseitig implementiert werden. Dies geht nur mit einer testbaren und wartbaren Struktur und Architektur.</p>

<p>AngularJS bietet neben der Implementierung mit Javascript auch noch die Möglichkeit eine Clientseitige geordnete Architektur, im MV*-Stil aufzuziehen, um auch grössere Anforderungen an Webseiten geordnet abzubilden.</p>

<p>Durch die Tatsache, dass Angular uns Dependency-Injection out-of-the-box mitliefert gewinnen wir schon eine sehr lose Kopplung der einzelnen Module, die sich sehr schön und passend zusammensetzen lassen.</p>

<p>Im Folgenden möchte ich eine beispielhafte Architektur aufzeigen und erläutern. Diese ist nicht in Stein gemeisselt, ist aber sicher ein guter Anfang für Projekte.</p>

<p>Die Struktur bzw Architektur der Client-Applikation liegt in einem Verzeichnis „app“ im root-Verzeichnis der Anwendung.</p>

<p><img src="/assets/articles/2014-11-02/01.png" alt="ASP.NET - Clientseitige Webarchitekturen mit AngularJS" /></p>

<p>In ihr enthalten ist ein Ordner für Bilder und Scripts, einer für Styles (css-Dateien) und für die Views. Der Skript-Ordner beinhaltet die eigentliche Applikation:</p>

<p><img src="/assets/articles/2014-11-02/adasdasdasd.jpg" alt="ASP.NET - Clientseitige Webarchitekturen mit AngularJS" /></p>

<p>Hier kann man auch schon die clientseitige Architektur bzw. deren Ansatz erkennen: der controllers-Folder bildet den „Namespace“ für Controller ab, der die gleiche Rolle spielt wie in ASP.NET-Anwendungen auch: Er nimmt die Anfragen vom UI entgegen und verarbeitet diese. Dazu arbeitet er mit dem Viewmodel, dass in Angular „$scope“ getauft wurde.</p>

<p>Die Services bieten eine Abstrahierung von etwaigen Aufgaben. Hier können Business-Services weggekapselt werden, die ihre eigenständigen Aufgaben haben. Auch Repositories sind denkbar. Auch in einem eigenen Namespace, wenn dies gewünscht ist. Durch die Dependency-Injection wäre das Aufteilen in verschiedene Klassen und Namespaces kein Problem.</p>

<p>App.js bietet uns den Start unserer Anwendung. Hier wird die App erstellt und einer Variable zugewiesen, auf der die Controller, Services etc. in Zukunft registriert werden.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">firstApp</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'firstApp'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'ngRoute'</span><span class="p">,</span> <span class="s1">'ngResource'</span><span class="p">,</span> <span class="s1">'ui.bootstrap'</span><span class="p">]);</span></code></pre></figure>

<p>Welche Module hier noch hinzugefügt wurden ist im Moment völlig irrelevant. Wichtig ist die Variable „firstApp“, die uns noch weiter begegnen wird im Laufe dieses Blogposts.</p>

<p>Die Controller bieten nun die Möglichkeit, direkt mit dem Viewmodel zu arbeiten. Er setzt alle Properties auf dem Viewmodel und bietet der View genau, und nur genau das, was sie zum Anzeigen braucht. Man kann (und sollte) beispielsweise auch Methoden auf dem Scope registrieren, die der Benutzer mit einem Klick ausführen kann. Der Scope bietet der View alles, was sie zum Funktionieren braucht.</p>

<p>Der Controller versorgt den Scope und empfängt seinerseits Daten aus einem Repository, einem Service etc. Die Datenquelle kann beliebig sein, eben auch eine REST-Schnittstelle. Hierbei würde wiederum ASP.NET WebAPI zum Zuge kommen können.</p>

<p><img src="/assets/articles/2014-11-02/10.png" alt="ASP.NET - Clientseitige Webarchitekturen mit AngularJS" /></p>

<p>Die Controller bei der Beispiel-Todo-App im Anhang befinden sich in einem seperaten Namespace „controllers“, die Services dazu in einem Namespace „services“.</p>

<p><img src="/assets/articles/2014-11-02/03.png" alt="ASP.NET - Clientseitige Webarchitekturen mit AngularJS" /></p>

<p>Hierbei kommen die oben genannten Aufgaben zum Tragen.</p>

<p>Der Todo-Service beispielsweise bietet die Funktionen zum Abrufen, Löschen und Hinzufügen an:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="s1">'use strict'</span><span class="p">;</span>
<span class="nx">firstApp</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">'todoService'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
    
    <span class="kd">var</span> <span class="nx">todoService</span> <span class="o">=</span> <span class="p">{};</span>
    
    <span class="kd">var</span> <span class="nx">urlPrefix</span> <span class="o">=</span> <span class="s1">'/api/Todo/'</span><span class="p">;</span>
    
    <span class="kd">var</span> <span class="nx">_addTodo</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">todoName</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span> <span class="na">Name</span><span class="p">:</span> <span class="nx">todoName</span> <span class="p">};</span>
        <span class="kd">var</span> <span class="nx">promise</span> <span class="o">=</span> <span class="nx">$http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="nx">urlPrefix</span> <span class="o">+</span> <span class="s1">'AddTodoItem'</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">promise</span><span class="p">;</span>
    <span class="p">};</span>
    
    <span class="kd">var</span> <span class="nx">_deleteTodo</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">promise</span> <span class="o">=</span> <span class="nx">$http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="nx">urlPrefix</span> <span class="o">+</span> <span class="s1">'RemoveTodoItem'</span><span class="p">,</span> <span class="nx">item</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">promise</span><span class="p">;</span>
    <span class="p">};</span>
    
    <span class="kd">var</span> <span class="nx">_getTodoItems</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">promise</span> <span class="o">=</span> <span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">urlPrefix</span> <span class="o">+</span> <span class="s1">'GetAllTodoItems'</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">//console.log(results);</span>
            <span class="k">return</span> <span class="nx">results</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
        <span class="p">});</span>
        <span class="k">return</span> <span class="nx">promise</span><span class="p">;</span>
    <span class="p">};</span>
    
    <span class="nx">todoService</span><span class="p">.</span><span class="nx">getTodoItems</span> <span class="o">=</span> <span class="nx">_getTodoItems</span><span class="p">;</span>
    <span class="nx">todoService</span><span class="p">.</span><span class="nx">addTodo</span> <span class="o">=</span> <span class="nx">_addTodo</span><span class="p">;</span>
    <span class="nx">todoService</span><span class="p">.</span><span class="nx">deleteTodo</span> <span class="o">=</span> <span class="nx">_deleteTodo</span><span class="p">;</span>
    
    <span class="k">return</span> <span class="nx">todoService</span><span class="p">;</span>
<span class="p">});</span></code></pre></figure>

<p>Durch die Registrierung auf der App-Variable „firstApp“ steht nun die Dependency Injection zur Verfügung, die es möglich macht, den Service im Controller zu injecten. Der Controller kann nun die Methoden in Anspruch nehmen.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">firstApp</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'todoController'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">todoService</span><span class="p">)</span> <span class="p">{</span>
    
    <span class="kd">var</span> <span class="nx">_addTodo</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="nx">todoService</span><span class="p">.</span><span class="nx">addTodo</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">TodoItem</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span>
            <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="nx">_getTodoItemAndSetOnScope</span><span class="p">();</span>
            <span class="p">},</span>
            <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="nx">alert</span><span class="p">(</span><span class="s2">"Error occured"</span><span class="p">);</span>
            <span class="p">});</span>
    <span class="p">};</span>
    
    <span class="kd">var</span> <span class="nx">_deleteTodo</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">todoService</span><span class="p">.</span><span class="nx">deleteTodo</span><span class="p">(</span><span class="nx">item</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="nx">_getTodoItemAndSetOnScope</span><span class="p">();</span>
            <span class="p">});</span>
    <span class="p">};</span>
    
    <span class="kd">var</span> <span class="nx">_getTodoItemAndSetOnScope</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="nx">todoService</span><span class="p">.</span><span class="nx">getTodoItems</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">$scope</span><span class="p">.</span><span class="nx">todoItems</span> <span class="o">=</span> <span class="nx">result</span><span class="p">;</span>
        <span class="p">});</span>
    <span class="p">};</span>
    
    <span class="nx">_getTodoItemAndSetOnScope</span><span class="p">();</span>
    
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">TodoItem</span> <span class="o">=</span> <span class="s2">""</span><span class="p">;</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">AddTodo</span> <span class="o">=</span> <span class="nx">_addTodo</span><span class="p">;</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">DeleteTodo</span> <span class="o">=</span> <span class="nx">_deleteTodo</span><span class="p">;</span>
<span class="p">});</span></code></pre></figure>

<p>Er setzt die Informationen auf dem scope und gibt diese zurück an die View. Diese bekommt per</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">ng</span><span class="o">-</span><span class="nx">controller</span><span class="o">=</span><span class="s2">"todoController"</span></code></pre></figure>

<p>den Controller mitgeteilt und kann so das konsumieren, was der Controller auf dem Scope setzt. Beispielsweise:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"> <span class="o">&lt;</span><span class="nx">tbody</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">repeat</span><span class="o">=</span><span class="s2">"item in todoItems"</span><span class="o">&gt;</span></code></pre></figure>

<p>Hierbei ist „todoItems“ eine Liste aller vorhandenen Items.</p>

<p>Die Serverseitige WebAPI lässt sich kurz beschreiben. Hierbei gebe ich gern die Action direkt mit. Das ist aber nur eine Vorliebe meinerseits. Dies muss nicht so gelöst werden. Es kann auch mit Attributen der ActionName verändert werden, so dass dies „on-the-fly“ passiert.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">WebApiConfig</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Register</span><span class="p">(</span><span class="n">HttpConfiguration</span> <span class="n">config</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// Web API configuration and services
</span>        <span class="n">config</span><span class="p">.</span><span class="n">Formatters</span><span class="p">.</span><span class="nf">Clear</span><span class="p">();</span>
        <span class="n">config</span><span class="p">.</span><span class="n">Formatters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">JsonMediaTypeFormatter</span><span class="p">());</span>

        <span class="c1">// Web API routes
</span>        <span class="n">config</span><span class="p">.</span><span class="nf">MapHttpAttributeRoutes</span><span class="p">();</span>

        <span class="n">config</span><span class="p">.</span><span class="n">Routes</span><span class="p">.</span><span class="nf">MapHttpRoute</span><span class="p">(</span>
            <span class="n">name</span><span class="p">:</span> <span class="s">"DefaultApi"</span><span class="p">,</span>
            <span class="n">routeTemplate</span><span class="p">:</span> <span class="s">"api/{controller}/{action}/{id}"</span><span class="p">,</span>
            <span class="n">defaults</span><span class="p">:</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">RouteParameter</span><span class="p">.</span><span class="n">Optional</span> <span class="p">}</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Gearbeitet wird in der Beispiel-Solution mit dem Code-First-Ansatz, der eine richtige Konfiguration des MSSQL-Servers voraussetzt.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">TodoController</span> <span class="p">:</span> <span class="n">ApiController</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">ITodoRepository</span> <span class="n">_todoRepository</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">TodoController</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">_todoRepository</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">TodoRepositoryImpl</span><span class="p">(</span><span class="k">new</span> <span class="nf">DatabaseContext</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">AddTodoItem</span><span class="p">(</span><span class="n">TodoItem</span> <span class="n">todoItem</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">using</span> <span class="p">(</span><span class="n">_todoRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">todoItem</span><span class="p">.</span><span class="n">Added</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
            <span class="n">_todoRepository</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">todoItem</span><span class="p">);</span>
            <span class="n">_todoRepository</span><span class="p">.</span><span class="nf">Save</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
    <span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">TodoItem</span><span class="p">&gt;</span> <span class="nf">GetAllTodoItems</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">using</span> <span class="p">(</span><span class="n">_todoRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_todoRepository</span><span class="p">.</span><span class="nf">GetAll</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">RemoveTodoItem</span><span class="p">(</span><span class="n">TodoItem</span> <span class="n">todoItem</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">using</span> <span class="p">(</span><span class="n">_todoRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">TodoItem</span> <span class="n">findSingle</span> <span class="p">=</span> <span class="n">_todoRepository</span><span class="p">.</span><span class="nf">FindSingle</span><span class="p">(</span><span class="n">todoItem</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">findSingle</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">_todoRepository</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="n">todoItem</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>
                <span class="n">_todoRepository</span><span class="p">.</span><span class="nf">Save</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Und das dazugehörige Repository:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">namespace</span> <span class="nn">AngularJsTemplate.Repositories.TodoRepository</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="n">ITodoRepository</span> <span class="p">:</span> <span class="n">IRepositoryContext</span><span class="p">&lt;</span><span class="n">TodoItem</span><span class="p">&gt;</span>
    <span class="p">{</span>
            
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">namespace</span> <span class="nn">AngularJsTemplate.Repositories.TodoRepository.Impl</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">TodoRepositoryImpl</span> <span class="p">:</span> <span class="n">RepositoryContextImpl</span><span class="p">&lt;</span><span class="n">TodoItem</span><span class="p">&gt;,</span> <span class="n">ITodoRepository</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">TodoRepositoryImpl</span><span class="p">(</span><span class="n">DbContext</span> <span class="n">databaseContext</span><span class="p">)</span> 
            <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">databaseContext</span><span class="p">)</span>
        <span class="p">{</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Benutzt wurde hier mein Repository und UnitOfWork-Paket, was auch auf <a href="http://www.nuget.org/packages/OfferingSolutions.UnitOfWork.Structure/" target="_blank">NuGet </a>zu finden ist.</p>

<p>Gruss</p>

<p>Fabian</p>

<p><img src="/assets/articles/2014-11-02/AngularJsTemplate.zip" alt="AngularJsTemplate" /></p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2014/11/02/asp-net-clientseitige-webarchitekturen-mit-angularjs</wp:post_id>
        <wp:post_date>2014-11-02T07:05:00+01:00</wp:post_date>
        <wp:post_date_gmt>2014-11-02T07:05:00+01:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="angularjs"><![CDATA[["angularjs",]]></category>
        
          <category domain="post_tag" nicename="entityframework"><![CDATA["entityframework",]]></category>
        
          <category domain="post_tag" nicename="solution"><![CDATA["solution",]]></category>
        
          <category domain="post_tag" nicename="web"><![CDATA["web",]]></category>
        
          <category domain="post_tag" nicename="architecture"><![CDATA["architecture"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Mach das Handy aus! Wie man maximal produktiv sein kann]]></title>
        <link>http://offering.solutions/blog/articles/2014/10/13/mach-das-handy-aus-wie-man-maximal-produktiv-sein-kann/</link>
        <pubDate>2014-10-13T19:32:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>So gut das Handy im Alltag auch sein kann, es gibt durchaus Momente, in denen es stört: Kino, Konversationen, etc.</p>

<p>Ich hatte vor ein paar Tagen ein Gespräch mit einem Freund, der mir wieder und wieder erzählte, dass er keine Zeit hat etwaige Sachen fertigzumachen. Sei es durch Arbeit oder durch ständige Unterbrüche oder oder oder. Völlig irrelevant, denn das Problem kennen wir alle: Man möchte unbedingt noch xyz bearbeiten oder fertigstellen aber man kommt einfach nicht dazu, denn ständig kommt etwas dazwischen. Oder man findet erst gar nicht die Zeit damit zu starten.</p>

<p>Irgendwann fängt man dann an sich ToDo-Listen zu schreiben. Von der Handyapp bis zur Schiefertafel in der Küche gibt es dort alle denkbaren Lösungen. Die geht man dann durch mit „Ach, grad keine Lust…keine Lust…Nö…Nö…Joar, könnte man mal machen“.</p>

<p>Ich betreue in meiner Freizeit ein Forum, ich pflege einen Blog, lese viel über meinen Beruf (man will sich ja auch weiterbilden und gerade im Web-Bereich ist das „Auf-Dem-Neuesten-Stand-Bleiben“ echt nicht einfach), schaue viel Lernvideos und kämpfe mit Ideen über Blogs, Vorträge oder einfache Lösungen für Probleme, die mich schon den ganzen Tag gequält haben und mich einfach nicht in Ruhe haben kommen lassen. Ich versuche im Beruf schöne Meetings zu schmeissen, die vorbereitet werden müssen und und und. Und ja, Freunde und Bekannte habe ich auch noch ;). Und ich bin mir sicher, dass jeder, der das liest, nebenbei noch viel viel mehr macht als ich.</p>

<p>Ich bin mir aber ebenfalls sicher, dass diese Menschen auch mit Ablenkungen zu kämpfen haben, die sie bei der Arbeit behindern und/oder unterbrechen.</p>

<blockquote>
  <p>Mein Tag hat 25 Stunden!</p>
</blockquote>

<p>Ein Mittel, was ich sehr gerne und erfolgreich einsetze um das zu schaffen, was ich schaffen möchte, ist eigentlich sehr trivial aber gerade für Technikbegeisterte noch recht schwierig: Machen Sie das Handy aus! Mindestens eine Stunde am Tag. Das Handy hat einen Flugmodus. Der möchte aber auch benutzt werden. Probieren Sie den mal aus! Ein Wahnsinnsfeature! Eine Stunde am Tag. Facebook: Aus. Skype: Aus. Telegram, WhatsApp: Geht nicht mehr, weil der Flugmodus an ist. Telefon: Aus. Widmen Sie sich dem, was sie immer schon vorhatten. Dies muss nicht mal Arbeit sein, ganz im Gegenteil: Lesen Sie ein Buch oder gehen sie spazieren. Kaffee mit Freunden, laufen gehen, Wohnung putzen, Sport machen… Machen Sie das, für das Sie sonst nie Zeit finden. Machen Sie es für sich. Machen Sie es ausschliesslich für sich. Es ist erstaunlich, was man in einer Stunde alles schaffen kann. Es ist erstaunlich, wie schnell diese Stunde rumgeht und noch erstaunlicher ist es, wie zufrieden man sich nachher fühlt. Ihr Tag bekommt auf einmal 25 Stunden.</p>

<p>Für alle Skeptiker: Wenn irgendetwas passiert, was sie tangiert in genau der Stunde, in der sie abschalten: Man wird euch erreichen! Wenn die Welt untergeht: Sie bekommen das mit! Lodernde Lavabrocken sieht man auch ohne Handy draussen vorbeirauschen, falls es mit dem Planeten zu Ende geht. Man wird euch erreichen! Das soll nicht verletzend klingen: Aber niemand wird sie innerhalb dieser Stunde vermissen.</p>

<p>Hierbei sei gesagt, dass sie natürlich das Abendessen beispielsweise mit der Liebsten (auch der Liebsten in Spe) nicht verpassen sollten. Auch der Hund muss eventuell vorher ausgeführt werden. Es nützt ja niemandem was, wenn sie das Buch zu Ende gelesen haben aber der Teppich ist anschliessend reif für die Reinigung.</p>

<blockquote>
  <p>Einmal Handy mit Flugmodus, bitte!</p>
</blockquote>

<p>Dennoch: Wenn Sie wissen wollen, wie das Wetter draussen ist: Machen Sie den Rollladen hoch statt auf Ihre App zu schauen!</p>

<p>Ich bin wirklich der Meinung, dass der Flugmodus ein Riesen-Feature am Handy ist. Er steht hierbei symbolisch für das Kappen jedweder Kommunikation nach aussen. Eben für diese 60 Minuten. Würde ein Handy diesen Modus nicht haben, würde ich es sicher nicht kaufen.</p>

<p>Das Gespräch mit dem eingangs erwähnten Freund ging ebenso zu Ende. Er war überrascht, wie einfach so etwas sein konnte und wollte es unbedingt mal ausprobieren. Ich warte noch auf seine Rückmeldung. Per Handy jedenfalls ist er nicht mehr erreichbar.</p>

<p>Ich mache jetzt erstmal mein Handy wieder an…nachher geht die Welt unter, und keiner sagt mir Bescheid…</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2014/10/13/mach-das-handy-aus-wie-man-maximal-produktiv-sein-kann</wp:post_id>
        <wp:post_date>2014-10-13T19:32:00+02:00</wp:post_date>
        <wp:post_date_gmt>2014-10-13T19:32:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="life"><![CDATA[["life"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[ASP.NET Repository Pattern und Unit of Work]]></title>
        <link>http://offering.solutions/blog/articles/2014/10/06/asp-net-repository-pattern-und-unit-of-work/</link>
        <pubDate>2014-10-06T20:39:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In diesem Blogpost möcht ich das ASP.NET Repository Pattern and Unit of Work vorstellen. In einem Informationssystem (z.B. Webapplikation) hat man normalerweise immer dasselbe Problem: Irgendwie muss man Daten persistieren und von der Oberfläche im Browser in die Datenbank hin- und wieder zurückschieben. Und dies findet man beinahe bei jedem Objekt (Person, Artikel, Blogeintrage, etc.). Vor allem fällt nach einer Zeit auf, dass die Operationen immer dieselben sind: <strong>C</strong>reate/<strong>R</strong>ead/<strong>U</strong>pdate und <strong>D</strong>elete geben sich die Klinke in die Hand. Dies sind die sogenannten CRUD-Operationen.</p>

<p><img src="/assets/articles/2014-10-06/01.png" alt="ASP.NET Repository Pattern und Unit of Work" /></p>

<p>Um diese Datenoperationen so einfach, so sinnvoll und so übersichtlich wie möglich zu halten bietet sich das Repository- in der Kombination mit dem UnitOfWork-Pattern an. Vor allem, aber nicht nur, im Web-Bereich.</p>

<p>Ich werde jetzt kurz beide Ansätze erläutern um danach einen Anwendungsfall mit Code-Beispielen zu zeigen.</p>

<p>Um diese Datenoperationen so einfach, so sinnvoll und so übersichtlich wie möglich zu halten bietet sich das Repository- in der Kombination mit dem UnitOfWork-Pattern an. Vor allem, aber nicht nur, im Web-Bereich.</p>

<p>Ich werde jetzt kurz beide Ansätze erläutern um danach einen Anwendungsfall mit Code-Beispielen zu zeigen.</p>

<p><strong>Repositories:</strong></p>

<p>Das Pattern hilft dem Entwickler beim Aufziehen einer wartbaren, testbaren und übersichtlichen Architektur.</p>

<p>Das Repository-Pattern sieht vor, dass jedes Objekt (sei es ein Kunde, ein Artikel oder ein Blogeintrag) genau eine Schnittstelle hat, an denen es die CRUD-Operationen ausführen kann. Im Prinzip eine Schnittstelle, die auf die Anliegen „Kannst du mir mal alle xyz geben“, „Trage mal einen neuen xyz ein“, „Der xyz hat neue Werte, aktualisiere die mal“ und „Der xyz wird nicht mehr gebraucht“ eine passende Reaktion hat. Diese Schnittstelle oder der Punkt, wo solche Anliegen bearbeitet werden, ist das Repository. Für beinahe jedes Objekt, was persistiert wird.</p>

<p>Gerade bei Webapplikationen gilt: Datenbank-Anfragen sind teuer. Das sind sie wirklich: Denn je nachdem wie viele Anfragen abgesetzt werden kosten diese Zeit. Rechenzeit für den Server, den Anwender kostet dies Zeit, die er am und im Browser merkt und und und. Gerade im Cloud-Bereich wird dies sofort in bares Geld umgewandelt.</p>

<blockquote>
  <p><em>Definition des Repository-Patterns von Fowler:</em>
<em>Vermittelt mit Hilfe einer Collection-artigen Schnittstelle für den Zugriff auf Domänenobjekte zwischen den Domänen- und Daten-Mapping-Schichten</em></p>
</blockquote>

<p>Die Vorteile des Patterns sind zum einen die vereinfachten Unit-Tests. Man kann jedes Repositoryeinfach testen und so auf seine korrekte Funktionalität überprüfen. Weiter bieten Repositories eine zentrale Anlaufstelle für Datenbankoperationen. Eine gemeinsame Schnittstelle gegenüber den Datenhaltungs-Schichten. Zudem bietet es einen Punkt, an dem man beispielsweise Mechanismen wie Caching implementieren kann.</p>

<p><img src="/assets/articles/2014-10-06/02.png" alt="ASP.NET Repository Pattern und Unit of Work" /></p>

<p>Trotzdem hat man immernoch das „Problem“, dass man jede Abfrage direkt, also unverzüglich, an die Datenbank sendet.</p>

<p><img src="/assets/articles/2014-10-06/03.png" alt="ASP.NET Repository Pattern und Unit of Work" /></p>

<p><strong>UnitOfWork:</strong></p>

<p>Eine Milderung dieses Umstandes ist das UnitOfWork-Prinzip. Hierbei ist der Name mehr als treffend: Das „UnitOfWork“ ist ein Kontext, der sich alle Datenbankoperationen „notiert“, also alle Veränderungen, die gemacht werden sollen, mitschreibt und sie zum vom Entwickler gewählten Zeitpunkt gegen die Datenbank feuert. Somit werden alle Informationen „auf einmal“ (hierbei laufen wir schon noch synchron, jedoch mit so wenig aufrufen wie möglich) in die Datenbank geschrieben.</p>

<p>UnitOfWork löst also das grundlegende Problem, wie geänderte Objekte im Speicher verwaltet werden können, so dass eine effiziente Synchronisation mit der Datenbank möglich ist.</p>

<p>Schüttet man nun diese beiden Ansätze in einen Topf und gibt ein bisschen generisches dazu, hat man generische Repositories mit dem UnitOfWork-Pattern. Repositories, die grundsätzlich alle Operationen für jeden Dateityp bereitstellen, jedoch erweiterbar sind und alle ihre Änderungen auf einem UnitOfWork speichern, um dann alles gesammelt in eine Datenbank zu schreiben.</p>

<p>Nebenbei: Jeder, der das EntityFramework bisher benutzt hat, hat das UnitOfWork- und das Repository-Pattern schon genutzt. Der „DbContext“ ist schon eine Abstrahierung davon. Wenngleich eine sehr Datenbank-nahe.</p>

<p>Im Folgenden möchte ich so eine Implementierung vorstellen und ein Nuget-Paket von mir vorstellen, das die Arbeit mit dem UnitOfWork so einfach wie möglich macht.</p>

<p><img src="/assets/articles/2014-10-06/04.png" alt="ASP.NET Repository Pattern und Unit of Work" /></p>

<p>Benutzung des UnitOfWorks:</p>

<p><img src="/assets/articles/2014-10-06/05.png" alt="ASP.NET Repository Pattern und Unit of Work" /></p>

<p>Hierbei werden die Repositories im Prinzip generisch und implizit vom UnitOfWork zur Verfügung gestellt. Aber um das Testing zu verbessern und eine bessere Aufteilung zu gewährleisten kann und sollte man eigene Klassen für die Repositories erstellen und nutzen.</p>

<p><img src="/assets/articles/2014-10-06/06.png" alt="ASP.NET Repository Pattern und Unit of Work" /></p>

<p>Eine mögliche Aufteilung im Projekt könnte wie folgt aussehen (Am Beispiel eines Blog-Repositories)</p>

<p><img src="/assets/articles/2014-10-06/07.png" alt="ASP.NET Repository Pattern und Unit of Work" /></p>

<p>Verwendung könnte beispielsweise sein:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">AdminAreaServiceImpl</span> <span class="p">:</span> <span class="n">IAdminAreaService</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IBlogRepository</span> <span class="n">_blogRepository</span><span class="p">;</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IUserRepository</span> <span class="n">_userRepository</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">AdminAreaServiceImpl</span><span class="p">(</span><span class="n">IUserRepository</span> <span class="n">userRepository</span><span class="p">,</span> <span class="n">IBlogRepository</span> <span class="n">blogRepository</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_blogRepository</span> <span class="p">=</span> <span class="n">blogRepository</span><span class="p">.</span><span class="nf">CheckIsNull</span><span class="p">(</span><span class="s">"blogRepository"</span><span class="p">);</span>
        <span class="n">_userRepository</span> <span class="p">=</span> <span class="n">userRepository</span><span class="p">.</span><span class="nf">CheckIsNull</span><span class="p">(</span><span class="s">"userRepository"</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="k">public</span> <span class="n">AdminIndexViewModel</span> <span class="nf">AddBlog</span><span class="p">(</span><span class="n">AddBlogSubmitModel</span> <span class="n">addBlogSubmitModel</span><span class="p">,</span> <span class="kt">string</span> <span class="n">userName</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">AdminIndexViewModel</span> <span class="n">viewModel</span> <span class="p">=</span> <span class="nf">GetAdminIndexViewModelInternal</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="n">addBlogSubmitModel</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(!</span><span class="n">_modelValidator</span><span class="p">.</span><span class="nf">IsSubmitModelValid</span><span class="p">(</span><span class="n">viewModel</span><span class="p">,</span> <span class="n">addBlogSubmitModel</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">viewModel</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">Blog</span> <span class="n">blog</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Blog</span><span class="p">();</span>
        <span class="n">blog</span><span class="p">.</span><span class="n">Headline</span> <span class="p">=</span> <span class="n">addBlogSubmitModel</span><span class="p">.</span><span class="n">Headline</span><span class="p">;</span>
        <span class="n">blog</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="n">addBlogSubmitModel</span><span class="p">.</span><span class="n">Text</span><span class="p">;</span>
        <span class="n">blog</span><span class="p">.</span><span class="n">Added</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
        <span class="n">blog</span><span class="p">.</span><span class="n">WrittenBy</span> <span class="p">=</span> <span class="n">_userRepository</span><span class="p">.</span><span class="nf">GetUser</span><span class="p">(</span><span class="n">userName</span><span class="p">);</span>

        <span class="n">_blogRepository</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">blog</span><span class="p">);</span>
        <span class="n">_blogRepository</span><span class="p">.</span><span class="nf">Save</span><span class="p">();</span>

        <span class="n">viewModel</span><span class="p">.</span><span class="n">InfoMessages</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"Blog Added"</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">viewModel</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Der Code aus dem Beispiel und die oben erwähnte Verwendung benutzt das UnitOfWork-Paket welches bei Nuget verwendbar ist.</p>

<p><a href="http://www.nuget.org/packages/OfferingSolutions.UnitOfWork.Structure/" target="_blank">NuGet - UnitOfWork</a></p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2014/10/06/asp-net-repository-pattern-und-unit-of-work</wp:post_id>
        <wp:post_date>2014-10-06T20:39:00+02:00</wp:post_date>
        <wp:post_date_gmt>2014-10-06T20:39:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="aspnet"><![CDATA[["aspnet",]]></category>
        
          <category domain="post_tag" nicename="unitofwork"><![CDATA["unitofwork"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Correct implementation of Commands in WPF]]></title>
        <link>http://offering.solutions/blog/articles/2014/10/01/correct-implementation-of-commands-in-wpf/</link>
        <pubDate>2014-10-01T17:32:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this blogost I want to show you the IMHO correct implementation of Commands in WPF. Feel free to discuss :)</p>

<p>Again we will take the code from the posts before (<a href="http://offering.solutions/blog/articles/2014/09/02/how-to-make-first-steps-of-databinding-in-wpf/">Wpf Basics I</a> and <a href="http://offering.solutions/blog/articles/2014/09/14/wpf-basics-ii-the-inotifypropertychanged-interface/">Wpf Basics II</a>) and make it nicer. Well: What we did was databind a string to the UI. Then we implemented a solution for notify the UI that something changed. Everything triggered with a small timer which was doing the work for “I have something new”. But what if the user himself wants to trigger the event for “I want something to be changed”?</p>

<p>Therefore we have commands. Commands can maybe triggered from Buttons and are doing some work. In our case we will now remove the timer and give our UI a button to trigger the changes.</p>

<p>So first we get rid of our timer in the NameProvider:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">NameProviderImpl</span> <span class="p">:</span> <span class="n">NotifyPropertyChangedBase</span><span class="p">,</span> <span class="n">INameProvider</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="kt">string</span> <span class="n">_nameToDisplay</span><span class="p">;</span>

    <span class="k">public</span> <span class="kt">string</span> <span class="n">NameToDisplay</span>
    <span class="p">{</span>
        <span class="k">get</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_nameToDisplay</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">set</span>
        <span class="p">{</span>
            <span class="n">_nameToDisplay</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
            <span class="nf">OnPropertyChanged</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">NameToDisplay</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Then we will do a namespace for our commands and add one</p>

<p><img src="/assets/articles/2014-10-01/INotify_IV.jpg" alt="Correct implementation of Commands in WPF" /></p>

<p>Important for the command is: Let it be a single class. It makes testing easier and decouples it from the viewmodel. Also let it inherit from ICommand and implement this interface. And let it inherit from your command Interface ;)</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">MyCommandImpl</span> <span class="p">:</span> <span class="n">ICommand</span><span class="p">,</span> <span class="n">IMyCommand</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">INameProvider</span> <span class="n">_nameProvider</span><span class="p">;</span>

    <span class="k">public</span> <span class="kt">bool</span> <span class="nf">CanExecute</span><span class="p">(</span><span class="kt">object</span> <span class="n">parameter</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">void</span> <span class="nf">Execute</span><span class="p">(</span><span class="kt">object</span> <span class="n">parameter</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_nameProvider</span><span class="p">.</span><span class="n">NameToDisplay</span> <span class="p">=</span> <span class="s">"Hallelujah"</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nf">MyCommandImpl</span><span class="p">(</span><span class="n">INameProvider</span> <span class="n">nameProvider</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_nameProvider</span> <span class="p">=</span> <span class="n">nameProvider</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">event</span> <span class="n">EventHandler</span> <span class="n">CanExecuteChanged</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">interface</span> <span class="n">IMyCommand</span>
<span class="p">{</span>
    <span class="kt">bool</span> <span class="nf">CanExecute</span><span class="p">(</span><span class="kt">object</span> <span class="n">parameter</span><span class="p">);</span>
    <span class="k">void</span> <span class="nf">Execute</span><span class="p">(</span><span class="kt">object</span> <span class="n">parameter</span><span class="p">);</span>
    <span class="k">event</span> <span class="n">EventHandler</span> <span class="n">CanExecuteChanged</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>So what the command offers us are two methods: “CanExecute” is giving us a bool indicating if the command can be executed or not. Based on this the button will be greyed out or not. The “CanExecuteChanged” can be fired, if something, which the CanExecute is based on, has changed and it has to be evaluated again. The button may appear not greyed out in the UI after firing this. And the execute is for executing the Command. What a surprise ;)</p>

<p>The command is only taking the nameprovider and setting the name. Exactly what the timer did before.</p>

<blockquote>
  <p>The name “Name<strong>Provider</strong>” does not match here. Because it does not provide a name to us. It is more a service. Image you would trigger like a calculation or something ;)</p>
</blockquote>

<p>So now let the viewmodel offer the command that it can be triggered from the outside:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">MainViewModel</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="n">INameProvider</span> <span class="n">NameProvider</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="n">IMyCommand</span> <span class="n">MyCommand</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="nf">MainViewModel</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">NameProvider</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">NameProviderImpl</span><span class="p">();</span>
        <span class="n">MyCommand</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">MyCommandImpl</span><span class="p">(</span><span class="n">NameProvider</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Now we offer the UI a NameProvider to bind on and a Command to bind on. The only thing we now have to do is bind this button to the command:</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;Grid&gt;</span>
    <span class="nt">&lt;StackPanel&gt;</span>
        <span class="nt">&lt;TextBlock</span> <span class="na">Text=</span><span class="s">"{Binding NameProvider.NameToDisplay}"</span><span class="nt">&gt;&lt;/TextBlock&gt;</span>
        <span class="nt">&lt;Button</span> <span class="na">Command=</span><span class="s">"{Binding MyCommand}"</span> <span class="na">Height=</span><span class="s">"20"</span><span class="nt">&gt;&lt;/Button&gt;</span>
    <span class="nt">&lt;/StackPanel&gt;</span>
<span class="nt">&lt;/Grid&gt;</span></code></pre></figure>

<p>Now the command is getting executed from the button. It sets the name in the nameprovider and fires the event, that something has changed and the UI gets updated.</p>

<p>That should be it for the very basic of WPF.</p>

<p>Solution can be loaded here: <a href="/assets/articles/2014-10-01/DataBindingGettingStarted.zip">Correct implementation of Commands in WPF</a></p>

<p>Enjoy</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2014/10/01/correct-implementation-of-commands-in-wpf</wp:post_id>
        <wp:post_date>2014-10-01T17:32:00+02:00</wp:post_date>
        <wp:post_date_gmt>2014-10-01T17:32:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="architecture"><![CDATA[["architecture",]]></category>
        
          <category domain="post_tag" nicename="commands"><![CDATA["commands",]]></category>
        
          <category domain="post_tag" nicename="wpf"><![CDATA["wpf"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Unterhaltsame Meetings in SCRUM]]></title>
        <link>http://offering.solutions/blog/articles/2014/09/18/unterhaltsame-meetings-in-scrum/</link>
        <pubDate>2014-09-18T19:00:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>SCRUM legt viel Wert auf Kommunikation, Transparenz und Austausch. Dies bringt enorm viele Vorteile. Wenn man jedoch SCRUM in einer Firma einführt oder praktiziert sehen die Entwickler sehr schnell den angeblichen Nachteil dieser doch recht positiven Eigenschaften: Es gibt, zumindest am Anfang, sehr viele Meetings.</p>

<p>Entwickler mögen meist keine Meetings. Meetings halten sie von der Arbeit ab. Das ist keine Vermutung meinerseits, das sage ich aus persönlicher Erfahrung. Es gibt das Daily-Standup, es gibt das Grooming, wenn es nicht als Prozess angesehen wird, und es gibt das Planungsmeeting, was oftmals sehr lange dauern kann. Ist man nun vor Ort um SCRUM einzuführen oder sogar SCRUM-Master und “leitet” die Meetings liegt es an einer guten Moderation, einer guten Vorbereitung und viel Geschick ein angenehmes Meeting zu gestalten.</p>

<p>Im Folgenden möchte ich Tipps erläutern, die solche Meetings zwar nicht aus der Welt schaffen aber sie zumindest anders oder “saftiger” machen können. Ob (erfolgreich) getestet oder nur als Gedankenanstoss: Ich hoffe die folgenden Punkte bieten eine gute Grundlage zum Nachmachen und zum darauf aufbauen.</p>

<blockquote>
  <p>SCRUM ist keine One-Man-Show</p>
</blockquote>

<h3 id="was-lange-whrt">Was lange währt…</h3>

<p>…wird irgendwann gut: SCRUM braucht Zeit. Geben Sie den Teilnehmern diese. Gerade wenn SCRUM neu ist, ist die Skepsis noch Herr in allen Meetings. Diese werden die Teilnehmer los. Aber es muss von den Teilnehmern selber kommen. Somit: Leisten Sie Überzeugungsarbeit und erläutern Sie, warum das Team Meeting xyz nutzen sollte. Die Menschen über die Logik und den Sinn abzuholen bringt oft mehr als sie in ein Meeting zu “zwingen”. SCRUM ist ein Team-Ding. Kein SCRUM-Master oder Product-Owner-Ding, keine One-Man-Show.</p>

<h3 id="timeboxing">Timeboxing</h3>

<p>Meetings gehören in Timeboxen. Das ist kein genereller Ansatz aber gerade bei der Einführung ist dies wichtig. Sie können bei der Einführung eine Empfehlung der Dauer aussprechen. (Hierfür können Sie auch gern den Scrum-Guide zu Rate ziehen). Aber die Entscheidung, wie lang ein Meeting gehalten werden sollte, kann das Team in einer Abstimmung fällen (Mehrheit entscheidet). Dies ist flexibel und kann nach jedem Sprint gerne geändert werden. Wichtig hierbei ist es, die Timebox genau einzuhalten. So bemerkt das Team a) dass Sie daran sind, ihren Arbeitsworkflow zu organisieren und b) dass die Zeit eventuell zu kurz ist. Das macht das Meeting für das Team angenehmer und wird mehr akzeptiert. Ausserdem wird die Notwendigkeit nach einem längeren Meeting deutlich und das Team übernimmt die Initiative dies umzusetzen.</p>

<p>Beispiel: Das Grooming wird als Meeting eingeführt und das Team ist anfangs skeptisch. Nach einem Vorschlag das Grooming „nur“ 60 Minuten abzuhalten willigten alle ein. Natürlich ist dies zu wenig für einen langen Sprint. Dies wird deutlich wenn das Meeting penibel nach 60 Minuten zum Ende gebracht wird. Aber wenn das Meeting richtig genutzt (vorbereiten!) und durchgeführt wird (alle Teilnehmer anwesend, etc.), wird der Nutzen schnell klar. In einer folgenden Retro kam auf, dass das Grooming viel zu kurz ist: Das Team bespricht die Lösung und einigt sich selbstständig auf ein zwei Stunden dauerndes Meeting. Somit wurde der Sinn erkannt und die Initiative, das Meeting abzuhalten und den Product-Backlog zu pflegen, kam vom Team aus.</p>

<blockquote>
  <p>Ist die Familienpizza viel zu gross für den Sprint, muss sie eventuell aufgeteilt werden</p>
</blockquote>

<h3 id="abwechslung">Abwechslung</h3>

<p>Bringen Sie Abwechslung in die Meetings. Es gibt recht viele Meetings, die SCRUM mit sich bringt. bei kürzeren Sprints wirken diese noch mehr, auch wenn die Meetings dann natürlich kürzer sind.</p>

<p>Die Präsentation, wenn Sie eine haben, muss nicht immer dieselbe sein. Verändern Sie ihre Folien optisch. Inhaltlich sollte die Agenda jedoch schon einen geregelten Ablauf haben. Eine gewisse Routine gibt auch Sicherheit. Aber wieso nicht mal eine Retrospektive bei einem Kaffee? Im Stehen? Eventuell in der Cafeteria. Leute sind aktiver wenn sie nicht sitzen. Sie können auch nicht in ihren Monitor schauen wenn sie stehen. Wieso nicht Plus- und Minuspunkte eines Sprints auf Karten schreiben und an die Wand pinnen? Schieben Sie mal die Tische beiseite, schaffen Sie Raum. Nutzen Sie die komplette Wand um Plus und Minus anzuprangern. So haben Sie auf x Metern Wand auf einmal neben Plus und Minus als “schwarz” und “weiss” auf einmal “eher schwarz und eher weiss”. Das facht eine Konversation respektive eine Diskussion an. Und nichts ist schlimmer als eine Retro, die totgeschwiegen wird. Ist ihr Team träge und verunsichert: Stellen Sie die Frage, was gut war, statt, was schlecht war. “Was sollten wir NOCH besser machen?”. So kommt man leicht in die Diskussion die auch Dinge anspricht, die nicht so gut gelaufen sind.</p>

<p>Backlog-Items schätzen ist ebenfalls langweilig: Wieso die Grösse von Items nicht mit Pizzaschachteln darstellen? XS, S, M, L, XL? Ist die Familienpizza viel zu gross für den Sprint, muss sie eventuell aufgeteilt werden. Sie werden sich wundern wie lange solche Assoziationen hängenbleiben!</p>

<p>Ein Planungsmeeting dauert meistens sehr lange: Wieso nicht mit einem Rätsel starten? Länder erkennen, Personen erkennen, vielleicht ein Wer-Wird-Millionär in einer SCRUM-Edition? Hierbei bringt man sich natürlich in die Lage, dass bei der 1000 und 32000 CHF-Frage Süssigkeiten oder entsprechendes herausgegeben werden muss ;).</p>

<p>Das Daily-Standup-Meeting ist ein Meeting im Stehen: Investieren sie in ein billiges Mikrophon und machen sie eine Moderation draus. Derjenige, der spricht, muss in das Mikro sprechen. Das stärkt das Team und ist ausserdem lustig. Zumindest für die anderen ;)</p>

<blockquote>
  <p>Das Team organisiert sich selbst</p>
</blockquote>

<h3 id="ergebnisse">Ergebnisse</h3>

<p>Schreiben Sie Ergebnisse auf. Aber lassen Sie es jemanden anderes machen als den Moderator selbst. Beispielsweise auf ein Flipchart. Nach dem Meeting ein Foto von dem Flipchart an alle Teilnehmer gesendet und schon haben sie ein Protokoll, das für alle gleich ist. Will es keiner machen: Machen sie ein Spiel draus: Der letzte, der in das Meeting kommt, ist der Protokollant. Hierbei auch keine Scheu vor Vorgesetzten: Kein Chef bricht sich einen Zacken aus der Krone den Stift zu schwingen und was auf das Papier zu bringen. Zumal sowieso alles, was festgehalten wird, besprochen werden sollte.</p>

<h3 id="das-team-organisiert-sich-selbst">Das Team organisiert sich selbst</h3>

<p>Das Team steht bei SCRUM im Mittelpunkt. Es wird so gearbeitet, wie das Team sich organisiert. Wenn das Team beim Daily-Standup mit einem Witz starten will, dann machen sie es. Einen Sprint lang. Dann wird geschaut, ob die Änderungen den gewünschten Effekt bringen. Findet das Team es gut: behalten Sie es bei!</p>

<h3 id="zusammenfassung">Zusammenfassung</h3>

<p>SCRUM-Meetings müssen nicht langweilig sein. Man kann solche Meetings durchaus “saftig” und abwechslungsreich gestalten. Wenn SCRUM dem Team Spass macht, ist es wesentlich einfach Offenheit, Transparenz und Fortschritt zu sehen, zu messen und damit zu arbeiten. Natürlich sollte neben aller Abwechslung das Sprint-Ziel verfolgt werden um es am Ende des Sprints möglichst zu Erfüllen. Jedoch kann man, mit den richtigen Mitteln, Teams für SCRUM begeistern. Ich hoffe mit den genannten Beispielen konnte ich einige Denkanstösse geben.</p>

<p>Gruss</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2014/09/18/unterhaltsame-meetings-in-scrum</wp:post_id>
        <wp:post_date>2014-09-18T19:00:00+02:00</wp:post_date>
        <wp:post_date_gmt>2014-09-18T19:00:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="agile"><![CDATA[["agile",]]></category>
        
          <category domain="post_tag" nicename="development"><![CDATA["development",]]></category>
        
          <category domain="post_tag" nicename="scrum"><![CDATA["scrum",]]></category>
        
          <category domain="post_tag" nicename="team"><![CDATA["team",]]></category>
        
          <category domain="post_tag" nicename="teamwork"><![CDATA["teamwork"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[WPF Basics II - The INotifyPropertyChanged Interface]]></title>
        <link>http://offering.solutions/blog/articles/2014/09/14/wpf-basics-ii-the-inotifypropertychanged-interface/</link>
        <pubDate>2014-09-14T19:41:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<blockquote>
  <p>UPDATE
Check the CallMemberName-Possibility <a href="http://offering.solutions/blog/articles/2015/02/08/wpf-callmembername-for-inotifypropertychanged/">here</a></p>
</blockquote>

<p>In the first part I told something about the databinding <a href="http://offering.solutions/blog/articles/2014/09/02/how-to-make-first-steps-of-databinding-in-wpf/">here</a>. The second part should be something about refreshing the data at the UI. We said that the UI only knows the datacontext and its properties. So far so god. It is binding them at startup and we’re done so far.</p>

<p>Just to calm down the ones who expect a solution: Can be found in the third article <a href="http://offering.solutions/blog/articles/2014/10/01/correct-implementation-of-commands-in-wpf/">here</a></p>

<p>But what if the data underneath is changing. What if a service or anything else has new data and want to tell the UI “Hey there, I have something new!”</p>

<p>Therefore the binding has to be “refreshed” and we have the INotifyPropertyChanged-Interface to get this job done.</p>

<p>Lets take our code from before and give it a timer which sets the name we want to display after 3 seconds:</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;Grid&gt;</span>
    <span class="nt">&lt;StackPanel&gt;</span>
        <span class="nt">&lt;TextBlock</span> <span class="na">Text=</span><span class="s">"{Binding NameToDisplay}"</span><span class="nt">&gt;&lt;/TextBlock&gt;</span>
    <span class="nt">&lt;/StackPanel&gt;</span>
<span class="nt">&lt;/Grid&gt;</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">MainViewModel</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">NameToDisplay</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="n">Timer</span> <span class="n">_timer</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">MainViewModel</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">_timer</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Timer</span><span class="p">(</span><span class="m">3000</span><span class="p">);</span>
        <span class="n">_timer</span><span class="p">.</span><span class="n">Elapsed</span> <span class="p">+=</span> <span class="n">timer_Elapsed</span><span class="p">;</span>
        <span class="n">_timer</span><span class="p">.</span><span class="n">Enabled</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">void</span> <span class="nf">timer_Elapsed</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">ElapsedEventArgs</span> <span class="n">e</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">NameToDisplay</span> <span class="p">=</span> <span class="s">"Hallelujah"</span><span class="p">;</span>
        <span class="n">_timer</span><span class="p">.</span><span class="n">Enabled</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<blockquote>
  <p> ”Hallelujah” is always my testword because im pretty sure it occurs nowhere else in a solution ;) So if you see this, its mine</p>
</blockquote>

<p>So, if you debug this you will see that the timer gets into the timer_elapsed-function and sets the name but the UI does not change. So lets implement a way to refresh the UI! Only implement the INotifyPropertyChanged-interface:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">MainViewModel</span> <span class="p">:</span> <span class="n">INotifyPropertyChanged</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">NameToDisplay</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">readonly</span> <span class="n">Timer</span> <span class="n">_timer</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">MainViewModel</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">_timer</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Timer</span><span class="p">(</span><span class="m">3000</span><span class="p">);</span>
        <span class="n">_timer</span><span class="p">.</span><span class="n">Elapsed</span> <span class="p">+=</span> <span class="n">timer_Elapsed</span><span class="p">;</span>
        <span class="n">_timer</span><span class="p">.</span><span class="n">Enabled</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">void</span> <span class="nf">timer_Elapsed</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">ElapsedEventArgs</span> <span class="n">e</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">NameToDisplay</span> <span class="p">=</span> <span class="s">"Hallelujah"</span><span class="p">;</span>
        <span class="n">_timer</span><span class="p">.</span><span class="n">Enabled</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">PropertyChanged</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="nf">PropertyChanged</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="k">new</span> <span class="nf">PropertyChangedEventArgs</span><span class="p">(</span><span class="s">"NameToDisplay"</span><span class="p">));</span>
        <span class="p">}</span>
        
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">event</span> <span class="n">PropertyChangedEventHandler</span> <span class="n">PropertyChanged</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>So everthing we do is throwing the event that something has changed with the name of the property as a string. If you let this run you will see that the UI refreshes and after 3 seconds the “hallelujah” is displayed. But this has some disadvantages:</p>

<ul>
  <li>We are throwing the event in the timer_elapsed. So only when <strong>this</strong> is done the property is refreshed</li>
  <li>We are having the name of the property as a string in it. So renaming the property will mostly NOT rename the string. (Magic String). And the refresh does not work again.</li>
  <li>Refreshing the UI is a base function. It should be outsourced in like a base file or something.</li>
</ul>

<p>Lets tune this:</p>

<ol>
  <li>First we will make a namespace for this (I love namespaces) called “Common” and make a basefile in there.</li>
  <li>We will make this function generic expecting a lambda-Expression to erase the magic string</li>
  <li>We will call the refreshing thing in the setter of the property itself. Then its getting refreshed everytime someone in the code sets it.</li>
</ol>

<p><img src="/assets/articles/2014-09-14/INotify_I.jpg" alt="WPF Basics II - The INotifyPropertyChanged Interface" /></p>

<p>which looks like:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">NotifyPropertyChangedBase</span> <span class="p">:</span> <span class="n">INotifyPropertyChanged</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">event</span> <span class="n">PropertyChangedEventHandler</span> <span class="n">PropertyChanged</span><span class="p">;</span>

    <span class="k">protected</span> <span class="k">virtual</span> <span class="k">void</span> <span class="n">OnPropertyChanged</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">Expression</span><span class="p">&lt;</span><span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;&gt;</span> <span class="n">propertyExpression</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">MemberExpression</span> <span class="n">memberExpr</span> <span class="p">=</span> <span class="n">propertyExpression</span><span class="p">.</span><span class="n">Body</span> <span class="k">as</span> <span class="n">MemberExpression</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">memberExpr</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="s">"Wrong PropertyExpression"</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="n">PropertyChangedEventHandler</span> <span class="n">handler</span> <span class="p">=</span> <span class="n">PropertyChanged</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">handler</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="nf">handler</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="k">new</span> <span class="nf">PropertyChangedEventArgs</span><span class="p">(</span><span class="n">memberExpr</span><span class="p">.</span><span class="n">Member</span><span class="p">.</span><span class="n">Name</span><span class="p">));</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>This is taking the member and throwing the event for us on this member. That was Point 1 and 2. Let it be (three)!</p>

<p>We do inherit from the just created class and can access the event with the lambda-expression, which is more generic:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">MainViewModel</span> <span class="p">:</span> <span class="n">NotifyPropertyChangedBase</span>
<span class="p">{</span>
    <span class="k">readonly</span> <span class="n">Timer</span> <span class="n">_timer</span><span class="p">;</span>
    <span class="k">private</span> <span class="kt">string</span> <span class="n">_nameToDisplay</span><span class="p">;</span>

    <span class="k">public</span> <span class="kt">string</span> <span class="n">NameToDisplay</span>
    <span class="p">{</span>
        <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_nameToDisplay</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">set</span>
        <span class="p">{</span>
            <span class="n">_nameToDisplay</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
            <span class="nf">OnPropertyChanged</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">NameToDisplay</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nf">MainViewModel</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">_timer</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Timer</span><span class="p">(</span><span class="m">3000</span><span class="p">);</span>
        <span class="n">_timer</span><span class="p">.</span><span class="n">Elapsed</span> <span class="p">+=</span> <span class="n">timer_Elapsed</span><span class="p">;</span>
        <span class="n">_timer</span><span class="p">.</span><span class="n">Enabled</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">void</span> <span class="nf">timer_Elapsed</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">ElapsedEventArgs</span> <span class="n">e</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">NameToDisplay</span> <span class="p">=</span> <span class="s">"Hallelujah"</span><span class="p">;</span>
        <span class="n">_timer</span><span class="p">.</span><span class="n">Enabled</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Remeber: In the elapsed-method we are setting the property (not the private variable) directly that the setter is called and the event is thrown.</p>

<blockquote>
  <p>This is not the only way to implement this. This can be done in several ways. But for beginners this should do the trick.</p>
</blockquote>

<p>Run it, it will show you the text after three seconds.</p>

<p>If you want to, read further how you can get this cleaner with services and erase the NotifyPropertyChangedBase from the viewmodel.</p>

<p>Lets tune this a little bit: The viewmodel does a lot of work. It does not have to do this, so lets extract this a bit and make it more clean.</p>

<p>First we do a NameProvider, which gives us the name. In my case again with a timer to see the UI changing. Normally this could be a service or something else without a timer. Could be anything which triggers the UI to change (not only) after a piece of work.</p>

<p><img src="/assets/articles/2014-09-14/INotify_II.jpg" alt="WPF Basics II - The INotifyPropertyChanged Interface" /></p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">NameProviderImpl</span> <span class="p">:</span> <span class="n">NotifyPropertyChangedBase</span><span class="p">,</span> <span class="n">INameProvider</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">Timer</span> <span class="n">_timer</span><span class="p">;</span>
        <span class="k">private</span> <span class="kt">string</span> <span class="n">_nameToDisplay</span><span class="p">;</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">NameToDisplay</span>
        <span class="p">{</span>
            <span class="k">get</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="n">_nameToDisplay</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">private</span> <span class="k">set</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">_nameToDisplay</span> <span class="p">==</span> <span class="k">value</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="k">return</span><span class="p">;</span>
                <span class="p">}</span>

                <span class="n">_nameToDisplay</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
                <span class="nf">OnPropertyChanged</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">NameToDisplay</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="nf">NameProviderImpl</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">_timer</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Timer</span><span class="p">(</span><span class="m">3000</span><span class="p">);</span>
            <span class="n">_timer</span><span class="p">.</span><span class="n">Elapsed</span> <span class="p">+=</span> <span class="n">timer_Elapsed</span><span class="p">;</span>
            <span class="n">_timer</span><span class="p">.</span><span class="n">Enabled</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">void</span> <span class="nf">timer_Elapsed</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">ElapsedEventArgs</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">NameToDisplay</span> <span class="p">=</span> <span class="s">"Hallelujah"</span><span class="p">;</span>
            <span class="n">_timer</span><span class="p">.</span><span class="n">Enabled</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">interface</span> <span class="n">INameProvider</span>
<span class="p">{</span>
    <span class="kt">string</span> <span class="n">NameToDisplay</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Everything we did here is moving the timer-logic into a provider and offering the property through an interface to the outside.</p>

<p>Our viewmodel now has nearly no logic anymore:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">MainViewModel</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="n">INameProvider</span> <span class="n">NameProvider</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="nf">MainViewModel</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">NameProvider</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">NameProviderImpl</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>This principle I am also describing <a href="http://offering.solutions/blog/articles/2014/07/03/clean-your-viewmodel-in-wpf-and-create-a-facade/">here</a>.</p>

<p>Now we have to change the binding a bit. Because now the viewmodel is giving us the property to bind not directly but onto another property “NameProvider”. So the Binding looks like this:</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;Grid&gt;</span>
    <span class="nt">&lt;StackPanel&gt;</span>
        <span class="nt">&lt;TextBlock</span> <span class="na">Text=</span><span class="s">"{Binding NameProvider.NameToDisplay}"</span><span class="nt">&gt;&lt;/TextBlock&gt;</span>
    <span class="nt">&lt;/StackPanel&gt;</span>
<span class="nt">&lt;/Grid&gt;</span></code></pre></figure>

<p>Run this and you will see the result stays the same: After three seconds our string is displayed.</p>

<p><img src="/assets/articles/2014-09-14/INotify_III.jpg" alt="WPF Basics II - The INotifyPropertyChanged Interface" /></p>

<p>So what we did now is: Getting our Viewmodel nice and clean. It gives us an overview of services and providers which the UI can use. It does not inherit from NotifyPropertyChangedBase. You saw how flexible databinding is. Not only with strings but you can bind also lists of objects etc.</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2014/09/14/wpf-basics-ii-the-inotifypropertychanged-interface</wp:post_id>
        <wp:post_date>2014-09-14T19:41:00+02:00</wp:post_date>
        <wp:post_date_gmt>2014-09-14T19:41:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="basics"><![CDATA[["basics",]]></category>
        
          <category domain="post_tag" nicename="databinding"><![CDATA["databinding",]]></category>
        
          <category domain="post_tag" nicename="tutorial"><![CDATA["tutorial",]]></category>
        
          <category domain="post_tag" nicename="wpf"><![CDATA["wpf"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[How to make first steps of Databinding in WPF]]></title>
        <link>http://offering.solutions/blog/articles/2014/09/02/how-to-make-first-steps-of-databinding-in-wpf/</link>
        <pubDate>2014-09-02T03:24:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this blogpost I want to show you how to make first steps of Databinding in WPF.</p>

<p>I often hear or see that people try to start with WPF but they do not start mit MVVM. Because databinding is frightening them. But why? Databinding is one of the biggest advantages you can have to decouple your logic from your view.</p>

<p>With this post I want to give you a short introduction about databinding and how to get set up.</p>

<h3 id="first-things-first-why-mvvm">First things first: Why MVVM?</h3>

<p>In the last time the MV*-Pattern was really getting pushed and was established because it gives you an easy possibility to divide your view form the logic which works underneath. In the web for example AngularJS gives you a lightweight MVVM-Pattern, ASP.NET works with the MVC-Pattern, wich also brings a separation between UI and Logic.</p>

<p>Advantages are:</p>

<ul>
  <li>
    <p>Changing the UI without changing the logic: The UI changes more often than the logic. What if green is more “stylish” than the good old “blue”? It has to be changed, but all the things you show stay the same. Just because something looks different you are not showing different information.</p>
  </li>
  <li>
    <p>Testability of the logic: Because logic gets more modular it can be well tested. You do not need to know about your view or how it looks like. The only thing your tests are interested in are the output-information.</p>
  </li>
  <li>
    <p>Better overview: You can not only seperate the UI and the logic, you can also see it in the code. you have no UI-Code in your logic and no logic-code in your UI.</p>
  </li>
  <li>
    <p>Different Teams: Also in SCRUM or whatever you use you can easily divide the work into several parts. UI Designers can only focus on their work, while programmers code (and test) the work completetly different. The touching points are only made because of the DataBinding.</p>
  </li>
</ul>

<h3 id="theoretically-what-are-we-doing">Theoretically: What are we doing?</h3>

<p>In Wpf and C# the UI-files are described as *.xaml-files. The viewmodels are normal classes which are *.cs-files. You can connect them via the DataContext-property. This shall point on the ViewModel we are creating for it. (Also described <a title="WPF – Introducing services in the viewmodel (viewmodel as facade)" href="http://offering.solutions/blog/articles/2014/07/03/clean-your-viewmodel-in-wpf-and-create-a-facade/" target="_blank">here</a>)</p>

<p>The code-behind of a window stays empty. No matter what. There are cases to really do some work there but these are very rare!</p>

<h3 id="lets-see-some-code">Lets see some code:</h3>

<p>Well if you only add a xaml-file or open a new wpf project in visual studio you can add a normal textblock to your xaml like this.</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;Window</span> <span class="na">x:Class=</span><span class="s">"DataBindingGettingStarted.MainWindow"</span>
        <span class="na">xmlns=</span><span class="s">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
        <span class="na">xmlns:x=</span><span class="s">"http://schemas.microsoft.com/winfx/2006/xaml"</span>
        <span class="na">Title=</span><span class="s">"MainWindow"</span> <span class="na">Height=</span><span class="s">"350"</span> <span class="na">Width=</span><span class="s">"525"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;Grid&gt;</span>
        <span class="nt">&lt;TextBlock&gt;&lt;/TextBlock&gt;</span>
    <span class="nt">&lt;/Grid&gt;</span>
<span class="nt">&lt;/Window&gt;</span></code></pre></figure>

<p>Now add a binding to it. Want we want to do is bind the Text-Property of the TextBlock to a value from the viewmodel. Lets prepare our XAML:</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;Window</span> <span class="na">x:Class=</span><span class="s">"DataBindingGettingStarted.MainWindow"</span>
        <span class="na">xmlns=</span><span class="s">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
        <span class="na">xmlns:x=</span><span class="s">"http://schemas.microsoft.com/winfx/2006/xaml"</span>
        <span class="na">Title=</span><span class="s">"MainWindow"</span> <span class="na">Height=</span><span class="s">"350"</span> <span class="na">Width=</span><span class="s">"525"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;Grid&gt;</span>
        <span class="nt">&lt;TextBlock</span> <span class="na">Text=</span><span class="s">"{Binding NameToDisplay}"</span><span class="nt">&gt;&lt;/TextBlock&gt;</span>
    <span class="nt">&lt;/Grid&gt;</span>
<span class="nt">&lt;/Window&gt;</span></code></pre></figure>

<p>Now lets do the viewmodel. This is the base for our databinding. Its a normal class. Remember to name it like the view to associate it easier for other developers.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">MainViewModel</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">NameToDisplay</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="nf">MainViewModel</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">NameToDisplay</span> <span class="p">=</span> <span class="s">"Hello World"</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Remeber: This is an external class. It has “nothing” to do (yet) with the UI. There is no connection until here. In a project this could look like this:</p>

<p><img src="/assets/articles/2014-09-02/DataBinding1.jpg" alt="How to make first steps of Databinding in WPF" /></p>

<p>The viewmodel offers all data it wants to show to the view (and perhaps some more ;) ). These data are offered with properties.</p>

<blockquote>
  <p>Note: You can make an interface for the viewmodel to see what exactly is on the view and what is not. To get a besser overview. But internally wpf will take the real implementaion of the viewmodel as datacontext. But for larger view/viewmodels adding an interface can makes sense. Also for testing/mocking etc.</p>
</blockquote>

<p>You see that the MainWindow.xaml which we edited above and the viewmodel. We just have no connection until here.</p>

<p>In the last part you have to let the view know about its datacontext. This property can be set to nearly every viewmodel but its the source for the view where to get their data from. So the “Text”-Property in XAML gets its value from…what? You can set the datacontext in XAML but I think its easier to set this in the codebehind. <strong><span style="text-decoration: underline;">This is the only thing you should set there!</span></strong></p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">MainWindow</span> <span class="p">:</span> <span class="n">Window</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nf">MainWindow</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nf">InitializeComponent</span><span class="p">();</span>
        <span class="n">DataContext</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">MainViewModel</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>And there you go. Now the view does know about the datacontext which is completely seperated. It is offering the information about properties and if you press F5 to run the solution you should see something like this:</p>

<p><img src="/assets/articles/2014-09-02/DataBinding2.jpg" alt="How to make first steps of Databinding in WPF" /></p>

<p>Now what we did is a normal Hello-World-Label. Depending on the UI-container (ItemControls, Comboboxes,…) you can bind whatever you want to the UI.</p>

<p>This is it for the first shot of databinding. But this is only the basic basic ;). But I wanted you to get the point.</p>

<p>Regards</p>

<p>Fabian</p>

<p> </p>

<p>[UPDATE]</p>

<p>I decided to go on and show you how to bind a list of any objects you want. In my example these are hard coded. In your example they can (and should ;) ) come from a service/repository whatever.</p>

<p>First lets expand the viewmodel with a Person-class which has two properties: Name and Age.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">MainViewModel</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">NameToDisplay</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;</span> <span class="n">ListOfPersons</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="nf">MainViewModel</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">NameToDisplay</span> <span class="p">=</span> <span class="s">"Hello World"</span><span class="p">;</span>
        <span class="n">ListOfPersons</span> <span class="p">=</span> <span class="nf">GetListOfPersons</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;</span> <span class="nf">GetListOfPersons</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Person</span> <span class="n">fabianPerson</span> <span class="p">=</span> <span class="nf">GetPerson</span><span class="p">(</span><span class="s">"Fabian"</span><span class="p">,</span> <span class="m">29</span><span class="p">);</span>
        <span class="n">Person</span> <span class="n">evePerson</span> <span class="p">=</span> <span class="nf">GetPerson</span><span class="p">(</span><span class="s">"Eve"</span><span class="p">,</span> <span class="m">100</span><span class="p">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;</span> <span class="p">{</span><span class="n">fabianPerson</span><span class="p">,</span> <span class="n">evePerson</span><span class="p">};</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="n">Person</span> <span class="nf">GetPerson</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">int</span> <span class="n">age</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Person</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Person</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Age</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="nf">Person</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">int</span> <span class="n">age</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Name</span> <span class="p">=</span> <span class="n">name</span><span class="p">;</span>
        <span class="n">Age</span> <span class="p">=</span> <span class="n">age</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>So right like the plain name we are offering a list of persons at the viewmodel.</p>

<p>Now that the viewmodel is our Datacontext it can access every property on it. So lets access this in XAML:</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;Grid&gt;</span>
    <span class="nt">&lt;StackPanel&gt;</span>
        <span class="nt">&lt;TextBlock</span> <span class="na">Text=</span><span class="s">"{Binding NameToDisplay}"</span><span class="nt">&gt;&lt;/TextBlock&gt;</span>
        <span class="nt">&lt;ItemsControl</span> <span class="na">ItemsSource=</span><span class="s">"{Binding ListOfPersons}"</span><span class="nt">&gt;</span>
            
        <span class="nt">&lt;/ItemsControl&gt;</span>
    <span class="nt">&lt;/StackPanel&gt;</span>
<span class="nt">&lt;/Grid&gt;</span></code></pre></figure>

<p>But if you run this you only see the namespace and the name of the classes. Why this? Because the only thing you give to the ItemsControl is the list of persons. From where should it know what to do with it? It just calls the “ToString()”-Extension on “object” and gets the Namespace and the name of the class.</p>

<p><img src="/assets/articles/2014-09-02/List1.jpg" alt="How to make first steps of Databinding in WPF" /></p>

<p>So lets tell the UI how to treat the objects. This can be done with an Itemtemplate.</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;Window.Resources&gt;</span>
    <span class="nt">&lt;DataTemplate</span> <span class="na">x:Key=</span><span class="s">"MyItemTemplate"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;StackPanel</span> <span class="na">Orientation=</span><span class="s">"Horizontal"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;Label</span> <span class="na">Content=</span><span class="s">"{Binding Name}"</span><span class="nt">&gt;&lt;/Label&gt;</span>
            <span class="nt">&lt;Label</span> <span class="na">Content=</span><span class="s">"{Binding Age}"</span><span class="nt">&gt;&lt;/Label&gt;</span>
        <span class="nt">&lt;/StackPanel&gt;</span>
    <span class="nt">&lt;/DataTemplate&gt;</span>
<span class="nt">&lt;/Window.Resources&gt;</span>
<span class="nt">&lt;Grid&gt;</span>
    <span class="nt">&lt;StackPanel&gt;</span>
        <span class="nt">&lt;TextBlock</span> <span class="na">Text=</span><span class="s">"{Binding NameToDisplay}"</span><span class="nt">&gt;&lt;/TextBlock&gt;</span>
        <span class="nt">&lt;ItemsControl</span> <span class="na">ItemsSource=</span><span class="s">"{Binding ListOfPersons}"</span> <span class="na">ItemTemplate=</span><span class="s">"{StaticResource MyItemTemplate}"</span><span class="nt">&gt;</span>
            
        <span class="nt">&lt;/ItemsControl&gt;</span>
    <span class="nt">&lt;/StackPanel&gt;</span>
<span class="nt">&lt;/Grid&gt;</span></code></pre></figure>

<p>The Itemtemplate now tells the object how to appear. In my case these are just two labels showing the two properties name and age.</p>

<blockquote>
  <p><span style="color: #000000;">I dont know why but this is a heavy thing every beginner stumbles upon: The Datacontext of you <strong>view **is what we have set it to: The MainViewModel. Now you give the collection to the ItemsControl and make an **Item</strong>Template for each object in the list. So in the <strong>Item</strong>Template the “datacontext” is the object “Person” itself and NOT the MainViewModel anymore! This is why you can access “Name” and “Age” in the DataTemplate directly. Because every Item (which the <strong>Item</strong>Template is for) is a Person and a Person has got the mentioned properties.</span></p>
</blockquote>

<p>Great. After telling this let this thing run and see the result:</p>

<p><img src="/assets/articles/2014-09-02/List2.jpg" alt="How to make first steps of Databinding in WPF" /></p>

<p>Have fun</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2014/09/02/how-to-make-first-steps-of-databinding-in-wpf</wp:post_id>
        <wp:post_date>2014-09-02T03:24:00+02:00</wp:post_date>
        <wp:post_date_gmt>2014-09-02T03:24:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="basics"><![CDATA[["basics",]]></category>
        
          <category domain="post_tag" nicename="databinding"><![CDATA["databinding",]]></category>
        
          <category domain="post_tag" nicename="tutorial"><![CDATA["tutorial",]]></category>
        
          <category domain="post_tag" nicename="wpf"><![CDATA["wpf"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Impressions of the first ASP.NET MVC workshop]]></title>
        <link>http://offering.solutions/blog/articles/2014/08/10/impressions-of-the-first-asp-net-mvc-workshop/</link>
        <pubDate>2014-08-10T16:38:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this blogpost I am doing a small recap to give you impressions of the first ASP.NET MVC workshop.</p>

<p>Even when I am not doing it in my current project at work I am very interested in ASP.NET and the ASP.NET MVC-Framework and everything which is needed to build modern web based applications.</p>

<p>Last Saturday my preparation for a very special workshop for me ended and I was glad to give five students the first ASP.NET MVC-workshop at the university Albstadt-Sigmaringen. (One of them had to leave 5 minutes earlier, so do not be confused while seeing only four students on the picture ;) )</p>

<p><img src="/assets/articles/2014-08-10/Workshop_1.png" alt="Workshop_1" /></p>

<p>We started shortly after ten o’clock (because I know that students can be late sometime ;)) and we were talking about Asp.NET MVC for four hours with a one hour break in the middle.</p>

<p>In the beginning we were looking at the examples of the visual studio and what the Microsoft examples offer us. The students learned how to get along with visual studio and Asp.NET MVC, they learned a lot about Controllers, actions, attributes, Models and Views, about the Razor engine etc.</p>

<p>Also general things like the request-based web (HttpGet/HttpPost) and CDNs were mentioned to give the students a whole great picture.</p>

<p>Five students were not many, but they were hungry about knowledge and they were active. They programmed what I presented up in the front to test it right away and they asked a lot of questions (which is probably the best thing that can happen to you if you give a workshop).</p>

<p>Also routing was a topic at this workshop and how it is connected to Asp.NET MVC.</p>

<p>One of the points which were most important to me getting into the students heads was the viewmodel-principle. So we made a lot of examples and the students finally did a practical work for themselves in groups. So they were getting to know what they just saw up in the front and could manifest the presented stuff.</p>

<p><img src="/assets/articles/2014-08-10/Workshop_2.png" alt="Workshop_2" /></p>

<p>External libraries have also been a topic. So the entity Framework was mentioned with the code-first approach and the students learned how to create database without building complicated SQL statements and saving data into it with different software-patterns.</p>

<p>After the Entity-Framework bootstrap was a topic to build up great UI design with javascript and css in a short time. So all this was combined with the presented Asp.NET MVC-Code we had so far.</p>

<p>After the lunch-break we were digging deeper into Asp.NET MVC and created a blog- application with the database to get data out of it.</p>

<p>We also touched the role-, and user-based authentication and authorization and exploring in which way we can use the Microsoft-given things. Also the advantages and disadvantages were mentioned and we discussed a way to solve the problems you can have sometimes while implementing a web application.</p>

<p><img src="/assets/articles/2014-08-10/Workshop_3.png" alt="Impressions of the first ASP.NET MVC workshop" /></p>

<p>In the end our blog was completely ready with all Create-Read-Update and Delete-Actions (CRUD) which are needed for a modern internet application.</p>

<p><strong>Summary</strong></p>

<p>The students now have a complete example of how a modern web application can be organized with all advantages and disadvantages of the Asp.NET MVC-Framework and how to solve the pain-points it gives to you. They saw how to implement C#-Code and how to use the linq-queries combined with the Entity Framework and Software-Pattens to give their application structure and get data out of their database.</p>

<p>For me it was a lot of fun, I was glad the university gave me the opportunity to present and to impart my knowledge about Asp.NET MVC. And even if my throat hurt a bit because of 4 hours talking: Live programming with students is much more fun than just pushing an audience through PowerPoint slides.</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2014/08/10/impressions-of-the-first-asp-net-mvc-workshop</wp:post_id>
        <wp:post_date>2014-08-10T16:38:00+02:00</wp:post_date>
        <wp:post_date_gmt>2014-08-10T16:38:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="aspnet"><![CDATA[["aspnet",]]></category>
        
          <category domain="post_tag" nicename="workshop"><![CDATA["workshop"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Clean your viewmodel in WPF and create a facade]]></title>
        <link>http://offering.solutions/blog/articles/2014/07/03/clean-your-viewmodel-in-wpf-and-create-a-facade/</link>
        <pubDate>2014-07-03T17:51:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this post I want to show you how to Clean your viewmodel in WPF and create a facade.</p>

<p>We use a facade to get your viewmodel in WPF nice and clean. I want to show you how to get along with the seperation of concerns and how to write simple and testable code with databinding and WPF.</p>

<p>When you want to use a viewmodel for databinding you normally get your public properties on your viewmodel an do a normal binding on your xaml like this:</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;Window</span> <span class="na">x:Class=</span><span class="s">"WPFViewModelAsFacade.MainWindow"</span>
        <span class="na">xmlns=</span><span class="s">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
        <span class="na">xmlns:x=</span><span class="s">"http://schemas.microsoft.com/winfx/2006/xaml"</span>
        <span class="na">Title=</span><span class="s">"MainWindow"</span> <span class="na">Height=</span><span class="s">"350"</span> <span class="na">Width=</span><span class="s">"525"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;Grid&gt;</span>
        <span class="nt">&lt;TextBlock</span> <span class="na">Text=</span><span class="s">"{Binding MyCalculatedNumber}"</span><span class="nt">&gt;&lt;/TextBlock&gt;</span>
    <span class="nt">&lt;/Grid&gt;</span>
<span class="nt">&lt;/Window&gt;</span></code></pre></figure>

<p>Setting the datacontext:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">MainWindow</span> <span class="p">:</span> <span class="n">Window</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">MainWindow</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="nf">InitializeComponent</span><span class="p">();</span>
            <span class="n">DataContext</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">MainViewModel</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span></code></pre></figure>

<p>and your viewmodel something like:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">MainViewModel</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="kt">int</span> <span class="n">_myCalculatedNumber</span><span class="p">;</span>

        <span class="k">public</span> <span class="kt">int</span> <span class="n">MyCalculatedNumber</span>
        <span class="p">{</span>
            <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_myCalculatedNumber</span><span class="p">;</span> <span class="p">}</span>
            <span class="k">set</span> <span class="p">{</span> <span class="n">_myCalculatedNumber</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span> <span class="p">}</span>
        <span class="p">}</span>

        <span class="c1">//other Properties here...
</span>
        <span class="k">public</span> <span class="nf">MainViewModel</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">_myCalculatedNumber</span> <span class="p">=</span> <span class="m">23</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span></code></pre></figure>

<p>of course you would give the viewmodel other values and it would grow like hell. Also when you do calculations or CRUD-operations etc. But when your application grows and gets bigger it would be necessary to move some thing into services, providers etc. to get into the seperation of concerns.</p>

<h3 id="solution-i---services">Solution I -  Services</h3>

<p>So lets introduce a service to do some work (a normal calculation with the result of 23 in my example):</p>

<p><img src="/assets/articles/2014-07-03/1.jpg" alt="clean your viewmodel in WPF and create a facade" /></p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">namespace</span> <span class="nn">WPFViewModelAsFacade</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="n">ICalculationService</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="nf">CalculateNumber</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">namespace</span> <span class="nn">WPFViewModelAsFacade</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CalculationService</span> <span class="p">:</span> <span class="n">ICalculationService</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="nf">CalculateNumber</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="c1">//do some calculation/work
</span>            <span class="c1">//return result...
</span>            <span class="k">return</span> <span class="m">23</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>And your viewmodel could look like this</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">namespace</span> <span class="nn">WPFViewModelAsFacade</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">MainViewModel</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="kt">int</span> <span class="n">_myCalculatedNumber</span><span class="p">;</span>

        <span class="k">public</span> <span class="kt">int</span> <span class="n">MyCalculatedNumber</span>
        <span class="p">{</span>
            <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_myCalculatedNumber</span><span class="p">;</span> <span class="p">}</span>
            <span class="k">set</span> <span class="p">{</span> <span class="n">_myCalculatedNumber</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span> <span class="p">}</span>
        <span class="p">}</span>

        <span class="c1">//other Properties here...
</span>
        <span class="k">public</span> <span class="nf">MainViewModel</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">ICalculationService</span> <span class="n">calculationService</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">CalculationService</span><span class="p">();</span>
            <span class="n">_myCalculatedNumber</span> <span class="p">=</span> <span class="n">calculationService</span><span class="p">.</span><span class="nf">CalculateNumber</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><span style="color: #999999;">Note: Normally you would use dependency injection here to avoid this “new …” call and a link to the direct implementation of the service.</span></p>

<p>So: Now we have outsourced the calculation and introduced a new service which is doing the work. But this is not a facade. Our viewmodel is still very big (image it bigger than it looks here: There are a lot more properties on it in a real application).</p>

<h3 id="solution-ii---facade">Solution II - Facade</h3>

<p>The viewmodel should now get a real facade and only offer the service which is doing the calculation. This makes you more flexible and the viewmodel is like only an interface for the view. Its like a provider for every service (or providers) which contain the information the view needs.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">namespace</span> <span class="nn">WPFViewModelAsFacade</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="n">ICalculationService</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">CalculatedNumber</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">namespace</span> <span class="nn">WPFViewModelAsFacade</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CalculationService</span> <span class="p">:</span> <span class="n">ICalculationService</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">CalculatedNumber</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="nf">CalculationService</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="c1">// Do some stuff here and get the result in the defined property
</span>            <span class="n">CalculatedNumber</span> <span class="p">=</span> <span class="m">25</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">MainViewModel</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICalculationService</span> <span class="n">_calculationService</span><span class="p">;</span>
    <span class="c1">//other Properties here...
</span>
    <span class="k">public</span> <span class="n">ICalculationService</span> <span class="n">CalculationService</span>
    <span class="p">{</span>
        <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_calculationService</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nf">MainViewModel</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">_calculationService</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">CalculationService</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>So far until here. What we did is: We are only offering the service through our viewmodel and our viewmodel is not interested in what happens behind anymore. The service can do his work and only give back his results. But you have to correct you binding now because your number is not in the viewmodel anymore but in the service behind.</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;Window</span> <span class="na">x:Class=</span><span class="s">"WPFViewModelAsFacade.MainWindow"</span>
        <span class="na">xmlns=</span><span class="s">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
        <span class="na">xmlns:x=</span><span class="s">"http://schemas.microsoft.com/winfx/2006/xaml"</span>
        <span class="na">Title=</span><span class="s">"MainWindow"</span> <span class="na">Height=</span><span class="s">"350"</span> <span class="na">Width=</span><span class="s">"525"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;Grid&gt;</span>
        <span class="nt">&lt;TextBlock</span> <span class="na">Text=</span><span class="s">"{Binding CalculationService.CalculatedNumber}"</span><span class="nt">&gt;&lt;/TextBlock&gt;</span>
    <span class="nt">&lt;/Grid&gt;</span>
<span class="nt">&lt;/Window&gt;</span></code></pre></figure>

<p>We are now bind on our service “.” our property. Its the same with Commands. Commands should be seperate classes (in a seperated namespace) and you be offered through the viewmodel.</p>

<p>If you do this your viewmodel gets a complete facade and you can change the services underneath without touching the viewmodel. So every testcase you write for the viewmodel would be untouched :)</p>

<p>Note: Your viewmodel does not have to implement INotifypropertyChanged then. If you make classes/interfaces which are providing informations to the UI these classes are the only ones who have to implement INotifyPropertyChanged.</p>

<p>If you think further it would be better to seperate the service one again and getting a provider between the service, which is doing the real job and the class/interface, which is giving the data to the outside world. This provider (or however you call it) can then be offered in the viewmodel and you would bind first over this one. But for now this should be it, I think you got my point ;) .</p>

<p><img src="/assets/articles/2014-07-03/2.jpg" alt="clean your viewmodel in WPF and create a facade" />
<img src="/assets/articles/2014-07-03/Facade.jpg" alt="clean your viewmodel in WPF and create a facade" /></p>

<p><a href="/assets/articles/2014-07-03/WPFViewModelAsFacade.zip">WPFViewModelAsFacade Solution</a></p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2014/07/03/clean-your-viewmodel-in-wpf-and-create-a-facade</wp:post_id>
        <wp:post_date>2014-07-03T17:51:00+02:00</wp:post_date>
        <wp:post_date_gmt>2014-07-03T17:51:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="architecture"><![CDATA[["architecture",]]></category>
        
          <category domain="post_tag" nicename="databinding"><![CDATA["databinding",]]></category>
        
          <category domain="post_tag" nicename="facade"><![CDATA["facade",]]></category>
        
          <category domain="post_tag" nicename="inotifypropertychanged"><![CDATA["inotifypropertychanged",]]></category>
        
          <category domain="post_tag" nicename="pattern"><![CDATA["pattern",]]></category>
        
          <category domain="post_tag" nicename="provider"><![CDATA["provider",]]></category>
        
          <category domain="post_tag" nicename="services"><![CDATA["services",]]></category>
        
          <category domain="post_tag" nicename="wpf"><![CDATA["wpf"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Chat with Node.js, socket.io, AngularJS, flashing title and loading bar]]></title>
        <link>http://offering.solutions/blog/articles/2014/07/03/chat-with-node-js-socket-io-angular-js-flashing-title-and-loading-bar/</link>
        <pubDate>2014-07-03T11:54:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>Regarding to <a href="http://blog.noser.com/node-js-chat-server/">this</a> post I want to show you how you can set up a chat with Node.js, socket.io, Angular.js, flashing title and loading bar. We will take a look into the lightweight architecture angular is giving you and how to set up the services and controllers the right way. Additionally we will use the loading-bar-module to give the user information about what his message is doing after sending it and we will flash the homepage title if a new message arrives. The communication is done with socket-io.js and we use jQuery for the basic javascript-things. Enjoy!</p>

<p>Check these links to get all these libs:</p>

<ol>
  <li><a href="http://socket.io/">Socket.io</a> (please make sure to use the one from this example. This will work at 100%)</li>
  <li><a href="https://github.com/chieffancypants/angular-loading-bar">Loading-bar</a></li>
  <li><a href="http://jquery.com/">jQuery</a></li>
</ol>

<p>Here we go:</p>

<h3 id="folder-structure">Folder-Structure</h3>

<p>The folder structure in angular.js is, in my opinion, very important because it can give you a nice overview of what you are trying to seperate and is able to encapsulate files, such as services and controllers, etc. in a well regulated way.</p>

<p>So I always make an app-folder which holds all my angular-logic in it and a views folder which encapsulated my views (surprise! ;) ). Within my app folder I have folders for my services, controllers (which are important for the angular-stuff) and for css-files and 3rd-party scripts which is only called “scripts” here. I am trying to do like I would do the namespaces in C#, perhaps you recognized this ;)</p>

<p><img src="/assets/articles/2014-07-03/1-1.jpg" alt="1" /></p>

<h3 id="the-view">The View</h3>

<p>Well, to build up a view for a chat client you can do everything you can think of but essentially you only need something which displays the sent messages and you need a button and control where you can send your messages with. This is all for the first shot.</p>

<p>Additionally to this you need to have all your scripts loaded. In the end this looks something like this:</p>

<p><img src="/assets/articles/2014-07-03/2.png" alt="2" /></p>

<p>So what we see here is the head-information which is including everything (dont worry, we will get through most of these files during this post) we need to get the things going and the body. The body is giving us a div where we specify the controller “DemoController” and bind the messages we have in a simple html-list “li” with a simple angular-statement “ng-repeat”.</p>

<p><span style="color: #999999;">Note: You need this “track by $index” as suffix because only with this the message-array can contain the same message multiple times. Without this the message itself would be a key and a key can not occur multiple times. See also <a href="https://docs.angularjs.org/error/ngRepeat/dupes"><span style="color: #999999;">here</span></a></span></p>

<p>The form below has a normal submit-action to be called when it gets submitted and we only give the form two input boxes (one for the name and one for the text) including binding it to the (not yet shown) viewmodel. It contains, of course, a button to submit the form. And this is it. You are done with your view.</p>

<p>Lets digg deeper and see the underlying controller. but before we do this, we have to instantiate the whole app with the app.js. Lets take a look at this file first:</p>

<h3 id="appjs">App.js</h3>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'MessengerApp'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'ngRoute'</span><span class="p">,</span> <span class="s1">'ngResource'</span><span class="p">,</span> <span class="s1">'ui.bootstrap'</span><span class="p">,</span><span class="s1">'chieffancypants.loadingBar'</span><span class="p">]);</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">$routeProvider</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">$routeProvider</span>
    <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s2">""</span><span class="p">,</span> <span class="p">{</span> <span class="na">controller</span><span class="p">:</span> <span class="s2">"DemoController"</span><span class="p">,</span> <span class="na">templateUrl</span><span class="p">:</span> <span class="s2">"./views/index.html"</span> <span class="p">})</span>
    <span class="p">.</span><span class="nx">otherwise</span><span class="p">({</span> <span class="na">redirectTo</span><span class="p">:</span> <span class="s2">"/"</span> <span class="p">});</span>
<span class="p">});</span></code></pre></figure>

<p>Here you can see that we define an app in a variable “app” making it an angular module and we call it “MessengerApp” (This is what you see in the html-opening-tag in the screenshot above). Into this we are including all the 3rd-party-libs I mentioned above (loading-bar and so on). The route provider is not that important because we just have one route to show. I wont go into detail here because for this example this would be more theory than practice.</p>

<h3 id="the-controller">The Controller</h3>

<p>As mentioned in the view we have a controller called “DemoController”. And because we instantiated a variable called “app” we can now use it and define a controller on this app:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'DemoController'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">chatService</span><span class="p">,</span> <span class="nx">cfpLoadingBar</span><span class="p">,</span> <span class="nx">flashService</span><span class="p">)</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="nx">_messages</span> <span class="o">=</span> <span class="p">[];</span>
    
    <span class="nx">cfpLoadingBar</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
    <span class="kd">var</span> <span class="nx">socket</span> <span class="o">=</span> <span class="nx">io</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="s1">'MyIp:MyPort'</span><span class="p">);</span>
    
    <span class="kd">var</span> <span class="nx">_sendMessage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">cfpLoadingBar</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
      <span class="nx">chatService</span><span class="p">.</span><span class="nx">sendMessage</span><span class="p">(</span><span class="nx">socket</span><span class="p">,</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">messageText</span><span class="p">);</span>
      <span class="nx">$scope</span><span class="p">.</span><span class="nx">messageText</span> <span class="o">=</span> <span class="s2">""</span><span class="p">;</span>
    <span class="p">};</span>
    
    <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">'chat'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        
        <span class="nx">$scope</span><span class="p">.</span><span class="nx">messages</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">": "</span> <span class="o">+</span> <span class="nx">data</span><span class="p">.</span><span class="nx">text</span><span class="p">);</span>
        <span class="nx">$scope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">();</span>
         
        <span class="nx">flashService</span><span class="p">.</span><span class="nx">flashWindow</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">": "</span> <span class="o">+</span> <span class="nx">data</span><span class="p">.</span><span class="nx">text</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">'body'</span><span class="p">).</span><span class="nx">scrollTop</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">'body'</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">scrollHeight</span><span class="p">);</span>
        <span class="nx">cfpLoadingBar</span><span class="p">.</span><span class="nx">complete</span><span class="p">();</span>
    <span class="p">});</span>
 
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">sendMessage</span> <span class="o">=</span> <span class="nx">_sendMessage</span><span class="p">;</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">messages</span> <span class="o">=</span> <span class="nx">_messages</span><span class="p">;</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">messageText</span> <span class="o">=</span> <span class="s2">""</span><span class="p">;</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">""</span><span class="p">;</span>
<span class="p">});</span></code></pre></figure>

<p>Lets take a look into this in detail: First we define a controller which we can call in the view. Because of the dependency injection angular gives us out of the box we can just get everything into our controller we want to use.</p>

<p>Then we make an array of messages and connect to our socket via socket-io. “_sendMessage” is a private function here, which only calls the chatService. The controller further makes UI-Stuff like starting the loading bar and reset the messagetext to an empty string so that the user can enter a new string to send.</p>

<p>The “socket.on(…)”-Method is like an eventhandler from socket.js. It is called when a new message gets received from the server. So everything we do here is :</p>

<ul>
  <li>Getting the object from the server</li>
  <li>throw this new message into the message array (“$scope.messages.push”)</li>
  <li>giving it to the viewmodel and notify the viewmodel that there is something new (“$scope.$apply();”)</li>
  <li>Flashing the window through a flashservice, we will get to know later</li>
  <li>scroll the body to the bottom so that everytime the latest message is shown in the browser</li>
</ul>

<p>After we created all our stuf we are ready to fill the scope-object which is given to the view (so its our viewmodel):</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">$scope</span><span class="p">.</span><span class="nx">sendMessage</span> <span class="o">=</span> <span class="nx">_sendMessage</span><span class="p">;</span>
<span class="nx">$scope</span><span class="p">.</span><span class="nx">messages</span> <span class="o">=</span> <span class="nx">_messages</span><span class="p">;</span>
<span class="nx">$scope</span><span class="p">.</span><span class="nx">messageText</span> <span class="o">=</span> <span class="s2">""</span><span class="p">;</span>
<span class="nx">$scope</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">""</span><span class="p">;</span></code></pre></figure>

<p>This is the whole controller which is stored under the “Controllers”-folder and included in the view.</p>

<h3 id="the-services">The Services</h3>

<p>The services are like the base of our application because they are doing the real hard work. Lets take a closer look what these services we just included are really doing:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="s1">'use strict'</span><span class="p">;</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">'chatService'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">chatDataService</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">chatService</span> <span class="o">=</span> <span class="p">{};</span>

    <span class="kd">var</span> <span class="nx">_sendMessage</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">socket</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">stringToSend</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">chatDataService</span><span class="p">.</span><span class="nx">sendMessage</span><span class="p">(</span><span class="nx">socket</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">stringToSend</span><span class="p">);</span>
    <span class="p">};</span>
    
    <span class="c1">// public interface</span>
    <span class="nx">chatService</span><span class="p">.</span><span class="nx">sendMessage</span> <span class="o">=</span> <span class="nx">_sendMessage</span><span class="p">;</span>

    <span class="k">return</span> <span class="nx">chatService</span><span class="p">;</span>
<span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">'chatDataService'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
     <span class="kd">var</span> <span class="nx">chatDataService</span> <span class="o">=</span> <span class="p">{};</span>

       <span class="kd">var</span> <span class="nx">_sendMessage</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">socket</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">stringToSend</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">'chat'</span><span class="p">,</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="nx">name</span><span class="p">,</span> <span class="na">text</span><span class="p">:</span> <span class="nx">stringToSend</span> <span class="p">});</span>
      <span class="p">};</span>

    <span class="nx">chatDataService</span><span class="p">.</span><span class="nx">sendMessage</span> <span class="o">=</span> <span class="nx">_sendMessage</span><span class="p">;</span>
    
    <span class="k">return</span> <span class="nx">chatDataService</span><span class="p">;</span>
<span class="p">});</span></code></pre></figure>

<p>And here you can see the seperattion of concerns which I am a big fan of. I divided the data-service from the real service to have a better understanding and a better overview of whom is doing what. So the single-responsibility is used here.
So we have the “ChatService” and a “ChatDataService”. We just want to look at the real work in the “ChatDataService” which is really sending the messages by calling the method:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">'chat'</span><span class="p">,</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="nx">name</span><span class="p">,</span> <span class="na">text</span><span class="p">:</span> <span class="nx">stringToSend</span> <span class="p">});</span></code></pre></figure>

<p>This line is like doing all the magic using socket.io to send messages to the Server which is described <a href="http://blog.noser.com/node-js-chat-server/">here</a>. We are generating a new object with the properties “name” and “text” and are sending what the user entered.</p>

<p>Due to the fact that the FlashService is only a nice2have-thing I will not refer to it in detail but I want to mention it.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="s1">'use strict'</span><span class="p">;</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">'flashService'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    
    <span class="kd">var</span> <span class="nx">flashService</span> <span class="o">=</span> <span class="p">{};</span>
    <span class="kd">var</span> <span class="nx">original</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">title</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">timeout</span><span class="p">;</span>
    
    <span class="kd">var</span> <span class="nx">_cancelFlashWindow</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">newMsg</span><span class="p">,</span> <span class="nx">howManyTimes</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">timeout</span><span class="p">);</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="nx">original</span><span class="p">;</span>
    <span class="p">};</span>
    
    <span class="kd">var</span> <span class="nx">_flashWindow</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">newMsg</span><span class="p">,</span> <span class="nx">howManyTimes</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">function</span> <span class="nx">step</span><span class="p">()</span> <span class="p">{</span>
            <span class="nb">document</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">title</span> <span class="o">==</span> <span class="nx">original</span><span class="p">)</span> <span class="p">?</span> <span class="nx">newMsg</span> <span class="p">:</span> <span class="nx">original</span><span class="p">;</span>

            <span class="k">if</span> <span class="p">(</span><span class="o">--</span><span class="nx">howManyTimes</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">timeout</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">step</span><span class="p">,</span> <span class="mi">1000</span><span class="p">);</span>
            <span class="p">};</span>
        <span class="p">};</span>

        <span class="nx">howManyTimes</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">howManyTimes</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">howManyTimes</span><span class="p">))</span> <span class="p">{</span>
            <span class="nx">howManyTimes</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
        <span class="p">};</span>

        <span class="nx">_cancelFlashWindow</span><span class="p">(</span><span class="nx">timeout</span><span class="p">);</span>
        <span class="nx">step</span><span class="p">();</span>
    <span class="p">};</span>

    <span class="nx">flashService</span><span class="p">.</span><span class="nx">flashWindow</span> <span class="o">=</span> <span class="nx">_flashWindow</span><span class="p">;</span>
    <span class="nx">flashService</span><span class="p">.</span><span class="nx">cancelFlashWindow</span> <span class="o">=</span> <span class="nx">_cancelFlashWindow</span><span class="p">;</span>
    
    <span class="k">return</span> <span class="nx">flashService</span><span class="p">;</span>
<span class="p">});</span></code></pre></figure>

<p>This service is offering us two methods</p>

<ul>
  <li>flashService.flashWindow = _flashWindow; //Flashes the window with a message and a number of how many times the title shall flash</li>
  <li>flashService.cancelFlashWindow = _cancelFlashWindow; // is only cancelling the flash-progress</li>
</ul>

<p>To show you how this looks like in the file/folder-structure, see here:</p>

<p><img src="/assets/articles/2014-07-03/4.jpg" alt="4" />
<img src="/assets/articles/2014-07-03/3.jpg" alt="3" /></p>

<p>So this was it. This is all you need to get a chat client going. If you include all the angular-files and giving the client the correct IP I am sure you will get the chat going in a second. (Dont forget to load the <a href="http://blog.noser.com/node-js-chat-server/">server</a>)
Thanks for reading.</p>

<p>Fabian</p>

<p><a href="/assets/articles/2014-07-03/chatclient_angular.zip">chatclient_angular</a></p>

]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2014/07/03/chat-with-node-js-socket-io-angular-js-flashing-title-and-loading-bar</wp:post_id>
        <wp:post_date>2014-07-03T11:54:00+02:00</wp:post_date>
        <wp:post_date_gmt>2014-07-03T11:54:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="angularjs"><![CDATA[["angularjs",]]></category>
        
          <category domain="post_tag" nicename="nodejs"><![CDATA["nodejs",]]></category>
        
          <category domain="post_tag" nicename="socketio"><![CDATA["socketio"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[ASP.NET MVC - Generic Repositories and UnitOfWork]]></title>
        <link>http://offering.solutions/blog/articles/2014/07/01/asp-net-mvc-generic-repositories-and-unitofwork/</link>
        <pubDate>2014-07-01T08:00:00+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>This is the third and the last blogpost regarding ASP.NET MVC Architecture.</p>

<h3 id="nugetpackage">NugetPackage</h3>

<p><a href="https://www.nuget.org/packages/OfferingSolutions.UnitOfWork.Structure">NugetPackage</a></p>

<h3 id="previous-posts">Previous Posts</h3>

<p><a href="http://offering.solutions/blog/articles/2014/06/01/structurize-your-project-with-areas-and-services-in-asp-net-mvc/">ASP.NET MVC Architecture (Part I): Structurize your project with areas and services in ASP.NET MVC</a></p>

<p><a href="http://offering.solutions/blog/articles/2014/06/10/creating-a-business-logic-in-asp-net-mvc/">ASP.NET MVC Architecture (Part II): Creating a business logic in ASP.NET MVC</a></p>

<h3 id="lets-go">Lets go</h3>

<p>In the first two posts I handled UI things, how to organize your areas (controller-services) and I showed a possibility to create your business-logic regarding area-Services and business-services. In this post I want to show you (like in thousand other blogs before ;) ) the Unit-Of-Work-Pattern in use with generic repositories (<a href="http://msdn.microsoft.com/en-us/library/ff649690.aspx">repository-pattern</a>). This makes the trilogy of the architecture posts complete (for this time. Maybe there will be others in the future ;) )</p>

<p>First things first: What is the repository-pattern? Well, if you built up your application the right way you should have several objects which should be persisted in the database. This can be Users, Projects, or whatever your applications wants to deal with.</p>

<p>For each of these objects you need the normal CRUD-operations. And when you implemented these operations the second and third time, at the latest, you can see that these methods are always the same. Adding an object, getting a single object, getting all objects, updating an object and deleting an object. Period. This is basically all you need.</p>

<p>If you need more operations, or you have to deal with many of these mentioned above sequential you can build a service for this. Read part I and II for handling this ;)</p>

<p>So these operations are always the same. So it would be nice if we could do like a class, with an interface, which offers us there operations, no matter which type we are going to use.</p>

<p>And exactly this is what this generic repositories are for.</p>

<p>But what is the Unit-Of-Work (UoW) and why another Unit-Of-Work-Abstraction?</p>

<p>If you already dealed with the Entity-Framework (EF) you have used the UoW-Pattern all the time. The repository-pattern, too. And so you have already seen how it works: The UoW is tracking all your changes, gathering them together to get every information and changes on the database you need and sending them altogether into the database when you have finished your request. Like the DatabaseContext does. So the UoW with the repositories represents an abstraction of your database and it “reminds” all your changes.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">DataBaseContext</span> <span class="p">:</span> <span class="n">DbContext</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nf">DataBaseContext</span><span class="p">()</span>
            <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="s">"MyConnectionString"</span><span class="p">)</span>
    <span class="p">{</span>

    <span class="p">}</span>

    <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">User</span><span class="p">&gt;</span> <span class="n">User</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Project</span><span class="p">&gt;</span> <span class="n">Projects</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="c1">// Your entities here...
</span><span class="p">}</span></code></pre></figure>

<p><em>Note: “Projects” is a normal DTO which is used for dealing with the Entity Framework. Could look like this</em></p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">Project</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="n">DateTime</span> <span class="n">EntryDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="n">DateTime</span> <span class="n">LastChangedDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>You should have a normal DatabaseContext with all your entities on it and your model-creating-stuff using the FluentAPI.
Nothing new until here. I am always hiding things in namespaces, so in my root-folder I am creating a “Repositories”-Folder which is hiding all my Repo-stuff.</p>

<p><img src="/assets/articles/2014-07-01/11.png" alt="ASP.NET MVC - Generic Repositories and UnitOfWork" /></p>

<p>Let’s go into this in detail:
For offering the same operations on every entity we have we need something like a base-class (with interface) which offers us everything we can do with an object (CRUD with a little bit more. Let’s call it CRUD+ ;) ).</p>

<p><em>Note: I just looked into the web and found a good solution for this generic-things</em></p>

<p><a href="http://codereview.stackexchange.com/questions/31822/unit-of-work-and-repository-design-pattern-implementation" target="_blank">StackExchange</a></p>

<p><a href="http://www.ASP.NET/mvc/tutorials/getting-started-with-ef-5-using-mvc-4/implementing-the-repository-and-unit-of-work-patterns-in-an-asp-net-mvc-application" target="_blank">ASP.NET MVC - Generic Repositories - UoW</a></p>

<p>So I combined them and just put in a little effort then.</p>

<p>This is the RepositoryBase. With its interface IRepositoryBase.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">interface</span> <span class="n">IRepositoryBase</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="k">class</span>
    <span class="err">{</span>
        <span class="nc">List</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="nf">GetAll</span><span class="p">(</span><span class="n">Expression</span><span class="p">&lt;</span><span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;&gt;</span> <span class="n">filter</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
                       <span class="n">Func</span><span class="p">&lt;</span><span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;,</span> <span class="n">IOrderedEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;&gt;</span> <span class="n">orderBy</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
                       <span class="kt">string</span> <span class="n">includeProperties</span> <span class="p">=</span> <span class="s">""</span><span class="p">);</span>

        <span class="n">T</span> <span class="nf">FindSingle</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>

        <span class="n">T</span> <span class="nf">FindBy</span><span class="p">(</span><span class="n">Expression</span><span class="p">&lt;</span><span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;&gt;</span> <span class="n">predicate</span><span class="p">,</span> <span class="kt">string</span> <span class="n">includeProperties</span> <span class="p">=</span> <span class="s">""</span><span class="p">);</span>

        <span class="k">void</span> <span class="nf">Add</span><span class="p">(</span><span class="n">T</span> <span class="n">toAdd</span><span class="p">);</span>

        <span class="k">void</span> <span class="nf">Update</span><span class="p">(</span><span class="n">T</span> <span class="n">toUpdate</span><span class="p">);</span>

        <span class="k">void</span> <span class="nf">Delete</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>

        <span class="k">void</span> <span class="nf">Delete</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">);</span>
    <span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">RepositoryBaseImpl</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IRepositoryBase</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="k">class</span>
    <span class="err">{</span>
        <span class="nc">private</span> <span class="k">readonly</span> <span class="n">DataBaseContext</span> <span class="n">_dataBaseContext</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">RepositoryBaseImpl</span><span class="p">(</span><span class="n">DataBaseContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_dataBaseContext</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="nf">IsNotNull</span><span class="p">(</span><span class="s">"context"</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">virtual</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="nf">GetAll</span><span class="p">(</span><span class="n">Expression</span><span class="p">&lt;</span><span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;&gt;</span> <span class="n">filter</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
            <span class="n">Func</span><span class="p">&lt;</span><span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;,</span> <span class="n">IOrderedEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;&gt;</span> <span class="n">orderBy</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
            <span class="kt">string</span> <span class="n">includeProperties</span> <span class="p">=</span> <span class="s">""</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">query</span> <span class="p">=</span> <span class="n">_dataBaseContext</span><span class="p">.</span><span class="n">Set</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">filter</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">query</span> <span class="p">=</span> <span class="n">query</span><span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">filter</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">foreach</span> <span class="p">(</span><span class="kt">string</span> <span class="n">includeProperty</span> <span class="k">in</span> <span class="n">includeProperties</span><span class="p">.</span><span class="nf">Split</span><span class="p">(</span><span class="k">new</span> <span class="kt">char</span><span class="p">[]</span> <span class="p">{</span> <span class="sc">','</span> <span class="p">},</span> <span class="n">StringSplitOptions</span><span class="p">.</span><span class="n">RemoveEmptyEntries</span><span class="p">))</span>
            <span class="p">{</span>
                <span class="n">query</span> <span class="p">=</span> <span class="n">query</span><span class="p">.</span><span class="nf">Include</span><span class="p">(</span><span class="n">includeProperty</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">orderBy</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">orderBy</span><span class="p">(</span><span class="n">query</span><span class="p">).</span><span class="nf">ToList</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">query</span><span class="p">.</span><span class="nf">ToList</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">virtual</span> <span class="n">T</span> <span class="nf">FindSingle</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_dataBaseContext</span><span class="p">.</span><span class="n">Set</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;().</span><span class="nf">Find</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">virtual</span> <span class="n">T</span> <span class="nf">FindBy</span><span class="p">(</span><span class="n">Expression</span><span class="p">&lt;</span><span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;&gt;</span> <span class="n">predicate</span><span class="p">,</span> <span class="kt">string</span> <span class="n">includeProperties</span> <span class="p">=</span> <span class="s">""</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">query</span> <span class="p">=</span> <span class="n">_dataBaseContext</span><span class="p">.</span><span class="n">Set</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;();</span>
            <span class="k">foreach</span> <span class="p">(</span><span class="kt">string</span> <span class="n">includeProperty</span> <span class="k">in</span> <span class="n">includeProperties</span><span class="p">.</span><span class="nf">Split</span><span class="p">(</span><span class="k">new</span> <span class="kt">char</span><span class="p">[]</span> <span class="p">{</span> <span class="sc">','</span> <span class="p">},</span> <span class="n">StringSplitOptions</span><span class="p">.</span><span class="n">RemoveEmptyEntries</span><span class="p">))</span>
            <span class="p">{</span>
                <span class="n">query</span> <span class="p">=</span> <span class="n">query</span><span class="p">.</span><span class="nf">Include</span><span class="p">(</span><span class="n">includeProperty</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">query</span><span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">predicate</span><span class="p">).</span><span class="nf">FirstOrDefault</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">virtual</span> <span class="k">void</span> <span class="nf">Add</span><span class="p">(</span><span class="n">T</span> <span class="n">toAdd</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_dataBaseContext</span><span class="p">.</span><span class="n">Set</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;().</span><span class="nf">Add</span><span class="p">(</span><span class="n">toAdd</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">virtual</span> <span class="k">void</span> <span class="nf">Update</span><span class="p">(</span><span class="n">T</span> <span class="n">toUpdate</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_dataBaseContext</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">toUpdate</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">virtual</span> <span class="k">void</span> <span class="nf">Delete</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">T</span> <span class="n">entity</span> <span class="p">=</span> <span class="nf">FindSingle</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="n">_dataBaseContext</span><span class="p">.</span><span class="n">Set</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;().</span><span class="nf">Remove</span><span class="p">(</span><span class="n">entity</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">virtual</span> <span class="k">void</span> <span class="nf">Delete</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_dataBaseContext</span><span class="p">.</span><span class="n">Set</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;().</span><span class="nf">Remove</span><span class="p">(</span><span class="n">entity</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span></code></pre></figure>

<p>So here right in the beginning we see the heart of the thing we want to take a look at with this blogpost.
In this generic repository we are able to perform every operation we want with an object, while being able to include some child-properties, to find all, to find a single entry (with the find-method which will eventually not force a direct query), to get a single entry with a query etc.
But let’s put this interface into a more flexible context. I added, like shown in the links above, a repository-provider which is caching the repositories and creating them with a factory (factory-pattern).</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">internal</span> <span class="k">interface</span> <span class="n">IRepositoryProvider</span>
    <span class="p">{</span>
        <span class="n">DataBaseContext</span> <span class="n">DbContext</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="n">IRepositoryBase</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">GetGenericRepository</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;()</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="k">class</span><span class="err">;</span>

        <span class="nc">T</span> <span class="n">GetCustomRepository</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">Func</span><span class="p">&lt;</span><span class="n">DataBaseContext</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;</span> <span class="n">factory</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="k">class</span><span class="err">;</span>
    <span class="err">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">internal</span> <span class="k">class</span> <span class="nc">RepositoryProviderImpl</span> <span class="p">:</span> <span class="n">IRepositoryProvider</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">DataBaseContext</span> <span class="n">DbContext</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">private</span> <span class="k">readonly</span> <span class="n">Factory</span> <span class="n">_factory</span><span class="p">;</span>
        <span class="k">protected</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="n">Type</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;</span> <span class="n">Repositories</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="nf">RepositoryProviderImpl</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">_factory</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Factory</span><span class="p">();</span>
            <span class="n">Repositories</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="n">Type</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">IRepositoryBase</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">GetGenericRepository</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;()</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="k">class</span>
        <span class="err">{</span>
            <span class="nc">Func</span><span class="p">&lt;</span><span class="n">DataBaseContext</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;</span> <span class="n">repositoryFactoryForEntityTypeDelegate</span> <span class="p">=</span> <span class="n">_factory</span><span class="p">.</span><span class="n">GetRepositoryFactoryForEntityType</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;();</span>
            <span class="k">return</span> <span class="n">GetCustomRepository</span><span class="p">&lt;</span><span class="n">IRepositoryBase</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;&gt;(</span><span class="n">repositoryFactoryForEntityTypeDelegate</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">virtual</span> <span class="n">T</span> <span class="n">GetCustomRepository</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">Func</span><span class="p">&lt;</span><span class="n">DataBaseContext</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;</span> <span class="n">factory</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span>
            <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="k">class</span>
        <span class="err">{</span>
            <span class="nc">object</span> <span class="n">repository</span><span class="p">;</span>
            <span class="n">Repositories</span><span class="p">.</span><span class="nf">TryGetValue</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">),</span> <span class="k">out</span> <span class="n">repository</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">repository</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="p">(</span><span class="n">T</span><span class="p">)</span><span class="n">repository</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">CreateRepository</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">factory</span><span class="p">,</span> <span class="n">DbContext</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="n">T</span> <span class="n">CreateRepository</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">Func</span><span class="p">&lt;</span><span class="n">DataBaseContext</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;</span> <span class="n">factory</span><span class="p">,</span> <span class="n">DataBaseContext</span> <span class="n">dbContext</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Func</span><span class="p">&lt;</span><span class="n">DataBaseContext</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;</span> <span class="n">repositoryFactory</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">factory</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">repositoryFactory</span> <span class="p">=</span> <span class="n">factory</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="n">repositoryFactory</span> <span class="p">=</span> <span class="n">_factory</span><span class="p">.</span><span class="n">GetRepositoryFactoryFromCache</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;();</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">repositoryFactory</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotSupportedException</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">).</span><span class="n">FullName</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="n">T</span> <span class="n">repository</span> <span class="p">=</span> <span class="p">(</span><span class="n">T</span><span class="p">)</span><span class="nf">repositoryFactory</span><span class="p">(</span><span class="n">dbContext</span><span class="p">);</span>
            <span class="n">Repositories</span><span class="p">[</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">)]</span> <span class="p">=</span> <span class="n">repository</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">repository</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    </code></pre></figure>

<h3 id="factory">Factory:</h3>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">internal</span> <span class="k">class</span> <span class="nc">Factory</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IDictionary</span><span class="p">&lt;</span><span class="n">Type</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">DataBaseContext</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;&gt;</span> <span class="n">_factoryCache</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">Factory</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">_factoryCache</span> <span class="p">=</span> <span class="nf">GetFactories</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">DataBaseContext</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;</span> <span class="n">GetRepositoryFactoryForEntityType</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;()</span>
            <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="k">class</span>
        <span class="err">{</span>
            <span class="nc">Func</span><span class="p">&lt;</span><span class="n">DataBaseContext</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;</span> <span class="n">factory</span> <span class="p">=</span> <span class="n">GetRepositoryFactoryFromCache</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;();</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">factory</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="n">factory</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">DefaultEntityRepositoryFactory</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">DataBaseContext</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;</span> <span class="n">GetRepositoryFactoryFromCache</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;()</span>
        <span class="p">{</span>
            <span class="n">Func</span><span class="p">&lt;</span><span class="n">DataBaseContext</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;</span> <span class="n">factory</span><span class="p">;</span>
            <span class="n">_factoryCache</span><span class="p">.</span><span class="nf">TryGetValue</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">),</span> <span class="k">out</span> <span class="n">factory</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">factory</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="n">IDictionary</span><span class="p">&lt;</span><span class="n">Type</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">DataBaseContext</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;&gt;</span> <span class="nf">GetFactories</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">Dictionary</span><span class="p">&lt;</span><span class="n">Type</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">DataBaseContext</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;&gt;</span> <span class="n">dic</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="n">Type</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">DataBaseContext</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;&gt;();</span>
            <span class="n">dic</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">IMembershipRepository</span><span class="p">),</span> <span class="n">context</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">MembershipRepositoryImpl</span><span class="p">(</span><span class="n">context</span><span class="p">));</span>
            <span class="c1">//Add Extended and Custom Repositories here
</span>            <span class="k">return</span> <span class="n">dic</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">DataBaseContext</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;</span> <span class="n">DefaultEntityRepositoryFactory</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;()</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="k">class</span>
        <span class="err">{</span>
            <span class="nc">return</span> <span class="n">dbContext</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">RepositoryBaseImpl</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">dbContext</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span></code></pre></figure>

<p>So the factory is creating all the repositories you want to have including caching them. While creating it checks the cache first and if not available it creates a new one (RepositoryProviderImpl).</p>

<p><em>I will go into this later, but while looking into this code: Not every Repository has to follow the CRUD-Things in the repository-base like shown above.</em> You can also build up extended repositories and custom ones you complete implemented on your own way.</p>

<p>So at this point you have implemented the repository for each entity and you are able to give these things to the outside world through your provider who creates the repositories as implemented.
Now you need a UnitOfWork to use in your application to access these repositories and use them. This could look like this:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">interface</span> <span class="n">IUnitOfWork</span> <span class="p">:</span> <span class="n">IDisposable</span>
    <span class="p">{</span>
        <span class="n">IRepositoryBase</span><span class="p">&lt;</span><span class="n">Project</span><span class="p">&gt;</span> <span class="n">ProjectRepository</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

        <span class="n">IMembershipRepository</span> <span class="n">MembershipRepository</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

        <span class="kt">int</span> <span class="nf">Save</span><span class="p">();</span>
    <span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">UnitOfWorkImpl</span> <span class="p">:</span> <span class="n">IUnitOfWork</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">DataBaseContext</span> <span class="n">_context</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IRepositoryProvider</span> <span class="n">_repositoryProvider</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">UnitOfWorkImpl</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DataBaseContext</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">_repositoryProvider</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">_repositoryProvider</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">RepositoryProviderImpl</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_repositoryProvider</span><span class="p">.</span><span class="n">DbContext</span> <span class="p">=</span> <span class="n">_context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">IRepositoryBase</span><span class="p">&lt;</span><span class="n">Project</span><span class="p">&gt;</span> <span class="n">ProjectRepository</span>
        <span class="p">{</span>
            <span class="k">get</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="n">GetGenericRepository</span><span class="p">&lt;</span><span class="n">Project</span><span class="p">&gt;();</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">IMembershipRepository</span> <span class="n">MembershipRepository</span>
        <span class="p">{</span>
            <span class="k">get</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="n">GetCustomRepository</span><span class="p">&lt;</span><span class="n">IMembershipRepository</span><span class="p">&gt;();</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="kt">int</span> <span class="nf">Save</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChanges</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Dispose</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">_context</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="n">IRepositoryBase</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">GetGenericRepository</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;()</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="k">class</span>
        <span class="err">{</span>
            <span class="nc">return</span> <span class="n">_repositoryProvider</span><span class="p">.</span><span class="n">GetGenericRepository</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;();</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="n">T</span> <span class="n">GetCustomRepository</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;()</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="k">class</span>
        <span class="err">{</span>
            <span class="nc">return</span> <span class="n">_repositoryProvider</span><span class="p">.</span><span class="n">GetCustomRepository</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;();</span>
        <span class="p">}</span>
    <span class="p">}</span></code></pre></figure>

<p><em>Notice the IDisposable-Interface which the implementation of the UoW is implementing. This is why you can use it with a “using” in the end.</em></p>

<p>The <code class="highlighter-rouge">GetGenericRepository()</code> can be used if you would like to have standard CRUD-Functions on your entity. This should be the case in like 80% of your use-cases.
The <code class="highlighter-rouge">GetCustomRepository()</code> can give you back the custom repository which you have implemented because you want to have like other functions or for any other reason. You just have to implement its interface and offer it through the UoW-Interface.
You can also do extended interfaces, if you want to extend the CRUD-Methods because they are not enough.</p>

<p><img src="/assets/articles/2014-07-01/21.png" alt="ASP.NET MVC - Generic Repositories and UnitOfWork" /></p>

<p>Just let the repository-interface inherit from your repositorybase-interface and the class from the repositorybase-implementation. Because the methods are virtual you can override them or just add new functions.
You can provide it again with the normal UoW-Interface:</p>

<p><img src="/assets/articles/2014-07-01/31.png" alt="ASP.NET MVC - Generic Repositories and UnitOfWork" /></p>

<p>Now you have a generic repository which you can user for every entity. Its extendable with very few steps and you are also free if you want to use own repositories.
Wrapped in namespaces this it how it could look to you:</p>

<p><img src="/assets/articles/2014-07-01/41.png" alt="ASP.NET MVC - Generic Repositories and UnitOfWork" /></p>

<p>You can use it now from the outside with</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="p">(</span><span class="n">IUnitOfWork</span> <span class="n">unitOfWork</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">UnitOfWorkImpl</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">unitOfWork</span><span class="p">.</span><span class="n">MembershipRepository</span><span class="p">...</span>
<span class="p">}</span></code></pre></figure>

<p>And you are done :)
If you want to add new repositories you just have to extend your UoW-interface and add your new entities to your databaseContext.</p>

<p><em>Note:
If you are using Ninject to inject your stuff and for IoC you can simply make your UnitOfWork present in the NinjectWebCommon.cs as InRequestScope. So it is injected once per request and you can Use DI</em></p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">RegisterServices</span><span class="p">(</span><span class="n">IKernel</span> <span class="n">kernel</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">kernel</span><span class="p">.</span><span class="nf">Bind</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">IUnitOfWork</span><span class="p">)).</span><span class="nf">To</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">UnitOfWorkImpl</span><span class="p">)).</span><span class="nf">InRequestScope</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">private</span> <span class="k">readonly</span> <span class="n">IUnitOfWork</span> <span class="n">_unitOfWork</span><span class="p">;</span>
      
<span class="k">public</span> <span class="nf">MyCtor</span><span class="p">(</span><span class="n">IUnitOfWork</span> <span class="n">unitOfWork</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">_unitOfWork</span> <span class="p">=</span> <span class="n">unitOfWork</span><span class="p">.</span><span class="nf">IsNotNull</span><span class="p">(</span><span class="s">"unitOfWork"</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="p">(</span><span class="n">_unitOfWork</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">unitOfWork</span><span class="p">.</span><span class="n">MembershipRepository</span><span class="p">...</span>
<span class="p">}</span></code></pre></figure>

<p>I hope I could give you a view into the UoW-Thing with generic repositories. But, like I said in the beginning, I only gathered information and put them together in one scope. And, of course, this is only one of soooo many articles in the web concerning UnitOfWork and Generic-Repos.</p>

<p>But I hope you liked reading it ;)</p>

<p>This is the last part of the architecture-posts in ASP.NET MVC. This was planned as a trilogy and here it is.</p>

<p>Thanks for reading</p>

<p>Regards</p>

<p>Fabian</p>

<h4 id="links">Links</h4>
<p><a href="http://msdn.microsoft.com/en-US/data/ef">Entity Framework</a></p>

<p><a href="http://thedatafarm.com/data-access/agile-entity-framework-4-repository-part-1-model-and-poco-classes/">Agile Entity Framework 4 Repository: Part 1- Model and POCO Classes</a></p>

]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2014/07/01/asp-net-mvc-generic-repositories-and-unitofwork</wp:post_id>
        <wp:post_date>2014-07-01T08:00:00+02:00</wp:post_date>
        <wp:post_date_gmt>2014-07-01T08:00:00+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="aspnet"><![CDATA[["aspnet",]]></category>
        
          <category domain="post_tag" nicename="mvc"><![CDATA["mvc",]]></category>
        
          <category domain="post_tag" nicename="web"><![CDATA["web",]]></category>
        
          <category domain="post_tag" nicename="architecture"><![CDATA["architecture"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Creating a business logic in ASP.NET MVC]]></title>
        <link>http://offering.solutions/blog/articles/2014/06/10/creating-a-business-logic-in-asp-net-mvc/</link>
        <pubDate>2014-06-10T18:00:13+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this bogpost I want to show you one possible way creating a business logic in ASP.NET MVC.</p>

<p>Okay, referring to my last <a href="http://offering.solutions/blog/articles/2014/06/01/structurize-your-project-with-areas-and-services-in-asp-net-mvc/" target="_blank">blogpost </a>I want to take you one step further and extend the older post a little bit. In the last post we saw how to build up areas and to get them clean, with separated concerns and nice looking, testable etc.</p>

<p>But this is worth nothing if the rest you have is not well separated and you have a big mess there. That’s why I want to give you the second part (which is a bit shorter) to present you one way to create a business-tier.</p>

<p>Well, the problem we face is that we have to access our data. We have to have any way of communication between our UI and the database. The first blogpost was touching the UI (remember? Areas and their friends…). The third one will touch the repositories (generic) and the UnitOfWork-Stuff and so on. Why don’t we just access the data from the Controllerservice (through the UnitOfWork) and were done?</p>

<p>The answer is: Yeah we could. But sometimes some database queries are a little bit more complex. You have to have this object A with B in it to get C, the user has to be there first and so on. If you would write this now in the Controller service (mentioned in the <a href="http://offering.solutions/blog/articles/2014/04/06/code-first-with-entity-framework-nm-relationship-with-additional-information/" target="_blank">blogpost </a>before) this would work, but would generate a lot of code and in the best case you would end up with a lot of functions, which are named after what they are doing but still getting the class very big and difficult to handle. Also testing would be difficult. You would have a lot of private functions to test. If you have only one class this should be a step to think about what you are doing! If you are writing a private function so “mighty” that it should be tested in 95% you are hurting the single-responsibility-principle and the separation of concerns, too. So what you are writing should be an own class, with its own tests and its own public and private functions. With a class name which describes, what its doing and functions which describe exactly, what they do.</p>

<p>Another reason is: Sometimes (as mentioned in <a title="Code-First with EF and N:M Relationship with more information in your relation-table" href="http://offering.solutions/blog/articles/2014/04/06/code-first-with-entity-framework-nm-relationship-with-additional-information/" target="_blank">this </a>post) you have a third entity (EntityC) to connect two other entities in your application (let’s call the EntityA and EntityB). This is an N:M-Relationship. And you should access these entities only through the EntityC one, including those you want to have (EntityA, EntityB or both). These queries could, even with the Entity-Framework, be very cryptic and you better have a class which does the queries for you. This is not like a general rule. This only makes sense, when you have these entities. But to stay clean and testable, you can have every query wrapped in a service…why not? 😉</p>

<p>Further you probably want to give your controller-service functions which have a sorting logic or anything like that, etc. he can just call them and he does not care about the implementation.</p>

<p>So these are only three reasons why you should work with services behind your controller service.</p>

<p><strong>Area Services</strong></p>

<p>These services are written in another tier, the “logic-tier” or “business-tier”; call it like you want to.</p>

<p><span style="color: #808080;">Note: In the Screenshots I have only one project in the solution and I am separating the tiers only in namespaces. You can, of course, introduce different projects in the solution to get the concerns separated for each project. Well you should do this…would be better 😉 But for this post, it’s about the idea behind it. If you got this, I won a lot!</span></p>

<p>Concrete example: You have a service which is giving you Chart-Data to display a chart in your view. You should have one service for this which is only build to work with and give you this data. Mostly you want this data to be generated out of anything in the database. This is perfect for a service. And because this service interacts directly with any area (you can inject the interface of the service wherever you want in you controller-services) I call them “AreaServices”.</p>

<p><span style="color: #808080;">Note. How to get along with DotNet Highcharts I am describing <a title="How to include DotNet.HighCharts in ASP.NET MVC with ViewModels" href="http://offering.solutions/blog/articles/2014/05/09/how-to-include-dotnet-highcharts-in-asp-net-mvc-with-viewmodels/" target="_blank"><span style="color: #808080;">here</span></a>.</span></p>

<p><img src="/assets/articles/2014-06-10/42abe410-8ef5-44a4-9794-ab531b8b3751.png" alt="ASP.NET MVC - Creating a business logic" /></p>

<p>Here you see an area service called “ChartService” which is, when you collapse the whole thing, only visible to the outside through his interface (information hiding, I mentioned this in part I of this article here). His <em>Impl</em>-namespace contains the direct implementation. Everything which is connected to this service also takes place in this namespace, as long as it’s only needed there. In this case we have a special factory which creates the chart (interface/impl) and a very “stupid” container class “ChartData” which summarizes the data for a chart.</p>

<p>Note: this could be any worker service for you. I just choose this one because its doing some work and looking for data in the database. So you have both things covered.</p>

<p>Let’s see some code:</p>

<p><img src="/assets/articles/2014-06-10/eeb62a78-705e-44eb-a404-07fbaa25cbb1.png" alt="ASP.NET MVC - Creating a business logic" /></p>

<p><img src="/assets/articles/2014-06-10/065fd0da-6b2b-4515-9521-7ae6c58e434c.png" alt="ASP.NET MVC - Creating a business logic" /></p>

<p>You see that this service knows the factory and just calls it after he collects the data from the database.</p>

<p><span style="color: #993300;">Attention: You do NOT have to use a using here in your UnitOfWork. The using of the UnitOfWork is ONLY used in a controller service, because this is the main entry point for a lot of database-requests and as I mentioned in part one of this, Ninject is only injecting one instance for you per request. One controller service call represents one request from a client. So put the using there and you are safe to have the same instance over all services the request touches. This is why you can inject it here.</span></p>

<p>The point is: You are having a tier which is calling the database, collecting information and doing something with it. To get to the example I mentioned before you could have a EntityCService, where you can have all nice methods on it which the controller service can call and here you are gathering the information with EntityC having EntitiesB and A on it and so on. All this is hidden here inside this service.</p>

<p>Conclusion so far: Sometimes you have a lot of work to do with some database data or your requests are a little bit more complex. So do separate this in services which can be called from your areas/controller-services. This is the first part of the middle-tier.</p>

<p><img src="/assets/articles/2014-06-10/cfe740e3-d82b-4dd4-9aa6-c6442e0a29f5.png" alt="ASP.NET MVC - Creating a business logic" /></p>

<p><strong>Business services</strong></p>

<p>Another type of services? Oh come on! Well, what we touched was a type of service which interacts with the database and is very strongly connected to the application. But what about services which are…</p>

<ul>
  <li>…not that connected to the application</li>
  <li>…could possibly stand alone (as a module)</li>
  <li>…are doing work which is not interacting with the database or at least not writing into it</li>
</ul>

<p>Lets do another kind of service and call them <em>business services</em>. Examples for these business services are maybe a pdf-generator which generates you a pdf of data which is given to him. Or an email service which is sending emails from your application to the user. Or a calculator who is only feed with data and calculating some values.</p>

<p>These “worker services” are doing some work which stands a little bit beside the normal CRUD-operations you normally have in a web application.</p>

<p><img src="/assets/articles/2014-06-10/579ec6cf-55e4-43c4-98d3-44927c68a9c3.png" alt="ASP.NET MVC - Creating a business logic" /></p>

<p>In this example you see two services which represent classical business services and are only worker-bees producing an outcome of something you give them. Here you can have a little, but normally you have no database-contact. If you have this, this is only reading data. Never writing something into it.</p>

<p>On the screenshot you also see the namespaces “Impl” which hides the implementation and the interface which is representing the service.</p>

<p>So we are extending our logic-layer with the business services and have now area services and business services in it.</p>

<p><img src="/assets/articles/2014-06-10/ef98f768-1b25-4196-a477-9e9e7f15d424.png" alt="ASP.NET MVC - Creating a business logic" /></p>

<p>Of course these services can and should be provided in different projects to have several dlls. But with this, every layer should have an api-project to represent it and this api-dll should be referenced from the projects which needs it.</p>

<p>Unfortunately this was it for this time. In the next part I will touch the generic repositories with the UnitOfWork.</p>

<p>Regards</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2014/06/10/creating-a-business-logic-in-asp-net-mvc</wp:post_id>
        <wp:post_date>2014-06-10T18:00:13+02:00</wp:post_date>
        <wp:post_date_gmt>2014-06-10T18:00:13+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="aspnet"><![CDATA[["aspnet",]]></category>
        
          <category domain="post_tag" nicename="mvc"><![CDATA["mvc",]]></category>
        
          <category domain="post_tag" nicename="web"><![CDATA["web",]]></category>
        
          <category domain="post_tag" nicename="architecture"><![CDATA["architecture"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[WPF crashes with "OutOfMemoryException" when loading PNGs in Windows 8.1]]></title>
        <link>http://offering.solutions/blog/articles/2014/06/04/wpf-crashes-with-outofmemoryexception-when-loading-pngs/</link>
        <pubDate>2014-06-04T18:05:34+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this blogpost I want to show you the solution for an error I had today which I spent a lot of time on solving it. it was the case that WPF crashes with OutOfMemoryException when loading PNGs.</p>

<p>I had Windows 8.1 running as operating system and used pngs in my WPF application. It was all running well until I wanted to display the images. The whole programm froze and was unusable. Had to kill the process. I spent a lot of time on this and went through a lot of possibilities to display images in WPF.</p>

<p>It turned out that this is because of indexed and not indexed pngs (You can google the difference). WPF in windows 8.1 can not handle indexed png-files. Open them, save them with RGB (e.g. with Photoshop) and you are done.</p>

<p>You can do Unit Tests with the following function: <a href="http://msdn.microsoft.com/en-us/library/system.drawing.graphics.fromimage.aspx">Graphics.FromImage()</a></p>

<blockquote>
  <p>“If the image has an indexed pixel format, this method throws an exception with the message, “A Graphics object cannot be created from an image that has an indexed pixel format.””</p>
</blockquote>

<p>So load all your images with “Graphic.ImageFrom(…)” and see if the exception is thrown to test this.</p>

<p>Hope this helps.</p>

<p>Regards</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2014/06/04/wpf-crashes-with-outofmemoryexception-when-loading-pngs</wp:post_id>
        <wp:post_date>2014-06-04T18:05:34+02:00</wp:post_date>
        <wp:post_date_gmt>2014-06-04T18:05:34+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="exception"><![CDATA[["exception",]]></category>
        
          <category domain="post_tag" nicename="images"><![CDATA["images",]]></category>
        
          <category domain="post_tag" nicename="outofmemory"><![CDATA["outofmemory",]]></category>
        
          <category domain="post_tag" nicename="pictures"><![CDATA["pictures",]]></category>
        
          <category domain="post_tag" nicename="windows"><![CDATA["windows",]]></category>
        
          <category domain="post_tag" nicename="wpf"><![CDATA["wpf"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Why I like SCRUM - Tips which may help you]]></title>
        <link>http://offering.solutions/blog/articles/2014/06/03/why-i-like-scrum-tips-which-may-help-you/</link>
        <pubDate>2014-06-03T19:12:40+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>Hi, in this post I want to tell you why I like SCRUM - Tips which may help you</p>

<p><img src="/assets/articles/2014-06-03/08570960-945a-48e4-980d-ef95447107ea.png" alt="Why I like SCRUM - Tips which may help you" /></p>

<p>After I started to be interested in agile management processes, SCRUM took nearly all of my attention and I often hear that people do not understand it or do not know how to get along with it. If your company wants to work with SCRUM you should get an idea of it and learn it. If you do so, this seems quite all right here and you can stop reading. But if you have any doubts about it please read further. If you are not into it and asking yourself the question “Why should I get along with this thing? Processes come and go. It will pass. With or without me”: Read this post. I will try to give you tips for your SCRUM experience and tell you why I like SCRUM. No, let me push this: I love it. There you go:</p>

<p><strong>Reason 1: Teamwork</strong></p>

<p>I like teamwork. I really do. You often hear the question: “Are you a team player?” maybe in a job interview and how fast you are telling “Yes!” Without knowing in which team you perhaps will come and without knowing with which people and characters you will work together in the future. But beside of that in general: Your team will always have so many different characters no matter how long you are into this team. They will come and go. You will have many types in your team and to deal with this is strenuous but also interesting and fascinating.</p>

<p>If your team does SCRUM it’s very important they stand together as a team. Which means: Everybody could overtake the work of another one if he will drop out for a specific reason. It’s not like “Everybody can do everyone’s work at 100 percent”! But every team-member has to have the <strong>will</strong> to do work of his neighbor and save the SCRUM -sprint and reduce the risk of not missing the sprint-goal. The work is of course groomed and defined, so that everybody could do it in more or less time ;).</p>

<p>Teamwork also means being interested in work which you did not care about before SCRUM. Concrete in your everyday SCRUM-work: Do pair programming with perhaps one experienced and one not experienced guy. Do show interests: “Can we do this together?” “Can you give me a briefing about what you did exactly to solve this problem?” This is sharing of knowledge, this shows how much interested you are (or you should be) and in the end this makes a great team working perfectly together. So doing teamwork is one of the greatest things about SCRUM. But if you want to introduce it you have to have absolutely everybody behind you who has to work with it. SCRUMis team-oriented. So the team has to be convinced that this is a good thing. And this mostly is the hardest part.</p>

<p><strong>Reason 2: Transparency</strong></p>

<p>Transparency is one of the three pillars SCRUM is built on. Transparency in its perfection would mean: Everybody knows what you are doing every minute on your 8 or 9-hour-working-day. Well this is not realistic. I mean: No matter how interested the others are it would drive you nuts if anyone would know about every single step you do or, otherwise, you would have to tell everyone about every step you do. But let’s be egoistic (just for a moment). What transparency means for the team is not a treasure. But think about yourself. Be transparent to yourself first: What have you done yesterday? What are you going to do today? And which plans do you have for the next day/days? This is a way to give structure to your work. Of course: Planned user stories can be the framework of this during a sprint. But while being more detailed you have to answer yourself the questions and you will definitely have a plan and a structure about what to do. And with this it is absolutely no problem telling the others. If everyone is doing this (besides getting all info into the team etc.) your transparency will come right along while you are planning your work for yourself. The daily-standup is one place for this: Be transparent there! So with a daily meeting and a transparency you know always where your product is standing. No surprises. No work behind your back. If every team member is following transparency there should be less unforeseen issues during your sprint period.</p>

<p><strong>Reason 3: The improvement</strong></p>

<p>This is what makes SCRUM a process. The never ending will to improve everything you work on. On every retrospective in the end of the sprint you ask yourself the question: “What was wrong” and I personally felt the bad mood which comes with this question. Yeah, it is important to ask this question. For sure it is. But as important as this question is: “What went well this sprint?” And normally this is a question which is much easier to ask (and to answer). So figuring out what went wrong is a goal of the retro, but getting the facts that are doing well is a much easier way to get into this discussion. So: Ask this before you want to explain the bad points. Also here we come to a mentioned point. People who do not care about SCRUM will not have the will to get better. And this has to be there at 100% to get a good improvement. The team is the only part which has to do the work. They know best how to improve things. If they do not want to get better, they only did not understand the advantages of how work could be. Maybe you could collect them at this point.</p>

<p><strong>Reason 4: Problems</strong></p>

<p>SCRUM shows you problems: Let’s see the process as a whole concept for this point. Introducing SCRUM is done fast. You have sprints, you have your Product-Backlog-Items or user stories etc., you work is organized, your team is organizing itself and so on.</p>

<p>But what the process really shows you are problems! It shows you where you have delays, where information are not where they should be etc. Let me clarify this: This is a good thing! You have a process which points you in the right direction. This is not bad, you should see it like “It can’t get easier to improve!”</p>

<p>If you use SCRUM as a whole without changing much of it SCRUM will show you your problems, your pain points. And SCRUM is useless if you have the opinion to change SCRUM just to hide or get rid of this pain points. This hurts sometimes! “Why do we have problems there? This worked well for years!” Well: Did it? You are planning your work right now and have an overview, you know where your product is and you have an interested team which does teamwork. And the paint point which came up worked well? For years? Ask yourself: Wasn’t this only a problem everybody learned to get along with? For years?</p>

<p>I think this is one of the best points SCRUM does for you. You are adapting a process and this process comes to you and shows you where your problems are. (For this knowledge you would normally pay a lot of money ;))</p>

<p>So: Do NOT get rid of pain points just by working around them, accepting them “as is” and telling everybody that this worked for years. Let SCRUM show you which things to solve. Give the process and yourself time to really figure out what the problem is. Maybe this takes 5, 10 or more sprints! But do not change main points of SCRUM and with this hide your problems. You would do SCRUM in the front and your old process in the back.</p>

<p><strong>Reason 5: Priorities</strong></p>

<p>Work is broken down in product-backlog-items or user stories and tasks. Whatever: You are working on things which have a priority. No matter what exactly this value is (0-100, 0-10, etc.) as a developer you have a picture what is more or less important. What does the customer want to see? Where do we have problems? What should we make better? This is also a kind of transparency which comes along automatically: You see which focus your stakeholders have on the software! Of course this can be discussed. But you can see it because of the priorities the PBIs are tagged with. This also helps you to manage your work.</p>

<p>Well, these are only five reasons I mentioned here. I could go further and further. But I can tell you: try it out! With every pros and cons you see in the beginning. Solve the problems, see the advantages of organizing your work agile, your software agile, to have priorities and so on. I am absolutely sure in the end you will love it and after a time you can give yourself more than only reasons why you love SCRUM as much as I do.</p>

<p>Regards</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2014/06/03/why-i-like-scrum-tips-which-may-help-you</wp:post_id>
        <wp:post_date>2014-06-03T19:12:40+02:00</wp:post_date>
        <wp:post_date_gmt>2014-06-03T19:12:40+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="agile"><![CDATA[["agile",]]></category>
        
          <category domain="post_tag" nicename="development"><![CDATA["development",]]></category>
        
          <category domain="post_tag" nicename="management"><![CDATA["management",]]></category>
        
          <category domain="post_tag" nicename="planning"><![CDATA["planning",]]></category>
        
          <category domain="post_tag" nicename="process"><![CDATA["process",]]></category>
        
          <category domain="post_tag" nicename="retrospective"><![CDATA["retrospective",]]></category>
        
          <category domain="post_tag" nicename="scrum"><![CDATA["scrum",]]></category>
        
          <category domain="post_tag" nicename="software"><![CDATA["software",]]></category>
        
          <category domain="post_tag" nicename="tips"><![CDATA["tips"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Structurize your project with areas and services in ASP.NET MVC]]></title>
        <link>http://offering.solutions/blog/articles/2014/06/01/structurize-your-project-with-areas-and-services-in-asp-net-mvc/</link>
        <pubDate>2014-06-01T08:39:56+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this blogpost I want to show you one possible way to structurize your project with areas and services in ASP.NET MVC.</p>

<p>This is the first part of several architecture posts I will publish in the next time.</p>

<p>The idea to this came up because I noticed that if you are implementing ASP.NET mvc-code you always come to a point where you have to invest some time in the architecture. With a growing project it’s always good to keep an overview of who is doing what, when and where. Also the first question after implementing your first mvc-project lines of code is exactly the participation of the different concerns, which means: How to give your project a structure.</p>

<p>After some tries I came up with a solution of using some patterns and stuff. So this is the first post of two (or three) where I want to give you an idea how to get along with the problems giving your solution a system.</p>

<p><strong>1)     </strong> <strong>Viewmodels and Submitmodels</strong></p>

<p>I don’t want to get into this further because I already did a blog post on this (<a href="http://blog.noser.com/why-and-how-to-avoid-viewbag-and-viewdata-in-asp-net-mvc/" target="_blank">here </a>and <a href="http://blog.noser.com/what-are-submitmodels-and-how-to-use-them/" target="_blank">here</a>). You can see an example of how to get along with viewmodels and submitmodels.</p>

<p>VMs and SMs are one essential part (of many 😉 ) of your mvc-application. They give you more control and they help you to figure out what’s going on. Not only in case of an error.</p>

<p><strong>2)     </strong> <strong>Areas</strong></p>

<p>Do work with areas. Ever. I know in the beginning it seems useless to you because you “just want to get a little thing done”. But do use areas (and thank me later). This is the second step of getting structure into your project from the beginning.</p>

<p><span style="color: #808080;">When I started to do this I got problems sharing my partial views from the top-level “Shared”-Folder which is given to me from the MVC-Template.</span></p>

<p><span style="color: #808080;"><a href="http://brockallen.com/2012/08/31/sharing-a-single-_viewstart-across-areas-in-asp-net-mvc/"><span style="color: #808080;">http://brockallen.com/2012/08/31/sharing-a-single-_viewstart-across-areas-in-asp-net-mvc/</span></a></span></p>

<p><span style="color: #808080;">Has a solution for this. So this should not be a problem for you anymore.</span></p>

<p>Areas are adding a separate “room” for a special part of your website with its own controller, models and views.</p>

<p><img src="/assets/articles/2014-06-01/518fb795-0f60-47a8-8312-5edebe28335b.png" alt="Structurize your project with areas and services in ASP.NET MVC" /></p>

<p>Note: You can of course add areas and name them as you want. But I think it’s always good to have a first point where the user first “sees” your application. So remind to have an Area which is giving you this information on the first sight. So name it like “Home” (which is standard). But also “Start” or anything like this would be okay.</p>

<p><strong>3)     </strong> <strong>Area-Models</strong></p>

<p>So we see that an area is giving your project more structure, also you are summarizing the possibilities and “rooms” of your application and of what it is able to do.</p>

<p>In point 1 I mentioned the view- and submitmodels you have to give your view the information it needs.</p>

<p>You can lay them down in the models-folder. But do not do this on the top-level. Well, you can do this. But I am a fan of namespaces. So I do add a folder for each action I have in the controller (if they have own view-and submitmodels) and add them into this folder.</p>

<p><img src="/assets/articles/2014-06-01/357eb813-fd76-41dd-b9c6-8bfeaa25ccae.png" alt="Structurize your project with areas and services in ASP.NET MVC" /></p>

<p>In this screenshot you see an area called “Projects” because it’s only handling everything which is connected to a project-object which can be handled in this web-application. For every action I added a namespace. In this namespace every single viewmodel and submitmodel can be found.</p>

<p>So you are hiding all information here for someone who is looking at your solution. Only if he is really interested in the code of your models he has to open one. If not he gets a perfect overview of what you can do with your project-object in your web-application without getting into the code of the controller. (Imagine here that this “someone” could be you looking into your code after some time. You will be thankful to have a good structure).</p>

<p><em>Conclusion so far: Keep your models in the given “models”-folder the area is offering to you. Do add namespaces to actions you can to and summarize all view- and submitmodels in these folders. This gets a perfect overview of what your controller offers and you can find immediately what you are searching for, if you are searching for it. And *only* this. Nothing confusing.</em></p>

<p><strong>4)     </strong> <strong>Area-Views</strong></p>

<p>If you added the folders like mentioned in the point before you should also have the views folder looking like the folder structure of your “models”-Folder</p>

<p><img src="/assets/articles/2014-06-01/35e36f7e-028e-49fd-845a-4ff70ac5147f.png" alt="Structurize your project with areas and services in ASP.NET MVC" /></p>

<p>This is good so far. Nothing confusing and everybody gets the idea of what is offered here. Every view has exactly the name of what it offers to the user. Here nothing has to be done so far. Looks clean and nice.</p>

<p><img src="/assets/articles/2014-06-01/309ab2b9-f3df-4258-9557-b0ce87e33335.png" alt="Structurize your project with areas and services in ASP.NET MVC" /></p>

<p>Here you can see again the clean folder structure which fits perfectly to the views. For each view you or someone else finds the information immediately. And it presents the fact, that every viewmodels is connected to a view.</p>

<p><em>Conclusion so far: We have now a clean models-folder and views which represent the models and the functionality of the application in this area part. You know the connections between them because of a clean naming and concern-separation.But their relations is also clear because of a clean naming.</em></p>

<p>So now we have touched areas, views and models inside an area. Okay…the controller is missing. But before I go into this I have to get a step back:</p>

<p><strong>5)     </strong> <strong>Controller Services and the controller</strong></p>

<p>We know that the controller receives the requests from your client and handles them. But I was never happy with this many lines of code in my controller. What I mean: He is the interface for your requests, he receives them. He is also responsible for giving the client back what he deserves. And that should be all. All the logic in between should not be into the controller, so why do not separate it and let the controller do what he is made for?</p>

<p>That is why I am using Services inside areas. Such a service works really near the area and has an interface, which is only providing all the methods the controller needs. Nothing more and nothing less. This service also knows view- and submitmodels. This is why the folder is placed beside the models-Folder.</p>

<p><img src="/assets/articles/2014-06-01/f68f4fa0-7922-4196-9d8f-e9d3105145a5.png" alt="Structurize your project with areas and services in ASP.NET MVC" /></p>

<p>Here on the first sight you only have the interface of the controller service without seeing the real implementation on it. The service is offering everything to the controller what the controller really needs.</p>

<p>Example:</p>

<p>Controller Code:</p>

<p><img src="/assets/articles/2014-06-01/089027b4-b577-4ae8-853c-accc685f102d.png" alt="Structurize your project with areas and services in ASP.NET MVC" /></p>

<p>Service-Interface:</p>

<p><img src="/assets/articles/2014-06-01/f83d4d16-84bc-48a4-8528-d597b7b0672a.png" alt="Structurize your project with areas and services in ASP.NET MVC" /></p>

<p>Here you see that in the controller you have only one call to the service which is doing all the work for you. So the controller has only to get the requests, call the method and gives back the result. He does not care about what is in your viewmodel (like errormessages, sucessmessages, etc.)</p>

<p><span style="color: #808080;">As I said: I am a fan of namespaces, so I encapsulate the implementation in a namespace (“Impl”), separating it from the interface (because the interface is the first thing that interests me when I am looking at code. “What does the service give me?” comes before “How does he do it?”).</span></p>

<p>So here the real work is done. Here my UnitOfWork is used (which I inject once per Request, so every request gets one UnitOfwork. Ninject has this feature for you: RequestScope ;))</p>

<p>If you look at the code, you see the next thing I am doing to get a separation of concerns: Factories!</p>

<p><strong>6)     </strong> <strong>Factories</strong></p>

<p>Every(!) viewmodel gets a factory which gets the viewmodel everything it needs. This is why I have another folder in my service-namespace called “Factories”. I hide this information inside the service namespace because the factories are only used inside this service and nowhere else.</p>

<p><img src="/assets/articles/2014-06-01/375c85e6-9c17-4768-ba88-28bb635cd7b5.png" alt="Structurize your project with areas and services in ASP.NET MVC" /></p>

<p>All the factories are getting injected everything they need to build up the requested viewmodel and every viewmodel has its own factory. So you can test the viewmodels perfectly and one is not related to the other.</p>

<p><span style="color: #808080;">I won’t get in detail HOW exactly to create viewmodels, because this really depends on what you want to show in your view.</span></p>

<p>To summarize, this is how an area could look like:</p>

<p><img src="/assets/articles/2014-06-01/6fdc0f3b-9843-49f2-8060-dabef9f4e150.png" alt="Structurize your project with areas and services in ASP.NET MVC" /></p>

<p>You have your view which is presenting everything it needs from the viewmodel, which is stored in the models-namespace. The controller has only a minimum of logic in it: Getting requests, calling his service and giving the result back. The controller service is handling everything for the controller by using factories to create viewmodels etc.</p>

<p>Your separation of concerns is fulfilled, you can apply this “template” on every area you build and you are working with clean view, and submitmodels which I mentioned earlier in this post.</p>

<p>In the next blog post I will present you the sense of Area-Services and Business-services and why I separate them explicitly. After this I will present you the Generic UnitOfWork-Pattern to get your repositories on a clean way.</p>

<p>Thanks for reading.</p>

<p>Regards</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2014/06/01/structurize-your-project-with-areas-and-services-in-asp-net-mvc</wp:post_id>
        <wp:post_date>2014-06-01T08:39:56+02:00</wp:post_date>
        <wp:post_date_gmt>2014-06-01T08:39:56+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="areas"><![CDATA[["areas",]]></category>
        
          <category domain="post_tag" nicename="aspnet"><![CDATA["aspnet",]]></category>
        
          <category domain="post_tag" nicename="mvc"><![CDATA["mvc",]]></category>
        
          <category domain="post_tag" nicename="controllerservice"><![CDATA["controllerservice",]]></category>
        
          <category domain="post_tag" nicename="services"><![CDATA["services"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[How to include DotNet.HighCharts in ASP.NET MVC with ViewModels]]></title>
        <link>http://offering.solutions/blog/articles/2014/05/09/how-to-include-dotnet-highcharts-in-asp-net-mvc-with-viewmodels/</link>
        <pubDate>2014-05-09T16:41:01+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>Hey,</p>

<p>I want to show you how to include DotNet.HighCharts in ASP.NET MVC working with ViewModels.</p>

<p>A charting component is always very cool to see on your page and makes normal plain numbers good-looking.</p>

<p>Highcharts are available on Codeplex: <a title="DotNet-Highcharts" href="https://dotnethighcharts.codeplex.com/" target="_blank">DotNet.HighCharts</a></p>

<p>I will not dive into this whole ViewModel thing. This is something very common in ASP.NET MVC and can also bee seen in the second blog I am working on: <a href="http://blog.noser.com/why-and-how-to-avoid-viewbag-and-viewdata-in-asp-net-mvc/" target="_blank">How to avoid ViewBag and ViewData</a></p>

<p>So, lets start:</p>

<p>First you have to install the highcharts-components. This can be done with nuget easily.</p>

<p><img src="/assets/articles/2014-05-09/49c89940-c313-469c-8472-1cb324c8558e.png" alt="How to include DotNet.HighCharts in ASP.NET MVC with ViewModels" /></p>

<p>After this you see a folder created in your solution called “HighCharts3.0.1”</p>

<p><img src="/assets/articles/2014-05-09/d4845434-1552-4a0a-92d3-cf25f79f1b81.png" alt="How to include DotNet.HighCharts in ASP.NET MVC with ViewModels" /></p>

<p>Next step would be to reference this file in your view. Do this by adding this to your bundle or doing it explicitly in your View:</p>

<p><img src="/assets/articles/2014-05-09/591143f7-1526-4f4b-86d5-4d21a7a66fb7.png" alt="How to include DotNet.HighCharts in ASP.NET MVC with ViewModels" /></p>

<p>Be sure to have jquery included too. Otherwise this whole thing wont work in the end.</p>

<p>I will now publish the normal case with only having the charts on the ViewModel. Of course in your project the charts are only one of several properties which your viewmodel offers 😉</p>

<p><img src="/assets/articles/2014-05-09/1ee45eef-47a8-4b91-a7a2-a735939f6830.png" alt="How to include DotNet.HighCharts in ASP.NET MVC with ViewModels" /></p>

<p>So add “Chart” as a “Highcharts”-Object to your viewmodel.</p>

<p>Now in your controller you can add your values. (I used just some for testing right here) and get it into the property.</p>

<p><img src="/assets/articles/2014-05-09/e6b349b1-ebe7-41b4-9c35-28e04a9f3d28.png" alt="How to include DotNet.HighCharts in ASP.NET MVC with ViewModels" /></p>

<p>And return the viewmodel into your view.</p>

<p>In the view you can now work with your viewmodel and where you want to show your chart you simply have to get on the Chart-Property provided by your viewmodel:</p>

<p><img src="/assets/articles/2014-05-09/492c928a-010b-4ff0-8868-eeafc2979c6b.png" alt="How to include DotNet.HighCharts in ASP.NET MVC with ViewModels" />The charts requires jQuery. So again: Be sure to have it included at the time your view takes access to your Chart-Property.</p>

<p><img src="/assets/articles/2014-05-09/4926a6d6-fec6-45e8-95de-4c7cb1636d84.png" alt="How to include DotNet.HighCharts in ASP.NET MVC with ViewModels" />So at the end this should be your result.</p>

<p>I will play around with this a little and post more things concerning the DotNet.Highcharts-component in the next days.</p>

<p>Thanks and enjoy</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2014/05/09/how-to-include-dotnet-highcharts-in-asp-net-mvc-with-viewmodels</wp:post_id>
        <wp:post_date>2014-05-09T16:41:01+02:00</wp:post_date>
        <wp:post_date_gmt>2014-05-09T16:41:01+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="aspnet"><![CDATA[["aspnet",]]></category>
        
          <category domain="post_tag" nicename="charts"><![CDATA["charts",]]></category>
        
          <category domain="post_tag" nicename="highcharts"><![CDATA["highcharts",]]></category>
        
          <category domain="post_tag" nicename="mvc"><![CDATA["mvc",]]></category>
        
          <category domain="post_tag" nicename="viewmodel"><![CDATA["viewmodel"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Deleting a Team Project on Visual Studio Team Services]]></title>
        <link>http://offering.solutions/blog/articles/2014/04/14/deleting-a-team-project-on-visual-studio-team-services/</link>
        <pubDate>2014-04-14T08:37:53+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this bogpost I want to show you one possibility of deleting a Team Project on Visual Studio Team Services.</p>

<p>I just stumbled over the case that I wanted to delete an old project in my online TFS to keep it clean and up to date. As I noticed that it is not as easy as it sounds I thought about mentioning it here. So here is the walkthrough:</p>

<p>First log into your VSTS account by typing something like in the browser and entering your username and password.</p>

<pre class="">http://[yourusername].visualstudio.com</pre>

<p>Then navigate to your normal administration site on the upper right corner by selection the rack-wheel.</p>

<p><img src="/assets/articles/2014-04-14/86d30c51-7e99-4f27-b8b9-95dc01d70f34.png" alt="Deleting a Team Project on Visual Studio Team Services" /></p>

<p>Then normally you would go to the team administration page and try to delete it:</p>

<p><img src="/assets/articles/2014-04-14/617af661-7546-4198-8760-396d4faff02b.png" alt="Deleting a Team Project on Visual Studio Team Services" /></p>

<p><img src="/assets/articles/2014-04-14/874048f6-0be0-4d2b-b032-02aa182f5f57.png" alt="Deleting a Team Project on Visual Studio Team Services" /></p>

<p>But as you see: Even if you are an adminsitrator of the project it is grayed out.</p>

<h4>So here is the solution</h4>

<p>If you navigate to your accounts administration page, do NOT go into a projects-administration site. Choose the collection-administrative site instead!</p>

<p><img src="/assets/articles/2014-04-14/97e130d0-5477-4745-a409-cd53bc3e8c1a.png" alt="Deleting a Team Project on Visual Studio Team Services" /></p>

<p>There you can easily delete your project:</p>

<p><img src="/assets/articles/2014-04-14/ed78b714-3ef0-400a-8f41-b253cfd3f925.png" alt="Deleting a Team Project on Visual Studio Team Services" /></p>

<p>I think it is not that easy to delete an existing team project. But to keep the VSTS clean and in good order this might be a useful hint to someone.</p>

<p>Hope it helps.</p>

<p>Regards.</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2014/04/14/deleting-a-team-project-on-visual-studio-team-services</wp:post_id>
        <wp:post_date>2014-04-14T08:37:53+02:00</wp:post_date>
        <wp:post_date_gmt>2014-04-14T08:37:53+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="tfs"><![CDATA[["tfs",]]></category>
        
          <category domain="post_tag" nicename="visualstudio"><![CDATA["visualstudio"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Code-First with Entity Framework n:m relationship with additional information]]></title>
        <link>http://offering.solutions/blog/articles/2014/04/06/code-first-with-entity-framework-nm-relationship-with-additional-information/</link>
        <pubDate>2014-04-06T19:18:15+02:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this blogpost I want to show you a way to realize code First with Entity Framework n:m relationship with additional information.</p>

<p>a few days ago I faced the problem of having a normal N:M Relationship in EF with additional information in the table which keeps the two entities together.</p>

<p>Well, without having these additional information this is easy:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">User</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Username</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="c1">//... everything else
</span>        <span class="k">public</span> <span class="k">virtual</span> <span class="n">ICollection</span> <span class="n">Groups</span><span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">Group</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="c1">//... everything else
</span>        <span class="k">public</span> <span class="k">virtual</span> <span class="n">ICollection</span> <span class="n">Users</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span></code></pre></figure>

<p>EF is now going to make the right decisions for you while creating the database. A third table is created (due to EF-magic) and shows you the right relation-table. Great things so far. But what if you want to have more information on the relation table which EF created for you? Well, the answer ist easy: EF is not able to do this without your help.</p>

<p>You have to create a third entity representing the relationship you want. I will now show how and I will show the right Fluent-Configuration to map the Keys etc. in a correct way. (Entities should not know what their fields are used for. So things like [Key], … have to be avoided! This is why you have Fluent-API!)</p>

<p><a title="Code First Relationships Fluent API" href="http://msdn.microsoft.com/en-us/data/hh134698.aspx" target="_blank">Code First Relationships Fluent API</a></p>

<p><a title="Configuring/Mapping Properties and Types with the Fluent API" href="http://msdn.microsoft.com/en-us/data/jj591617.aspx" target="_blank">Configuring/Mapping Properties and Types with the Fluent API</a></p>

<p>So first, please create your third entity:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">Groups2Users</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">UserId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">GroupId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="k">virtual</span> <span class="n">User</span> <span class="n">User</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="k">virtual</span> <span class="n">Group</span> <span class="n">Group</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="n">MyAdditionalInformationType</span> <span class="n">MyAdditionalInformation</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span></code></pre></figure>

<p>and extend your existing entities like the following:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">User</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Username</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="c1">//... everything else
</span>        <span class="k">public</span> <span class="k">virtual</span> <span class="n">ICollection</span> <span class="n">Groups2Users</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">Group</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="c1">//... everything else
</span>        <span class="k">public</span> <span class="k">virtual</span> <span class="n">ICollection</span> <span class="n">Groups2Users</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span></code></pre></figure>

<p>Right now, you have made the three entities. Now, we have to wire everything together:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">DataBaseContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">DataBaseContext</span><span class="p">()</span>
            <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="s">"MyConnectionString"</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnModelCreating</span><span class="p">(</span><span class="n">DbModelBuilder</span> <span class="n">modelBuilder</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">modelBuilder</span><span class="p">.</span><span class="nf">Entity</span><span class="p">().</span><span class="nf">HasKey</span><span class="p">(</span><span class="n">q</span> <span class="p">=&gt;</span> <span class="k">new</span>
                                        <span class="p">{</span>
                                            <span class="n">q</span><span class="p">.</span><span class="n">GroupId</span><span class="p">,</span>
                                            <span class="n">q</span><span class="p">.</span><span class="n">UserId</span>
                                        <span class="p">});</span>

            <span class="n">modelBuilder</span><span class="p">.</span><span class="nf">Entity</span><span class="p">()</span>
                <span class="p">.</span><span class="nf">HasRequired</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">Group</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">WithMany</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">Groups2Users</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">HasForeignKey</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">GroupId</span><span class="p">);</span>

            <span class="n">modelBuilder</span><span class="p">.</span><span class="nf">Entity</span><span class="p">()</span>
                <span class="p">.</span><span class="nf">HasRequired</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">User</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">WithMany</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">Groups2Users</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">HasForeignKey</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">UserId</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">DbSet</span> <span class="n">User</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">DbSet</span> <span class="n">Groups</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">DbSet</span> <span class="n">Groups2Users</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span></code></pre></figure>

<p>When you now run your application with the right code-first configuration your database should hold those 3 three tables.</p>

<p>Note: Now you have to think exactly about what you want to do (Well you should do this always while coding 😉 ). Adding a new group has to get another entry in the Group-Table. but adding or deleting users are only reached by editing the Groups2Users-Table. (Perhaps you should spend this table an own repository 😉 ).</p>

<p>When you for example want to have all Groups of a user just call:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">context</span><span class="p">.</span><span class="n">Groups2Users</span><span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">UserId</span> <span class="p">==</span> <span class="n">userId</span><span class="p">,</span> <span class="n">includeProperties</span><span class="p">:</span> <span class="s">"Group"</span><span class="p">).</span><span class="nf">ToList</span><span class="p">();</span></code></pre></figure>

<p>Adding a new group would be like</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Groups2Users</span> <span class="n">groups2Users</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Groups2Users</span>
<span class="p">{</span>
    <span class="n">Group</span> <span class="p">=</span> <span class="c1">//Define your group here or above,
</span>    <span class="n">User</span> <span class="p">=</span> <span class="c1">//your user here,
</span>    <span class="n">MyAdditionalInformation</span> <span class="p">=</span> <span class="n">myAdditionalInformation</span> 
<span class="p">};</span>

<span class="n">context</span><span class="p">.</span><span class="n">Groups2Users</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">groups2Users</span><span class="p">);</span></code></pre></figure>

<p>Hope this helps,</p>

<p>Regards</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2014/04/06/code-first-with-entity-framework-nm-relationship-with-additional-information</wp:post_id>
        <wp:post_date>2014-04-06T19:18:15+02:00</wp:post_date>
        <wp:post_date_gmt>2014-04-06T19:18:15+02:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="aspnet"><![CDATA[["aspnet",]]></category>
        
          <category domain="post_tag" nicename="codefirst"><![CDATA["codefirst",]]></category>
        
          <category domain="post_tag" nicename="ef"><![CDATA["ef",]]></category>
        
          <category domain="post_tag" nicename="entityframework"><![CDATA["entityframework",]]></category>
        
          <category domain="post_tag" nicename="fluentapi"><![CDATA["fluentapi",]]></category>
        
          <category domain="post_tag" nicename="relationships"><![CDATA["relationships"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[How to avoid ViewBag and ViewData in ASP.NET MVC]]></title>
        <link>http://offering.solutions/blog/articles/2014/03/08/how-to-avoid-viewbag-and-viewdata-in-asp-net-mvc/</link>
        <pubDate>2014-03-08T14:24:01+01:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this blogpost I want to show you How to avoid ViewBag and ViewData in ASP.NET MVC.</p>

<p>It could be so easy: When passing data from the Controller to the View in MVC one can simply use</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">ViewBag</span><span class="p">.</span><span class="n">MyProperty</span> <span class="p">=</span> <span class="err">“</span><span class="n">ThisIsTheContentOfMyProperty</span><span class="err">”</span><span class="p">;</span></code></pre></figure>

<p>or</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">ViewData</span><span class="p">[</span><span class="s">"MyProperty"</span><span class="p">]</span> <span class="p">=</span> <span class="n">MyProperty</span><span class="p">;</span></code></pre></figure>

<p>And in the view you can access the data with:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">@ViewBag</span><span class="p">.</span><span class="n">MyProperty</span></code></pre></figure>

<p>or</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">ViewData</span><span class="p">[</span><span class="s">"MyProperty "</span><span class="p">]</span> <span class="k">as</span> <span class="p">...</span></code></pre></figure>

<p>But what about spelling problems? <em>IntelliSense</em> will not correct you if you would miss a character. Even the compiler does not give you any hint.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">@ViewBag</span><span class="p">.</span><span class="n">MProperty</span></code></pre></figure>

<p>would not be wrong but won’t show any data in your View. Also spelling problems in the ViewData-String would not be noticed in code.</p>

<p>In general: Using the MVC-Pattern is great. So when ASP.NET <strong>MVC</strong> gives us the possibility to use this pattern: Do so!</p>

<p>A Viewbag (also Viewdata, Viewbag is only a wrapper around Viewdata) can be used like a bucket for your data. But this is not nice and it’s harming the Mvc-Pattern!</p>

<p>The view knows its model and should not get any data from anything else. So to avoid using any pails for your data, use ViewModels to pass your data into the View.</p>

<p>This could look like this:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">MyViewModel</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="n">List</span> <span class="n">MyModels</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Rooms</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">bool</span> <span class="n">IsSomethingTrueOrNot</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">...</span>
<span class="p">}</span></code></pre></figure>

<p>And in the View you can simply pass the complete ViewModel to your View</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="n">ActionResult</span> <span class="nf">MyMethod</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">MyViewModel</span> <span class="n">viewModel</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">MyViewModel</span><span class="p">();</span>

    <span class="c1">// Do anything with the ViewModel like filling it, etc.
</span>
    <span class="k">return</span> <span class="nf">View</span><span class="p">(</span><span class="n">viewModel</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>With this simple technique you can keep all the data you need for creating a view separately from your MVC-Models.</p>

<p>This can be tested well; it can be simply used and gives you more structure arrangement to your MVC-Projects.</p>

<p>It’s so easy, isn’t it?</p>

<p>Happy coding!</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2014/03/08/how-to-avoid-viewbag-and-viewdata-in-asp-net-mvc</wp:post_id>
        <wp:post_date>2014-03-08T14:24:01+01:00</wp:post_date>
        <wp:post_date_gmt>2014-03-08T14:24:01+01:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="aspnet"><![CDATA[["aspnet",]]></category>
        
          <category domain="post_tag" nicename="mvc"><![CDATA["mvc",]]></category>
        
          <category domain="post_tag" nicename="viewbag"><![CDATA["viewbag",]]></category>
        
          <category domain="post_tag" nicename="viewdata"><![CDATA["viewdata"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Lightweight architecture with AngularJS]]></title>
        <link>http://offering.solutions/blog/articles/2014/03/05/lightweight-architecture-with-angularjs/</link>
        <pubDate>2014-03-05T18:17:51+01:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>During the last past days I have been to a conference in Germany and brought back several interesting things I want to share with you this time. (Here I have to say that my hotel did not have a spa. So everybody who wanted to get the latest hotel and spa tips is wrong here…so in case stop reading)</p>

<p>Well for me as a software developer it gets interesting every time I hear another company talking about their way of doing work, their kind of projects and their behavior in the market. It’s always refreshing to see how they behave. And, indeed, personally, if the topic “ASP.NET&amp;”, “Internet&amp;” with all its Buzzwords is connected you can be sure to have my attention.</p>

<p>This time I laid my focus on everything which was connected to the web and in eight hours of workshop and a lot of tracks the other day I learned a lot!</p>

<h3 id="history">History</h3>

<p>Let me get historical for a moment: .Net in its first version was released in 2002. This is 12 years ago! 12 years are more than a lifetime in computer-science. So you feel that there is something moving. Something growing. Internet-Applications are getting bigger and bigger and: It’s getting a lot more mobile focus. Having the same application on smartphone, tablet and your desktop-PC (Do you still have one? 😉 ) is something like essential to everyone. It also solves a lot of business-issues as I heard on the conference. “Oh if we would have known that before. It would have saved us a lot of trouble!&amp;”</p>

<h3 id="why-spas">Why SPAs?</h3>

<p>ASP.NET gives us great application-possibilities for this to achieve. ASP.NET MVC gives us a very established Framework (MVC) which does a great separation of your view, your logic and dealing with and between them. But it’s a server-sided technology. You are feeling it: There is a server I have to ask every time. I hated to ask my parents for almost everything I did when I was young, why should I love to ask a Server everything I do? And, which is the bigger point, why am I feeling it while working with my application?</p>

<p>Wouldn’t it be nice to have an application browser-based, which looks the same on every device I have, which keeps my data synchronized no matter which device I take to change the information? I can start it on my smartphone, have it on the desktop and love the information AND the look and feel. Because I am used to it.</p>

<p>As I mentioned ASP.NET MVC gives us a great but server-sided-technology to build up web applications. ASP.NET WebAPI gives us only a small thing server sided: An API we can ask information from and push information to. The client-side programming language would be JavaScript. When you read “JavaScript&amp;” the first thing which comes to your mind is “jQuery&amp;”. Why? Because jQuery is one of the most common DOM-Changing tools out there in the web. Okay okay, it’s more than a DOM-Changing-Tool I know. But without Require.js and a lot of tools it’s hard to get a real structure in your application by using jQuery.</p>

<h3 id="angularjs">Angular.js</h3>

<p>Frameworks like Angular.js are nowadays able to build up a complete MV*-Framework completely down on your client. Everybody who thought that JavaScript is a language without any structure, namespaces etc. can with tools like angular see, that this is not true. Angular.Js is a google-pushed Framework (that’s a reason why MS is not providing it in its templates 😉 ) where code can be separated into your well known controllers, into services and, of course, into your view model for html-views. The Dependency injection comes native with angular.js! With that you are facing real client-side architecture. It’s an architecture to write client-side-applications. Not only websites.</p>

<p><img src="/assets/articles/2014-03-05/5ab97616-0c2c-4953-9bca-8f5c20415c45.png" alt="Lightweight architecture with AngularJS" /></p>

<p>The following screenshots shows an example of a view iterating over persons, which are called from a WebApi over services (see the following screenshots).</p>

<p><img src="/assets/articles/2014-03-05/f45c07ec-ef2b-4369-86ac-786ec18ab1ee.png" alt="Lightweight architecture with AngularJS" /></p>

<p>The controller gets the “scope” injected, which is an angular.js-word for representing the view model. Here the persons are called from the service and set in the corresponding property.</p>

<p><img src="/assets/articles/2014-03-05/d76d36a2-13d9-4bf4-9a1d-42a29d36536f.png" alt="Lightweight architecture with AngularJS" /></p>

<p>Here the services for the communication to the WebAPi are shown. I only divided the service which gets injected to the controller from the one who really gets the data. Theoretically this could be one single service.</p>

<p><img src="/assets/articles/2014-03-05/d7b243d3-9c6e-48dd-9e16-37ee9f27127d.png" alt="Lightweight architecture with AngularJS" /></p>

<p>Your corresponding WebApi could look like:</p>

<p><img src="/assets/articles/2014-03-05/a3bc7793-7ecf-4bcc-9121-e26908d668dc.png" alt="Lightweight architecture with AngularJS" /></p>

<p>The last piece which fits everything together to get a real feeling of client-based-architecture is the routing, which you can navigate to your application with without having the feeling there is a server behind.</p>

<p><img src="/assets/articles/2014-03-05/874e9c02-d238-4cc9-afca-686785cd9397.png" alt="Lightweight architecture with AngularJS" /></p>

<p>With this angular.js-concept and WebAPI in the back you can get your information online, take it to your client and work with it. Navigation is client-based. Every behavior but the source of information is based on the client.</p>

<h3 id="conclusion">Conclusion</h3>

<p>Let’s summarize: The patterns to build up applications with a good architecture have been there so far. Since many years. Nowadays this grows further and further into JavaScript and client-side-applications. I think the word “Application&amp;” has to be paid the most attention to. Frameworks like angular.js are very into giving you the well knows structures and architecture-patterns to build up applications with a lightweight architecture completely using the client.</p>

<p>On the mentioned historically view every C#-Developer has to face the new age with JavaScript as a language you have to pay attention to.</p>

<p>Personally I think now that JavaScript is not a language without structure etc. It’s not like your good old C# with namespaces and classes and stuff but the frameworks in this direction are growing and getting better and better. So here is something moving. There is something growing. Let’s grow with it!</p>

]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2014/03/05/lightweight-architecture-with-angularjs</wp:post_id>
        <wp:post_date>2014-03-05T18:17:51+01:00</wp:post_date>
        <wp:post_date_gmt>2014-03-05T18:17:51+01:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="angularjs"><![CDATA[["angularjs",]]></category>
        
          <category domain="post_tag" nicename="javascript"><![CDATA["javascript",]]></category>
        
          <category domain="post_tag" nicename="webarchitecture"><![CDATA["webarchitecture"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[How to install Ninject in ASP.NET WebAPI]]></title>
        <link>http://offering.solutions/blog/articles/2014/03/04/install-ninject-asp-net-webapi/</link>
        <pubDate>2014-03-04T18:57:23+01:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this blogpost I want to show you how to install Ninject in ASP.NET WebAPI. Using Dependency-Injection is one of the most important things when implementing software. Code is much more testable and you have clearly ordered dependencies and an overview of what you injected where etc.</p>

<p>For ASP.NET MVC there are a lot of possibilities which you can use to achieve the DI-Goal. I tried a few (e.g. AutoFaq, Unity, etc.) and for me the fastest way to get things going was the Ninject-Way. So this time I want to show you a way to start with DI using Ninject. (You can get it <a href="http://ninject.codeplex.com/" target="_blank">here</a>)</p>

<p>NuGet is one of our best friends, so first of all try to search after “Ninject” and install the NuGet-Package for this (Dont worry, this MVC3 stuff also works for 4 and 5 😉 ):</p>

<p><img src="/assets/articles/2014-03-04/b5b4e8c9-24ed-40f7-a37c-56ab94796006.png" alt="How to install Ninject in ASP.NET WebAPI" />After this you will get a generated class in your App_Start-Folder which is exactly offering you the registration-place you are looking for (aren’t you ? 😉 )</p>

<p><img src="/assets/articles/2014-03-04/2f654046-db9b-4b3d-a9a7-942053c18ba0.png" alt="How to install Ninject in ASP.NET WebAPI" /></p>

<p>There you can go ahead and register your services and/or repositories with your associated interface. (Of course you do implement an interface on every service/repo/etc. you do 😉 )</p>

<p>The “Start()”-Method is called while Bootstraping your application and your services will be registered.</p>

<p><img src="/assets/articles/2014-03-04/5802028b-ce79-48df-bbd9-34bd6663d18c.png" alt="How to install Ninject in ASP.NET WebAPI" /></p>

<p>This was the first part. The second part means enjoying the service Ninject offers to you:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">MySuperService</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IConfigurationService</span> <span class="n">_configurationService</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">MySuperService</span><span class="p">(</span><span class="n">IConfigurationService</span> <span class="n">configurationService</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_configurationService</span> <span class="p">=</span> <span class="n">configurationService</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">void</span> <span class="nf">MethodToUseMyInjectedService</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">//speak to every method/property etc. which _configurationService gives you
</span>    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>While looking into this short piece of code you will notice, that your “SuperService” has no connection to your implementation of “ConfigurationService” (no matter where it is) which describes the implementation of your ConfigurationService. And this is exactly one of the biggest advantages of Dependency Injection. You can change the implementation of your services like you want, without touching the parts which are connected because they only know the interface.</p>

<p>Also one great advantage (but like an anti-pattern, is that Ninject is automatically assigned to the DependencyResolver-Class provided by the ASP.NET-Mvc-Framework:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">DependencyResolver</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">GetService</span><span class="p">&lt;</span><span class="n">IMembershipRepository</span><span class="p">&gt;();</span></code></pre></figure>

<p>also gives you the interface to your registered service without knowing the implementation. But be careful: Dependency <strong>Injection</strong> means that you <strong>give</strong> the services you create everything they need to live. Usually you do this in a constructor. So letting services <strong>take</strong> what they need, when they are currently needing it is way against the usual DI-Pattern!</p>

<p>For me one of the fastest and most clean ways to get Dependency Injection into my MVC-Projects.</p>

<p>Cheers</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2014/03/04/install-ninject-asp-net-webapi</wp:post_id>
        <wp:post_date>2014-03-04T18:57:23+01:00</wp:post_date>
        <wp:post_date_gmt>2014-03-04T18:57:23+01:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="aspnet"><![CDATA[["aspnet",]]></category>
        
          <category domain="post_tag" nicename="depdendency"><![CDATA["depdendency",]]></category>
        
          <category domain="post_tag" nicename="dependencyinjection"><![CDATA["dependencyinjection",]]></category>
        
          <category domain="post_tag" nicename="injection"><![CDATA["injection",]]></category>
        
          <category domain="post_tag" nicename="mvc"><![CDATA["mvc",]]></category>
        
          <category domain="post_tag" nicename="ninject"><![CDATA["ninject"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Using the Crypto-Namespace to Generate Salts and Compare Passwords]]></title>
        <link>http://offering.solutions/blog/articles/2014/03/03/using-crypto-namespace-to-generate-salts-and-compare-passwords/</link>
        <pubDate>2014-03-03T22:02:40+01:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>In this blogpost I want to show how to use the Crypto-Namespace to Generate Salts and Compare Passwords</p>

<p><a href="https://msdn.microsoft.com/en-us/library/system.web.helpers.crypto.hashpassword(v=vs.111).aspx" target="_blank">Crypto.HashPassword Method</a></p>

<h4>Using Crypto Namespace to Generate Salts and Compare Passwords</h4>

<p>If you are implementing a custom membership- and/or roleprovider (I wont go into custom providers because beside pictures of cats (with or without money or guns) and porn this is one of the most mentioned topics in the web) you should always store passwords with a salt.</p>

<p>With the crypted password and the salt you can compare the values during the login-process and set it during the registration process easily by using the Crypto-Namespace of ASP.NET.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="kt">bool</span> <span class="nf">RegisterUser</span><span class="p">(</span><span class="kt">string</span> <span class="n">username</span><span class="p">,</span> <span class="kt">string</span> <span class="n">password</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">loginImmediately</span><span class="p">,</span> <span class="kt">string</span> <span class="n">role</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nf">UserExists</span><span class="p">(</span><span class="n">username</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">MembershipCreateUserException</span><span class="p">(</span><span class="n">MembershipCreateStatus</span><span class="p">.</span><span class="n">DuplicateUserName</span><span class="p">);</span>
    <span class="p">}</span>


    <span class="n">User</span> <span class="n">user</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">User</span><span class="p">();</span>
    <span class="n">user</span><span class="p">.</span><span class="n">Username</span> <span class="p">=</span> <span class="n">username</span><span class="p">;</span>
    <span class="n">user</span><span class="p">.</span><span class="n">Password</span> <span class="p">=</span> <span class="n">password</span><span class="p">;</span>
    <span class="n">user</span><span class="p">.</span><span class="n">PasswordSalt</span> <span class="p">=</span> <span class="n">Crypto</span><span class="p">.</span><span class="nf">GenerateSalt</span><span class="p">();</span>
    <span class="n">user</span><span class="p">.</span><span class="n">Password</span> <span class="p">=</span> <span class="n">Crypto</span><span class="p">.</span><span class="nf">HashPassword</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="nf">Format</span><span class="p">(</span><span class="s">"{0}{1}"</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">Password</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">PasswordSalt</span><span class="p">));</span>

    <span class="c1">// Add Role and insert User into DB
</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">loginImmediately</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">WebSecurity</span><span class="p">.</span><span class="nf">Login</span><span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="n">Username</span><span class="p">,</span> <span class="n">password</span><span class="p">);</span> 
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">registeredSuccessfully</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>The <code class="highlighter-rouge">Crypto.GenerateSalt()</code>-Method automatically creates a random salt-value which can be used to hash the password with. This hashed (!) password can now be stored into the database. By using an CustomMembeship-Provider you do not have to miss the WebSecurity-Method the Asp.Net-Framework provides to you.</p>

<p>While verifying the User <code class="highlighter-rouge">VerifyHashedPassword(...)</code> returns a bool wether the given plain-text password the user gave to you during the login-process salted with the PasswordSalt generated during login compares corectly or not.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="kt">bool</span> <span class="nf">ValidateUser</span><span class="p">(</span><span class="kt">string</span> <span class="n">username</span><span class="p">,</span> <span class="kt">string</span> <span class="n">password</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">using</span> <span class="p">(</span><span class="n">DataBaseContext</span> <span class="n">context</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DataBaseContext</span><span class="p">())</span>
    <span class="p">{</span>
        <span class="n">User</span> <span class="n">user</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">User</span><span class="p">.</span><span class="nf">FirstOrDefault</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Username</span> <span class="p">==</span> <span class="n">username</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">user</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">Crypto</span><span class="p">.</span><span class="nf">VerifyHashedPassword</span><span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="n">Password</span><span class="p">,</span> <span class="n">String</span><span class="p">.</span><span class="nf">Format</span><span class="p">(</span><span class="s">"{0}{1}"</span><span class="p">,</span> <span class="n">password</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">PasswordSalt</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>With this code you can store your password safely with saving a lot of work by wusing the .Net-provided Crypto-Namespace.</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2014/03/03/using-crypto-namespace-to-generate-salts-and-compare-passwords</wp:post_id>
        <wp:post_date>2014-03-03T22:02:40+01:00</wp:post_date>
        <wp:post_date_gmt>2014-03-03T22:02:40+01:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="aspnet"><![CDATA[["aspnet",]]></category>
        
          <category domain="post_tag" nicename="crypto"><![CDATA["crypto",]]></category>
        
          <category domain="post_tag" nicename="hash"><![CDATA["hash",]]></category>
        
          <category domain="post_tag" nicename="salt"><![CDATA["salt"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Configure ASP.NET WebAPI to send data as JSON]]></title>
        <link>http://offering.solutions/blog/articles/2014/02/26/configure-asp-net-webapi-to-send-data-as-json/</link>
        <pubDate>2014-02-26T20:51:54+01:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<p>Hey,</p>

<p>In this blogpost I just want to show you quickly how to configure ASP.NET WebAPI to send data as JSON</p>

<p>ASP.NET WebAPI is normally sending data as XML. The standard data-fomat in Javascript frameworks like Knockout.js or Angular.js is normally JSON. So to get ASP.NET WebAPI using only JSON can be configured in the Register-Method in WebApiConfig.</p>

<p><img src="/assets/articles/2014-02-26/d4dbd143-c0e4-461f-a874-903ff24b7e5b.png" alt="Configure ASP.NET WebAPI to send data as JSON" /></p>

<p>Here in the first part you can see clearing all formatters first and then add the JsonMediaTypeFormatter as the only formatter WebApi knows for my application. This makes sure I am only using JSON-format.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">config</span><span class="p">.</span><span class="n">Formatters</span><span class="p">.</span><span class="nf">Clear</span><span class="p">();</span>
<span class="n">config</span><span class="p">.</span><span class="n">Formatters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">JsonMediaTypeFormatter</span><span class="p">());</span></code></pre></figure>

<p>If you now sending requests to the API it should return the data as json.</p>

<h4>Complete sample Startup:</h4>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">config</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HttpConfiguration</span><span class="p">();</span>

<span class="n">config</span><span class="p">.</span><span class="n">Formatters</span><span class="p">.</span><span class="nf">Clear</span><span class="p">();</span>
<span class="n">config</span><span class="p">.</span><span class="n">Formatters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">JsonMediaTypeFormatter</span><span class="p">());</span>

<span class="n">config</span><span class="p">.</span><span class="nf">MapHttpAttributeRoutes</span><span class="p">();</span>

<span class="n">config</span><span class="p">.</span><span class="n">Routes</span><span class="p">.</span><span class="nf">MapHttpRoute</span><span class="p">(</span>
    <span class="n">name</span><span class="p">:</span> <span class="s">"DefaultApi"</span><span class="p">,</span>
    <span class="n">routeTemplate</span><span class="p">:</span> <span class="s">"api/{controller}/{id}"</span><span class="p">,</span>
    <span class="n">defaults</span><span class="p">:</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">RouteParameter</span><span class="p">.</span><span class="n">Optional</span> <span class="p">}</span>
<span class="p">);</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseWebApi</span><span class="p">(</span><span class="n">config</span><span class="p">);</span></code></pre></figure>

<p>Consider that if a client is sending the Accept-Header in the request with a value your API does not support it will get no data. Although JSON is the de facto standard for REST-APIs you should always remember to have your API as easy and intuitive as possible to consume for your clients. So maybe if your API goes public think about having XML and JSON as formatters.</p>

<p>HTH</p>

<p>Fabian</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/blog/articles/2014/02/26/configure-asp-net-webapi-to-send-data-as-json</wp:post_id>
        <wp:post_date>2014-02-26T20:51:54+01:00</wp:post_date>
        <wp:post_date_gmt>2014-02-26T20:51:54+01:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="aspnet"><![CDATA[["aspnet",]]></category>
        
          <category domain="post_tag" nicename="configuration"><![CDATA["configuration",]]></category>
        
          <category domain="post_tag" nicename="json"><![CDATA["json"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
  </channel>
</rss>