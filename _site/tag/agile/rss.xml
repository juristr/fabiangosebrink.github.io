<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>http://fabian-gosebrink.com</title>
   
   <link>http://offering.solutions</link>
   <description>Articles about Angular & ASP.NET</description>
   <language>en-us</language>
   <managingEditor> Fabian Gosebrink</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Unterhaltsame Meetings in SCRUM</title>
	  <link>//blog/articles/2014/09/18/unterhaltsame-meetings-in-scrum/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2014-09-18T19:00:00+02:00</pubDate>
	  <guid>//blog/articles/2014/09/18/unterhaltsame-meetings-in-scrum/</guid>
	  <description><![CDATA[
	     <p>SCRUM legt viel Wert auf Kommunikation, Transparenz und Austausch. Dies bringt enorm viele Vorteile. Wenn man jedoch SCRUM in einer Firma einführt oder praktiziert sehen die Entwickler sehr schnell den angeblichen Nachteil dieser doch recht positiven Eigenschaften: Es gibt, zumindest am Anfang, sehr viele Meetings.</p>

<p>Entwickler mögen meist keine Meetings. Meetings halten sie von der Arbeit ab. Das ist keine Vermutung meinerseits, das sage ich aus persönlicher Erfahrung. Es gibt das Daily-Standup, es gibt das Grooming, wenn es nicht als Prozess angesehen wird, und es gibt das Planungsmeeting, was oftmals sehr lange dauern kann. Ist man nun vor Ort um SCRUM einzuführen oder sogar SCRUM-Master und “leitet” die Meetings liegt es an einer guten Moderation, einer guten Vorbereitung und viel Geschick ein angenehmes Meeting zu gestalten.</p>

<p>Im Folgenden möchte ich Tipps erläutern, die solche Meetings zwar nicht aus der Welt schaffen aber sie zumindest anders oder “saftiger” machen können. Ob (erfolgreich) getestet oder nur als Gedankenanstoss: Ich hoffe die folgenden Punkte bieten eine gute Grundlage zum Nachmachen und zum darauf aufbauen.</p>

<blockquote>
  <p>SCRUM ist keine One-Man-Show</p>
</blockquote>

<h3 id="was-lange-whrt">Was lange währt…</h3>

<p>…wird irgendwann gut: SCRUM braucht Zeit. Geben Sie den Teilnehmern diese. Gerade wenn SCRUM neu ist, ist die Skepsis noch Herr in allen Meetings. Diese werden die Teilnehmer los. Aber es muss von den Teilnehmern selber kommen. Somit: Leisten Sie Überzeugungsarbeit und erläutern Sie, warum das Team Meeting xyz nutzen sollte. Die Menschen über die Logik und den Sinn abzuholen bringt oft mehr als sie in ein Meeting zu “zwingen”. SCRUM ist ein Team-Ding. Kein SCRUM-Master oder Product-Owner-Ding, keine One-Man-Show.</p>

<h3 id="timeboxing">Timeboxing</h3>

<p>Meetings gehören in Timeboxen. Das ist kein genereller Ansatz aber gerade bei der Einführung ist dies wichtig. Sie können bei der Einführung eine Empfehlung der Dauer aussprechen. (Hierfür können Sie auch gern den Scrum-Guide zu Rate ziehen). Aber die Entscheidung, wie lang ein Meeting gehalten werden sollte, kann das Team in einer Abstimmung fällen (Mehrheit entscheidet). Dies ist flexibel und kann nach jedem Sprint gerne geändert werden. Wichtig hierbei ist es, die Timebox genau einzuhalten. So bemerkt das Team a) dass Sie daran sind, ihren Arbeitsworkflow zu organisieren und b) dass die Zeit eventuell zu kurz ist. Das macht das Meeting für das Team angenehmer und wird mehr akzeptiert. Ausserdem wird die Notwendigkeit nach einem längeren Meeting deutlich und das Team übernimmt die Initiative dies umzusetzen.</p>

<p>Beispiel: Das Grooming wird als Meeting eingeführt und das Team ist anfangs skeptisch. Nach einem Vorschlag das Grooming „nur“ 60 Minuten abzuhalten willigten alle ein. Natürlich ist dies zu wenig für einen langen Sprint. Dies wird deutlich wenn das Meeting penibel nach 60 Minuten zum Ende gebracht wird. Aber wenn das Meeting richtig genutzt (vorbereiten!) und durchgeführt wird (alle Teilnehmer anwesend, etc.), wird der Nutzen schnell klar. In einer folgenden Retro kam auf, dass das Grooming viel zu kurz ist: Das Team bespricht die Lösung und einigt sich selbstständig auf ein zwei Stunden dauerndes Meeting. Somit wurde der Sinn erkannt und die Initiative, das Meeting abzuhalten und den Product-Backlog zu pflegen, kam vom Team aus.</p>

<blockquote>
  <p>Ist die Familienpizza viel zu gross für den Sprint, muss sie eventuell aufgeteilt werden</p>
</blockquote>

<h3 id="abwechslung">Abwechslung</h3>

<p>Bringen Sie Abwechslung in die Meetings. Es gibt recht viele Meetings, die SCRUM mit sich bringt. bei kürzeren Sprints wirken diese noch mehr, auch wenn die Meetings dann natürlich kürzer sind.</p>

<p>Die Präsentation, wenn Sie eine haben, muss nicht immer dieselbe sein. Verändern Sie ihre Folien optisch. Inhaltlich sollte die Agenda jedoch schon einen geregelten Ablauf haben. Eine gewisse Routine gibt auch Sicherheit. Aber wieso nicht mal eine Retrospektive bei einem Kaffee? Im Stehen? Eventuell in der Cafeteria. Leute sind aktiver wenn sie nicht sitzen. Sie können auch nicht in ihren Monitor schauen wenn sie stehen. Wieso nicht Plus- und Minuspunkte eines Sprints auf Karten schreiben und an die Wand pinnen? Schieben Sie mal die Tische beiseite, schaffen Sie Raum. Nutzen Sie die komplette Wand um Plus und Minus anzuprangern. So haben Sie auf x Metern Wand auf einmal neben Plus und Minus als “schwarz” und “weiss” auf einmal “eher schwarz und eher weiss”. Das facht eine Konversation respektive eine Diskussion an. Und nichts ist schlimmer als eine Retro, die totgeschwiegen wird. Ist ihr Team träge und verunsichert: Stellen Sie die Frage, was gut war, statt, was schlecht war. “Was sollten wir NOCH besser machen?”. So kommt man leicht in die Diskussion die auch Dinge anspricht, die nicht so gut gelaufen sind.</p>

<p>Backlog-Items schätzen ist ebenfalls langweilig: Wieso die Grösse von Items nicht mit Pizzaschachteln darstellen? XS, S, M, L, XL? Ist die Familienpizza viel zu gross für den Sprint, muss sie eventuell aufgeteilt werden. Sie werden sich wundern wie lange solche Assoziationen hängenbleiben!</p>

<p>Ein Planungsmeeting dauert meistens sehr lange: Wieso nicht mit einem Rätsel starten? Länder erkennen, Personen erkennen, vielleicht ein Wer-Wird-Millionär in einer SCRUM-Edition? Hierbei bringt man sich natürlich in die Lage, dass bei der 1000 und 32000 CHF-Frage Süssigkeiten oder entsprechendes herausgegeben werden muss ;).</p>

<p>Das Daily-Standup-Meeting ist ein Meeting im Stehen: Investieren sie in ein billiges Mikrophon und machen sie eine Moderation draus. Derjenige, der spricht, muss in das Mikro sprechen. Das stärkt das Team und ist ausserdem lustig. Zumindest für die anderen ;)</p>

<blockquote>
  <p>Das Team organisiert sich selbst</p>
</blockquote>

<h3 id="ergebnisse">Ergebnisse</h3>

<p>Schreiben Sie Ergebnisse auf. Aber lassen Sie es jemanden anderes machen als den Moderator selbst. Beispielsweise auf ein Flipchart. Nach dem Meeting ein Foto von dem Flipchart an alle Teilnehmer gesendet und schon haben sie ein Protokoll, das für alle gleich ist. Will es keiner machen: Machen sie ein Spiel draus: Der letzte, der in das Meeting kommt, ist der Protokollant. Hierbei auch keine Scheu vor Vorgesetzten: Kein Chef bricht sich einen Zacken aus der Krone den Stift zu schwingen und was auf das Papier zu bringen. Zumal sowieso alles, was festgehalten wird, besprochen werden sollte.</p>

<h3 id="das-team-organisiert-sich-selbst">Das Team organisiert sich selbst</h3>

<p>Das Team steht bei SCRUM im Mittelpunkt. Es wird so gearbeitet, wie das Team sich organisiert. Wenn das Team beim Daily-Standup mit einem Witz starten will, dann machen sie es. Einen Sprint lang. Dann wird geschaut, ob die Änderungen den gewünschten Effekt bringen. Findet das Team es gut: behalten Sie es bei!</p>

<h3 id="zusammenfassung">Zusammenfassung</h3>

<p>SCRUM-Meetings müssen nicht langweilig sein. Man kann solche Meetings durchaus “saftig” und abwechslungsreich gestalten. Wenn SCRUM dem Team Spass macht, ist es wesentlich einfach Offenheit, Transparenz und Fortschritt zu sehen, zu messen und damit zu arbeiten. Natürlich sollte neben aller Abwechslung das Sprint-Ziel verfolgt werden um es am Ende des Sprints möglichst zu Erfüllen. Jedoch kann man, mit den richtigen Mitteln, Teams für SCRUM begeistern. Ich hoffe mit den genannten Beispielen konnte ich einige Denkanstösse geben.</p>

<p>Gruss</p>

<p>Fabian</p>

	  ]]></description>
	</item>

	<item>
	  <title>Why I like SCRUM - Tips which may help you</title>
	  <link>//blog/articles/2014/06/03/why-i-like-scrum-tips-which-may-help-you/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2014-06-03T19:12:40+02:00</pubDate>
	  <guid>//blog/articles/2014/06/03/why-i-like-scrum-tips-which-may-help-you/</guid>
	  <description><![CDATA[
	     <p>Hi, in this post I want to tell you why I like SCRUM - Tips which may help you</p>

<p><img src="/assets/articles/2014-06-03/08570960-945a-48e4-980d-ef95447107ea.png" alt="Why I like SCRUM - Tips which may help you" /></p>

<p>After I started to be interested in agile management processes, SCRUM took nearly all of my attention and I often hear that people do not understand it or do not know how to get along with it. If your company wants to work with SCRUM you should get an idea of it and learn it. If you do so, this seems quite all right here and you can stop reading. But if you have any doubts about it please read further. If you are not into it and asking yourself the question “Why should I get along with this thing? Processes come and go. It will pass. With or without me”: Read this post. I will try to give you tips for your SCRUM experience and tell you why I like SCRUM. No, let me push this: I love it. There you go:</p>

<p><strong>Reason 1: Teamwork</strong></p>

<p>I like teamwork. I really do. You often hear the question: “Are you a team player?” maybe in a job interview and how fast you are telling “Yes!” Without knowing in which team you perhaps will come and without knowing with which people and characters you will work together in the future. But beside of that in general: Your team will always have so many different characters no matter how long you are into this team. They will come and go. You will have many types in your team and to deal with this is strenuous but also interesting and fascinating.</p>

<p>If your team does SCRUM it’s very important they stand together as a team. Which means: Everybody could overtake the work of another one if he will drop out for a specific reason. It’s not like “Everybody can do everyone’s work at 100 percent”! But every team-member has to have the <strong>will</strong> to do work of his neighbor and save the SCRUM -sprint and reduce the risk of not missing the sprint-goal. The work is of course groomed and defined, so that everybody could do it in more or less time ;).</p>

<p>Teamwork also means being interested in work which you did not care about before SCRUM. Concrete in your everyday SCRUM-work: Do pair programming with perhaps one experienced and one not experienced guy. Do show interests: “Can we do this together?” “Can you give me a briefing about what you did exactly to solve this problem?” This is sharing of knowledge, this shows how much interested you are (or you should be) and in the end this makes a great team working perfectly together. So doing teamwork is one of the greatest things about SCRUM. But if you want to introduce it you have to have absolutely everybody behind you who has to work with it. SCRUMis team-oriented. So the team has to be convinced that this is a good thing. And this mostly is the hardest part.</p>

<p><strong>Reason 2: Transparency</strong></p>

<p>Transparency is one of the three pillars SCRUM is built on. Transparency in its perfection would mean: Everybody knows what you are doing every minute on your 8 or 9-hour-working-day. Well this is not realistic. I mean: No matter how interested the others are it would drive you nuts if anyone would know about every single step you do or, otherwise, you would have to tell everyone about every step you do. But let’s be egoistic (just for a moment). What transparency means for the team is not a treasure. But think about yourself. Be transparent to yourself first: What have you done yesterday? What are you going to do today? And which plans do you have for the next day/days? This is a way to give structure to your work. Of course: Planned user stories can be the framework of this during a sprint. But while being more detailed you have to answer yourself the questions and you will definitely have a plan and a structure about what to do. And with this it is absolutely no problem telling the others. If everyone is doing this (besides getting all info into the team etc.) your transparency will come right along while you are planning your work for yourself. The daily-standup is one place for this: Be transparent there! So with a daily meeting and a transparency you know always where your product is standing. No surprises. No work behind your back. If every team member is following transparency there should be less unforeseen issues during your sprint period.</p>

<p><strong>Reason 3: The improvement</strong></p>

<p>This is what makes SCRUM a process. The never ending will to improve everything you work on. On every retrospective in the end of the sprint you ask yourself the question: “What was wrong” and I personally felt the bad mood which comes with this question. Yeah, it is important to ask this question. For sure it is. But as important as this question is: “What went well this sprint?” And normally this is a question which is much easier to ask (and to answer). So figuring out what went wrong is a goal of the retro, but getting the facts that are doing well is a much easier way to get into this discussion. So: Ask this before you want to explain the bad points. Also here we come to a mentioned point. People who do not care about SCRUM will not have the will to get better. And this has to be there at 100% to get a good improvement. The team is the only part which has to do the work. They know best how to improve things. If they do not want to get better, they only did not understand the advantages of how work could be. Maybe you could collect them at this point.</p>

<p><strong>Reason 4: Problems</strong></p>

<p>SCRUM shows you problems: Let’s see the process as a whole concept for this point. Introducing SCRUM is done fast. You have sprints, you have your Product-Backlog-Items or user stories etc., you work is organized, your team is organizing itself and so on.</p>

<p>But what the process really shows you are problems! It shows you where you have delays, where information are not where they should be etc. Let me clarify this: This is a good thing! You have a process which points you in the right direction. This is not bad, you should see it like “It can’t get easier to improve!”</p>

<p>If you use SCRUM as a whole without changing much of it SCRUM will show you your problems, your pain points. And SCRUM is useless if you have the opinion to change SCRUM just to hide or get rid of this pain points. This hurts sometimes! “Why do we have problems there? This worked well for years!” Well: Did it? You are planning your work right now and have an overview, you know where your product is and you have an interested team which does teamwork. And the paint point which came up worked well? For years? Ask yourself: Wasn’t this only a problem everybody learned to get along with? For years?</p>

<p>I think this is one of the best points SCRUM does for you. You are adapting a process and this process comes to you and shows you where your problems are. (For this knowledge you would normally pay a lot of money ;))</p>

<p>So: Do NOT get rid of pain points just by working around them, accepting them “as is” and telling everybody that this worked for years. Let SCRUM show you which things to solve. Give the process and yourself time to really figure out what the problem is. Maybe this takes 5, 10 or more sprints! But do not change main points of SCRUM and with this hide your problems. You would do SCRUM in the front and your old process in the back.</p>

<p><strong>Reason 5: Priorities</strong></p>

<p>Work is broken down in product-backlog-items or user stories and tasks. Whatever: You are working on things which have a priority. No matter what exactly this value is (0-100, 0-10, etc.) as a developer you have a picture what is more or less important. What does the customer want to see? Where do we have problems? What should we make better? This is also a kind of transparency which comes along automatically: You see which focus your stakeholders have on the software! Of course this can be discussed. But you can see it because of the priorities the PBIs are tagged with. This also helps you to manage your work.</p>

<p>Well, these are only five reasons I mentioned here. I could go further and further. But I can tell you: try it out! With every pros and cons you see in the beginning. Solve the problems, see the advantages of organizing your work agile, your software agile, to have priorities and so on. I am absolutely sure in the end you will love it and after a time you can give yourself more than only reasons why you love SCRUM as much as I do.</p>

<p>Regards</p>

<p>Fabian</p>

	  ]]></description>
	</item>


</channel>
</rss>
