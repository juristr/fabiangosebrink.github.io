<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>http://fabian-gosebrink.com</title>
   
   <link>http://offering.solutions</link>
   <description>Articles about Angular & ASP.NET</description>
   <language>en-us</language>
   <managingEditor> Fabian Gosebrink</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Consuming a REST API with Angular Http-Service in Typescript</title>
	  <link>//blog/articles/2016/02/01/consuming-a-rest-api-with-angular-http-service-in-typescript/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2016-02-01T12:23:00+01:00</pubDate>
	  <guid>//blog/articles/2016/02/01/consuming-a-rest-api-with-angular-http-service-in-typescript/</guid>
	  <description><![CDATA[
	     <p><strong>Updated to new syntax</strong></p>

<p>Hey,</p>

<p>with this blog pot I want to show you how to create a Dataservice to consume (not only) an ASP.NET REST API with the angular2 http module.</p>

<p>In my recent blog post <a href="http://offering.solutions/blog/articles/2015/12/03/getting-started-with-visual-studio-code-angularjs-and-typescript/">Getting started with Visual Studio Code, AngularJS and Typescript</a> I have already mentioned how to start and to install the complete angular2 environment with corresponding tools.</p>

<p>Now I want to show you an example dataservice to call your favourite API.</p>

<h3 id="configuration">Configuration</h3>

<p>Its always a good thing if you have your configuration seperated stored anywhere in your application. I always go for a file like “app.constants.ts” where I store all my values. If anything changes there, like a version of the api which is stored in the url or the endpoint/server whatever, I can do those changes immediatelly at one point.</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">Injectable</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>

<span class="err">@</span><span class="nx">Injectable</span><span class="p">()</span>
<span class="k">export</span> <span class="kr">class</span> <span class="nx">Configuration</span> <span class="p">{</span>
    <span class="k">public</span> <span class="nx">Server</span><span class="err">:</span> <span class="kr">string</span> <span class="o">=</span> <span class="s1">'http://localhost:5000/'</span><span class="p">;</span>
    <span class="k">public</span> <span class="nx">ApiUrl</span><span class="err">:</span> <span class="kr">string</span> <span class="o">=</span> <span class="s1">'api/'</span><span class="p">;</span>
    <span class="k">public</span> <span class="nx">ServerWithApiUrl</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">Server</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">ApiUrl</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>Notice the injectable attribute to generate the metadata to make the service available through DI in other modules.</p>

<blockquote>
  <p>You can read more about DI in Angular in this blog post <a href="http://blog.thoughtram.io/angular/2015/05/18/dependency-injection-in-angular-2.html">Dependency Injection in Angular</a></p>
</blockquote>

<p>Now we have this going we can generate our service:</p>

<h3 id="the-service">The Service</h3>

<p>First of all you have to create a module which only contains a service which is only responsible for calling an API with a specific endpoint.</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">Injectable</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Http</span><span class="p">,</span> <span class="nx">Response</span><span class="p">,</span> <span class="nx">Headers</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/http'</span><span class="p">;</span>
<span class="k">import</span> <span class="s1">'rxjs/add/operator/map'</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Observable</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'rxjs/Observable'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">MyTypedItem</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../models/MyTypedItem'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Configuration</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../app.constants'</span><span class="p">;</span>

<span class="err">@</span><span class="nx">Injectable</span><span class="p">()</span>
<span class="k">export</span> <span class="kr">class</span> <span class="nx">DataService</span> <span class="p">{</span>

    <span class="k">private</span> <span class="nx">actionUrl</span><span class="err">:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="k">private</span> <span class="nx">headers</span><span class="err">:</span> <span class="nx">Headers</span><span class="p">;</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">_http</span><span class="err">:</span> <span class="nx">Http</span><span class="p">,</span> <span class="k">private</span> <span class="nx">_configuration</span><span class="err">:</span> <span class="nx">Configuration</span><span class="p">)</span> <span class="p">{</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span> <span class="o">=</span> <span class="nx">_configuration</span><span class="p">.</span><span class="nx">ServerWithApiUrl</span> <span class="o">+</span> <span class="s1">'myItem/'</span><span class="p">;</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Headers</span><span class="p">();</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'Content-Type'</span><span class="p">,</span> <span class="s1">'application/json'</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'Accept'</span><span class="p">,</span> <span class="s1">'application/json'</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">GetAll</span> <span class="o">=</span> <span class="p">()</span><span class="err">:</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">MyTypedItem</span><span class="p">[]</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="na">response</span><span class="p">:</span> <span class="nx">Response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">MyTypedItem</span><span class="p">[]</span><span class="o">&gt;</span><span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
            <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">handleError</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">GetSingle</span> <span class="o">=</span> <span class="p">(</span><span class="na">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">MyTypedItem</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span> <span class="o">+</span> <span class="nx">id</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="na">response</span><span class="p">:</span> <span class="nx">Response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">MyTypedItem</span><span class="o">&gt;</span><span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
            <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">handleError</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">Add</span> <span class="o">=</span> <span class="p">(</span><span class="na">itemName</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">MyTypedItem</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nx">toAdd</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">ItemName</span><span class="p">:</span> <span class="nx">itemName</span> <span class="p">});</span>

        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span><span class="p">,</span> <span class="nx">toAdd</span><span class="p">,</span> <span class="p">{</span> <span class="na">headers</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">headers</span> <span class="p">})</span>
            <span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="na">response</span><span class="p">:</span> <span class="nx">Response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">MyTypedItem</span><span class="o">&gt;</span><span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
            <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">handleError</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">Update</span> <span class="o">=</span> <span class="p">(</span><span class="na">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="na">itemToUpdate</span><span class="p">:</span> <span class="nx">MyTypedItem</span><span class="p">):</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">MyTypedItem</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_http</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span> <span class="o">+</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">itemToUpdate</span><span class="p">),</span> <span class="p">{</span> <span class="na">headers</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">headers</span> <span class="p">})</span>
            <span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="na">response</span><span class="p">:</span> <span class="nx">Response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">MyTypedItem</span><span class="o">&gt;</span><span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
            <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">handleError</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">Delete</span> <span class="o">=</span> <span class="p">(</span><span class="na">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">Response</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_http</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span> <span class="o">+</span> <span class="nx">id</span><span class="p">)</span>
            <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">handleError</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="nx">handleError</span><span class="p">(</span><span class="na">error</span><span class="p">:</span> <span class="nx">Response</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">Observable</span><span class="p">.</span><span class="k">throw</span><span class="p">(</span><span class="nx">error</span><span class="p">.</span><span class="nx">json</span><span class="p">().</span><span class="nx">error</span> <span class="o">||</span> <span class="s1">'Server error'</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>This dataservice gets the configuration we just did and the HTTP-Service via DI. We included it over the new module-loading-syntax. Also notice the typed items we included and the configuration we have to pull in to make it available.</p>

<p>It is also important to tell the http-calls which header to use. “Application/Json” in this case.</p>

<p>Now you can include, inject and use this service to make http-calls to your API like this:</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">OnInit</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">DataService</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../services/dataService'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">MyTypedItem</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../models/MyTypedItem '</span><span class="p">;</span>

<span class="err">@</span><span class="nx">Component</span><span class="p">({</span>
    <span class="na">selector</span><span class="p">:</span> <span class="s1">'my-item-component'</span><span class="p">,</span>
    <span class="na">providers</span><span class="p">:</span> <span class="p">[</span><span class="nx">DataService</span><span class="p">],</span>
    <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'app/myItem/myItem.component.html'</span>
<span class="p">})</span>

<span class="k">export</span> <span class="kr">class</span> <span class="nx">MyItemComponent</span> <span class="k">implements</span> <span class="nx">OnInit</span> <span class="p">{</span>
    <span class="k">public</span> <span class="nx">myItems</span><span class="err">:</span> <span class="nx">MyTypedItem</span> <span class="p">[];</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">_dataService</span><span class="err">:</span> <span class="nx">DataService</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>

    <span class="nx">ngOnInit</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">getAllItems</span><span class="p">();</span>
    <span class="p">}</span>
    
    <span class="c1">//...</span>

    <span class="k">private</span> <span class="nx">getAllItems</span><span class="p">()</span><span class="err">:</span> <span class="k">void</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_dataService</span>
            <span class="p">.</span><span class="nx">GetAll</span><span class="p">()</span>
            <span class="p">.</span><span class="nx">subscribe</span><span class="p">((</span><span class="na">data</span><span class="p">:</span><span class="nx">MyTypedItem</span><span class="p">[])</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">myItems</span> <span class="o">=</span> <span class="nx">data</span><span class="p">,</span>
                <span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">),</span>
                <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Get all Items complete'</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>I think this should be basically it. Pay attention to the typed answer you get from the service</p>

<p><code class="highlighter-rouge">(response:MyTypedItem[]) =&gt;</code></p>

<p>and to the subsribe after calling the “GetAll”-Method from the service.</p>

<p>Hope you enjoyed it and a lot more: I hope this helps.</p>

<p>Bye</p>

<p>Fabian</p>

<h3 id="github">GitHub:</h3>

<p><a href="https://github.com/FabianGosebrink/ASPNETCore-Angular-SignalR-Typescript">Angular ASP.NET CORE Template With SignalR</a></p>

<p>or</p>

<p><a href="https://github.com/FabianGosebrink/ASPNET-ASPNETCore-Angular-Webpack/tree/master/AngularCLI">https://github.com/FabianGosebrink/ASPNET-ASPNETCore-Angular-Webpack/tree/master/AngularCLI</a></p>

<h3 id="links">Links:</h3>

<p><a href="https://auth0.com/blog/2015/05/14/creating-your-first-real-world-angular-2-app-from-authentication-to-calling-an-api-and-everything-in-between/">https://auth0.com/blog/2015/05/14/creating-your-first-real-world-angular-2-app-from-authentication-to-calling-an-api-and-everything-in-between/</a></p>

<p><a href="https://auth0.com/blog/2015/10/15/angular-2-series-part-3-using-http/">https://auth0.com/blog/2015/10/15/angular-2-series-part-3-using-http/</a></p>

<p><a href="https://auth0.com/blog/2015/09/17/angular-2-series-part-2-domain-models-and-dependency-injection/">https://auth0.com/blog/2015/09/17/angular-2-series-part-2-domain-models-and-dependency-injection/</a></p>

<p><a href="https://auth0.com/blog/2015/09/03/angular2-series-working-with-pipes/">https://auth0.com/blog/2015/09/03/angular2-series-working-with-pipes/</a></p>

<p><a href="https://angular.io/docs/ts/latest/guide/architecture.html">https://angular.io/docs/ts/latest/guide/architecture.html</a></p>

	  ]]></description>
	</item>

	<item>
	  <title>Talk bei den Microsoft Evolution Days in Zürich</title>
	  <link>//blog/articles/2015/11/12/talk-bei-den-microsoft-evolution-days-in-zurich/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2015-11-12T21:42:00+01:00</pubDate>
	  <guid>//blog/articles/2015/11/12/talk-bei-den-microsoft-evolution-days-in-zurich/</guid>
	  <description><![CDATA[
	     <p>Am 29. Oktober hielt ich einen Talk bei den Microsoft Evolution Days in Zürich, die Digicomp ausgerichtet hat. Ich habe einen <span id="snippet_meta" class="desc" contenteditable="true">Talk bei den Microsoft Evolution Days in Zürich</span> über AngularJs &amp; REST mit einer ASP.NET WebAPI gehalten. Die Folien gibts direkt bei <a href="http://digiblog.s3-eu-central-1.amazonaws.com/app/1446644382/30_agularjs-und-rest_fabian-gosebrink.pdf">Digicomp</a>. Alle Beispiele gibts auch auf <a href="https://github.com/FabianGosebrink">Github</a>.</p>

<blockquote>
  <p>Mein erster Vortrag als MVP :-)</p>
</blockquote>

<p>Früher hatten die Evolution Days keinen Developer-Track. Dieses Jahr war aber einer dabei und ich bin froh, dass ich eingeladen wurde. Zusammen mit <a href="https://twitter.com/mallibone">Mark Allibone</a> und Hanspeter Bornhauser habe ich einen von insgesamt 5 Vorträgen im Developertrack gehalten.</p>

<p>Das komplette Programm gibts <a href="https://www.digicomp.ch/media/misc/MicrosoftEvolutionDay-2015-DigicompZuerich-29.10.pdf">hier</a>.</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">.<a href="https://twitter.com/FabianGosebrink">@FabianGosebrink</a> about <a href="https://twitter.com/hashtag/angular?src=hash">#angular</a> and <a href="https://twitter.com/hashtag/webapi?src=hash">#webapi</a> at the <a href="https://twitter.com/hashtag/msevolutionday?src=hash">#msevolutionday</a> from <a href="https://twitter.com/DigicompCH">@digicompch</a> /cc <a href="https://twitter.com/Noser_Eng">@Noser_Eng</a> <a href="https://t.co/T73OdWRuiB">pic.twitter.com/T73OdWRuiB</a></p>&mdash; Mark Allibone (@mallibone) <a href="https://twitter.com/mallibone/status/659736379954495488">October 29, 2015</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>Natürlich bedanke ich mich bei Digicomp und Microsoft, dass ich auf dem Event reden durfte. Es hat Spass gemacht. Gerne wieder :-)</p>

<p>Hier ein Auszug aus den Folien:</p>

<p><img src="/assets/articles/wp-content/uploads/2015/11/Folie12.png" alt="Folie12" /></p>

<p>Ich denke es ist wichtig klarzustellen, dass “REST” nicht gleich “WebAPI” ist. REST ist eine Form, die ein Web-Service erfüllen kann. ASP.NET WebAPI ist eine Technologie, mit der man solche Services umsetzen kann. Das ist ein fundamentaler Unterschied.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/11/Folie13.png" alt="Folie13" /></p>

<p>Hier beschreibe ich eine klassische REST-API. Das PATCH-Attribut habe ich auf der nächsten Folie. Es ging also nicht vergessen. Jeder Link stellt eine eindeutige Aktion dar. Alle CRUDOperationen sind durch diese Links für eine Entität abgedeckt.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/11/Folie30.png" alt="Folie30" /></p>

<p>Diese Folie beschreibt wohl das, was AngularJS so mächtig macht. Das Framework bietet einen clientseitige Architektur mit Javascript (oder Typescript), die es ermöglicht komplexe Web-Apllikationen zu bauen.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/11/Folie41.png" alt="Folie41" />
<img src="/assets/articles/wp-content/uploads/2015/11/Folie44.png" alt="Folie44" /></p>

<p>“$scope” ist wohl das Wort, was bei vielen ein Erleichtern auslöst. Es entspricht etwa dem ViewModel, welches man schon von anderen Applikationsarten kennt. Hierauf kann man im AngularJS Funktionen und Werte definieren, die man dann von der View aus via DataBinding konsumieren kann.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/11/Folie59.png" alt="Folie59" /></p>

<p>Bis dahin</p>

<p>Fabian</p>

	  ]]></description>
	</item>

	<item>
	  <title>How to build a great RESTful Service</title>
	  <link>//blog/articles/2015/07/20/how-to-build-a-great-restful-service/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2015-07-20T21:13:00+02:00</pubDate>
	  <guid>//blog/articles/2015/07/20/how-to-build-a-great-restful-service/</guid>
	  <description><![CDATA[
	     <p>In this blogpost I want to get you an idea of how to build a great RESTful Service. The idea for this blogpost came after I spent a whole <a href="http://blog.noser.com/implementieren-von-paging-in-einer-asp-net-webapi-mitangularjs/">post</a> about implementing paging in a web API. Paging is a very important feature a REST API should offer. However, there are a lot more. Here I want to mention a few of them hoping to cover as much as you need to build great API’s ;-)</p>

<p>Before we dive deeper into what an API can do you may think that all this stuff can also be done on the client. But you do not know which kind of client in the future will consume your web API. This can be an intelligent client that can do all the stuff on client side. So why do you have to offer those features then? Because instead of an intelligent client this can also be a “stupid” client which does not support any features at all. And if it only supports simple http-calls it has to use the features you offer with your API. The more you offer, the better it is for those clients. Keep this in your mind during coding your API’s.</p>

<p><strong>Correct status codes</strong></p>

<p><em>Always</em> return the correct status codes in your web API. If you created a database entry, send the HTML-Code for “Created” (201). If something is forbidden send a different status code than for not authenticated and so on.</p>

<p>Modern web API’s are also consumed by applications which live in the internet (and not on a mobile device) like an Asp.Net MVC Application. They all rely on your status codes to get information about what was happening with their request. Moreover, you give them the chance to react to these codes accordingly.</p>

<p>So if you are handling exceptions, not authenticated states etc.: Always get clear information about what was happening to your client with status codes and messages.</p>

<p><strong>Paging</strong></p>

<p>On this point I want to refer to the blogpost I have already written. In addition to this I want to mention that the <em>pagination Header</em> should also be filled up with the link to the next page, the link to the last page, the current page size, the total pages, the current page etc.</p>

<p>Yes, you can solve this in a modern client like the one I did in the blogpost with AngularJS. However, for clients which do not support those features: These links are essential to get paging working! So do include them and thank me later. ;-)</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">paginationHeader</span> <span class="o">=</span> <span class="k">new</span>
<span class="p">{</span>
<span class="nx">totalCount</span> <span class="o">=</span> <span class="nx">myItems</span><span class="p">.</span><span class="nx">Count</span><span class="p">(),</span>
<span class="c1">//other Items here…</span>
<span class="p">};</span></code></pre></figure>

<p><strong>Datashaping</strong></p>

<p>Datashaping describes the possibility to strip the data you want to send to the client based on what the client was demanding.</p>

<p>If the client only demands the Id, maybe the time point and a description of the objects in a query your API should be able to handle this an only send the requested information.</p>

<p>*Example:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">https</span><span class="err">:</span><span class="c1">//myurl.com/api/test?fields=Id,Description,EntryDate</span></code></pre></figure>

<p>Of course, this should also be possible for child classes that are related to your parent class.</p>

<p>*Example:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">https</span><span class="err">:</span><span class="c1">//myurl.com/api/test?fields=Id,Description,EntryDate,ChildClass.Id,Childclass.Title</span></code></pre></figure>

<p>Yes, I know OData. Moreover, I love it! I really do. Again: Your API <em>must</em> give the client the opportunity to request only the data he wants to have. To achieve this web API should offer the data-shaping feature.</p>

<p>For this feature, I created a Nuget-Package and a Github-repository that can be downloaded and used.</p>

<p><strong>Sorting</strong></p>

<p>The client should also have the possibility to request the items he wants in a special order. Here think of ascending and descending order and this should be possible for every field on the request object the controller was built for. Ascending sort order should be the default while descending can be marked with an minus “-“ in the front of the field to sort after. This is usually a feature which you apply at the very end of your methods. Usually short before returning the data to the client.</p>

<p>Api:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">Get</span><span class="p">(</span><span class="err">…</span><span class="p">,</span> <span class="kt">string</span> <span class="n">sort</span> <span class="p">=</span> <span class="s">"Id"</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">//use the Sort-string
</span><span class="p">}</span></code></pre></figure>

<p>*Example: ´https://myurl.com/api/test?sort=Added´</p>

<p>Where “Added” is a Property of the receiving DTOs.</p>

<p><strong>Filtered Update</strong></p>

<p>A mostly forgotten HTTP verb in my opinion is the <em>Patch</em> verb that allows partial updates of an object. So sending the update back to the server (like a post/put action) the patch only has the fields to change and the corresponding values included. After this you can apply the new object to the existing one and update the entry in your database.</p>

<p>Example <a href="http://aspnet.codeplex.com/sourcecontrol/latest#Samples/WebApi/DeltaJsonDeserialization/DeltaJsonDeserialization.Server/Controllers/PatchController.cs">here</a> and <a href="http://www.asp.net/web-api/overview/odata-support-in-aspnet-web-api/odata-v4/create-an-odata-v4-endpoint">here</a>.</p>

<p><strong>Https</strong></p>

<p>Finally yet importantly it has to be mentioned to always use https to communicate with your server. All the data you are passing between your API and your clients has to be secure.</p>

<p><strong>Summing-up</strong></p>

<p>In the end building REST-APIs is great. You are very flexible choosing your clients. But always consider giving the client every possible mechanism to get, create, update and delete the data it neds. Thinking about this during the development of a RESTful-API may save you a lot of work later.</p>

	  ]]></description>
	</item>

	<item>
	  <title>ASP.NET WebAPI Datashaper to strip your json data</title>
	  <link>//blog/articles/2015/05/30/asp-net-webapi-datashaper-to-strip-your-json-data/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2015-05-30T18:23:00+02:00</pubDate>
	  <guid>//blog/articles/2015/05/30/asp-net-webapi-datashaper-to-strip-your-json-data/</guid>
	  <description><![CDATA[
	     <p>With this blogpost I want to introduce you the ASP.NET WebAPI Datashaper to strip your json data before sending it back to the client.</p>

<p>The Datashaper gives you the possibility to strip the data you want to send based on the query of the client if you can not use Odata for a reason.</p>

<p><a href="https://github.com/OfferingSolutions/OfferingSolutions-Datashaper">GitHub</a>
<a href="http://fabian-gosebrink.de/Projects/Datashaper">Project-Page</a>
<a href="http://www.nuget.org/packages/OfferingSolutions.DataShaper/">NuGet</a></p>

<p><a href="https://github.com/OfferingSolutions/OfferingSolutions-Datashaper-Demo">Demo</a></p>

<p>With this Nuget you can add the fields you want to receive in your request like:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">GET</span> <span class="o">/</span><span class="nx">api</span><span class="o">/</span><span class="nx">test</span><span class="p">?</span><span class="nx">fields</span><span class="o">=</span><span class="nx">Id</span><span class="p">,</span><span class="nx">Title</span><span class="p">,</span><span class="nb">Date</span></code></pre></figure>

<p>or</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">GET</span> <span class="o">/</span><span class="nx">api</span><span class="o">/</span><span class="nx">test</span><span class="p">?</span><span class="nx">fields</span><span class="o">=</span><span class="nx">Id</span><span class="p">,</span><span class="nx">Title</span><span class="p">,</span><span class="nb">Date</span><span class="p">,</span><span class="nx">ChildClasses</span><span class="p">.</span><span class="nx">Description</span><span class="p">,</span><span class="nx">ChildClasses</span><span class="p">.</span><span class="nx">Id</span> <span class="p">...</span></code></pre></figure>

<p>You only have to call</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="n">Datashaper</span><span class="p">.</span><span class="nf">CreateDataShapedObject</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">listOfFields</span><span class="p">)</span></code></pre></figure>

<p>in the end which is going to apply the list of Properties to your data.</p>

<p>This can be useful if you wnat to display a table of your data with only selected fields. You do not have to have every property from your model onto the client and display it. You only need specific fields which you can strip out with this package.</p>

<p>This is equivalent to the OData “$select”-Query option. But this package gives you the opportunity to get the same behaviour without using OData. But if you are interested you should take a look onto <a href="http://www.odata.org/">Odata</a>, too.</p>

<p>Here is an example</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="na">[Route("myroute")]</span>
<span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">Get</span><span class="p">(</span><span class="kt">string</span> <span class="n">fields</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">try</span>
    <span class="p">{</span>
        <span class="c1">//...
</span>        
        <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">listOfFields</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;();</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">fields</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">listOfFields</span> <span class="p">=</span> <span class="n">fields</span><span class="p">.</span><span class="nf">Split</span><span class="p">(</span><span class="sc">','</span><span class="p">).</span><span class="nf">ToList</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">MyItems</span><span class="p">&gt;</span> <span class="n">myItems</span> <span class="p">=</span> <span class="n">_repository</span><span class="p">.</span><span class="nf">GetMyItems</span><span class="p">();</span>

        <span class="c1">//...
</span>        
        <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">myItems</span>
            <span class="p">.</span><span class="nf">ToList</span><span class="p">()</span>
            <span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">Datashaper</span><span class="p">.</span><span class="nf">CreateDataShapedObject</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">listOfFields</span><span class="p">));</span>

        <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span><span class="p">)</span>
    <span class="p">{</span>
         <span class="k">return</span> <span class="nf">InternalServerError</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><img src="/assets/articles/wp-content/uploads/2015/05/datashaper_1.png" alt="ASP.NET WebAPI Datashaper to strip your json data" /></p>

<p><img src="/assets/articles/wp-content/uploads/2015/05/datashaper_2.png" alt="ASP.NET WebAPI Datashaper to strip your json data" /></p>

<p><img src="/assets/articles/wp-content/uploads/2015/05/datashaper_3.png" alt="ASP.NET WebAPI Datashaper to strip your json data" /></p>

<p><img src="/assets/articles/wp-content/uploads/2015/05/datashaper_4.png" alt="ASP.NET WebAPI Datashaper to strip your json data" /></p>

<p>Regards &amp; HTH</p>

<p>Fabian</p>

	  ]]></description>
	</item>


</channel>
</rss>
