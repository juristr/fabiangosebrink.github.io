<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>http://fabian-gosebrink.com</title>
   
   <link>http://offering.solutions</link>
   <description>Articles about Angular & ASP.NET</description>
   <language>en-us</language>
   <managingEditor> Fabian Gosebrink</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Moving your Angular application from SystemJS to Webpack</title>
	  <link>//blog/articles/2017/02/26/moving-from-systemjs-to-webpack-angular-2/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2017-02-26T16:46:00+01:00</pubDate>
	  <guid>//blog/articles/2017/02/26/moving-from-systemjs-to-webpack-angular-2/</guid>
	  <description><![CDATA[
	     <p>In this blogpost I want to show you how you can move from an existing Angular application using systemjs to an application with webpack.</p>

<p>Imagine the following application.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>app
├── // modules, components and so on
├── app.component.ts
├── app.component.html
├── app.module.ts
└── main.ts
...
systemjs.config.js
tsconfig.json
tslint.json
...
</code></pre>
</div>

<p>Because we want to get away from systemjs here we will first introduce a webpack.config.js which holds your configuration and which can handle all you files and stuff.</p>

<p>But before we do please install webpack and the webpack-dev-server first:</p>

<p><code class="highlighter-rouge">npm install webpack-dev-server webpack --save-dev</code></p>

<p>So now we can add a webpack.config.js. This is the file webpack is searching per default.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>app
├── // modules, components and so on
├── app.component.ts
├── app.component.html
├── app.module.ts
└── main.ts
...
systemjs.config.js
webpack.config.js // &lt;---
tsconfig.json
tslint.json
...
</code></pre>
</div>

<p>Of course you have to modify the config that it fits to your application. A structure of this could be useful:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>

    <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
        <span class="c1">// Here all your entry points from </span>
        <span class="c1">// your application are mentioned</span>
    <span class="p">},</span>

    <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
        <span class="c1">// Here we can specify the output</span>
    <span class="p">},</span>

    <span class="na">resolve</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">extensions</span><span class="p">:</span> <span class="c1">// mention the extensions webpack should take care of</span>
    <span class="p">},</span>

    <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">rules</span><span class="p">:</span> <span class="p">[</span>
            <span class="c1">// tell webpack HOW to react when a file is included in your application</span>
        <span class="p">]</span>
    <span class="p">},</span>

    <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
		<span class="c1">// finetune the behaviour of specific plugins</span>
    <span class="p">]</span>
<span class="p">};</span> </code></pre></figure>

<p>You can see an example here <a href="https://github.com/FabianGosebrink/ASPNETCore-Angular-Webpack-StarterTemplate/blob/master/src/ASPNETCoreAngularWebpackStarter/webpack.dev.js">webpack.dev.js</a></p>

<h2 id="adding-polyfills">Adding Polyfills</h2>

<p>To have your Angular application ready for handling polyfills you have to introduce another file <code class="highlighter-rouge">polyfills.ts</code> where you import all polyfills your application needs.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>app
├── // modules, components and so on
├── app.component.ts
├── app.component.html
├── app.module.ts
├── polyfills.ts // &lt;---
└── main.ts
...
systemjs.config.js
webpack.config.js
tsconfig.json
tslint.json
...
</code></pre>
</div>

<p>The file could look like this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">import</span> <span class="s1">'ie-shim'</span><span class="p">;</span> <span class="c1">// Internet Explorer 9 support.</span>

<span class="kr">import</span> <span class="s1">'core-js/es6/symbol'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/object'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/function'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/parse-int'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/parse-float'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/number'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/math'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/string'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/date'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/array'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/regexp'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/map'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/set'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/weak-map'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/weak-set'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/typed'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/reflect'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es7/reflect'</span><span class="p">;</span>

<span class="kr">import</span> <span class="s1">'zone.js/dist/zone'</span><span class="p">;</span></code></pre></figure>

<blockquote>
  <p>Notice that when you import things you also have to install them via npm which also should be reflected in you package.json</p>
</blockquote>

<h2 id="adding-third-party-dependencies">Adding Third-Party dependencies</h2>

<p>If you have to include external libs like jquery or bootstrap you can manage them in a seperate file called <code class="highlighter-rouge">vendor.ts</code>. After installing them via npm you can consume them here:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>app
├── // modules, components and so on
├── app.component.ts
├── app.component.html
├── app.module.ts
├── polyfills.ts
├── vendor.ts // &lt;---
└── main.ts
...
systemjs.config.js
webpack.config.js
tsconfig.json
tslint.json
...
</code></pre>
</div>

<p>Which could look like this</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">import</span> <span class="s1">'jquery/dist/jquery'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'bootstrap/dist/js/bootstrap'</span><span class="p">;</span>

<span class="kr">import</span> <span class="s1">'bootstrap/dist/css/bootstrap.css'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'../css/custom.css'</span><span class="p">;</span>

<span class="c1">// import everything else here!!!</span></code></pre></figure>

<blockquote>
  <p>You should include all your custom files here</p>
</blockquote>

<h2 id="delete-systemjsconfigjs">Delete systemjs.config.js</h2>

<p>You can now delete the systemjs.config.js because you do not need it anymore.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>app
├── // modules, components and so on
├── app.component.ts
├── app.component.html
├── app.module.ts
├── polyfills.ts
├── vendor.ts
└── main.ts
...
webpack.config.js
tsconfig.json
tslint.json
...
</code></pre>
</div>

<h2 id="entrypoints">Entrypoints</h2>

<p>Note that you now have three entrypoint for your application: <code class="highlighter-rouge">main.ts</code>, <code class="highlighter-rouge">vendor.ts</code> and <code class="highlighter-rouge">polyfills.ts</code>. Due to the fact that webpack is reading all you files and going through all imports importing what is included you have the possibility to:</p>

<p>give your webpack config all three entrypoint like this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
        <span class="s1">'app'</span><span class="p">:</span> <span class="s1">'./app/main.ts'</span><span class="p">,</span>
        <span class="s1">'vendor'</span><span class="p">:</span> <span class="s1">'./app/vendor.ts'</span><span class="p">,</span>
        <span class="s1">'polyfills'</span><span class="p">:</span> <span class="s1">'./app/polyfills.ts'</span><span class="p">,</span>
    <span class="p">},</span></code></pre></figure>

<p>or you import the two files in you main.ts like:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">import</span> <span class="s1">'./polyfills'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'./vendor'</span><span class="p">;</span>

<span class="kr">import</span> <span class="p">{</span> <span class="nx">platformBrowserDynamic</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">'@angular/platform-browser-dynamic'</span><span class="p">;</span>

<span class="kr">import</span> <span class="p">{</span> <span class="nx">AppModule</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">'./app.module'</span><span class="p">;</span>

<span class="nx">platformBrowserDynamic</span><span class="p">().</span><span class="nx">bootstrapModule</span><span class="p">(</span><span class="nx">AppModule</span><span class="p">);</span></code></pre></figure>

<p>and in your webpack.config.ts you only need one entrypoint then:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
        <span class="s1">'app'</span><span class="p">:</span> <span class="s1">'./app/main.ts'</span>
    <span class="p">},</span></code></pre></figure>

<h2 id="asking-for-the-environment-devprod">Asking for the environment (dev/prod)</h2>

<p>We will set the environment from the outside later. To consume it in your application we can simply ask for a variable like this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">env</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">env</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">require</span><span class="p">(</span><span class="err">`</span><span class="p">.</span><span class="o">/</span><span class="nx">webpack</span><span class="p">.</span><span class="nx">$</span><span class="p">{</span><span class="nx">env</span><span class="p">}.</span><span class="nx">js</span><span class="err">`</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>With this you can apply multiple ways of generating your output based on the given environment asking for the variable “NODE_ENV” which we will set up later in our scripts.</p>

<p>You can see an example here <a href="https://github.com/FabianGosebrink/ASPNETCore-Angular-Webpack-StarterTemplate/blob/master/src/ASPNETCoreAngularWebpackStarter/webpack.config.js">webpack.config.js</a></p>

<h2 id="triggering-it-from-the-npm-scripts">Triggering it from the npm scripts</h2>

<p>Now that we introduced webpack we can add the commands to our package.json like this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
    <span class="c1">//...</span>
    <span class="s2">"scripts"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"start"</span><span class="err">:</span> <span class="s2">"tsc &amp;&amp; webpack-dev-server --open"</span><span class="p">,</span>
        <span class="c1">// other scripts</span>
        <span class="s2">"build:dev"</span><span class="err">:</span> <span class="s2">"webpack --env=dev --progress --profile --colors"</span><span class="p">,</span>
        <span class="s2">"build:dist"</span><span class="err">:</span> <span class="s2">"webpack --env=prod --progress --profile --colors"</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="c1">//...</span>
<span class="p">}</span></code></pre></figure>

<p>Here we are setting the environment variable accordingly and start webpack with the <code class="highlighter-rouge">webpack</code> command</p>

<p>When you run <code class="highlighter-rouge">npm start</code> and have the correct configuration in your webpack &amp; package.json a browser should open up displaying your page while reloading if you change something.</p>

<p>Feel free to comment if I missed something.</p>

<p>Hope this helps and happy coding.</p>

	  ]]></description>
	</item>


</channel>
</rss>
