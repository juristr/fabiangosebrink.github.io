<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>http://fabian-gosebrink.com</title>
   
   <link>http://offering.solutions</link>
   <description>Articles about Angular & ASP.NET</description>
   <language>en-us</language>
   <managingEditor> Fabian Gosebrink</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Automatically reload typed configuration in ASP.NET Core</title>
	  <link>//blog/articles/2017/02/17/automatically-reload-typed-configuration-in-asp-net-core/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2017-02-17T22:31:00+01:00</pubDate>
	  <guid>//blog/articles/2017/02/17/automatically-reload-typed-configuration-in-asp-net-core/</guid>
	  <description><![CDATA[
	     <p>In this article I want to explore IOptionsSnapshot and show how to work with IOptionsSnapshot in ASP.NET Core 1.1.</p>

<p>We will use the dotnet cli to create a new project and configure it using the reload technique in combination with IOptionsSnapshot.</p>

<blockquote>
  <p>Make sure you are using at least ASP.NET Core 1.1</p>
</blockquote>

<p>Get started by creating a new folder where you want to work in, opening a console there and typing</p>

<p><code class="highlighter-rouge">dotnet new mvc</code> and <code class="highlighter-rouge">dotnet restore</code> to get the project in a starting position.</p>

<p>Then open up a console and type <code class="highlighter-rouge">code .</code> to start Visual Studio Code on the current level.</p>

<p>You should now see all the files and folders of your project. We can now go ahead and create a typed class which represents the configuration we want to work with. In this case this is just a file with a name property.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>Config
└── myConfig.json
Controllers
└── ...
Views
└── ...
wwwroot
└── ...
...
Program.cs
Startup.cs
</code></pre>
</div>

<p>myConfig.json</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">"Person"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"Firstname"</span> <span class="err">:</span> <span class="s2">"John Doe"</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>This leads us to the class</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">Person</span>  
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Firstname</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<div class="highlighter-rouge"><pre class="highlight"><code>Config
└── myConfig.json
ConfigModels
└── Person.cs
Controllers
└── ...
Views
└── ...
wwwroot
└── ...
...
Program.cs
Startup.cs
</code></pre>
</div>

<p>which represents our configuration in our application.</p>

<p>We have to modify our constructor of the Startup.cs file a bit to load this new file:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="nf">Startup</span><span class="p">(</span><span class="n">IHostingEnvironment</span> <span class="n">env</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ConfigurationBuilder</span><span class="p">()</span>
        <span class="p">.</span><span class="nf">SetBasePath</span><span class="p">(</span><span class="n">env</span><span class="p">.</span><span class="n">ContentRootPath</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="s">"appsettings.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">false</span><span class="p">,</span> <span class="n">reloadOnChange</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="err">$</span><span class="s">"appsettings.{env.EnvironmentName}.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">AddEnvironmentVariables</span><span class="p">();</span>
    <span class="n">Configuration</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<p>becomes to</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="nf">Startup</span><span class="p">(</span><span class="n">IHostingEnvironment</span> <span class="n">env</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ConfigurationBuilder</span><span class="p">()</span>
        <span class="p">.</span><span class="nf">SetBasePath</span><span class="p">(</span><span class="n">env</span><span class="p">.</span><span class="n">ContentRootPath</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="s">"appsettings.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">false</span><span class="p">,</span> <span class="n">reloadOnChange</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="err">$</span><span class="s">"appsettings.{env.EnvironmentName}.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="err">$</span><span class="s">"config/myConfig.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">false</span><span class="p">,</span> <span class="n">reloadOnChange</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">AddEnvironmentVariables</span><span class="p">();</span>
    <span class="n">Configuration</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<blockquote>
  <p>Pay attention to the <code class="highlighter-rouge">realoadOnChange: true</code> because that is what we are reaching out for</p>
</blockquote>

<p>So now that we loaded the file we need to add it to our configuration which is used in our app.</p>

<p>Lets do this by adding the statement in the <code class="highlighter-rouge">ConfigureServices</code>-Method:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...
</span>    <span class="n">services</span><span class="p">.</span><span class="n">Configure</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;(</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetSection</span><span class="p">(</span><span class="s">"Person"</span><span class="p">));</span>
<span class="p">}</span></code></pre></figure>

<p>Here we are mapping our values in JSON to a typed class called “Person”.</p>

<p>Now this configuration is available through dependency injection and we can use it in our controllers!</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">HomeController</span> <span class="p">:</span> <span class="n">Controller</span>  
<span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">Person</span> <span class="n">_person</span><span class="p">;</span>
    <span class="k">public</span> <span class="nf">HomeController</span><span class="p">(</span><span class="n">IOptionsSnapshot</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;</span> <span class="n">person</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_person</span> <span class="p">=</span> <span class="n">person</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<blockquote>
  <p>Pay attention to the “IOptionsSnapshot” we injected here which is different from the previous ASP.NET Core versions.</p>
</blockquote>

<p>Be sure to have the <code class="highlighter-rouge">"Microsoft.Extensions.Options": "1.1.0"</code> package installed and you are using ASP.NET Core 1.1.</p>

<p>We can now inject the <code class="highlighter-rouge">IOptionsSnapshot&lt;T&gt;</code> in our controller and use its value. For testing we save the Firstname in the ViewData displaying it afterwards.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">namespace</span> <span class="nn">WebApplication6.Controllers</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">HomeController</span> <span class="p">:</span> <span class="n">Controller</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">Person</span> <span class="n">_person</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">HomeController</span><span class="p">(</span><span class="n">IOptionsSnapshot</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;</span> <span class="n">person</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_person</span> <span class="p">=</span> <span class="n">person</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Index</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">ViewData</span><span class="p">[</span><span class="s">"FirstName"</span><span class="p">]</span> <span class="p">=</span> <span class="n">_person</span><span class="p">.</span><span class="n">Firstname</span><span class="p">;</span>
            <span class="k">return</span> <span class="nf">View</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Index.cshtml</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="p">&lt;</span><span class="n">h3</span><span class="p">&gt;</span><span class="err">@</span><span class="p">(</span><span class="n">ViewData</span><span class="p">[</span><span class="s">"FirstName"</span><span class="p">])&lt;/</span><span class="n">h3</span><span class="p">&gt;</span></code></pre></figure>

<p>If you now start the web application via <code class="highlighter-rouge">dotnet run</code> and you change the configuration without restarting the application, hit F5 to refresh the browser you see the new values.</p>

<p>Hope this helps anybody :-)</p>

<p>Fabian</p>

	  ]]></description>
	</item>

	<item>
	  <title>The difference between AddMvc() and AddMvcCore()</title>
	  <link>//blog/articles/2017/02/07/difference-between-addmvc-addmvcore/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2017-02-07T20:49:00+01:00</pubDate>
	  <guid>//blog/articles/2017/02/07/difference-between-addmvc-addmvcore/</guid>
	  <description><![CDATA[
	     <p>In this blogpost I want to show you difference between the ASP.NET Core methods <code class="highlighter-rouge">AddMvc()</code> and <code class="highlighter-rouge">AddMvcCore()</code> when working with ASP.NET Core.</p>

<p><a href="https://github.com/FabianGosebrink/ASPNETCore-WebAPI-Sample">ASPNETCore-WebAPI-Sample</a></p>

<h3 id="startupcs">Startup.cs</h3>

<p>When creating an ASP.NET Core WebAPI you often see a Startup.cs file to configure your services and configure your pipeline. Thats what the methods <code class="highlighter-rouge">ConfigureServices(IServiceCollection services)</code> and <code class="highlighter-rouge">Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)</code> are for.</p>

<p><code class="highlighter-rouge">ConfigureServices</code> is preparing your services for being used as you configure them.</p>

<blockquote>
  <p>Here is also the place to add dependency injection, but that is another seperate topic</p>
</blockquote>

<p>You can have a lot of configuration in here. But we want to focus on the main point: Adding the mvc framework.</p>

<p>When starting with “File” –&gt; “New Project” in Visual Studio the default setting in the method is <code class="highlighter-rouge">AddMvc()</code>. And it works straight away. Lets take a look:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...
</span>    <span class="n">services</span><span class="p">.</span><span class="nf">AddMvc</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<p>When now an API with Controllers kicks in we can consume it like normal.</p>

<p><code class="highlighter-rouge">dotnet run</code> makes the API work on <code class="highlighter-rouge">localhost:5000</code></p>

<p><code class="highlighter-rouge">GET localhost:5000/api/house</code></p>

<p>brings</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">[</span>
  <span class="p">{</span>
    <span class="s2">"id"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="s2">"street"</span><span class="p">:</span> <span class="s2">"Street1"</span><span class="p">,</span>
    <span class="s2">"city"</span><span class="p">:</span> <span class="s2">"Town1"</span><span class="p">,</span>
    <span class="s2">"zipCode"</span><span class="p">:</span> <span class="mi">1234</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="s2">"id"</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="s2">"street"</span><span class="p">:</span> <span class="s2">"Street2"</span><span class="p">,</span>
    <span class="s2">"city"</span><span class="p">:</span> <span class="s2">"Town2"</span><span class="p">,</span>
    <span class="s2">"zipCode"</span><span class="p">:</span> <span class="mi">1234</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="s2">"id"</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
    <span class="s2">"street"</span><span class="p">:</span> <span class="s2">"Street3"</span><span class="p">,</span>
    <span class="s2">"city"</span><span class="p">:</span> <span class="s2">"Town3"</span><span class="p">,</span>
    <span class="s2">"zipCode"</span><span class="p">:</span> <span class="mi">1234</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="s2">"id"</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
    <span class="s2">"street"</span><span class="p">:</span> <span class="s2">"Street4"</span><span class="p">,</span>
    <span class="s2">"city"</span><span class="p">:</span> <span class="s2">"Town4"</span><span class="p">,</span>
    <span class="s2">"zipCode"</span><span class="p">:</span> <span class="mi">1234</span>
  <span class="p">}</span>
<span class="p">]</span></code></pre></figure>

<p>What happens, if we change <code class="highlighter-rouge">AddMvc()</code> to <code class="highlighter-rouge">AddMvcCore()</code>?</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...
</span>    <span class="n">services</span><span class="p">.</span><span class="nf">AddMvcCore</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<p>Lets run the same command again:</p>

<p><code class="highlighter-rouge">GET localhost:5000/api/house</code></p>

<p>now brings a <code class="highlighter-rouge">406</code> Error saying “Not Acceptable”.</p>

<p>If we check the console which hosts the webapi we see more information about this error:</p>

<blockquote>
  <p>warn: Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor[1]No output formatter was found for content type ‘’ to write the response.</p>
</blockquote>

<p>So we deactivated something we better should have not deactivated ;-).</p>

<p>The error says that we do not have an output formatter which can parse our output. Even if we add an accept header in the request like <code class="highlighter-rouge">Accept: application/json</code> we would get the same error message, because the server does not know how ot handle the respose.</p>

<p>Lets take a closer look on what is the real difference between <code class="highlighter-rouge">AddMvc()</code> and <code class="highlighter-rouge">AddMvcCore()</code>.</p>

<p>Due to the fact that the framework is open source we can take a look at the sources:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">static</span> <span class="n">IMvcBuilder</span> <span class="nf">AddMvc</span><span class="p">(</span><span class="k">this</span> <span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">services</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="nf">nameof</span><span class="p">(</span><span class="n">services</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">services</span><span class="p">.</span><span class="nf">AddMvcCore</span><span class="p">();</span>

    <span class="n">builder</span><span class="p">.</span><span class="nf">AddApiExplorer</span><span class="p">();</span>
    <span class="n">builder</span><span class="p">.</span><span class="nf">AddAuthorization</span><span class="p">();</span>

    <span class="nf">AddDefaultFrameworkParts</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">PartManager</span><span class="p">);</span>

    <span class="c1">// Order added affects options setup order
</span>
    <span class="c1">// Default framework order
</span>    <span class="n">builder</span><span class="p">.</span><span class="nf">AddFormatterMappings</span><span class="p">();</span>
    <span class="n">builder</span><span class="p">.</span><span class="nf">AddViews</span><span class="p">();</span>
    <span class="n">builder</span><span class="p">.</span><span class="nf">AddRazorViewEngine</span><span class="p">();</span>
    <span class="n">builder</span><span class="p">.</span><span class="nf">AddCacheTagHelper</span><span class="p">();</span>

    <span class="c1">// +1 order
</span>    <span class="n">builder</span><span class="p">.</span><span class="nf">AddDataAnnotations</span><span class="p">();</span> <span class="c1">// +1 order
</span>
    <span class="c1">// +10 order
</span>    <span class="n">builder</span><span class="p">.</span><span class="nf">AddJsonFormatters</span><span class="p">();</span>

    <span class="n">builder</span><span class="p">.</span><span class="nf">AddCors</span><span class="p">();</span>

    <span class="k">return</span> <span class="k">new</span> <span class="nf">MvcBuilder</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">,</span> <span class="n">builder</span><span class="p">.</span><span class="n">PartManager</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>From <a href="https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc/MvcServiceCollectionExtensions.cs#L25-L56">MvcServiceCollectionExtensions.cs</a> tells us, that we are adding the complete MVC Services you need to get the whole MVC functionality.</p>

<p>It is adding Authorization, the RazorViewEngine and the JsonFormatters we need to get our output going. And most interesting it is also calling the <code class="highlighter-rouge">AddMvcCore()</code> method itself.</p>

<p>So if we use the <code class="highlighter-rouge">AddMvc()</code> method we got the ability to render view with razor and so on.</p>

<p>Lets have a look at <code class="highlighter-rouge">AddMvcCore()</code> on the other hand:</p>

<p><a href="https://github.com/aspnet/Mvc/blob/48546dbb28ee762014f49caf052dc9c8a01eec3a/src/Microsoft.AspNetCore.Mvc.Core/DependencyInjection/MvcCoreServiceCollectionExtensions.cs#L37-L54">MvcCoreServiceCollectionExtensions.cs</a></p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">static</span> <span class="n">IMvcCoreBuilder</span> <span class="nf">AddMvcCore</span><span class="p">(</span><span class="k">this</span> <span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">services</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="nf">nameof</span><span class="p">(</span><span class="n">services</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="kt">var</span> <span class="n">partManager</span> <span class="p">=</span> <span class="nf">GetApplicationPartManager</span><span class="p">(</span><span class="n">services</span><span class="p">);</span>
    <span class="n">services</span><span class="p">.</span><span class="nf">TryAddSingleton</span><span class="p">(</span><span class="n">partManager</span><span class="p">);</span>

    <span class="nf">ConfigureDefaultFeatureProviders</span><span class="p">(</span><span class="n">partManager</span><span class="p">);</span>
    <span class="nf">ConfigureDefaultServices</span><span class="p">(</span><span class="n">services</span><span class="p">);</span>
    <span class="nf">AddMvcCoreServices</span><span class="p">(</span><span class="n">services</span><span class="p">);</span>

    <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">MvcCoreBuilder</span><span class="p">(</span><span class="n">services</span><span class="p">,</span> <span class="n">partManager</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">builder</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>This method is a lot shorter and only adding the basic things to get started. But both methods are returning an IMvcCoreBuilder.
Interesting is the <code class="highlighter-rouge">AddMvcCoreServices(services);</code> method which is adding the ability to return FileContents, RedirectToRouteResults, ActionResolvers, use Controllers, use routing and so on. Really basic functionality.</p>

<p>So when using <code class="highlighter-rouge">AddMvcCore()</code> we have to add everything by ourselves. This means, that we only have in our application what we really want and for example do not include the razor functionality which we do not need anyway.</p>

<p>Now that we know the difference between those two methods: How can we get our webapi going again? We still have the error and we can not return any data.</p>

<p>We can fix that by simply telling ASP.NET that it should use JsonFormatters like</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
	<span class="c1">// ...
</span>	
	<span class="c1">// Add framework services.
</span>	<span class="n">services</span><span class="p">.</span><span class="nf">AddMvcCore</span><span class="p">().</span><span class="nf">AddJsonFormatters</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<p>If we now call our</p>

<p><code class="highlighter-rouge">GET localhost:5000/api/house</code></p>

<p>again we should see the output as json like we expected it to be.</p>

<p>I hope this clarified a bit what is the main difference between AddMvc() and AddMvcCore().</p>

<p>Best regards</p>

<p>Fabian</p>

<h4 id="links">Links</h4>

<p><a href="http://stackoverflow.com/questions/40097229/when-i-develop-asp-net-core-mvc-which-service-should-i-use-addmvc-or-addmvccor">When I develop ASP.NET Core MVC, which service should I use? AddMvc or AddMvcCore?</a></p>

<p><a href="https://github.com/aspnet/Mvc/blob/48546dbb28ee762014f49caf052dc9c8a01eec3a/src/Microsoft.AspNetCore.Mvc.Core/DependencyInjection/MvcCoreServiceCollectionExtensions.cs">MvcCoreServiceCollectionExtensions.cs</a></p>

<p><a href="https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc/MvcServiceCollectionExtensions.cs">MvcServiceCollectionExtensions.cs</a></p>

	  ]]></description>
	</item>

	<item>
	  <title>How to set up Angular and Webpack in Visual Studio with ASP.NET Core</title>
	  <link>//blog/articles/2016/08/27/how-to-set-up-angular-2-and-webpack-in-visual-studio-with-asp-net-core/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2016-08-27T16:58:00+02:00</pubDate>
	  <guid>//blog/articles/2016/08/27/how-to-set-up-angular-2-and-webpack-in-visual-studio-with-asp-net-core/</guid>
	  <description><![CDATA[
	     <p>With this blogpost I want to show an example of how to set up Angular and Webpack in Visual Studio with ASP.NET Core ready for dev and production builds.</p>

<blockquote>
  <p>See also my latest article <a href="http://offering.solutions/blog/articles/2017/02/08/angular-2-ahead-of-time-aot-compilation-lazy-loading-treeshaking-webpack/">Angular Ahead Of Time (AoT) compilation, lazy loading and treeshaking with webpack</a></p>
</blockquote>

<p>If you read this until the end you will have a picture how to enable webpack and webpack-dev-server with npm and how to use webpack to bundle your angular application and inject files into index.html for your web application.</p>

<p>I had this topic already with my colleague <a href="https://github.com/damienbod">DamienBod</a>
<a href="https://github.com/damienbod/Angular2WebpackVisualStudio">here</a> and a StarterTemplate <a href="https://github.com/FabianGosebrink/ASPNETCore-Angular-StarterTemplate">here</a> (which is using system.js as bootstrapper for your application), but this post is more to show how we get there and which steps you should take to get things going. For Damien and me this was a bit confusing in the beginning so this is the guide how we started actually. I hope you like reading it as much as I liked writing it.</p>

<p>Find the code here:</p>

<p><a href="https://github.com/FabianGosebrink/ASPNET-Core-Angular2-Webpack-StarterTemplate">https://github.com/FabianGosebrink/ASPNET-Core-Angular2-Webpack-StarterTemplate</a></p>

<h3 id="the-new-project">The new project</h3>

<p>Select “File” –&gt; “New Project”</p>

<p><img src="/assets/articles/wp-content/uploads/2016/08/Clipboard01.jpg" alt="How to set up Angular 2 and Webpack in Visual Studio with ASP.NET Core" /></p>

<p>And create a new project. In this case we name it “Angular2WebpackStarter”. After creating you can take the empty template like this:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/08/Clipboard02.jpg" alt="How to set up Angular 2 and Webpack in Visual Studio with ASP.NET Core" /></p>

<p>Make sure you have installed the latest typescript nuget package because we will need it later to work with angular2 and visual studio 2015. A Resharper in the latest version also cannot be a mistake ;)</p>

<h3 id="add-the-necessary-files-and-folders">Add the necessary files and folders</h3>

<p>The next step is to add the files and folders which are needed to keep your application structured and organized.</p>

<p>Add a new folder in your solution and call it “Angular2app”. This where all the client related dependencies are stored and being “compiled” and transferred to the wwwroot folder later on.</p>

<p>Next, add these files to your project and fill it with this data:</p>

<p><strong>package.json</strong>
Your npm file related to your project. It keeps als dependencies and everything for your client.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">"name"</span><span class="err">:</span> <span class="s2">"aspnetcoreangularwebpackstarter"</span><span class="p">,</span>
  <span class="s2">"version"</span><span class="err">:</span> <span class="s2">"0.0.0"</span><span class="p">,</span>
  <span class="s2">"license"</span><span class="err">:</span> <span class="s2">"MIT"</span><span class="p">,</span>
  <span class="s2">"scripts"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"ngc"</span><span class="err">:</span> <span class="s2">"ngc -p ./tsconfig-aot.json"</span><span class="p">,</span>
    <span class="s2">"start"</span><span class="err">:</span> <span class="s2">"tsc &amp;&amp; npm run startWebpackDevServer"</span><span class="p">,</span>
    <span class="s2">"startWebpackDevServer"</span><span class="err">:</span> <span class="s2">"webpack-dev-server --inline --progress --port 8080"</span><span class="p">,</span>
    <span class="s2">"build"</span><span class="err">:</span> <span class="s2">"SET NODE_ENV=development &amp;&amp; webpack -d --color &amp;&amp; dotnet run"</span><span class="p">,</span>
    <span class="s2">"buildProduction"</span><span class="err">:</span> <span class="s2">"npm run ngc &amp;&amp; SET NODE_ENV=production &amp;&amp; webpack -d --color"</span><span class="p">,</span>
    <span class="s2">"lint"</span><span class="err">:</span> <span class="s2">"tslint ./angularApp/**/*.ts -t verbose"</span><span class="p">,</span>
    <span class="s2">"tsc"</span><span class="err">:</span> <span class="s2">"tsc"</span><span class="p">,</span>
    <span class="s2">"tsc:w"</span><span class="err">:</span> <span class="s2">"tsc -w"</span>
  <span class="p">},</span>
  <span class="s2">"keywords"</span><span class="err">:</span> <span class="p">[],</span>
  <span class="s2">"author"</span><span class="err">:</span> <span class="s2">"Fabian Gosebrink"</span><span class="p">,</span>
  <span class="s2">"dependencies"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"@angular/common"</span><span class="err">:</span> <span class="s2">"~4.0.1"</span><span class="p">,</span>
    <span class="s2">"@angular/compiler"</span><span class="err">:</span> <span class="s2">"~4.0.1"</span><span class="p">,</span>
    <span class="s2">"@angular/core"</span><span class="err">:</span> <span class="s2">"~4.0.1"</span><span class="p">,</span>
    <span class="s2">"@angular/forms"</span><span class="err">:</span> <span class="s2">"~4.0.1"</span><span class="p">,</span>
    <span class="s2">"@angular/http"</span><span class="err">:</span> <span class="s2">"~4.0.1"</span><span class="p">,</span>
    <span class="s2">"@angular/platform-browser"</span><span class="err">:</span> <span class="s2">"~4.0.1"</span><span class="p">,</span>
    <span class="s2">"@angular/platform-browser-dynamic"</span><span class="err">:</span> <span class="s2">"~4.0.1"</span><span class="p">,</span>
    <span class="s2">"@angular/router"</span><span class="err">:</span> <span class="s2">"~4.0.1"</span><span class="p">,</span>
    <span class="s2">"@angular/upgrade"</span><span class="err">:</span> <span class="s2">"~4.0.1"</span><span class="p">,</span>
    <span class="s2">"angular-in-memory-web-api"</span><span class="err">:</span> <span class="s2">"0.3.1"</span><span class="p">,</span>
    <span class="s2">"core-js"</span><span class="err">:</span> <span class="s2">"2.4.1"</span><span class="p">,</span>
    <span class="s2">"reflect-metadata"</span><span class="err">:</span> <span class="s2">"0.1.10"</span><span class="p">,</span>
    <span class="s2">"rxjs"</span><span class="err">:</span> <span class="s2">"5.2.1-smooth"</span><span class="p">,</span>
    <span class="s2">"zone.js"</span><span class="err">:</span> <span class="s2">"0.8.5"</span><span class="p">,</span>
    <span class="s2">"@angular/compiler-cli"</span><span class="err">:</span> <span class="s2">"~4.0.1"</span><span class="p">,</span>
    <span class="s2">"@angular/platform-server"</span><span class="err">:</span> <span class="s2">"~4.0.1"</span><span class="p">,</span>
    <span class="s2">"bootstrap"</span><span class="err">:</span> <span class="s2">"^3.3.7"</span><span class="p">,</span>
    <span class="s2">"ie-shim"</span><span class="err">:</span> <span class="s2">"~0.1.0"</span><span class="p">,</span>
    <span class="s2">"jquery"</span><span class="err">:</span> <span class="s2">"^3.1.1"</span><span class="p">,</span>
    <span class="s2">"angular2-toaster"</span><span class="err">:</span> <span class="s2">"^3.0.1"</span><span class="p">,</span>
    <span class="s2">"ng2-slim-loading-bar"</span><span class="err">:</span> <span class="s2">"^2.4.0"</span>
  <span class="p">},</span>
  <span class="s2">"devDependencies"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"@types/jasmine"</span><span class="err">:</span> <span class="s2">"^2.5.47"</span><span class="p">,</span>
    <span class="s2">"@types/node"</span><span class="err">:</span> <span class="s2">"7.0.12"</span><span class="p">,</span>
    <span class="s2">"angular-router-loader"</span><span class="err">:</span> <span class="s2">"^0.6.0"</span><span class="p">,</span>
    <span class="s2">"angular2-template-loader"</span><span class="err">:</span> <span class="s2">"^0.6.2"</span><span class="p">,</span>
    <span class="s2">"awesome-typescript-loader"</span><span class="err">:</span> <span class="s2">"^3.1.2"</span><span class="p">,</span>
    <span class="s2">"canonical-path"</span><span class="err">:</span> <span class="s2">"0.0.2"</span><span class="p">,</span>
    <span class="s2">"concurrently"</span><span class="err">:</span> <span class="s2">"^3.4.0"</span><span class="p">,</span>
    <span class="s2">"http-server"</span><span class="err">:</span> <span class="s2">"^0.9.0"</span><span class="p">,</span>
    <span class="s2">"ie-shim"</span><span class="err">:</span> <span class="s2">"^0.1.0"</span><span class="p">,</span>
    <span class="s2">"jquery"</span><span class="err">:</span> <span class="s2">"^3.2.1"</span><span class="p">,</span>
    <span class="s2">"json-loader"</span><span class="err">:</span> <span class="s2">"^0.5.4"</span><span class="p">,</span>
    <span class="s2">"lite-server"</span><span class="err">:</span> <span class="s2">"^2.3.0"</span><span class="p">,</span>
    <span class="s2">"lodash"</span><span class="err">:</span> <span class="s2">"^4.17.4"</span><span class="p">,</span>
    <span class="s2">"node-sass"</span><span class="err">:</span> <span class="s2">"^4.5.2"</span><span class="p">,</span>
    <span class="s2">"protractor"</span><span class="err">:</span> <span class="s2">"~5.1.1"</span><span class="p">,</span>
    <span class="s2">"raw-loader"</span><span class="err">:</span> <span class="s2">"^0.5.1"</span><span class="p">,</span>
    <span class="s2">"rimraf"</span><span class="err">:</span> <span class="s2">"^2.6.1"</span><span class="p">,</span>
    <span class="s2">"source-map-loader"</span><span class="err">:</span> <span class="s2">"^0.2.1"</span><span class="p">,</span>
    <span class="s2">"style-loader"</span><span class="err">:</span> <span class="s2">"^0.16.1"</span><span class="p">,</span>
    <span class="s2">"ts-helpers"</span><span class="err">:</span> <span class="s2">"^1.1.2"</span><span class="p">,</span>
    <span class="s2">"tslint"</span><span class="err">:</span> <span class="s2">"^5.0.0"</span><span class="p">,</span>
    <span class="s2">"typescript"</span><span class="err">:</span> <span class="s2">"~2.2.2"</span><span class="p">,</span>
  <span class="p">}</span>
<span class="p">,</span> <span class="s2">"-vs-binding"</span><span class="err">:</span><span class="p">{</span><span class="s2">"BeforeBuild"</span><span class="err">:</span><span class="p">[</span><span class="s2">"buildProduction"</span><span class="p">]}</span>
<span class="p">}</span></code></pre></figure>

<p><strong>tsconfig.json</strong></p>

<p>Is configuring your tsc compiler. Whenever your run the “tsc” command from the commandline it will be taken as configuration for the typescript-compiler.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">"compilerOptions"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"target"</span><span class="err">:</span> <span class="s2">"es5"</span><span class="p">,</span>
    <span class="s2">"module"</span><span class="err">:</span> <span class="s2">"es2015"</span><span class="p">,</span>
    <span class="s2">"moduleResolution"</span><span class="err">:</span> <span class="s2">"node"</span><span class="p">,</span>
    <span class="s2">"sourceMap"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"emitDecoratorMetadata"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"experimentalDecorators"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"lib"</span><span class="err">:</span> <span class="p">[</span>
      <span class="s2">"es2015"</span><span class="p">,</span>
      <span class="s2">"dom"</span>
    <span class="p">],</span>
    <span class="s2">"noImplicitAny"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"suppressImplicitAnyIndexErrors"</span><span class="err">:</span> <span class="kc">true</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h3 id="fill-the-angular2app-folder">Fill the angular2app-folder</h3>

<p>Next we are going to fill the angular2 app folder. Here we are going to be lazy. We are taking the <a href="https://github.com/angular/quickstart">quickstart repo from angular.io</a> and copy the files we need form there. For the sake of simplicity we will only take the <a href="https://github.com/angular/quickstart/blob/master/src/app/">app.module</a> to get things going. To be structured its best you create an app folder inside to place your code there.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/08/Zwischenablage02.jpg" alt="Zwischenablage02" /></p>

<p>But to start we need an index.html. And for webpack to be prepared we need an entrypoint for the polyfills and the vendor files we need for our app. Lets add these files.</p>

<p>index.html</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">title</span><span class="o">&gt;</span><span class="nx">ASP</span><span class="p">.</span><span class="nx">NET</span> <span class="nx">Core</span> <span class="nx">Angular</span> <span class="nx">Webpack</span> <span class="nx">Demo</span><span class="o">&lt;</span><span class="sr">/title</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="nx">meta</span> <span class="nx">charset</span><span class="o">=</span><span class="nx">UTF</span><span class="o">-</span><span class="mi">8</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">meta</span> <span class="nx">name</span><span class="o">=</span><span class="nx">viewport</span> <span class="nx">content</span><span class="o">=</span><span class="s2">"width=device-width,initial-scale=1"</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="sr">/head</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">my</span><span class="o">-</span><span class="nx">app</span><span class="o">&gt;</span><span class="nx">Loading</span><span class="p">...</span><span class="o">&lt;</span><span class="sr">/my-app</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/body</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/html&gt;</span></code></pre></figure>

<blockquote>
  <p>Note that we include <strong>nothing</strong> here yet. This is on purpose. Read further… :)</p>
</blockquote>

<p>I reduced the vendor.ts and polyfills.ts to store only the things we need</p>

<p>polyfills.ts</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">import</span> <span class="s1">'ie-shim'</span><span class="p">;</span> <span class="c1">// Internet Explorer 9 support.</span>
<span class="kr">import</span> <span class="s1">'zone.js/dist/zone'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'reflect-metadata'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/symbol'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/object'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/function'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/parse-int'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/parse-float'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/number'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/math'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/string'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/date'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/array'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/regexp'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/map'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/set'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/weak-map'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/weak-set'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/typed'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/reflect'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es7/reflect'</span><span class="p">;</span></code></pre></figure>

<p>vendor.ts</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">import</span> <span class="s1">'jquery/dist/jquery'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'bootstrap/dist/js/bootstrap'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'bootstrap/dist/css/bootstrap.css'</span><span class="p">;</span>

<span class="kr">import</span> <span class="s1">'angular2-toaster/toaster.css'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'angular2-toaster/angular2-toaster'</span><span class="p">;</span>

<span class="kr">import</span> <span class="s1">'ng2-slim-loading-bar'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'ng2-slim-loading-bar/style.css'</span><span class="p">;</span></code></pre></figure>

<p>Why did we all this and if the wwwroot-folder is the one to be served to the client…why are we doing all this?</p>

<p>This is where webpack comes into play. We will configure webpack now to build our application into the wwwroot folder. Let’s do this…</p>

<p>Lets add a webpack.config.js file to the root of the project. (Make sure you have the <a href="https://visualstudiogallery.msdn.microsoft.com/5497fd10-b1ba-474c-8991-1438ae47012a">WebPack Task Runner Extension</a> installed) .</p>

<p>So…you added the file: Paste the following content:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">ExtractTextPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'extract-text-webpack-plugin'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'webpack'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">HtmlWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'html-webpack-plugin'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">CleanWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'clean-webpack-plugin'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'path'</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
        <span class="s1">'app'</span><span class="p">:</span> <span class="s1">'./angularApp/app/main.ts'</span>
    <span class="p">},</span>
    <span class="na">devtool</span><span class="p">:</span> <span class="s1">'source-map'</span><span class="p">,</span>
    <span class="na">performance</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">hints</span><span class="p">:</span> <span class="kc">false</span>
    <span class="p">},</span>
    <span class="na">resolve</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">extensions</span><span class="p">:</span> <span class="p">[</span><span class="s1">'.ts'</span><span class="p">,</span> <span class="s1">'.js'</span><span class="p">,</span> <span class="s1">'.json'</span><span class="p">,</span> <span class="s1">'.css'</span><span class="p">,</span> <span class="s1">'.scss'</span><span class="p">,</span> <span class="s1">'.html'</span><span class="p">]</span>
    <span class="p">},</span>
    <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">path</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'wwwroot'</span><span class="p">),</span>
        <span class="na">filename</span><span class="p">:</span> <span class="s1">'js/[name].bundle.js'</span>
    <span class="p">},</span>

    <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">rules</span><span class="p">:</span> <span class="p">[</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">ts$/</span><span class="p">,</span>
                <span class="na">loaders</span><span class="p">:</span> <span class="p">[</span>
                    <span class="s1">'awesome-typescript-loader'</span><span class="p">,</span>
                    <span class="s1">'angular2-template-loader'</span>
                <span class="p">]</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">html$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'html-loader'</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.(</span><span class="sr">png|jpg|gif|ico|woff|woff2|ttf|svg|eot</span><span class="se">)</span><span class="sr">$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'file-loader?name=assets/[name].[ext]'</span><span class="p">,</span>
            <span class="p">},</span>

            <span class="c1">// Load css files which are required in vendor.ts</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">css$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="nx">ExtractTextPlugin</span><span class="p">.</span><span class="nx">extract</span><span class="p">({</span>
                    <span class="na">fallbackLoader</span><span class="p">:</span> <span class="s2">"style-loader"</span><span class="p">,</span>
                    <span class="na">loader</span><span class="p">:</span> <span class="s2">"css-loader"</span>
                <span class="p">})</span>
            <span class="p">}</span>
        <span class="p">]</span>
    <span class="p">},</span>
    <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
        <span class="k">new</span> <span class="nx">ExtractTextPlugin</span><span class="p">(</span><span class="s1">'css/[name].bundle.css'</span><span class="p">),</span>
        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">CommonsChunkPlugin</span><span class="p">({</span>
            <span class="na">name</span><span class="p">:</span> <span class="p">[</span><span class="s1">'app'</span><span class="p">,</span> <span class="s1">'vendor'</span><span class="p">,</span> <span class="s1">'polyfills'</span><span class="p">]</span>
        <span class="p">}),</span>
        <span class="k">new</span> <span class="nx">CleanWebpackPlugin</span><span class="p">(</span>
            <span class="p">[</span>
                <span class="s1">'./wwwroot/js/'</span><span class="p">,</span>
                <span class="s1">'./wwwroot/css/'</span><span class="p">,</span>
                <span class="s1">'./wwwroot/assets/'</span><span class="p">,</span>
                <span class="s1">'./wwwroot/index.html'</span>
            <span class="p">]</span>
        <span class="p">),</span>
        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">ProvidePlugin</span><span class="p">({</span>
            <span class="na">jQuery</span><span class="p">:</span> <span class="s1">'jquery'</span><span class="p">,</span>
            <span class="na">$</span><span class="p">:</span> <span class="s1">'jquery'</span><span class="p">,</span>
            <span class="na">jquery</span><span class="p">:</span> <span class="s1">'jquery'</span>
        <span class="p">})</span>
    <span class="p">],</span>
    <span class="na">devServer</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">historyApiFallback</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="na">stats</span><span class="p">:</span> <span class="s1">'minimal'</span>
    <span class="p">}</span>
<span class="p">};</span></code></pre></figure>

<p>This file is no magic, don’t be scared:</p>

<p>First we require everything we need to use to kick off webpack. Then we will export our complete configuration. Our entrypoints are pointing to the files we just created (remember?) and of course our entrypoint of our application.</p>

<p>The “resolve”-array tells webpack to look for those file endings. The “output” is what we all were looking for. Here we tell webpack “Hey, what no matter what you are doing and how you are doing it, put it in the ./wwwroot-Folder and please be gentle and name the files like I will tell you later on ([name]) and please put a hash on it at the end, but only 8 digits ([hash:8])”. This is it.</p>

<p>Rules and Loaders are telling webpack <strong>how</strong> to handle such file endings. So: If you encounter such a file, so this and that. The plugins are telling webpack how to behave generally, to point which files out etc. And this is alle the magic.</p>

<p><strong>package.json</strong></p>

<p>Add the webpack-things we need to the “DevDependencies”-section in the package.json:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="s2">"devDependencies"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"@types/jasmine"</span><span class="err">:</span> <span class="s2">"^2.5.36"</span><span class="p">,</span>
    <span class="s2">"@types/node"</span><span class="err">:</span> <span class="s2">"7.0.0"</span><span class="p">,</span>
    <span class="s2">"angular-router-loader"</span><span class="err">:</span> <span class="s2">"^0.5.0"</span><span class="p">,</span>
    <span class="s2">"angular2-template-loader"</span><span class="err">:</span> <span class="s2">"^0.6.0"</span><span class="p">,</span>
    <span class="s2">"awesome-typescript-loader"</span><span class="err">:</span> <span class="s2">"^2.2.4"</span><span class="p">,</span>
    <span class="s2">"canonical-path"</span><span class="err">:</span> <span class="s2">"0.0.2"</span><span class="p">,</span>
    <span class="s2">"clean-webpack-plugin"</span><span class="err">:</span> <span class="s2">"^0.1.15"</span><span class="p">,</span>
    <span class="s2">"concurrently"</span><span class="err">:</span> <span class="s2">"^3.1.0"</span><span class="p">,</span>
    <span class="s2">"copy-webpack-plugin"</span><span class="err">:</span> <span class="s2">"^4.0.1"</span><span class="p">,</span>
    <span class="s2">"css-loader"</span><span class="err">:</span> <span class="s2">"^0.26.1"</span><span class="p">,</span>
    <span class="s2">"extract-text-webpack-plugin"</span><span class="err">:</span> <span class="s2">"2.0.0-beta.5"</span><span class="p">,</span>
    <span class="s2">"file-loader"</span><span class="err">:</span> <span class="s2">"^0.9.0"</span><span class="p">,</span>
    <span class="s2">"html-loader"</span><span class="err">:</span> <span class="s2">"^0.4.4"</span><span class="p">,</span>
    <span class="s2">"html-webpack-plugin"</span><span class="err">:</span> <span class="s2">"^2.26.0"</span><span class="p">,</span>
    <span class="s2">"http-server"</span><span class="err">:</span> <span class="s2">"^0.9.0"</span><span class="p">,</span>
    <span class="s2">"ie-shim"</span><span class="err">:</span> <span class="s2">"^0.1.0"</span><span class="p">,</span>
    <span class="s2">"jquery"</span><span class="err">:</span> <span class="s2">"^2.2.0"</span><span class="p">,</span>
    <span class="s2">"json-loader"</span><span class="err">:</span> <span class="s2">"^0.5.4"</span><span class="p">,</span>
    <span class="s2">"lite-server"</span><span class="err">:</span> <span class="s2">"^2.2.2"</span><span class="p">,</span>
    <span class="s2">"lodash"</span><span class="err">:</span> <span class="s2">"^4.16.4"</span><span class="p">,</span>
    <span class="s2">"node-sass"</span><span class="err">:</span> <span class="s2">"^4.3.0"</span><span class="p">,</span>
    <span class="s2">"protractor"</span><span class="err">:</span> <span class="s2">"~4.0.14"</span><span class="p">,</span>
    <span class="s2">"raw-loader"</span><span class="err">:</span> <span class="s2">"^0.5.1"</span><span class="p">,</span>
    <span class="s2">"rimraf"</span><span class="err">:</span> <span class="s2">"^2.5.4"</span><span class="p">,</span>
    <span class="s2">"sass-loader"</span><span class="err">:</span> <span class="s2">"^4.1.1"</span><span class="p">,</span>
    <span class="s2">"source-map-loader"</span><span class="err">:</span> <span class="s2">"^0.1.6"</span><span class="p">,</span>
    <span class="s2">"style-loader"</span><span class="err">:</span> <span class="s2">"^0.13.1"</span><span class="p">,</span>
    <span class="s2">"ts-helpers"</span><span class="err">:</span> <span class="s2">"^1.1.2"</span><span class="p">,</span>
    <span class="s2">"tslint"</span><span class="err">:</span> <span class="s2">"^4.3.1"</span><span class="p">,</span>
    <span class="s2">"tslint-loader"</span><span class="err">:</span> <span class="s2">"^3.3.0"</span><span class="p">,</span>
    <span class="s2">"typescript"</span><span class="err">:</span> <span class="s2">"~2.0.10"</span><span class="p">,</span>
    <span class="s2">"url-loader"</span><span class="err">:</span> <span class="s2">"^0.5.7"</span><span class="p">,</span>
    <span class="s2">"webpack"</span><span class="err">:</span> <span class="s2">"^2.2.0"</span><span class="p">,</span>
    <span class="s2">"webpack-dev-server"</span><span class="err">:</span> <span class="s2">"^1.16.2"</span>
  <span class="p">}</span></code></pre></figure>

<p>Run npm install or let VS do this for you.</p>

<p>Now that you’ve done this open up the Task Runner Explorer in Visual Studio and let the “Run - Development” go:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/08/Zwischenablage04.jpg" alt="Zwischenablage04" /></p>

<p>Et voila: our wwwroot-folder got filled with our entire app (or with what we have got so far). But there is one thing missing: The index.html!</p>

<p>Lets tell webpack to take our index.html we already have got and inject the sources into it and copy it too. To do this extend the “plugins”-section like this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"> <span class="nx">plugins</span><span class="err">:</span> <span class="p">[</span>
        <span class="k">new</span> <span class="nx">ExtractTextPlugin</span><span class="p">(</span><span class="s1">'css/[name].bundle.css'</span><span class="p">),</span>
        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">CommonsChunkPlugin</span><span class="p">({</span>
            <span class="na">name</span><span class="p">:</span> <span class="p">[</span><span class="s1">'app'</span><span class="p">,</span> <span class="s1">'vendor'</span><span class="p">,</span> <span class="s1">'polyfills'</span><span class="p">]</span>
        <span class="p">}),</span>
        <span class="k">new</span> <span class="nx">CleanWebpackPlugin</span><span class="p">(</span>
            <span class="p">[</span>
                <span class="s1">'./wwwroot/js/'</span><span class="p">,</span>
                <span class="s1">'./wwwroot/css/'</span><span class="p">,</span>
                <span class="s1">'./wwwroot/assets/'</span><span class="p">,</span>
                <span class="s1">'./wwwroot/index.html'</span>
            <span class="p">]</span>
        <span class="p">),</span>
        <span class="c1">// inject in index.html</span>
        <span class="k">new</span> <span class="nx">HtmlWebpackPlugin</span><span class="p">({</span>
            <span class="na">template</span><span class="p">:</span> <span class="s1">'./angularApp/index.html'</span><span class="p">,</span>
            <span class="na">inject</span><span class="p">:</span> <span class="s1">'body'</span><span class="p">,</span>
            <span class="na">filename</span><span class="p">:</span> <span class="s1">'index.html'</span>
        <span class="p">}),</span>
    <span class="p">],</span></code></pre></figure>

<p>and add the</p>

<p><code class="highlighter-rouge">var HtmlWebpackPlugin = require("html-webpack-plugin");</code></p>

<p>at the top of the page. We need to include what we want to use ;)</p>

<p>let it run again:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/08/Zwischenablage05.jpg" alt="Zwischenablage05" /></p>

<p>Lets take a look into this index.html:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>

<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;base</span> <span class="na">href=</span><span class="s">"/"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;title&gt;</span>ASP.NET Core Angular Webpack Demo<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">"css/app.bundle.css"</span> <span class="na">rel=</span><span class="s">"stylesheet"</span><span class="nt">&gt;&lt;/head&gt;</span>

<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;my-app&gt;</span>Loading...<span class="nt">&lt;/my-app&gt;</span>
<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"js/polyfills.bundle.js"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"js/app.bundle.js"</span><span class="nt">&gt;&lt;/script&gt;&lt;/body&gt;</span>

<span class="nt">&lt;/html&gt;</span></code></pre></figure>

<p>our files got injected!</p>

<p>Before we actually see our application we have to modify the Startup.cs to behave like we want it to:</p>

<p>Add</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml">"Microsoft.AspNetCore.Mvc": "1.1.0",
"Microsoft.AspNetCore.StaticFiles": "1.1.0"</code></pre></figure>

<p>to your project.json and in the Startup write:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">Startup</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="n">IConfigurationRoot</span> <span class="n">Configuration</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

    <span class="c1">// This method gets called by the runtime. Use this method to add services to the container.
</span>    <span class="c1">// For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=398940
</span>    <span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">services</span><span class="p">.</span><span class="nf">AddCors</span><span class="p">();</span>
        <span class="n">services</span><span class="p">.</span><span class="nf">AddMvc</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nf">Startup</span><span class="p">(</span><span class="n">IHostingEnvironment</span> <span class="n">env</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ConfigurationBuilder</span><span class="p">()</span>
            <span class="p">.</span><span class="nf">SetBasePath</span><span class="p">(</span><span class="n">env</span><span class="p">.</span><span class="n">ContentRootPath</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="s">"appsettings.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">true</span><span class="p">,</span> <span class="n">reloadOnChange</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="err">$</span><span class="s">"appsettings.{env.EnvironmentName}.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">true</span><span class="p">);</span>

        <span class="n">builder</span><span class="p">.</span><span class="nf">AddEnvironmentVariables</span><span class="p">();</span>
        <span class="n">Configuration</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>
    <span class="p">}</span>


    <span class="c1">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
</span>    <span class="k">public</span> <span class="k">void</span> <span class="nf">Configure</span><span class="p">(</span><span class="n">IApplicationBuilder</span> <span class="n">app</span><span class="p">,</span> <span class="n">ILoggerFactory</span> <span class="n">loggerFactory</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">loggerFactory</span><span class="p">.</span><span class="nf">AddConsole</span><span class="p">(</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetSection</span><span class="p">(</span><span class="s">"Logging"</span><span class="p">));</span>
        <span class="n">loggerFactory</span><span class="p">.</span><span class="nf">AddDebug</span><span class="p">();</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseCors</span><span class="p">(</span><span class="n">config</span> <span class="p">=&gt;</span>
            <span class="n">config</span><span class="p">.</span><span class="nf">AllowAnyHeader</span><span class="p">()</span>
                <span class="p">.</span><span class="nf">AllowAnyMethod</span><span class="p">()</span>
                <span class="p">.</span><span class="nf">AllowAnyOrigin</span><span class="p">());</span>
                
        <span class="n">app</span><span class="p">.</span><span class="nf">UseDefaultFiles</span><span class="p">();</span>
        <span class="n">app</span><span class="p">.</span><span class="nf">UseStaticFiles</span><span class="p">();</span>

        <span class="n">app</span><span class="p">.</span><span class="nf">UseMvc</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Now we have an index.html and we can press the play-button in Visual Studio:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/08/Zwischenablage06.jpg" alt="Zwischenablage06" /></p>

<p>So it is working!!</p>

<p>Great so far.</p>

<h3 id="adding-webpack-dev-server">Adding webpack dev server:</h3>

<p>Wouldn’t it be nice to get the files refreshed as soon as I start working on them with this webpack construction? Well we already added the webpack dev-server in the package.json as dependency and in the web.config we already configured it in a basic way. So now lets use it:</p>

<p>You can now change the “npm start” command but we will simply make another one like “startWebpackDevServer”. So add the following line into the scripts section of package.json:</p>

<p><code class="highlighter-rouge">"startWebpackDevServer": "webpack-dev-server --inline --progress --port 8080",</code></p>

<p>Now open a commandline to the level of your package.json and type “npm run startWebpackDevServer”:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/08/Zwischenablage07.jpg" alt="Zwischenablage07" /></p>

<p>Let it open and browse to “localhost:8080”</p>

<p><img src="/assets/articles/wp-content/uploads/2016/08/Zwischenablage08.jpg" alt="Zwischenablage08" /></p>

<p>There your app appears!</p>

<p>So lets take a look how this behaves if we change a file…</p>

<p><img src="/assets/articles/wp-content/uploads/2016/08/Animation.gif" alt="Animation" /></p>

<p>Okay great.</p>

<p>Now lets go ahead and build this thing up to use development and production builds, which is our last step:</p>

<h3 id="development-and-production-builds">Development and Production builds</h3>

<p>Lets take a closer look to what we did when we first ran our webpack:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/08/Zwischenablage09.jpg" alt="How to set up Angular and Webpack in Visual Studio with ASP.NET Core" /></p>

<p>There webpack is setting the variable “NODE_ENV” to “development”. Lets use that!!!</p>

<p>rename the “webpack.config.js” to “webpack.dev.js”. Create a new webpack.config.js.</p>

<p>All we need to do now is creating a switch which says “if you are development, use a (new) file (we will create) which takes the dev-thing, otherwise take the production ones”</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">environment</span> <span class="o">=</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">||</span> <span class="s2">"development"</span><span class="p">).</span><span class="nx">trim</span><span class="p">();</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">environment</span> <span class="o">===</span> <span class="s2">"development"</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./webpack.dev.js'</span><span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./webpack.prod.js'</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>So THIS is our new entrypoint for webpack, the new webpack.config.json!!</p>

<p>Create a file which is called “webpack.prod.js” which will be our production file in the future. You should now have something like this:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/08/Zwischenablage10.jpg" alt="How to set up Angular and Webpack in Visual Studio with ASP.NET Core" /></p>

<p>To test this put a simple console.log in the production file like:</p>

<p><code class="highlighter-rouge">console.log("----&gt; Production");</code></p>

<p>and let it run:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/08/Zwischenablage11.jpg" alt="Zwischenablage11" /></p>

<p>So now lets pimp the production a bit. Its mostly the same we have so far for dev, but we need a little more plugins. Maybe the one to uglify the js <a href="http://webpack.github.io/docs/list-of-plugins.html#uglifyjsplugin">UglifyJsPlugin</a> and to delete the files in the wwwroot first “<a href="https://github.com/johnagan/clean-webpack-plugin">Clean for webpack</a>”.</p>

<p>Copy the whole content from the webpack.dev.json to the prod.json and simply add the uglifyjs-plugin like this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">plugins</span><span class="err">:</span> <span class="p">[</span>
        <span class="k">new</span> <span class="nx">ExtractTextPlugin</span><span class="p">(</span><span class="s1">'css/[name]-[hash:6].bundle.css'</span><span class="p">),</span>
        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">CommonsChunkPlugin</span><span class="p">({</span>
            <span class="na">name</span><span class="p">:</span> <span class="p">[</span><span class="s1">'vendor'</span><span class="p">,</span> <span class="s1">'polyfills'</span><span class="p">]</span>
        <span class="p">}),</span>
        <span class="c1">// inject in index.html</span>
        <span class="k">new</span> <span class="nx">HtmlWebpackPlugin</span><span class="p">({</span>
            <span class="na">template</span><span class="p">:</span> <span class="s1">'./angularApp/index.html'</span><span class="p">,</span>
            <span class="na">inject</span><span class="p">:</span> <span class="s1">'body'</span><span class="p">,</span>
            <span class="na">filename</span><span class="p">:</span> <span class="s1">'index.html'</span>
        <span class="p">}),</span>
        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">UglifyJsPlugin</span><span class="p">({</span>
            <span class="na">compress</span><span class="p">:</span> <span class="p">{</span>
                <span class="na">warnings</span><span class="p">:</span> <span class="kc">false</span>
            <span class="p">},</span>
            <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
                <span class="na">comments</span><span class="p">:</span> <span class="kc">false</span>
            <span class="p">},</span>
            <span class="na">sourceMap</span><span class="p">:</span> <span class="kc">false</span>
        <span class="p">}),</span>
        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">ProvidePlugin</span><span class="p">({</span>
            <span class="na">jQuery</span><span class="p">:</span> <span class="s1">'jquery'</span><span class="p">,</span>
            <span class="na">$</span><span class="p">:</span> <span class="s1">'jquery'</span><span class="p">,</span>
            <span class="na">jquery</span><span class="p">:</span> <span class="s1">'jquery'</span>
        <span class="p">})</span>
    <span class="p">],</span></code></pre></figure>

<p>If you now let the prod-task run the files will be treated as ever but they are uglified as well.</p>

<p>To clean the wwwroot-folder first we need to install another plugin “Clean for webpack” and use it:</p>

<p><code class="highlighter-rouge">npm install clean-webpack-plugin --save-dev</code></p>

<p>and in both webpack-files</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">CleanWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'clean-webpack-plugin'</span><span class="p">);</span>
 <span class="c1">//....</span>

<span class="nl">plugins</span><span class="p">:</span> <span class="p">[</span>
       <span class="k">new</span> <span class="nx">ExtractTextPlugin</span><span class="p">(</span><span class="s2">"[name].bundle.css"</span><span class="p">),</span>
       <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">CommonsChunkPlugin</span><span class="p">({</span>
           <span class="na">name</span><span class="p">:</span> <span class="p">[</span><span class="s2">"app"</span><span class="p">,</span> <span class="s2">"vendor"</span><span class="p">,</span> <span class="s2">"polyfills"</span><span class="p">]</span>
       <span class="p">}),</span>

       <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">UglifyJsPlugin</span><span class="p">({</span>
           <span class="na">compress</span><span class="p">:</span> <span class="p">{</span>
               <span class="na">warnings</span><span class="p">:</span> <span class="kc">false</span>
           <span class="p">}</span>
       <span class="p">}),</span>
         <span class="k">new</span> <span class="nx">CleanWebpackPlugin</span><span class="p">(</span>
            <span class="p">[</span>
                <span class="s2">"./wwwroot/"</span>
            <span class="p">]</span>
        <span class="p">),</span>
       <span class="c1">// inject in index.html</span>
        <span class="k">new</span> <span class="nx">HtmlWebpackPlugin</span><span class="p">({</span>
            <span class="na">template</span><span class="p">:</span> <span class="s1">'./angularApp/index.html'</span><span class="p">,</span>
            <span class="na">inject</span><span class="p">:</span> <span class="s1">'body'</span><span class="p">,</span>
            <span class="na">filename</span><span class="p">:</span> <span class="s1">'index.html'</span>
        <span class="p">}),</span>
    <span class="p">],</span></code></pre></figure>

<p>Now our folder gets cleaned. You can add this into dev, too.</p>

<p>This is it. This is how you can treat Angular with webpack in Visual Studio with an ASPNET Core application. I hope you liked and enjoyed reading.</p>

<p>HTH</p>

<p>Fabian</p>

	  ]]></description>
	</item>


</channel>
</rss>
