<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>http://fabian-gosebrink.com</title>
   
   <link>http://offering.solutions</link>
   <description>Articles about Angular & ASP.NET</description>
   <language>en-us</language>
   <managingEditor> Fabian Gosebrink</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Lessons I learnt from organising a conference</title>
	  <link>//blog/articles/2017/07/18/things-i-learned-from-organising-a-conference/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2017-07-18T19:55:00+02:00</pubDate>
	  <guid>//blog/articles/2017/07/18/things-i-learned-from-organising-a-conference/</guid>
	  <description><![CDATA[
	     <p>It has been quiet here for a while… :-)</p>

<p>You may have noticed that I organised my first conference <a href="http://dotnetday.ch/">.NET Day</a> about two months ago. Well, that is not true. The organisation itself took place long before that but the event took place approximately two months ago. With this distance of time I want to gather up what I learned from organising this event, what I take with me and what will influence the next conference if I will do this again some time :-)</p>

<p>I needed some time to really figure out all the thoughts &amp; things which were going on and break them down to the following points. If you made similar experiences or want to add new ones feel free to comment :)</p>

<h2 id="be-prepared-and-have-a-plan-b">Be prepared and have a plan B</h2>

<p>On the event you are planning, things will happen you never thought of. This can be good or bad things, but you will <em>not</em> be prepared of them. So what you can do is starting early (!) and thinking of any possible situation which may happen. (You can’t, but more on this later :-) This can be that a speaker is not coming because the night before he got sick or something, a microphone does not work, the food can not be served etc. You should always think of those things and play with that thought in your head. “What am I doing if xyz happens?” is the question you have to ask for youself. Have backup speakers. Have saved the telephone numbers of all pizza delivery services in your area to be prepared if food can not be served. Have a car there which you can use to get something which you not have thought of etc. If you re-think your event over and over again you will possibly come to a point where you can say to yourself that you are prepared for every single thing which can happen. (Which you can’t, but you did your best here :)</p>

<p>So make that a little easier and taking this thought of being prepared further we can take a look at the next point…</p>

<h2 id="change-the-perspective-to-an-attendee">Change the perspective to an attendee</h2>

<p>…changing the perspective to an attendee. Image you are walking into the venue, what do you expect? Getting your ticket scanned? Getting a lanyard? Seeing the organiser? Just think of where do you would like to sit, what would be cool in the breakes? Is there something you would say “If there would be xyz, that’d be cool!”. If you attended to other conferences before and you can clone some ideas: Cool! If you were missing something on other conference: Try to add it to our conference. Its your attendees who give feedback &amp; do tweet about it. So you have to do everything they feel comfortable. From the selection of talks, topics over the venue, how you treat them etc.</p>

<h2 id="ask-for-help">Ask for help</h2>

<p>You noticed something, didn’t you? Thats massive work. Well until here we did not organise anything so far. All that were thoughts! But you need another input. Ask your friends, your family if idea xyz is cool. “Would you like it if …?”, “What do you think of xyz?”. Also tell them if you arranged something. Not to get compliments on how good you are but to trigger their thouoghts a bit. “Hey I have just organised thisandthat” - “Cool, but did you think of thatandthis, too then?” - Boom! You got your input.</p>

<p>Further ask a friend to help you out. There are so much things to do which are completely separated and can be done by another one. If you organise a conference at some point you have to …</p>

<h2 id="talk-to-each-other-and-delegate">Talk to each other and delegate</h2>

<p>… delegate! We took OneNote for that which was completely fine. Just to keep each other up to date, if the emails to the speakers were sent out, which speaker said yes/no/maybe. Which topic by whom, which sponsors do we have, mail proposals for review etc. Delegate something, divide the work by two or more and give exact advises. “Can you please write a draft mail for the sponsors to do this and that”. Maybe you can organise via SCRUM or Kanban. Feel free to do that as you want, but split up the work. It is getting easier then.</p>

<h2 id="dont-do-a-talk-when-you-organise-the-conference">Don’t do a talk when you organise the conference</h2>

<p>I did that mistake. I really thought a long time about “Shall I speak or not?”. In the end I thought my topics were interesting and so I spoke at the event I organised. This was a mistake if I look back. And the reason for that was that I was not focussing on my talk. You are so distracted by anything what is going on that you can not focus on your talk. I did not get into this tunnel completely giving everything I have in this 45 minutes. (I even thought about so much things the night before the event, that I forgot that I only had 45 minutes and practices for 60 instead!!!) I only have been at the talk at like 70% or something. And it went bad. I forgot to show demos, forgot a cable to show something with my mobile phone, my timing was bad, I moved the slides too fast etc.</p>

<p>So stay focused. Either on talking or on doing the things around it…but for me both is not working.</p>

<h2 id="start-early">Start early</h2>

<p>With all the things in mind: You can not start too early with that. Even if other people youre talking to tell you “We still have time”: Try to organise everything sooner than later. If you just ask people about their opinion maybe you notice things you haven’t thought of. And these are things you have to organise. So start early with you preparations. Maybe there is no “Too early” at all :-)</p>

<h2 id="during-the-conference-observe--listen-">During the conference: Observe &amp; Listen !!!</h2>

<p>Maybe this is the most important point. Listen to feedback. It won’t go perfect the first time you organise a conference and people will tell you. And that is okay. Take it as a chance to get better. How was the food? How was the venue? Take a look at the attendees during the talks and during the brakes. Do not only talk with people you know. Ask them about one thing specifically. “How do you like …?”, “Are you satisfied with …”, “Is it okay that thingandthat is like …”. In addition to that provide a possibility for feedback. We used google forms for that. We always asked about ratings and if the rating was not the best there was the possibility to add “Why is it not rated with 5 stars? What can we do better next time?” and we got great feedback!</p>

<h2 id="enjoy-the-moment">Enjoy the moment</h2>

<p>Last but not least: Enjoy the moment. I was sitting in the conference very excited and tried to have everything under control as a friend and attendee said “Don’t worry. It will work. Lean back and enjoy the conference”. When I look back now that was one of the greatest advices that day.</p>

<p>Thank you and once again thanks to all attendees. You made this day very special and I had a great birthday that day :-)</p>

<p>BR</p>

<p>Fabian</p>


	  ]]></description>
	</item>

	<item>
	  <title>Lessons I learnt from organising a conference</title>
	  <link>//blog/articles/2017/07/18/things-i-learned-from-organising-a-conference/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2017-07-18T19:55:00+02:00</pubDate>
	  <guid>//blog/articles/2017/07/18/things-i-learned-from-organising-a-conference/</guid>
	  <description><![CDATA[
	     <p>It has been quiet here for a while… :-)</p>

<p>You may have noticed that I organised my first conference <a href="http://dotnetday.ch/">.NET Day</a> about two months ago. Well, that is not true. The organisation itself took place long before that but the event took place approximately two months ago. With this distance of time I want to gather up what I learned from organising this event, what I take with me and what will influence the next conference if I will do this again some time :-)</p>

<p>I needed some time to really figure out all the thoughts &amp; things which were going on and break them down to the following points. If you made similar experiences or want to add new ones feel free to comment :)</p>

<h2 id="be-prepared-and-have-a-plan-b">Be prepared and have a plan B</h2>

<p>On the event you are planning, things will happen you never thought of. This can be good or bad things, but you will <em>not</em> be prepared of them. So what you can do is starting early (!) and thinking of any possible situation which may happen. (You can’t, but more on this later :-) This can be that a speaker is not coming because the night before he got sick or something, a microphone does not work, the food can not be served etc. You should always think of those things and play with that thought in your head. “What am I doing if xyz happens?” is the question you have to ask for youself. Have backup speakers. Have saved the telephone numbers of all pizza delivery services in your area to be prepared if food can not be served. Have a car there which you can use to get something which you not have thought of etc. If you re-think your event over and over again you will possibly come to a point where you can say to yourself that you are prepared for every single thing which can happen. (Which you can’t, but you did your best here :)</p>

<p>So make that a little easier and taking this thought of being prepared further we can take a look at the next point…</p>

<h2 id="change-the-perspective-to-an-attendee">Change the perspective to an attendee</h2>

<p>…changing the perspective to an attendee. Image you are walking into the venue, what do you expect? Getting your ticket scanned? Getting a lanyard? Seeing the organiser? Just think of where do you would like to sit, what would be cool in the breakes? Is there something you would say “If there would be xyz, that’d be cool!”. If you attended to other conferences before and you can clone some ideas: Cool! If you were missing something on other conference: Try to add it to our conference. Its your attendees who give feedback &amp; do tweet about it. So you have to do everything they feel comfortable. From the selection of talks, topics over the venue, how you treat them etc.</p>

<h2 id="ask-for-help">Ask for help</h2>

<p>You noticed something, didn’t you? Thats massive work. Well until here we did not organise anything so far. All that were thoughts! But you need another input. Ask your friends, your family if idea xyz is cool. “Would you like it if …?”, “What do you think of xyz?”. Also tell them if you arranged something. Not to get compliments on how good you are but to trigger their thouoghts a bit. “Hey I have just organised thisandthat” - “Cool, but did you think of thatandthis, too then?” - Boom! You got your input.</p>

<p>Further ask a friend to help you out. There are so much things to do which are completely separated and can be done by another one. If you organise a conference at some point you have to …</p>

<h2 id="talk-to-each-other-and-delegate">Talk to each other and delegate</h2>

<p>… delegate! We took OneNote for that which was completely fine. Just to keep each other up to date, if the emails to the speakers were sent out, which speaker said yes/no/maybe. Which topic by whom, which sponsors do we have, mail proposals for review etc. Delegate something, divide the work by two or more and give exact advises. “Can you please write a draft mail for the sponsors to do this and that”. Maybe you can organise via SCRUM or Kanban. Feel free to do that as you want, but split up the work. It is getting easier then.</p>

<h2 id="dont-do-a-talk-when-you-organise-the-conference">Don’t do a talk when you organise the conference</h2>

<p>I did that mistake. I really thought a long time about “Shall I speak or not?”. In the end I thought my topics were interesting and so I spoke at the event I organised. This was a mistake if I look back. And the reason for that was that I was not focussing on my talk. You are so distracted by anything what is going on that you can not focus on your talk. I did not get into this tunnel completely giving everything I have in this 45 minutes. (I even thought about so much things the night before the event, that I forgot that I only had 45 minutes and practices for 60 instead!!!) I only have been at the talk at like 70% or something. And it went bad. I forgot to show demos, forgot a cable to show something with my mobile phone, my timing was bad, I moved the slides too fast etc.</p>

<p>So stay focused. Either on talking or on doing the things around it…but for me both is not working.</p>

<h2 id="start-early">Start early</h2>

<p>With all the things in mind: You can not start too early with that. Even if other people youre talking to tell you “We still have time”: Try to organise everything sooner than later. If you just ask people about their opinion maybe you notice things you haven’t thought of. And these are things you have to organise. So start early with you preparations. Maybe there is no “Too early” at all :-)</p>

<h2 id="during-the-conference-observe--listen-">During the conference: Observe &amp; Listen !!!</h2>

<p>Maybe this is the most important point. Listen to feedback. It won’t go perfect the first time you organise a conference and people will tell you. And that is okay. Take it as a chance to get better. How was the food? How was the venue? Take a look at the attendees during the talks and during the brakes. Do not only talk with people you know. Ask them about one thing specifically. “How do you like …?”, “Are you satisfied with …”, “Is it okay that thingandthat is like …”. In addition to that provide a possibility for feedback. We used google forms for that. We always asked about ratings and if the rating was not the best there was the possibility to add “Why is it not rated with 5 stars? What can we do better next time?” and we got great feedback!</p>

<h2 id="enjoy-the-moment">Enjoy the moment</h2>

<p>Last but not least: Enjoy the moment. I was sitting in the conference very excited and tried to have everything under control as a friend and attendee said “Don’t worry. It will work. Lean back and enjoy the conference”. When I look back now that was one of the greatest advices that day.</p>

<p>Thank you and once again thanks to all attendees. You made this day very special and I had a great birthday that day :-)</p>

<p>BR</p>

<p>Fabian</p>


	  ]]></description>
	</item>

	<item>
	  <title>Announcing the .NET Day 2017</title>
	  <link>//blog/articles/2017/04/02/announcing-the-dotnetday-2017/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2017-04-02T19:12:00+02:00</pubDate>
	  <guid>//blog/articles/2017/04/02/announcing-the-dotnetday-2017/</guid>
	  <description><![CDATA[
	     <p>I am very happy to announce the .NET Day 2017 in Switzerland! In this blogpost I want to give you a small background information on this, how this idea came up and about the current status.</p>

<h3 id="the-beginning">The beginning</h3>

<p>The idea of this conference day came into my mind in the middle of 2016. I love conferences. I think that a developer has to stay updated on his well known topics as well as be open to new topics and has to keep on learning over and over again. If he wants to stay open and focused on the same time he has to take a look whats new, what is established and learn from others. If you listen to a talk on a conference, on a usergroup or whereever: You get an idea of if you are interested in this topic or not. You see if you want to dig deeper or not. In a very short amount of time. And if you already know: you can see whats new, other perspectives and so on. This is worth a lot.</p>

<p>In addition to that Microsoft came up with a lot of new stuff during the last time. And I think beside the awesome TechDays in Switzerland there should be another paltform to spread this knowledge. But I did not want to make a commercial conference. This thing should be community driven. The focus is on spreading knowledge. The new stuff.</p>

<p>After a few thoughts and conversations the idea grew and I fixed a name and a date and I could go ahead organising speakers.</p>

<blockquote>
  <p>To mention this: I never organsied a conference before. I had no idea what to be done, no idea how to start with that thing. But Microsoft helped me a lot with this. They offered the room and helped me where they could as well as forcing me to take care about stuff with “Do it as you like”.</p>
</blockquote>

<p>After a while I realized that I could not do this on my own. So I asked my friend Manuel Meyer for help. He immediately said yes and there we are:</p>

<h3 id="how-it-grew">How it grew</h3>

<p>Through a great community and platforms like papercall.io we started a call for paper to get the speakers and the talks. IMHO we got a great agenda and speakers now (which I am not telling because I am part of it. I really do not count myself to the top speakers we have there. I am more than proud to be in between this international known names to who every single one I am looking up to).</p>

<p>After a while we got the agenda fixed and also Manuels and my shared OneNote grew and grew ;-).</p>

<p>We walked further and organsied sponsors. Some emails went out never getting any response back. But some of them came back loving the idea and they wanted to support us with the bigger one of the sponsoring packages. Great! So this grew, too.</p>

<h3 id="the-event">The Event</h3>

<p>The .NET Day takes place in Wallisellen at the Microsoft Office. It is focussing on the latest topics like Azure, the .NET Standard or ASP.NET Core and Angular.</p>

<p>You can see the website here <a href="http://dotnetday.ch/">.NET Day Switzerland</a>.</p>

<p>We only have one day, one track as we wanted to start small and see if the feedback is good. If so: Perhaps we will do this again! If the feedback is bad then we at least tried to do this and hopefully had a good day. We will analyse it and see what we can make better the mext time if there is a next time then.</p>

<h3 id="current-status">Current status</h3>

<p>Right now we are still searching for sponsors. The more sponsors we have the more we can do about merchandising such as shirts, lanyards etc. Focus is on paying the food for everyone. On the other side we “sold” all tickets. It is really sold out. I would have never thought that.</p>

<p>I think it is all prepared for a good day.</p>

<h3 id="things-to-say-more-important-than-anything-else">Things to say more important than anything else</h3>

<p>T H A N K S to everybody who was involved in this so far. Thank you Manuel, I could not have done this that far without you, thanks to all speakers and everyone I had to reject because the agenda was full, thank you for every retweet, for every email, every phone call! You are amazing. We will try to give everything back making this day a great great conference.</p>

<p>See you soon.</p>

<p>Fabian</p>


	  ]]></description>
	</item>

	<item>
	  <title>Moving your Angular application from SystemJS to Webpack</title>
	  <link>//blog/articles/2017/02/26/moving-from-systemjs-to-webpack-angular-2/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2017-02-26T16:46:00+01:00</pubDate>
	  <guid>//blog/articles/2017/02/26/moving-from-systemjs-to-webpack-angular-2/</guid>
	  <description><![CDATA[
	     <p>In this blogpost I want to show you how you can move from an existing Angular application using systemjs to an application with webpack.</p>

<p>Imagine the following application.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>app
├── // modules, components and so on
├── app.component.ts
├── app.component.html
├── app.module.ts
└── main.ts
...
systemjs.config.js
tsconfig.json
tslint.json
...
</code></pre>
</div>

<p>Because we want to get away from systemjs here we will first introduce a webpack.config.js which holds your configuration and which can handle all you files and stuff.</p>

<p>But before we do please install webpack and the webpack-dev-server first:</p>

<p><code class="highlighter-rouge">npm install webpack-dev-server webpack --save-dev</code></p>

<p>So now we can add a webpack.config.js. This is the file webpack is searching per default.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>app
├── // modules, components and so on
├── app.component.ts
├── app.component.html
├── app.module.ts
└── main.ts
...
systemjs.config.js
webpack.config.js // &lt;---
tsconfig.json
tslint.json
...
</code></pre>
</div>

<p>Of course you have to modify the config that it fits to your application. A structure of this could be useful:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>

    <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
        <span class="c1">// Here all your entry points from </span>
        <span class="c1">// your application are mentioned</span>
    <span class="p">},</span>

    <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
        <span class="c1">// Here we can specify the output</span>
    <span class="p">},</span>

    <span class="na">resolve</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">extensions</span><span class="p">:</span> <span class="c1">// mention the extensions webpack should take care of</span>
    <span class="p">},</span>

    <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">rules</span><span class="p">:</span> <span class="p">[</span>
            <span class="c1">// tell webpack HOW to react when a file is included in your application</span>
        <span class="p">]</span>
    <span class="p">},</span>

    <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
		<span class="c1">// finetune the behaviour of specific plugins</span>
    <span class="p">]</span>
<span class="p">};</span> </code></pre></figure>

<p>You can see an example here <a href="https://github.com/FabianGosebrink/ASPNETCore-Angular-Webpack-StarterTemplate/blob/master/src/ASPNETCoreAngularWebpackStarter/webpack.dev.js">webpack.dev.js</a></p>

<h2 id="adding-polyfills">Adding Polyfills</h2>

<p>To have your Angular application ready for handling polyfills you have to introduce another file <code class="highlighter-rouge">polyfills.ts</code> where you import all polyfills your application needs.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>app
├── // modules, components and so on
├── app.component.ts
├── app.component.html
├── app.module.ts
├── polyfills.ts // &lt;---
└── main.ts
...
systemjs.config.js
webpack.config.js
tsconfig.json
tslint.json
...
</code></pre>
</div>

<p>The file could look like this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">import</span> <span class="s1">'ie-shim'</span><span class="p">;</span> <span class="c1">// Internet Explorer 9 support.</span>

<span class="kr">import</span> <span class="s1">'core-js/es6/symbol'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/object'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/function'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/parse-int'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/parse-float'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/number'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/math'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/string'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/date'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/array'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/regexp'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/map'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/set'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/weak-map'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/weak-set'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/typed'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es6/reflect'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'core-js/es7/reflect'</span><span class="p">;</span>

<span class="kr">import</span> <span class="s1">'zone.js/dist/zone'</span><span class="p">;</span></code></pre></figure>

<blockquote>
  <p>Notice that when you import things you also have to install them via npm which also should be reflected in you package.json</p>
</blockquote>

<h2 id="adding-third-party-dependencies">Adding Third-Party dependencies</h2>

<p>If you have to include external libs like jquery or bootstrap you can manage them in a seperate file called <code class="highlighter-rouge">vendor.ts</code>. After installing them via npm you can consume them here:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>app
├── // modules, components and so on
├── app.component.ts
├── app.component.html
├── app.module.ts
├── polyfills.ts
├── vendor.ts // &lt;---
└── main.ts
...
systemjs.config.js
webpack.config.js
tsconfig.json
tslint.json
...
</code></pre>
</div>

<p>Which could look like this</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">import</span> <span class="s1">'jquery/dist/jquery'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'bootstrap/dist/js/bootstrap'</span><span class="p">;</span>

<span class="kr">import</span> <span class="s1">'bootstrap/dist/css/bootstrap.css'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'../css/custom.css'</span><span class="p">;</span>

<span class="c1">// import everything else here!!!</span></code></pre></figure>

<blockquote>
  <p>You should include all your custom files here</p>
</blockquote>

<h2 id="delete-systemjsconfigjs">Delete systemjs.config.js</h2>

<p>You can now delete the systemjs.config.js because you do not need it anymore.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>app
├── // modules, components and so on
├── app.component.ts
├── app.component.html
├── app.module.ts
├── polyfills.ts
├── vendor.ts
└── main.ts
...
webpack.config.js
tsconfig.json
tslint.json
...
</code></pre>
</div>

<h2 id="entrypoints">Entrypoints</h2>

<p>Note that you now have three entrypoint for your application: <code class="highlighter-rouge">main.ts</code>, <code class="highlighter-rouge">vendor.ts</code> and <code class="highlighter-rouge">polyfills.ts</code>. Due to the fact that webpack is reading all you files and going through all imports importing what is included you have the possibility to:</p>

<p>give your webpack config all three entrypoint like this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
        <span class="s1">'app'</span><span class="p">:</span> <span class="s1">'./app/main.ts'</span><span class="p">,</span>
        <span class="s1">'vendor'</span><span class="p">:</span> <span class="s1">'./app/vendor.ts'</span><span class="p">,</span>
        <span class="s1">'polyfills'</span><span class="p">:</span> <span class="s1">'./app/polyfills.ts'</span><span class="p">,</span>
    <span class="p">},</span></code></pre></figure>

<p>or you import the two files in you main.ts like:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">import</span> <span class="s1">'./polyfills'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'./vendor'</span><span class="p">;</span>

<span class="kr">import</span> <span class="p">{</span> <span class="nx">platformBrowserDynamic</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">'@angular/platform-browser-dynamic'</span><span class="p">;</span>

<span class="kr">import</span> <span class="p">{</span> <span class="nx">AppModule</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">'./app.module'</span><span class="p">;</span>

<span class="nx">platformBrowserDynamic</span><span class="p">().</span><span class="nx">bootstrapModule</span><span class="p">(</span><span class="nx">AppModule</span><span class="p">);</span></code></pre></figure>

<p>and in your webpack.config.ts you only need one entrypoint then:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
        <span class="s1">'app'</span><span class="p">:</span> <span class="s1">'./app/main.ts'</span>
    <span class="p">},</span></code></pre></figure>

<h2 id="asking-for-the-environment-devprod">Asking for the environment (dev/prod)</h2>

<p>We will set the environment from the outside later. To consume it in your application we can simply ask for a variable like this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">env</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">env</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">require</span><span class="p">(</span><span class="err">`</span><span class="p">.</span><span class="o">/</span><span class="nx">webpack</span><span class="p">.</span><span class="nx">$</span><span class="p">{</span><span class="nx">env</span><span class="p">}.</span><span class="nx">js</span><span class="err">`</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>With this you can apply multiple ways of generating your output based on the given environment asking for the variable “NODE_ENV” which we will set up later in our scripts.</p>

<p>You can see an example here <a href="https://github.com/FabianGosebrink/ASPNETCore-Angular-Webpack-StarterTemplate/blob/master/src/ASPNETCoreAngularWebpackStarter/webpack.config.js">webpack.config.js</a></p>

<h2 id="triggering-it-from-the-npm-scripts">Triggering it from the npm scripts</h2>

<p>Now that we introduced webpack we can add the commands to our package.json like this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
    <span class="c1">//...</span>
    <span class="s2">"scripts"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"start"</span><span class="err">:</span> <span class="s2">"tsc &amp;&amp; webpack-dev-server --open"</span><span class="p">,</span>
        <span class="c1">// other scripts</span>
        <span class="s2">"build:dev"</span><span class="err">:</span> <span class="s2">"webpack --env=dev --progress --profile --colors"</span><span class="p">,</span>
        <span class="s2">"build:dist"</span><span class="err">:</span> <span class="s2">"webpack --env=prod --progress --profile --colors"</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="c1">//...</span>
<span class="p">}</span></code></pre></figure>

<p>Here we are setting the environment variable accordingly and start webpack with the <code class="highlighter-rouge">webpack</code> command</p>

<p>When you run <code class="highlighter-rouge">npm start</code> and have the correct configuration in your webpack &amp; package.json a browser should open up displaying your page while reloading if you change something.</p>

<p>Feel free to comment if I missed something.</p>

<p>Hope this helps and happy coding.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Angular Ahead Of Time (AoT) compilation, lazy loading and treeshaking with webpack</title>
	  <link>//blog/articles/2017/02/08/angular-2-ahead-of-time-aot-compilation-lazy-loading-treeshaking-webpack/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2017-02-08T16:42:00+01:00</pubDate>
	  <guid>//blog/articles/2017/02/08/angular-2-ahead-of-time-aot-compilation-lazy-loading-treeshaking-webpack/</guid>
	  <description><![CDATA[
	     <p>In this blogpost I want to show you how to get Ahead Of Time compilation enabled with lazy loading in combination with webpack 2.</p>

<h3 id="code">Code</h3>

<p><a href="https://github.com/FabianGosebrink/ASPNET-ASPNETCore-Angular-Webpack/tree/master">Github - ASPNET-ASPNETCore-AngularJS-Angular</a></p>

<h3 id="the-router">The Router</h3>

<p>If you want to enable lazy loading in your application with aot you first have to configure your router to load the module lazy - when it gets requested. You can do that with the loadChildren-attribute.</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">export</span> <span class="kd">const</span> <span class="nx">AppRoutes</span><span class="err">:</span> <span class="nx">Routes</span> <span class="o">=</span> <span class="p">[</span>
  <span class="c1">// normal routes</span>
  <span class="p">{</span> <span class="na">path</span><span class="p">:</span> <span class="s1">'food'</span><span class="p">,</span> <span class="na">loadChildren</span><span class="p">:</span> <span class="s1">'./path/to/module.file#ModuleName'</span> <span class="p">},</span>
  <span class="p">{</span>
    <span class="na">path</span><span class="p">:</span> <span class="s1">'**'</span><span class="p">,</span>
    <span class="na">redirectTo</span><span class="p">:</span> <span class="s1">'home'</span>
  <span class="p">}</span>
<span class="p">];</span></code></pre></figure>

<p>The syntax is <code class="highlighter-rouge"><span class="p">{</span><span class="w"> </span><span class="err">path:</span><span class="w"> </span><span class="err">'myPath',</span><span class="w"> </span><span class="err">loadChildren:</span><span class="w"> </span><span class="err">'./path/to/module.file#ModuleName'</span><span class="w"> </span><span class="p">}</span><span class="err">,</span></code></p>

<h3 id="the-module">The Module</h3>

<p>If you did this you have to remove the module import from the module import array where you explicitly imported it in the first place!</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="c1">// imports</span>

<span class="err">@</span><span class="nx">NgModule</span><span class="p">({</span>
    <span class="na">imports</span><span class="p">:</span> <span class="p">[</span>
        <span class="nx">BrowserModule</span><span class="p">,</span>
        <span class="c1">// other imports but NOT your lazy loaded module anymore</span>
        <span class="nx">HomeModule</span>
    <span class="p">],</span>

    <span class="na">declarations</span><span class="p">:</span> <span class="p">[</span>
        <span class="nx">AppComponent</span>
    <span class="p">],</span>

    <span class="na">providers</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// ...</span>
    <span class="p">],</span>

    <span class="na">bootstrap</span><span class="p">:</span> <span class="p">[</span><span class="nx">AppComponent</span><span class="p">]</span>
<span class="p">})</span>

<span class="k">export</span> <span class="kr">class</span> <span class="nx">AppModule</span> <span class="p">{</span> <span class="p">}</span></code></pre></figure>

<h3 id="the-ngc-compiler">The ngc compiler</h3>

<p>If done so you can install the needed packages to get started with the ngc compiler:</p>

<p><code class="highlighter-rouge">npm install @angular/compiler-cli @angular/platform-server --save</code></p>

<p>After this you have to configure a seperate tsconfig-aot.json for Ahead Of Time Compilation:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">
  </span><span class="nt">"compilerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nt">"target"</span><span class="p">:</span><span class="w"> </span><span class="s2">"es5"</span><span class="p">,</span><span class="w">
    </span><span class="nt">"module"</span><span class="p">:</span><span class="w"> </span><span class="s2">"es2015"</span><span class="p">,</span><span class="w">
    </span><span class="nt">"moduleResolution"</span><span class="p">:</span><span class="w"> </span><span class="s2">"node"</span><span class="p">,</span><span class="w">
    </span><span class="nt">"sourceMap"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nt">"emitDecoratorMetadata"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nt">"experimentalDecorators"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nt">"lib"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="s2">"es2015"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"dom"</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nt">"noImplicitAny"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nt">"suppressImplicitAnyIndexErrors"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nt">"files"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"app/app.module.ts"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"path/to/module.file"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"app/main.ts"</span><span class="w">
  </span><span class="p">],</span><span class="w">
  </span><span class="nt">"angularCompilerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nt">"genDir"</span><span class="p">:</span><span class="w"> </span><span class="s2">"aot"</span><span class="p">,</span><span class="w">
    </span><span class="nt">"skipMetadataEmit"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<blockquote>
  <p>Please pay special attention to the “files” array. Because the module is not imported in your application via the <code class="highlighter-rouge">import</code> statement anymore the compiler will not include it in the aot-folder (which is fixed in the “genDir”-attribute). So here you have to add it by yourself but only the path to the module.</p>
</blockquote>

<p>If you now run</p>

<p><code class="highlighter-rouge">node_modules/.bin/ngc -p tsconfig-aot.json</code></p>

<p>an “aot” folder is created which should contain all your compilated files.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>app
├── app.component.ts
├── app.component.html
├── ...
├── app.module.ts
└── main.ts
aot
└── app
    ├── module1
    ├── module2
    ├── module...
    └── ....ngfactory.ts
index.html
systemjs.config.js
tsconfig.json
tslint.json
styles.css
package.json
</code></pre>
</div>

<h3 id="the-new-entrypoint">The (new) entrypoint</h3>

<p>Also as an entry point we specify the file(s) we have but the main file is different. Because we created an output in the aot folder we need to point our entrypoint to that compilated files!</p>

<p>We can do that by adding a new main.ts file called “main-aot.ts” and add the following into it:</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">platformBrowser</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/platform-browser'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">enableProdMode</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">AppModuleNgFactory</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../aot/app/app.module.ngfactory'</span><span class="p">;</span>

<span class="nx">enableProdMode</span><span class="p">();</span>

<span class="nx">platformBrowser</span><span class="p">().</span><span class="nx">bootstrapModuleFactory</span><span class="p">(</span><span class="nx">AppModuleNgFactory</span><span class="p">);</span></code></pre></figure>

<p>Here we are consuming the generated files in the aot folder.</p>

<blockquote>
  <p>If this file causes problems because of not finding any files it may be that the aot folder does not exist yet. This is normal. What does not exist cant be imported. Just create the folder and the errors should go away.</p>
</blockquote>

<h3 id="webpack-comsuming-the-aot-output">Webpack: Comsuming the AoT output</h3>

<p>After that output is created you can go along and consume this files via webpack.</p>

<p>Here it is very important to use the <code class="highlighter-rouge">angular-router-loader</code> which enables loading modules through the string we mentioned in the routes.</p>

<p>So if a route ts file comes along we want to send it through the <code class="highlighter-rouge">angular2-template-loader</code>, <code class="highlighter-rouge">angular-router-loader</code> and the <code class="highlighter-rouge">awesome-typescript-loader</code> to proceed with our files.</p>

<p>The rule for this looks like the following:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">
    </span><span class="err">test:</span><span class="w"> </span><span class="err">/\.ts$/,</span><span class="w">
    </span><span class="err">use:</span><span class="w"> </span><span class="err">[</span><span class="w">
        </span><span class="err">'awesome-typescript-loader',</span><span class="w">
        </span><span class="err">'angular-router-loader?aot=true&amp;genDir=aot/',</span><span class="w">
        </span><span class="err">'angular2-template-loader',</span><span class="w">
    </span><span class="err">]</span><span class="w">
</span><span class="p">}</span><span class="err">,</span></code></pre></figure>

<blockquote>
  <p>Pay attention to the parameters we give to the <code class="highlighter-rouge">angular-router-loader</code>. the <code class="highlighter-rouge">genDir</code> has to match our directory containing our aot compiled output.</p>
</blockquote>

<p>and as an entrypoint we are pointing to the new file we created:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="err">entry:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">'app':</span><span class="w"> </span><span class="err">'./app/main-aot.ts'</span><span class="w">
</span><span class="p">}</span><span class="err">,</span></code></pre></figure>

<p>With this webpack uses our aot-file as an entrypoint and follows all imports in this file.</p>

<p>We also have to tell webpack how to name the files which are recognized as lazy loaded. We can do this by adding a “chunkFilename” in the output-settings:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="err">output:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">path:</span><span class="w"> </span><span class="err">'./.dist/web/aot/',</span><span class="w">
    </span><span class="err">filename:</span><span class="w"> </span><span class="err">'js/[name]-[hash:8].bundle.js',</span><span class="w">
    </span><span class="err">chunkFilename:</span><span class="w"> </span><span class="err">'js/[id].-[hash:8].chunk.js',</span><span class="w">
</span><span class="p">}</span><span class="err">,</span></code></pre></figure>

<h3 id="webpack-adding-tree-shaking">Webpack: Adding tree shaking</h3>

<p>To add tree shaking we have to use the <code class="highlighter-rouge">UglifyJsPlugin</code> from webpack which we can configure like this:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="err">var</span><span class="w"> </span><span class="err">CompressionPlugin</span><span class="w"> </span><span class="err">=</span><span class="w"> </span><span class="err">require(</span><span class="s2">"compression-webpack-plugin"</span><span class="err">);</span><span class="w">
</span><span class="err">//</span><span class="w"> </span><span class="err">...</span><span class="w">
</span><span class="err">plugins:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">...</span><span class="w">
    </span><span class="err">new</span><span class="w"> </span><span class="err">webpack.optimize.UglifyJsPlugin(</span><span class="p">{</span><span class="w">
        </span><span class="err">compress:</span><span class="w"> </span><span class="err">{</span><span class="w">
            </span><span class="err">warnings:</span><span class="w"> </span><span class="err">false</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="err">output:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="err">comments:</span><span class="w"> </span><span class="err">false</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="err">sourceMap:</span><span class="w"> </span><span class="kc">false</span><span class="w">
    </span><span class="err">})</span><span class="p">,</span><span class="w">
    </span><span class="err">new</span><span class="w"> </span><span class="err">CompressionPlugin(</span><span class="p">{</span><span class="w">
        </span><span class="err">asset:</span><span class="w"> </span><span class="nt">"[path].gz[query]"</span><span class="err">,</span><span class="w">
        </span><span class="err">algorithm</span><span class="p">:</span><span class="w"> </span><span class="s2">"gzip"</span><span class="p">,</span><span class="w">
        </span><span class="err">test</span><span class="p">:</span><span class="w"> </span><span class="err">/\.js$|\.html$/</span><span class="p">,</span><span class="w">
        </span><span class="err">threshold</span><span class="p">:</span><span class="w"> </span><span class="mi">10240</span><span class="p">,</span><span class="w">
        </span><span class="err">minRatio</span><span class="p">:</span><span class="w"> </span><span class="mf">0.8</span><span class="w">
    </span><span class="p">}</span><span class="err">)</span><span class="p">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">...</span><span class="w">
</span><span class="p">]</span></code></pre></figure>

<blockquote>
  <p>Here we also added the CompressionPlugin to get the compressed output too.</p>
</blockquote>

<h3 id="wrapping-it-up--beautify-it">Wrapping it up &amp; beautify it</h3>

<p>Ahead of Time compilation and treeshaking are two different things often used together. AoT is done via a different compiler. Treeshaking <em>can</em> be done via webpack but also rollup.js is a way to go.</p>

<p>So we need to have two steps:</p>

<ol>
  <li>compile our files via the ngc compiler</li>
  <li>use the output of that and consume it via webpack</li>
</ol>

<h4 id="beautify-it">beautify it</h4>

<p>You can now “hide” those two commands in the <code class="highlighter-rouge">package.json</code> “scripts” section like this:</p>

<p><code class="highlighter-rouge">"webpack-prod": "npm run ngc &amp;&amp; webpack",</code></p>

<p>which you can run via</p>

<p><code class="highlighter-rouge">npm run webpack-prod</code></p>

<blockquote>
  <p>Be sure to have the ngc command globally installed then…</p>
</blockquote>

<p>I hope i could clarify a bit how aot and treeshaking work with webpack 2 and angular.</p>

<p>Best regards</p>

<p>Fabian</p>

<h4 id="links">Links</h4>

<p><a href="https://angular.io/docs/ts/latest/cookbook/aot-compiler.html">Ahead of time compilation - Angular.io</a></p>

<p><a href="https://github.com/FabianGosebrink/ASPNET-ASPNETCore-Angular-Webpack/tree/master">ASPNET-ASPNETCore-AngularJS-Angular</a></p>

	  ]]></description>
	</item>

	<item>
	  <title>Working with Angular Template Forms</title>
	  <link>//blog/articles/2017/01/14/working-with-angular-2-template-forms/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2017-01-14T13:49:00+01:00</pubDate>
	  <guid>//blog/articles/2017/01/14/working-with-angular-2-template-forms/</guid>
	  <description><![CDATA[
	     <p>In this blog I want explain and show you how to work with Angular’s template driven forms.</p>

<h3 id="the-problem">The Problem</h3>

<p>I was recently giving an Angular course to awesome people and I noticed that working with Angular forms seems to be one of the most complicated things in Angular.</p>

<h3 id="the-situation">The Situation</h3>

<p>We will start with a simple Angular application which has a structure like this:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>app
├── app.component.ts
├── app.component.html
├── form.component.ts
├── form.component.html
├── app.module.ts
└── main.ts
index.html
systemjs.config.js
tsconfig.json
tslint.json
styles.css
package.json
</code></pre>
</div>

<p>this is an easy way to start with Angular and template forms.</p>

<blockquote>
  <p>I did not mention files like favicon etc. They do not really impact our work here</p>
</blockquote>

<p>Now lets got create a simple form. For this I will grab bootstraps most simple form just to get a nice look and feel.</p>

<p><a href="http://getbootstrap.com/css/#forms">Bootstraps Forms</a></p>

<p>Now we add the bootstrap cdn to our <code class="highlighter-rouge">index.html</code>.</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/head&gt;</span></code></pre></figure>

<p>Out app.component.html simply looks like this:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h1&gt;</span>{{title}}<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;form-component&gt;&lt;/form-component&gt;</span>
<span class="nt">&lt;/div&gt;</span></code></pre></figure>

<h3 id="introducing-the-form">Introducing the Form</h3>

<p>We remove the checkbox and the file upload from the copied form from bootstrap just for clarity and add the form template to our form component. Further we want to handle a simple Name for understanding. Lets modify the template to only work with a name.</p>

<p>So our <code class="highlighter-rouge">form.component.html</code> looks like this now:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;form&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"exampleInputName"</span><span class="nt">&gt;</span>Name<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"name"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"exampleInputName"</span> <span class="na">placeholder=</span><span class="s">"Name"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">class=</span><span class="s">"btn btn-default"</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/form&gt;</span></code></pre></figure>

<p>So what we did here so far is nothing Angular related! We just added simple HTML-Form things.</p>

<p>We will now go ahead and make this thing an Angular form.</p>

<h3 id="add-angular-to-the-form">Add Angular to the form</h3>

<h4 id="the-model">The model</h4>

<p>We will use a normal customer to deal with the form. Also nothing spectecular here, we just add a class representing this customer:</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">export</span> <span class="kr">class</span> <span class="nx">Customer</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="k">public</span> <span class="nx">name</span><span class="err">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>and we place it in a special folder called <code class="highlighter-rouge">models</code></p>

<div class="highlighter-rouge"><pre class="highlight"><code>app
├── models
    └──  customer.model.ts
├── app.component.ts
├── app.component.html
├── form.component.ts
├── form.component.html
├── app.module.ts
└── main.ts
index.html
systemjs.config.js
tsconfig.json
tslint.json
styles.css
package.json
</code></pre>
</div>

<p>Then we can make a new model in the components constructor like this</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">export</span> <span class="kr">class</span> <span class="nx">FormComponent</span> <span class="p">{</span>
  <span class="k">public</span> <span class="nx">title</span><span class="err">:</span> <span class="kr">string</span> <span class="o">=</span> <span class="s1">'Template Forms'</span><span class="p">;</span>
  <span class="k">public</span> <span class="nx">model</span><span class="err">:</span> <span class="nx">Customer</span><span class="p">;</span>

  <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">model</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Customer</span><span class="p">(</span><span class="s1">'Fabian'</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h4 id="adding-the-binding-to-the-model-with-ngmodel">Adding the binding to the model with ngModel</h4>

<p>Next thing is to add the binding to the inputs in our forms. And here is the first time we marry Angular with our html.</p>

<p>We take the <code class="highlighter-rouge">ngModel</code>-directive to tell the field “Hey, this thing I give you here is important for you form. Please, my little form, take care of it”</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
    <span class="c">&lt;!--...--&gt;</span>
     <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"name"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"exampleInputName"</span> <span class="na">placeholder=</span><span class="s">"Name"</span> <span class="na">ngModel</span><span class="nt">&gt;</span>
    <span class="c">&lt;!--...--&gt;</span>
<span class="nt">&lt;/div&gt;</span></code></pre></figure>

<p>Now this input is marked with the <code class="highlighter-rouge">ngModel</code>-directive. But what is that good for?</p>

<p>Before we go on clarify that can also take care of something Angular prepared for us. What we want to do now is asking our form about its state. What is the state of our form currently and when the user types something in? We can not access our form yet, because we do not have a name to ask for. So let’s introduce one!</p>

<p>We can do this by adding a variable in the template with the “#”-Sign and tagging the form with the <code class="highlighter-rouge">ngForm</code>-directive Angular prepared for us.</p>

<p>This means:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;form&gt;</span></code></pre></figure>

<p>becomes to</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;form</span> <span class="err">#</span><span class="na">myform=</span><span class="s">"ngForm"</span><span class="nt">&gt;</span></code></pre></figure>

<p>We have introduced a variable and assign the complete form to it. Angular introduced this <code class="highlighter-rouge">ngForm</code> for us in the background, we are only catching it up and take a variable to make it accessible. Now we are able to ask the form for its state! This variable is called a template reference variable.</p>

<p>What we want is to see the state of our form. We achieve that by adding the ngModel-directive, by giving the form a variable we can access it and one last piece is missing. If we use ngModel in an form control, we also have to tell the Angular form how it should be accessed. So we need a name. Lets introduce a name that this control can be registered onto the form under that name.</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
    <span class="c">&lt;!--...--&gt;</span>
     <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"exampleInputName"</span> <span class="na">placeholder=</span><span class="s">"Name"</span> <span class="na">ngModel</span> <span class="na">name=</span><span class="s">"name"</span><span class="nt">&gt;</span>
    <span class="c">&lt;!--...--&gt;</span>
<span class="nt">&lt;/div&gt;</span></code></pre></figure>

<p>With those three things we can ask the form about its state with</p>

<p><code class="highlighter-rouge"> myform.value </code></p>

<p>like this:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;p&gt;</span> {{ myform.value | json }} <span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;form</span> <span class="err">#</span><span class="na">myform=</span><span class="s">"ngForm"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"exampleInputName"</span><span class="nt">&gt;</span>Name<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"exampleInputName"</span> <span class="na">placeholder=</span><span class="s">"Name"</span> <span class="na">ngModel</span> <span class="na">name=</span><span class="s">"name"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">class=</span><span class="s">"btn btn-default"</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/form&gt;</span></code></pre></figure>

<p>The ngModel directive is forcing Angular to persist the state of the form to the form object. So we read it with</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{{</span> <span class="nx">myform</span><span class="p">.</span><span class="nx">value</span> <span class="o">|</span> <span class="nx">json</span> <span class="p">}}</span></code></pre></figure>

<p>But further to that it is doing nothing. We got our state only persisted to the form. We want to interact with our model, right?</p>

<p>Therefore we have to intruduce some kind of databinding. As we know that databinding is working with () and/or [] we have no databinding going on here so far.</p>

<p>We could do the property binding like this</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"> <span class="nt">&lt;input</span> <span class="err">...</span> <span class="err">[</span><span class="na">ngModel</span><span class="err">]="</span><span class="na">model</span><span class="err">.</span><span class="na">name</span><span class="err">"</span> <span class="na">name=</span><span class="s">"name"</span><span class="nt">&gt;</span></code></pre></figure>

<p>Then Angular would take this ngModel directive and connect it to a property on our component called “model.name”.</p>

<blockquote>
  <p>Remember we created a model on our component with its constructor</p>
</blockquote>

<p>When the initial value is set from the component the value would be reflected into the input field. But this is only one way binding! When the value in the input changes it would not be reflected into the model. The form would change its state but the model know nothing about it.</p>

<p>To get the model also changed when the user types something in we have to introduce two way binding like this:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"> <span class="nt">&lt;input</span> <span class="err">...</span> <span class="err">[(</span><span class="na">ngModel</span><span class="err">)]="</span><span class="na">model</span><span class="err">.</span><span class="na">name</span><span class="err">"</span> <span class="na">name=</span><span class="s">"name"</span><span class="nt">&gt;</span></code></pre></figure>

<p>So the forms state would now reflect the changes into the forms state <em>and</em> into the model we want to work with when submitting. In addition to that the initial state is set because we create a model on the constructor.</p>

<h4 id="further-steps-with-the-form">Further steps with the form</h4>

<p>We can use the forms template reference variable also to check some properties on the form.</p>

<blockquote>
  <p>The template reference variable offers us a form-property which we can check</p>
</blockquote>

<p>We can check the following states on the form :</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="c">&lt;!--</span> <span class="k">if</span> <span class="nx">user</span> <span class="nx">touched</span> <span class="nx">every</span> <span class="nx">field</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">form</span> <span class="o">--&gt;</span>
<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">myform</span><span class="p">.</span><span class="nx">form</span><span class="p">.</span><span class="nx">touched</span><span class="p">}}</span><span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>
<span class="c">&lt;!--</span> <span class="k">if</span> <span class="nx">every</span> <span class="nx">field</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">form</span> <span class="nx">is</span> <span class="nx">not</span> <span class="nx">touched</span> <span class="nx">yet</span> <span class="o">--&gt;</span>
<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">myform</span><span class="p">.</span><span class="nx">form</span><span class="p">.</span><span class="nx">untouched</span><span class="p">}}</span><span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>
<span class="c">&lt;!--</span> <span class="nx">field</span> <span class="nx">has</span> <span class="nx">not</span> <span class="nx">been</span> <span class="nx">changed</span> <span class="nx">value</span> <span class="nx">since</span> <span class="nx">it</span> <span class="nx">is</span> <span class="nx">displayed</span> <span class="o">--&gt;</span>
<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">myform</span><span class="p">.</span><span class="nx">form</span><span class="p">.</span><span class="nx">pristine</span><span class="p">}}</span><span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>
<span class="c">&lt;!--</span> <span class="nx">user</span> <span class="nx">changed</span> <span class="nx">the</span> <span class="nx">value</span> <span class="nx">since</span> <span class="nx">it</span> <span class="nx">is</span> <span class="nx">displayed</span> <span class="o">--&gt;</span>
<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">myform</span><span class="p">.</span><span class="nx">form</span><span class="p">.</span><span class="nx">dirty</span><span class="p">}}</span><span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>
<span class="c">&lt;!--</span> <span class="nx">form</span> <span class="nx">is</span> <span class="nx">valid</span> <span class="o">--&gt;</span>
<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">myform</span><span class="p">.</span><span class="nx">form</span><span class="p">.</span><span class="nx">valid</span><span class="p">}}</span><span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>
<span class="c">&lt;!--</span> <span class="nx">form</span> <span class="nx">is</span> <span class="nx">invalid</span> <span class="o">--&gt;</span>
<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">myform</span><span class="p">.</span><span class="nx">form</span><span class="p">.</span><span class="nx">invalid</span><span class="p">}}</span><span class="o">&lt;</span><span class="sr">/p&gt;</span></code></pre></figure>

<p>Lets face the “valid” and “invalid” for a second. We can apply a normal HTML <code class="highlighter-rouge">required</code> attribute at one control just to have a reason why a form should be valid or invalid.</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;form</span> <span class="err">#</span><span class="na">myform=</span><span class="s">"ngForm"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"exampleInputName"</span><span class="nt">&gt;</span>Name<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"exampleInputName"</span> <span class="na">placeholder=</span><span class="s">"Name"</span> <span class="err">[(</span><span class="na">ngModel</span><span class="err">)]="</span><span class="na">model</span><span class="err">.</span><span class="na">name</span><span class="err">"</span> <span class="na">name=</span><span class="s">"name"</span> <span class="na">required</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">class=</span><span class="s">"btn btn-default"</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/form&gt;</span></code></pre></figure>

<p>So we can go ahead and for example disable the submit button and show a message when the form is not valid.</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;form</span> <span class="err">#</span><span class="na">myform=</span><span class="s">"ngForm"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"exampleInputName"</span><span class="nt">&gt;</span>Name<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"exampleInputName"</span> <span class="na">placeholder=</span><span class="s">"Name"</span> <span class="err">[(</span><span class="na">ngModel</span><span class="err">)]="</span><span class="na">model</span><span class="err">.</span><span class="na">name</span><span class="err">"</span> <span class="na">name=</span><span class="s">"name"</span> <span class="na">required</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/div&gt;</span>

    <span class="nt">&lt;span</span> <span class="err">*</span><span class="na">ngIf=</span><span class="s">"!myform.form.valid"</span><span class="nt">&gt;</span>Check your form<span class="nt">&lt;/span&gt;</span>

    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">class=</span><span class="s">"btn btn-default"</span> <span class="err">[</span><span class="na">disabled</span><span class="err">]="!</span><span class="na">myform</span><span class="err">.</span><span class="na">form</span><span class="err">.</span><span class="na">valid</span><span class="err">"</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>

<span class="nt">&lt;/form&gt;</span></code></pre></figure>

<p>So this gives us the possibility to ask the form for some variables Angular gives us.</p>

<p>We can also do this whole template variable thing on a control itself and ask the simple control for its state instead of the whole form. The same properties which are valid for the form apply also on the control. Therefore we have to grab our ngModel-directive again and assign it to a template variable to make the control, or better: the model assigned to this control, accessible.</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"> <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"exampleInputName"</span> <span class="na">placeholder=</span><span class="s">"Name"</span> <span class="err">[(</span><span class="na">ngModel</span><span class="err">)]="</span><span class="na">model</span><span class="err">.</span><span class="na">name</span><span class="err">"</span> <span class="na">name=</span><span class="s">"name"</span> <span class="na">required</span> <span class="err">#</span><span class="na">name=</span><span class="s">"ngModel"</span><span class="nt">&gt;</span></code></pre></figure>

<p>Now we can ask for the state of this control in the same way like the form:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;form</span> <span class="err">#</span><span class="na">myform=</span><span class="s">"ngForm"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"exampleInputName"</span><span class="nt">&gt;</span>Name<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"exampleInputName"</span> <span class="na">placeholder=</span><span class="s">"Name"</span> <span class="err">[(</span><span class="na">ngModel</span><span class="err">)]="</span><span class="na">model</span><span class="err">.</span><span class="na">name</span><span class="err">"</span> <span class="na">name=</span><span class="s">"name"</span> <span class="na">required</span> <span class="err">#</span><span class="na">name=</span><span class="s">"ngModel"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/div&gt;</span>

    <span class="nt">&lt;span</span> <span class="err">*</span><span class="na">ngIf=</span><span class="s">"!name.valid"</span><span class="nt">&gt;</span>name is invalid<span class="nt">&lt;/span&gt;</span>

    <span class="nt">&lt;span</span> <span class="err">*</span><span class="na">ngIf=</span><span class="s">"!myform.form.valid"</span><span class="nt">&gt;</span>Check your form<span class="nt">&lt;/span&gt;</span>

    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">class=</span><span class="s">"btn btn-default"</span> <span class="err">[</span><span class="na">disabled</span><span class="err">]="!</span><span class="na">myform</span><span class="err">.</span><span class="na">form</span><span class="err">.</span><span class="na">valid</span><span class="err">"</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>

<span class="nt">&lt;/form&gt;</span></code></pre></figure>

<h4 id="submitting-the-form">Submitting the Form</h4>

<p>Our button at the end of the form is currently set to submit the form. But we do not catch the submitting so far. So lets do that.</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;h4&gt;</span>Form Value<span class="nt">&lt;/h4&gt;</span>

<span class="nt">&lt;p&gt;</span>{{myform.value | json}}<span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;form</span> <span class="err">#</span><span class="na">myform=</span><span class="s">"ngForm"</span> <span class="err">(</span><span class="na">ngSubmit</span><span class="err">)="</span><span class="na">alertMyFormModel</span><span class="err">()"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"exampleInputEmail1"</span><span class="nt">&gt;</span>Email address<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"email"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"exampleInputEmail1"</span> <span class="na">placeholder=</span><span class="s">"Email"</span> <span class="na">ngModel</span> <span class="na">name=</span><span class="s">"email"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"exampleInputPassword1"</span><span class="nt">&gt;</span>Password<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"password"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"exampleInputPassword1"</span> <span class="na">placeholder=</span><span class="s">"Password"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">class=</span><span class="s">"btn btn-default"</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/form&gt;</span></code></pre></figure>

<p>We introduced the ngSubmit-directive and assigned it a function we have to implement on our component.</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">export</span> <span class="kr">class</span> <span class="nx">FormComponent</span> <span class="p">{</span>
  <span class="k">public</span> <span class="nx">title</span><span class="err">:</span> <span class="kr">string</span> <span class="o">=</span> <span class="s1">'Template Forms'</span><span class="p">;</span>
  <span class="k">public</span> <span class="nx">model</span><span class="err">:</span> <span class="nx">Customer</span><span class="p">;</span>

  <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">model</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Customer</span><span class="p">(</span><span class="s1">'Fabian'</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nx">alertMyFormModel</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">));</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>If you now click the button the form gets submitted and you should see the model in a json string in an alert box.</p>

<p>I hope I could clarify some things about Angulars template driven forms.</p>

<p>Best regards</p>

<p>Fabian</p>


	  ]]></description>
	</item>

	<item>
	  <title>How to implement a table filter in Angular</title>
	  <link>//blog/articles/2016/11/21/how-to-implement-a-table-filter-in-angular-2/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2016-11-21T21:16:00+01:00</pubDate>
	  <guid>//blog/articles/2016/11/21/how-to-implement-a-table-filter-in-angular-2/</guid>
	  <description><![CDATA[
	     <p>In this post I want to show you how to implement a table filter in Angular.</p>

<p>Code: <a href="https://github.com/FabianGosebrink/ASPNET-ASPNETCore-Angular-Webpack/blob/master/AngularCLI/src/app/food/pipes/filter.pipe.ts">https://github.com/FabianGosebrink/ASPNET-ASPNETCore-Angular-Webpack/blob/master/AngularCLI/src/app/food/pipes/filter.pipe.ts</a></p>

<p>A table in your application is maybe one of the most used controls. So is a filter for the table.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/11/filter-1024x133.jpg" alt="In this post I want to show you how to implement a table filter in Angular2" /></p>

<p>You can achieve this using a pipe:</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">Pipe</span><span class="p">,</span> <span class="nx">PipeTransform</span><span class="p">,</span> <span class="nx">Injectable</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>

<span class="err">@</span><span class="nx">Pipe</span><span class="p">({</span>
    <span class="na">name</span><span class="p">:</span> <span class="s1">'filter'</span>
<span class="p">})</span>

<span class="err">@</span><span class="nx">Injectable</span><span class="p">()</span>
<span class="k">export</span> <span class="kr">class</span> <span class="nx">FilterPipe</span> <span class="k">implements</span> <span class="nx">PipeTransform</span> <span class="p">{</span>
    <span class="nx">transform</span><span class="p">(</span><span class="nx">items</span><span class="err">:</span> <span class="kr">any</span><span class="p">[],</span> <span class="nx">field</span><span class="err">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">value</span><span class="err">:</span> <span class="kr">string</span><span class="p">)</span><span class="err">:</span> <span class="kr">any</span><span class="p">[]</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">items</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="p">[];</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">field</span> <span class="o">||</span> <span class="o">!</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">items</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nx">items</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">singleItem</span> <span class="o">=&gt;</span> <span class="nx">singleItem</span><span class="p">[</span><span class="nx">field</span><span class="p">].</span><span class="nx">toLowerCase</span><span class="p">().</span><span class="nx">includes</span><span class="p">(</span><span class="nx">value</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()));</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>This pipe takes an array if items and checks if the field which is also a parameter on a single items contains the value the user types. It returns the array of matching items.</p>

<p>The Pipe is available through the name “filter”.</p>

<p>After implementing this the pipe has to be registered on a module to make it available in our application. Could be your application module or if you have one, a shared module. In case of the shared one: Do not forget to export it. ;-)</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">NgModule</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">BrowserModule</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/platform-browser'</span><span class="p">;</span>

<span class="c1">// ...</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">FilterPipe</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../pipes/filter.pipe'</span><span class="p">;</span>

<span class="err">@</span><span class="nx">NgModule</span><span class="p">({</span>
    <span class="na">imports</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// Modules</span>
        <span class="nx">BrowserModule</span>
    <span class="p">],</span>

    <span class="na">declarations</span><span class="p">:</span> <span class="p">[</span>

        <span class="c1">// Components &amp;amp; directives</span>
        <span class="nx">FilterPipe</span>
    <span class="p">],</span>

    <span class="na">providers</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// Services</span>
    <span class="p">],</span>

    <span class="na">exports</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// ...</span>
        <span class="nx">FilterPipe</span>
    <span class="p">]</span>
<span class="p">})</span>

<span class="k">export</span> <span class="kr">class</span> <span class="nx">SharedModule</span> <span class="p">{</span> <span class="p">}</span></code></pre></figure>

<p>AppModule:</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">NgModule</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="c1">// ...</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">SharedModule</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'./modules/shared.module'</span><span class="p">;</span>

<span class="c1">// ...</span>

<span class="err">@</span><span class="nx">NgModule</span><span class="p">({</span>
    <span class="na">imports</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// ...</span>
        <span class="nx">SharedModule</span>
    <span class="p">],</span>

    <span class="na">declarations</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// ...</span>
    <span class="p">],</span>

    <span class="na">providers</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// ...</span>
    <span class="p">],</span>

    <span class="na">bootstrap</span><span class="p">:</span> <span class="p">[</span><span class="nx">AppComponent</span><span class="p">]</span>
<span class="p">})</span>

<span class="k">export</span> <span class="kr">class</span> <span class="nx">AppModule</span> <span class="p">{</span> <span class="p">}</span></code></pre></figure>

<p>In the template you have to add a input to a form to display a field to the user where the searchstring can be typed. After this the pipe has to be applied and the searchstring has to be databound in the template.</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">OnInit</span><span class="p">,</span> <span class="nx">Output</span><span class="p">,</span> <span class="nx">EventEmitter</span><span class="p">,</span> <span class="nx">Input</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="err">@</span><span class="nx">Component</span><span class="p">({</span>
    <span class="na">selector</span><span class="p">:</span> <span class="s1">'foodList'</span><span class="p">,</span>
    <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'app/components/foodList/foodList.component.html'</span>
<span class="p">})</span>

<span class="k">export</span> <span class="kr">class</span> <span class="nx">FoodListComponent</span> <span class="p">{</span>
    <span class="k">public</span> <span class="nx">foodItem</span><span class="err">:</span> <span class="nx">FoodItem</span><span class="p">;</span>
    <span class="k">public</span> <span class="nx">searchString</span><span class="err">:</span> <span class="kr">string</span><span class="p">;</span>

    <span class="c1">// ...</span>
<span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;form&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"input-group"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"input-group-addon"</span><span class="nt">&gt;&lt;i</span> <span class="na">class=</span><span class="s">"glyphicon glyphicon-search"</span><span class="nt">&gt;&lt;/i&gt;&lt;/div&gt;</span>
            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">name=</span><span class="s">"searchString"</span> <span class="na">placeholder=</span><span class="s">"Type to search..."</span> <span class="err">[(</span><span class="na">ngModel</span><span class="err">)]="</span><span class="na">searchString</span><span class="err">"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/form&gt;</span>

<span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">"table"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
        <span class="nt">&lt;th&gt;</span>Name<span class="nt">&lt;/th&gt;</span>
        <span class="nt">&lt;th&gt;</span>Calories<span class="nt">&lt;/th&gt;</span>
        <span class="nt">&lt;th</span> <span class="na">class=</span><span class="s">"text-right"</span><span class="nt">&gt;</span>Actions<span class="nt">&lt;/th&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
    <span class="nt">&lt;tr</span> <span class="err">*</span><span class="na">ngFor=</span><span class="s">"let food of foods | filter : 'name' : searchString; let i = index"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">"text-left"</span><span class="nt">&gt;</span>
            
        <span class="nt">&lt;/td&gt;</span>
        // ...
    <span class="nt">&lt;/tr&gt;</span>
<span class="nt">&lt;/table&gt;</span></code></pre></figure>

<p>Now the table is filtered after the field “name” by the string which is typed into the searchString-input.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/11/searchFilter-1024x316.gif" alt="In this post I want to show you how to implement a table filter in Angular2" /></p>

<p>HTH</p>

<p>Fabian</p>

	  ]]></description>
	</item>

	<item>
	  <title>How to debug an Angular application with Chrome and VS Code</title>
	  <link>//blog/articles/2016/10/16/how-to-debug-an-angular-application-with-chrome-and-vs-code/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2016-10-16T17:50:00+02:00</pubDate>
	  <guid>//blog/articles/2016/10/16/how-to-debug-an-angular-application-with-chrome-and-vs-code/</guid>
	  <description><![CDATA[
	     <p>In this blogpost I want to show you how to debug an Angular application with Chrome and VS Code.</p>

<p>First of all you need to install the extension in VS Code.</p>

<p>You can find it here</p>

<p><a href="https://github.com/Microsoft/vscode-chrome-debug">https://github.com/Microsoft/vscode-chrome-debug</a></p>

<p>or search in the extensions tab for the plugin directly:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/10/HowtodebuganAngular2applicationwithChromeandVSCode_01.jpg" alt="How to debug an Angular application with Chrome and VS Code" /></p>

<p>After installing you probably have to enable the plugin and restart VS Code but in the end you will see your folder structure like normal. Then head over to the debug tab and press the button for creating you an new configuration and select the “Chrome” environment.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/10/HowtodebuganAngular2applicationwithChromeandVSCode_02-1024x276.jpg" alt="How to debug an Angular application with Chrome and VS Code" /></p>

<p>After doing this the extension created a new folder (if you do not have it already) called “.vscode” and a “launch.json” in it initially looking like this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
    <span class="s2">"version"</span><span class="err">:</span> <span class="s2">"0.2.0"</span><span class="p">,</span>
    <span class="s2">"configurations"</span><span class="err">:</span> <span class="p">[</span>
        <span class="p">{</span>
            <span class="s2">"name"</span><span class="p">:</span> <span class="s2">"Launch Chrome against localhost, with sourcemaps"</span><span class="p">,</span>
            <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"chrome"</span><span class="p">,</span>
            <span class="s2">"request"</span><span class="p">:</span> <span class="s2">"launch"</span><span class="p">,</span>
            <span class="s2">"url"</span><span class="p">:</span> <span class="s2">"http://localhost:8080"</span><span class="p">,</span>
            <span class="s2">"sourceMaps"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="s2">"webRoot"</span><span class="p">:</span> <span class="s2">"${workspaceRoot}"</span>
        <span class="p">},</span>
        <span class="p">{</span>
            <span class="s2">"name"</span><span class="p">:</span> <span class="s2">"Attach to Chrome, with sourcemaps"</span><span class="p">,</span>
            <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"chrome"</span><span class="p">,</span>
            <span class="s2">"request"</span><span class="p">:</span> <span class="s2">"attach"</span><span class="p">,</span>
            <span class="s2">"port"</span><span class="p">:</span> <span class="mi">9222</span><span class="p">,</span>
            <span class="s2">"sourceMaps"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="s2">"webRoot"</span><span class="p">:</span> <span class="s2">"${workspaceRoot}"</span>
        <span class="p">}</span>
    <span class="p">]</span>
<span class="p">}</span></code></pre></figure>

<p>Our folder strucutre tells us that the files are served from the root.</p>

<p>So, the “webRoot”: “${workspaceRoot}”” setting is good to go for us. We will open a new Chrome instance but it needs an existing running server. So, if you use something like lite-server, you can easily type “lite-server” at the root of your web application or place it in your NPM command chain in the “NPM Start” command. This is what I did.
But before we go we need to adjust the urls where the server is running on and the url where the Chrome instance is starting.</p>

<p>So replace the port in the config file with the port from your lite-server. In my cae thats “3000”. This is how your config look like then:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
    <span class="s2">"version"</span><span class="err">:</span> <span class="s2">"0.2.0"</span><span class="p">,</span>
    <span class="s2">"configurations"</span><span class="err">:</span> <span class="p">[</span>
        <span class="p">{</span>
            <span class="s2">"name"</span><span class="p">:</span> <span class="s2">"Launch Chrome against localhost, with sourcemaps"</span><span class="p">,</span>
            <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"chrome"</span><span class="p">,</span>
            <span class="s2">"request"</span><span class="p">:</span> <span class="s2">"launch"</span><span class="p">,</span>
            <span class="s2">"url"</span><span class="p">:</span> <span class="s2">"http://localhost:3000"</span><span class="p">,</span>
            <span class="s2">"sourceMaps"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="s2">"webRoot"</span><span class="p">:</span> <span class="s2">"${workspaceRoot}"</span>
        <span class="p">},</span>
        <span class="p">{</span>
            <span class="s2">"name"</span><span class="p">:</span> <span class="s2">"Attach to Chrome, with sourcemaps"</span><span class="p">,</span>
            <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"chrome"</span><span class="p">,</span>
            <span class="s2">"request"</span><span class="p">:</span> <span class="s2">"attach"</span><span class="p">,</span>
            <span class="s2">"port"</span><span class="p">:</span> <span class="mi">9222</span><span class="p">,</span>
            <span class="s2">"sourceMaps"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="s2">"webRoot"</span><span class="p">:</span> <span class="s2">"${workspaceRoot}"</span>
        <span class="p">}</span>
    <span class="p">]</span>
<span class="p">}</span></code></pre></figure>

<p>Then start the lite server and just hit “play”</p>

<p><img src="/assets/articles/wp-content/uploads/2016/10/HowtodebuganAngular2applicationwithChromeandVSCode_04.jpg" alt="How to debug an Angular application with Chrome and VS Code" /></p>

<p><img src="/assets/articles/wp-content/uploads/2016/10/HowtodebuganAngular2applicationwithChromeandVSCode-1024x608.gif" alt="How to debug an Angular application with Chrome and VS Code" /></p>

<p>Chrome starts and you can debug your page in VS Code. Of course you can also confugre Chrome to attach directly. See here for examples:</p>

<p><a href="https://github.com/Microsoft/vscode-chrome-debug/wiki/Examples">https://github.com/Microsoft/vscode-chrome-debug/wiki/Examples</a></p>

<p>Hope this helps anybody</p>

<p>BR</p>

<p>Fabian</p>

	  ]]></description>
	</item>

	<item>
	  <title>Cross Platform Builds with Angular, Gulp and Webpack</title>
	  <link>//blog/articles/2016/06/17/cross-platform-builds-with-angular-2-gulp-and-webpack/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2016-06-17T19:09:00+02:00</pubDate>
	  <guid>//blog/articles/2016/06/17/cross-platform-builds-with-angular-2-gulp-and-webpack/</guid>
	  <description><![CDATA[
	     <p>In this blogpost I want to show how to create Cross Platform Builds with Angular, Gulp and Webpack</p>

<p><a href="https://webpack.github.io/" title="Webpack">Webpack</a></p>

<p><a href="http://gulpjs.com/" title="Gulp">Gulp</a></p>

<p><a href="http://angular.io/" title="Angular2">Angular</a></p>

<p>Code can be found here: <a href="https://github.com/FabianGosebrink/Foodchooser-ASPNET-Angular-Cross-Platform">https://github.com/FabianGosebrink/Foodchooser-ASPNET-Angular-Cross-Platform</a></p>

<h3 id="setting-up-the-folder-structure">Setting up the folder structure</h3>

<p>The folder structure is very important but also one of the most discussed in the internet I think ;). Mine looks like the following:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/06/folderStructure.png" alt="Angular2 webpack" /></p>

<p>Whereas “app” contains my Angular 2 application and the other files and folders speak for theirselves.</p>

<h2 id="the-goal">The goal</h2>

<p>The sense of this blogpost is now to get a build with webpack AND gulp combined to have the same cross platform functionality we are used from a “gulp-only” build.</p>

<h3 id="the-past">The past</h3>

<p>In the past the problem with Angular 2 and gulp was the bundling and the minification of the application. Gulp works with streams and files whereas angular 2 is build with related components which are imported and then used. We can not concat every file anymore in the correct order and minify it to distribute an application.</p>

<h3 id="the-solution">The solution</h3>

<p>The solution (or at least one of them) is webpack. Webpack is slightly different from gulp, where it can resolve the dependencies and use your “import” and “require” statements to see when which file is used and has to be included.</p>

<h2 id="the-files">The files</h2>

<p>Now I want to show you the files which can make this whole thing possible. See the “gulptasks”-folder to divide the responsibilities of building each target platform.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/06/gulpFiles.png" alt="angular2 webpack" /></p>

<h3 id="webpackconfigjs">webpack.config.js</h3>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">ExtractTextPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'extract-text-webpack-plugin'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'webpack'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">HtmlWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'html-webpack-plugin'</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
        <span class="s1">'polyfills'</span><span class="p">:</span> <span class="s1">'./app/polyfills.ts'</span><span class="p">,</span>
        <span class="s1">'vendor'</span><span class="p">:</span> <span class="s1">'./app/vendor.ts'</span><span class="p">,</span>
        <span class="s1">'app'</span><span class="p">:</span> <span class="s1">'./app/main.ts'</span>
    <span class="p">},</span>
    <span class="na">resolve</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">extensions</span><span class="p">:</span> <span class="p">[</span><span class="s1">''</span><span class="p">,</span> <span class="s1">'.ts'</span><span class="p">,</span> <span class="s1">'.js'</span><span class="p">,</span> <span class="s1">'.css'</span><span class="p">,</span> <span class="s1">'.html'</span><span class="p">]</span>
    <span class="p">},</span>
    <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">filename</span><span class="p">:</span> <span class="s1">'[name].bundle.js'</span>
    <span class="p">},</span>
    <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">loaders</span><span class="p">:</span> <span class="p">[</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">ts$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'ts'</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">html$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'html'</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.(</span><span class="sr">png|jpe</span><span class="se">?</span><span class="sr">g|gif|svg|woff|woff2|ttf|eot|ico</span><span class="se">)</span><span class="sr">$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'file?name=fonts/[name].[hash].[ext]'</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">css$/</span><span class="p">,</span>
                <span class="na">exclude</span><span class="p">:</span> <span class="s1">'./app'</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="nx">ExtractTextPlugin</span><span class="p">.</span><span class="nx">extract</span><span class="p">(</span><span class="s1">'style'</span><span class="p">,</span> <span class="s1">'css?sourceMap'</span><span class="p">)</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">css$/</span><span class="p">,</span>
                <span class="na">include</span><span class="p">:</span> <span class="s1">'./app'</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'raw'</span>
            <span class="p">}</span>
        <span class="p">]</span>
    <span class="p">},</span>
    <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
        <span class="k">new</span> <span class="nx">ExtractTextPlugin</span><span class="p">(</span><span class="s1">'[name].bundle.css'</span><span class="p">),</span>
        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">CommonsChunkPlugin</span><span class="p">({</span>
            <span class="na">name</span><span class="p">:</span> <span class="p">[</span><span class="s1">'app'</span><span class="p">,</span> <span class="s1">'vendor'</span><span class="p">,</span> <span class="s1">'polyfills'</span><span class="p">]</span>
        <span class="p">}),</span>
        <span class="k">new</span> <span class="nx">HtmlWebpackPlugin</span><span class="p">({</span>
            <span class="na">template</span><span class="p">:</span> <span class="s1">'./index.html'</span>
        <span class="p">})</span>
    <span class="p">],</span>
    <span class="na">devServer</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">historyApiFallback</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="na">stats</span><span class="p">:</span> <span class="s1">'minimal'</span>
    <span class="p">}</span>
<span class="p">};</span></code></pre></figure>

<p>This file is plain simple:</p>

<p>First we tell webpack that we have three entry-points (three files to start) in our application which are “app”, “vendor” and “polyfills”</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">entry</span><span class="err">:</span> <span class="p">{</span>
<span class="s1">'polyfills'</span><span class="err">:</span> <span class="s1">'./app/polyfills.ts'</span><span class="p">,</span>
<span class="s1">'vendor'</span><span class="err">:</span> <span class="s1">'./app/vendor.ts'</span><span class="p">,</span>
<span class="s1">'app'</span><span class="err">:</span> <span class="s1">'./app/main.ts'</span>
<span class="p">},</span></code></pre></figure>

<p>Then we tell webpack which files to look for…</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">resolve</span><span class="err">:</span> <span class="p">{</span>
<span class="nl">extensions</span><span class="p">:</span> <span class="p">[</span><span class="s1">''</span><span class="p">,</span> <span class="s1">'.ts'</span><span class="p">,</span> <span class="s1">'.js'</span><span class="p">,</span> <span class="s1">'.css'</span><span class="p">,</span> <span class="s1">'.html'</span><span class="p">]</span>
<span class="p">},</span></code></pre></figure>

<p>…how the js-files should be named on output…</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">output</span><span class="err">:</span> <span class="p">{</span>
<span class="nl">filename</span><span class="p">:</span> <span class="s1">'[name].bundle.js'</span>
<span class="p">},</span></code></pre></figure>

<p>… and in the modules part we define how to treat the several file types.</p>

<p>The plugins section then sticks together every operation we do with the files. So this is normal webpack as you can see in several repositories as well.</p>

<p>But how to deal with gulp? Well…there is an npm package…;) It’s called <code class="highlighter-rouge">webpack-stream</code> and allows us to do tasks like this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">'web-compile-with-webpack'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">'./app/main.js'</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">webpack</span><span class="p">(</span><span class="nx">require</span><span class="p">(</span><span class="s1">'../webpack.config.js'</span><span class="p">)))</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s2">"../.temp/webapp/"</span><span class="p">));</span>
<span class="p">});</span></code></pre></figure>

<p>So if we trigger this gulp-tasks our application is build an bundles and so on and will be copied to the specified folder with gulp.</p>

<p>After we did this we can go ahead like normal.</p>

<p>Because we also have a dev-server from webpack in the repository above we will have a index.html fully loaded to execute everything. The gulp-html-comments make sure that everything in between those comments gets overwritten when we inject sources with gulp.</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;html&gt;</span>

<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>FoodChooser Angular 2<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1"</span><span class="nt">&gt;</span>

    <span class="c">&lt;!-- inject:css --&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"vendor.bundle.css"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"app.bundle.css"</span><span class="nt">&gt;</span>
    <span class="c">&lt;!-- endinject --&gt;</span>

<span class="nt">&lt;/head&gt;</span>

<span class="c">&lt;!-- 3. Display the application --&gt;</span>

<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;foodChooser-app&gt;</span>Loading...<span class="nt">&lt;/foodChooser-app&gt;</span>
<span class="nt">&lt;/body&gt;</span>

<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"cordova.js"</span><span class="nt">&gt;&lt;/script&gt;</span>

<span class="c">&lt;!-- inject:js --&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"polyfills.bundle.js"</span><span class="nt">&gt;&lt;/script&gt;</span>

<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"vendor.bundle.js"</span><span class="nt">&gt;&lt;/script&gt;</span>

<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"app.bundle.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="c">&lt;!-- endinject --&gt;</span>

<span class="nt">&lt;script&gt;</span>
    <span class="c">&lt;!--</span> <span class="nx">Toggle</span> <span class="nx">Hamburger</span> <span class="nx">Menu</span> <span class="nx">on</span> <span class="nx">mobile</span> <span class="o">--&gt;</span>
    <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">'click'</span><span class="p">,</span><span class="s1">'.navbar-collapse.in'</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span> <span class="nx">$</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">).</span><span class="nx">is</span><span class="p">(</span><span class="s1">'a'</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">$</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'class'</span><span class="p">)</span> <span class="o">!=</span> <span class="s1">'dropdown-toggle'</span> <span class="p">)</span> <span class="p">{</span>
        <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">collapse</span><span class="p">(</span><span class="s1">'hide'</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">});</span>

<span class="nt">&lt;/script&gt;</span>

<span class="nt">&lt;/html&gt;</span></code></pre></figure>

<p>The complete tasks for the web solution are:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">'build:web:prod'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">runSeq</span><span class="p">(</span>
        <span class="s1">'web-clean-temp-folder'</span><span class="p">,</span>        <span class="c1">// cleans the temp folder</span>
        <span class="s1">'web-compile-with-webpack'</span><span class="p">,</span>     <span class="c1">// compiles the sources with webpack</span>
        <span class="s1">'web-copy-index-to-webapp-temp-folder'</span><span class="p">,</span>     <span class="c1">// copies the index.html to the temp folder</span>
        <span class="s1">'web-inject-in-html'</span><span class="p">,</span>        <span class="c1">// injects the webpack-output into the index.html with gulp</span>
        <span class="s1">'web-clean-dist-folder'</span><span class="p">,</span>    <span class="c1">// clean the dist folder first...</span>
        <span class="s1">'web-copy-to-dist'</span><span class="p">,</span> <span class="c1">// copy it</span>
        <span class="nx">done</span><span class="p">);</span>
<span class="p">});</span></code></pre></figure>

<p>After we run this the index.html looks quite the same:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">title</span><span class="o">&gt;</span><span class="nx">FoodChooser</span> <span class="nx">Angular</span> <span class="mi">2</span><span class="o">&lt;</span><span class="sr">/title</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="nx">meta</span> <span class="nx">name</span><span class="o">=</span><span class="s2">"viewport"</span> <span class="nx">content</span><span class="o">=</span><span class="s2">"width=device-width, initial-scale=1"</span><span class="o">&gt;</span>

    <span class="c">&lt;!--</span> <span class="nx">inject</span><span class="err">:</span><span class="nx">css</span> <span class="o">--&gt;</span>
    <span class="o">&lt;</span><span class="nx">link</span> <span class="nx">rel</span><span class="o">=</span><span class="s2">"stylesheet"</span> <span class="nx">href</span><span class="o">=</span><span class="s2">"vendor.bundle.css"</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">link</span> <span class="nx">rel</span><span class="o">=</span><span class="s2">"stylesheet"</span> <span class="nx">href</span><span class="o">=</span><span class="s2">"app.bundle.css"</span><span class="o">&gt;</span>
    <span class="c">&lt;!--</span> <span class="nx">endinject</span> <span class="o">--&gt;</span>

<span class="o">&lt;</span><span class="sr">/head</span><span class="err">&gt;
</span>
<span class="c">&lt;!--</span> <span class="mi">3</span><span class="p">.</span> <span class="nx">Display</span> <span class="nx">the</span> <span class="nx">application</span> <span class="o">--&gt;</span>

<span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">foodChooser</span><span class="o">-</span><span class="nx">app</span><span class="o">&gt;</span><span class="nx">Loading</span><span class="p">...</span><span class="o">&lt;</span><span class="sr">/foodChooser-app</span><span class="err">&gt;
</span>

<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">"cordova.js"</span><span class="o">&gt;&lt;</span><span class="sr">/script</span><span class="err">&gt;
</span>
<span class="c">&lt;!--</span> <span class="nl">inject</span><span class="p">:</span><span class="nx">js</span> <span class="o">--&gt;</span>
<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">"polyfills.bundle.js"</span><span class="o">&gt;&lt;</span><span class="sr">/script</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">"vendor.bundle.js"</span><span class="o">&gt;&lt;</span><span class="sr">/script</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">"app.bundle.js"</span><span class="o">&gt;&lt;</span><span class="sr">/script</span><span class="err">&gt;
</span><span class="c">&lt;!--</span> <span class="nx">endinject</span> <span class="o">--&gt;</span>

<span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
    <span class="c">&lt;!--</span> <span class="nx">Toggle</span> <span class="nx">Hamburger</span> <span class="nx">Menu</span> <span class="nx">on</span> <span class="nx">mobile</span> <span class="o">--&gt;</span>
    <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">'click'</span><span class="p">,</span><span class="s1">'.navbar-collapse.in'</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span> <span class="nx">$</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">).</span><span class="nx">is</span><span class="p">(</span><span class="s1">'a'</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">$</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'class'</span><span class="p">)</span> <span class="o">!=</span> <span class="s1">'dropdown-toggle'</span> <span class="p">)</span> <span class="p">{</span>
        <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">collapse</span><span class="p">(</span><span class="s1">'hide'</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">});</span>

<span class="o">&lt;</span><span class="sr">/script</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/body</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/html&gt;</span></code></pre></figure>

<p>But this time the sources got injected. See the dist folder here:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/06/dist.png" alt="dist" /></p>

<p>With this approach we can go ahead as usual when building electron or cordova-things with gulp.</p>

<p>See the required steps fo r e.g. a cordova-build here:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">'build:electron:prod'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">runSeq</span><span class="p">(</span>
        <span class="s1">'electron-clean-temp'</span><span class="p">,</span>
        <span class="s1">'electron-compile-with-webpack'</span><span class="p">,</span>
        <span class="s1">'electron-copy-index-to-temp-folder'</span><span class="p">,</span>
        <span class="s1">'electron-inject-in-html'</span><span class="p">,</span>
        <span class="s1">'electron-copy-assets-to-temp-folder'</span><span class="p">,</span>
        <span class="s1">'electron-build-win'</span><span class="p">,</span>
        <span class="nx">done</span><span class="p">);</span>
<span class="p">});</span></code></pre></figure>

<p>the only difference here is that we have to copy assets for electron into the temp folder. The whole procedure before is like we know it from the web solution.</p>

<p>I hope this helps to get out confusion and reduces the complexity of the topic “Cross platform”.</p>

<p>HTH</p>

<p>Regards</p>

<p>Fabian</p>

<h1 id="links">Links</h1>

<p><a href="https://angular.io/docs/ts/latest/guide/webpack.html">https://angular.io/docs/ts/latest/guide/webpack.html</a></p>

<p><a href="https://webpack.github.io/docs/usage-with-gulp.html">https://webpack.github.io/docs/usage-with-gulp.html</a></p>

<p><a href="https://www.npmjs.com/package/webpack-stream">https://www.npmjs.com/package/webpack-stream</a></p>

<p><a href="https://github.com/shama/webpack-stream">https://github.com/shama/webpack-stream</a></p>

<p><a href="https://www.xplatform.rocks/2016/02/14/angular2-and-electron-the-definitive-guide/">https://www.xplatform.rocks/2016/02/14/angular2-and-electron-the-definitive-guide/</a></p>

	  ]]></description>
	</item>

	<item>
	  <title>ASP.NET Core and Angular with Webpack and Visual Studio</title>
	  <link>//blog/articles/2016/06/12/asp-net-core-angular-2-webpack-visual-studio/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2016-06-12T22:10:00+02:00</pubDate>
	  <guid>//blog/articles/2016/06/12/asp-net-core-angular-2-webpack-visual-studio/</guid>
	  <description><![CDATA[
	     <p>This article shows how to use ASP.NET Core and Angular with webpack and Visual Studio. Both the client and the server side of the application is implemented inside one ASP.NET Core project which makes it easier to deploy.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/06/vs_webpack_angular2.png" alt="vs_webpack_angular2" /></p>

<p><strong>Code:</strong> <a href="https://github.com/damienbod/Angular2WebpackVisualStudio">https://github.com/damienbod/Angular2WebpackVisualStudio</a></p>

<p><strong>Authors</strong> <em>Fabian Gosebrink, Damien Bowden</em>.
This post is hosted on both <a href="http://damienbod.com">http://damienbod.com</a> and <a href="http://offering.solutions/">http://offering.solutions/</a>.</p>

<p><strong>Setting up the application</strong></p>

<p>The ASP.NET Core application contains both the server side API services and also hosts the Angular 2 client application. The source code for the Angular 2 application is implemented in the angular2App folder. Webpack is then used to deploy the application, using the development build or a production build, which deploys the application to the wwwroot folder. This makes it easy to deploy the application using the standard tools from Visual Studio with the standard configurations.</p>

<p><strong>npm configuration</strong></p>

<p>The npm package.json configuration loads all the required packages for Angular 2 and Webpack. The Webpack packages are all added to the devDependencies. A “npm build” script and also a “npm buildProduction” are also configured, so that the client application can be built using Webpack from the cmd line using “npm build” or “npm buildProduction”. These two scripts just call the same cmd as the Webpack task runner.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">"name"</span><span class="err">:</span> <span class="s2">"angular2-webpack-visualstudio"</span><span class="p">,</span>
  <span class="s2">"version"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
  <span class="s2">"description"</span><span class="err">:</span> <span class="s2">""</span><span class="p">,</span>
  <span class="s2">"main"</span><span class="err">:</span> <span class="s2">"wwwroot/index.html"</span><span class="p">,</span>
  <span class="s2">"author"</span><span class="err">:</span> <span class="s2">""</span><span class="p">,</span>
  <span class="s2">"license"</span><span class="err">:</span> <span class="s2">"ISC"</span><span class="p">,</span>
  <span class="s2">"scripts"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"ngc"</span><span class="err">:</span> <span class="s2">"ngc -p ./tsconfig-aot.json"</span><span class="p">,</span>
    <span class="s2">"start"</span><span class="err">:</span> <span class="s2">"concurrently \"webpack-dev-server --hot --inline --port 8080\" \"dotnet run\" "</span><span class="p">,</span>
    <span class="s2">"webpack-dev"</span><span class="err">:</span> <span class="s2">"set NODE_ENV=development &amp;&amp; webpack"</span><span class="p">,</span>
    <span class="s2">"webpack-production"</span><span class="err">:</span> <span class="s2">"set NODE_ENV=production &amp;&amp; webpack"</span><span class="p">,</span>
    <span class="s2">"build-dev"</span><span class="err">:</span> <span class="s2">"npm run webpack-dev"</span><span class="p">,</span>
    <span class="s2">"build-production"</span><span class="err">:</span> <span class="s2">"npm run ngc &amp;&amp; npm run webpack-production"</span><span class="p">,</span>
    <span class="s2">"watch-webpack-dev"</span><span class="err">:</span> <span class="s2">"set NODE_ENV=development &amp;&amp; webpack --watch --color"</span><span class="p">,</span>
    <span class="s2">"watch-webpack-production"</span><span class="err">:</span> <span class="s2">"npm run build-production --watch --color"</span><span class="p">,</span>
    <span class="s2">"publish-for-iis"</span><span class="err">:</span> <span class="s2">"npm run build-production &amp;&amp; dotnet publish -c Release"</span>
  <span class="p">},</span>
  <span class="s2">"dependencies"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"@angular/common"</span><span class="err">:</span> <span class="s2">"~2.4.7"</span><span class="p">,</span>
    <span class="s2">"@angular/compiler"</span><span class="err">:</span> <span class="s2">"~2.4.7"</span><span class="p">,</span>
    <span class="s2">"@angular/core"</span><span class="err">:</span> <span class="s2">"~2.4.7"</span><span class="p">,</span>
    <span class="s2">"@angular/forms"</span><span class="err">:</span> <span class="s2">"~2.4.7"</span><span class="p">,</span>
    <span class="s2">"@angular/http"</span><span class="err">:</span> <span class="s2">"~2.4.7"</span><span class="p">,</span>
    <span class="s2">"@angular/platform-browser"</span><span class="err">:</span> <span class="s2">"~2.4.7"</span><span class="p">,</span>
    <span class="s2">"@angular/platform-browser-dynamic"</span><span class="err">:</span> <span class="s2">"~2.4.7"</span><span class="p">,</span>
    <span class="s2">"@angular/router"</span><span class="err">:</span> <span class="s2">"~3.4.7"</span><span class="p">,</span>
    <span class="s2">"@angular/upgrade"</span><span class="err">:</span> <span class="s2">"~2.4.7"</span><span class="p">,</span>
    <span class="s2">"angular-in-memory-web-api"</span><span class="err">:</span> <span class="s2">"0.2.4"</span><span class="p">,</span>
    <span class="s2">"core-js"</span><span class="err">:</span> <span class="s2">"2.4.1"</span><span class="p">,</span>
    <span class="s2">"reflect-metadata"</span><span class="err">:</span> <span class="s2">"0.1.9"</span><span class="p">,</span>
    <span class="s2">"rxjs"</span><span class="err">:</span> <span class="s2">"5.0.3"</span><span class="p">,</span>
    <span class="s2">"zone.js"</span><span class="err">:</span> <span class="s2">"0.7.5"</span><span class="p">,</span>
    <span class="s2">"@angular/compiler-cli"</span><span class="err">:</span> <span class="s2">"~2.4.7"</span><span class="p">,</span>
    <span class="s2">"@angular/platform-server"</span><span class="err">:</span> <span class="s2">"~2.4.7"</span><span class="p">,</span>
    <span class="s2">"bootstrap"</span><span class="err">:</span> <span class="s2">"^3.3.7"</span><span class="p">,</span>
    <span class="s2">"ie-shim"</span><span class="err">:</span> <span class="s2">"~0.1.0"</span>
  <span class="p">},</span>
  <span class="s2">"devDependencies"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"@types/node"</span><span class="err">:</span> <span class="s2">"7.0.5"</span><span class="p">,</span>
    <span class="s2">"angular2-template-loader"</span><span class="err">:</span> <span class="s2">"^0.6.0"</span><span class="p">,</span>
    <span class="s2">"angular-router-loader"</span><span class="err">:</span> <span class="s2">"^0.5.0"</span><span class="p">,</span>
    <span class="s2">"awesome-typescript-loader"</span><span class="err">:</span> <span class="s2">"3.0.4"</span><span class="p">,</span>
    <span class="s2">"clean-webpack-plugin"</span><span class="err">:</span> <span class="s2">"^0.1.15"</span><span class="p">,</span>
    <span class="s2">"concurrently"</span><span class="err">:</span> <span class="s2">"^3.1.0"</span><span class="p">,</span>
    <span class="s2">"copy-webpack-plugin"</span><span class="err">:</span> <span class="s2">"^4.0.1"</span><span class="p">,</span>
    <span class="s2">"css-loader"</span><span class="err">:</span> <span class="s2">"^0.26.1"</span><span class="p">,</span>
    <span class="s2">"file-loader"</span><span class="err">:</span> <span class="s2">"^0.9.0"</span><span class="p">,</span>
    <span class="s2">"html-webpack-plugin"</span><span class="err">:</span> <span class="s2">"^2.26.0"</span><span class="p">,</span>
    <span class="s2">"jquery"</span><span class="err">:</span> <span class="s2">"^2.2.0"</span><span class="p">,</span>
    <span class="s2">"json-loader"</span><span class="err">:</span> <span class="s2">"^0.5.4"</span><span class="p">,</span>
    <span class="s2">"node-sass"</span><span class="err">:</span> <span class="s2">"^4.3.0"</span><span class="p">,</span>
    <span class="s2">"raw-loader"</span><span class="err">:</span> <span class="s2">"^0.5.1"</span><span class="p">,</span>
    <span class="s2">"rimraf"</span><span class="err">:</span> <span class="s2">"^2.5.4"</span><span class="p">,</span>
    <span class="s2">"sass-loader"</span><span class="err">:</span> <span class="s2">"^4.1.1"</span><span class="p">,</span>
    <span class="s2">"source-map-loader"</span><span class="err">:</span> <span class="s2">"^0.1.6"</span><span class="p">,</span>
    <span class="s2">"style-loader"</span><span class="err">:</span> <span class="s2">"^0.13.1"</span><span class="p">,</span>
    <span class="s2">"ts-helpers"</span><span class="err">:</span> <span class="s2">"^1.1.2"</span><span class="p">,</span>
    <span class="s2">"tslint"</span><span class="err">:</span> <span class="s2">"^4.3.1"</span><span class="p">,</span>
    <span class="s2">"tslint-loader"</span><span class="err">:</span> <span class="s2">"^3.3.0"</span><span class="p">,</span>
    <span class="s2">"typescript"</span><span class="err">:</span> <span class="s2">"2.0.3"</span><span class="p">,</span>
    <span class="s2">"url-loader"</span><span class="err">:</span> <span class="s2">"^0.5.7"</span><span class="p">,</span>
    <span class="s2">"webpack"</span><span class="err">:</span> <span class="s2">"^2.2.1"</span><span class="p">,</span>
    <span class="s2">"webpack-dev-server"</span><span class="err">:</span> <span class="s2">"2.2.1"</span>
  <span class="p">},</span>
  <span class="s2">"-vs-binding"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"ProjectOpened"</span><span class="err">:</span> <span class="p">[</span>
      <span class="s2">"watch-webpack-dev"</span>
    <span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><strong>tsconfig configuration</strong></p>

<p>The types are configured in this file, so typings are no longer required.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">"compilerOptions"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"target"</span><span class="err">:</span> <span class="s2">"es5"</span><span class="p">,</span>
    <span class="s2">"module"</span><span class="err">:</span> <span class="s2">"es2015"</span><span class="p">,</span>
    <span class="s2">"moduleResolution"</span><span class="err">:</span> <span class="s2">"node"</span><span class="p">,</span>
    <span class="s2">"sourceMap"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"emitDecoratorMetadata"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"experimentalDecorators"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"removeComments"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"noImplicitAny"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"skipLibCheck"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"lib"</span><span class="err">:</span> <span class="p">[</span>
      <span class="s2">"es2015"</span><span class="p">,</span>
      <span class="s2">"dom"</span>
    <span class="p">],</span>
    <span class="s2">"types"</span><span class="err">:</span> <span class="p">[</span>
      <span class="s2">"node"</span>
    <span class="p">]</span>
  <span class="p">},</span>
  <span class="s2">"files"</span><span class="err">:</span> <span class="p">[</span>
    <span class="s2">"angularApp/app/app.module.ts"</span><span class="p">,</span>
    <span class="s2">"angularApp/app/about/about.module.ts"</span><span class="p">,</span>
    <span class="s2">"angularApp/main.ts"</span>
  <span class="p">],</span>
  <span class="s2">"awesomeTypescriptLoaderOptions"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"useWebpackText"</span><span class="err">:</span> <span class="kc">true</span>
  <span class="p">},</span>
  <span class="s2">"compileOnSave"</span><span class="err">:</span> <span class="kc">false</span><span class="p">,</span>
  <span class="s2">"buildOnSave"</span><span class="err">:</span> <span class="kc">false</span>
<span class="p">}</span></code></pre></figure>

<h2 id="webpack-build">Webpack build</h2>

<p>The Webpack development build <em>&gt;webpack -d</em> just uses the source files and creates outputs for development. The production build copies everything required for the client application to the wwwroot folder, and uglifies the js files. The <em>webpack -d –watch</em> can be used to automatically build the dist files if a source file is changed.</p>

<p>The Webpack config file was created using the excellent github repository <a href="https://github.com/preboot/angular2-webpack">https://github.com/preboot/angular2-webpack</a>. Thanks for this. Small changes were made to this, such as the process.env.NODE_ENV and Webpack uses different source and output folders to match the ASP.NET Core project. If you decide to use two different projects, one for server, and one for client,  preboot or angular-cli, or both together would be a good choice for the client application.</p>

<p><strong>webpack.config.js</strong></p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">/// &lt;binding ProjectOpened='Run - Development' /&gt;</span>

<span class="kd">var</span> <span class="nx">environment</span> <span class="o">=</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">||</span> <span class="s2">"development"</span><span class="p">).</span><span class="nx">trim</span><span class="p">();</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">environment</span> <span class="o">===</span> <span class="s2">"development"</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./webpack.dev.js'</span><span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./webpack.prod.js'</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p><strong>webpack.dev.js</strong></p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'path'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'webpack'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">HtmlWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'html-webpack-plugin'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">CopyWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'copy-webpack-plugin'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">CleanWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'clean-webpack-plugin'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">helpers</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./webpack.helpers'</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'@@@@@@@@@ USING DEVELOPMENT @@@@@@@@@@@@@@@'</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>

    <span class="na">devtool</span><span class="p">:</span> <span class="s1">'source-map'</span><span class="p">,</span>
    <span class="na">performance</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">hints</span><span class="p">:</span> <span class="kc">false</span>
    <span class="p">},</span>
    <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
        <span class="s1">'polyfills'</span><span class="p">:</span> <span class="s1">'./angularApp/polyfills.ts'</span><span class="p">,</span>
        <span class="s1">'vendor'</span><span class="p">:</span> <span class="s1">'./angularApp/vendor.ts'</span><span class="p">,</span>
        <span class="s1">'app'</span><span class="p">:</span> <span class="s1">'./angularApp/main.ts'</span>
    <span class="p">},</span>

    <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">path</span><span class="p">:</span> <span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">'/wwwroot/'</span><span class="p">,</span>
        <span class="na">filename</span><span class="p">:</span> <span class="s1">'dist/[name].bundle.js'</span><span class="p">,</span>
        <span class="na">chunkFilename</span><span class="p">:</span> <span class="s1">'dist/[id].chunk.js'</span><span class="p">,</span>
        <span class="na">publicPath</span><span class="p">:</span> <span class="s1">'/'</span>
    <span class="p">},</span>

    <span class="na">resolve</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">extensions</span><span class="p">:</span> <span class="p">[</span><span class="s1">'.ts'</span><span class="p">,</span> <span class="s1">'.js'</span><span class="p">,</span> <span class="s1">'.json'</span><span class="p">,</span> <span class="s1">'.css'</span><span class="p">,</span> <span class="s1">'.scss'</span><span class="p">,</span> <span class="s1">'.html'</span><span class="p">]</span>
    <span class="p">},</span>

    <span class="na">devServer</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">historyApiFallback</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="na">contentBase</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'/wwwroot/'</span><span class="p">),</span>
        <span class="na">watchOptions</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">aggregateTimeout</span><span class="p">:</span> <span class="mi">300</span><span class="p">,</span>
            <span class="na">poll</span><span class="p">:</span> <span class="mi">1000</span>
        <span class="p">}</span>
    <span class="p">},</span>

    <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">rules</span><span class="p">:</span> <span class="p">[</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">ts$/</span><span class="p">,</span>
                <span class="na">loaders</span><span class="p">:</span> <span class="p">[</span>
                    <span class="s1">'awesome-typescript-loader'</span><span class="p">,</span>
                    <span class="s1">'angular-router-loader'</span><span class="p">,</span>
                    <span class="s1">'angular2-template-loader'</span><span class="p">,</span>
                    <span class="s1">'source-map-loader'</span><span class="p">,</span>
                    <span class="s1">'tslint-loader'</span>
                <span class="p">]</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.(</span><span class="sr">png|jpg|gif|woff|woff2|ttf|svg|eot</span><span class="se">)</span><span class="sr">$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'file-loader?name=assets/[name]-[hash:6].[ext]'</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/favicon.ico$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'file-loader?name=/[name].[ext]'</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">css$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'style-loader!css-loader'</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">scss$/</span><span class="p">,</span>
                <span class="na">exclude</span><span class="p">:</span> <span class="sr">/node_modules/</span><span class="p">,</span>
                <span class="na">loaders</span><span class="p">:</span> <span class="p">[</span><span class="s1">'style-loader'</span><span class="p">,</span> <span class="s1">'css-loader'</span><span class="p">,</span> <span class="s1">'sass-loader'</span><span class="p">]</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">html$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'raw-loader'</span>
            <span class="p">}</span>
        <span class="p">],</span>
        <span class="na">exprContextCritical</span><span class="p">:</span> <span class="kc">false</span>
    <span class="p">},</span>
    <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">CommonsChunkPlugin</span><span class="p">({</span> <span class="na">name</span><span class="p">:</span> <span class="p">[</span><span class="s1">'app'</span><span class="p">,</span> <span class="s1">'polyfills'</span><span class="p">]</span> <span class="p">}),</span>

        <span class="k">new</span> <span class="nx">CleanWebpackPlugin</span><span class="p">(</span>
            <span class="p">[</span>
                <span class="s1">'./wwwroot/dist'</span><span class="p">,</span>
                <span class="s1">'./wwwroot/assets'</span>
            <span class="p">]</span>
        <span class="p">),</span>

        <span class="k">new</span> <span class="nx">HtmlWebpackPlugin</span><span class="p">({</span>
            <span class="na">filename</span><span class="p">:</span> <span class="s1">'index.html'</span><span class="p">,</span>
            <span class="na">inject</span><span class="p">:</span> <span class="s1">'body'</span><span class="p">,</span>
            <span class="na">template</span><span class="p">:</span> <span class="s1">'angularApp/index.html'</span>
        <span class="p">}),</span>

        <span class="k">new</span> <span class="nx">CopyWebpackPlugin</span><span class="p">([</span>
            <span class="p">{</span> <span class="na">from</span><span class="p">:</span> <span class="s1">'./angularApp/images/*.*'</span><span class="p">,</span> <span class="na">to</span><span class="p">:</span> <span class="s1">'assets/'</span><span class="p">,</span> <span class="na">flatten</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}</span>
        <span class="p">])</span>
    <span class="p">]</span>

<span class="p">};</span></code></pre></figure>

<p><strong>webpack.prod.js</strong></p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'path'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'webpack'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">HtmlWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'html-webpack-plugin'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">CopyWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'copy-webpack-plugin'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">CleanWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'clean-webpack-plugin'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">helpers</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./webpack.helpers'</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'@@@@@@@@@ USING PRODUCTION @@@@@@@@@@@@@@@'</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>

    <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
        <span class="s1">'vendor'</span><span class="p">:</span> <span class="s1">'./angularApp/vendor.ts'</span><span class="p">,</span>
        <span class="s1">'polyfills'</span><span class="p">:</span> <span class="s1">'./angularApp/polyfills.ts'</span><span class="p">,</span>
        <span class="s1">'app'</span><span class="p">:</span> <span class="s1">'./angularApp/main-aot.ts'</span> <span class="c1">// AoT compilation</span>
    <span class="p">},</span>

    <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">path</span><span class="p">:</span> <span class="s1">'./wwwroot/'</span><span class="p">,</span>
        <span class="na">filename</span><span class="p">:</span> <span class="s1">'dist/[name].[hash].bundle.js'</span><span class="p">,</span>
        <span class="na">chunkFilename</span><span class="p">:</span> <span class="s1">'dist/[id].[hash].chunk.js'</span><span class="p">,</span>
        <span class="na">publicPath</span><span class="p">:</span> <span class="s1">'/'</span>
    <span class="p">},</span>

    <span class="na">resolve</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">extensions</span><span class="p">:</span> <span class="p">[</span><span class="s1">'.ts'</span><span class="p">,</span> <span class="s1">'.js'</span><span class="p">,</span> <span class="s1">'.json'</span><span class="p">,</span> <span class="s1">'.css'</span><span class="p">,</span> <span class="s1">'.scss'</span><span class="p">,</span> <span class="s1">'.html'</span><span class="p">]</span>
    <span class="p">},</span>

    <span class="na">devServer</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">historyApiFallback</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="na">stats</span><span class="p">:</span> <span class="s1">'minimal'</span><span class="p">,</span>
        <span class="na">outputPath</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'wwwroot/'</span><span class="p">)</span>
    <span class="p">},</span>

    <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">rules</span><span class="p">:</span> <span class="p">[</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">ts$/</span><span class="p">,</span>
                <span class="na">loaders</span><span class="p">:</span> <span class="p">[</span>
                    <span class="s1">'awesome-typescript-loader'</span><span class="p">,</span>
                    <span class="s1">'angular-router-loader?aot=true&amp;genDir=aot/'</span>
                <span class="p">]</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.(</span><span class="sr">png|jpg|gif|woff|woff2|ttf|svg|eot</span><span class="se">)</span><span class="sr">$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'file-loader?name=assets/[name]-[hash:6].[ext]'</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/favicon.ico$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'file-loader?name=/[name].[ext]'</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">css$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'style-loader!css-loader'</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">scss$/</span><span class="p">,</span>
                <span class="na">exclude</span><span class="p">:</span> <span class="sr">/node_modules/</span><span class="p">,</span>
                <span class="na">loaders</span><span class="p">:</span> <span class="p">[</span><span class="s1">'style-loader'</span><span class="p">,</span> <span class="s1">'css-loader'</span><span class="p">,</span> <span class="s1">'sass-loader'</span><span class="p">]</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">html$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'raw-loader'</span>
            <span class="p">}</span>
        <span class="p">],</span>
        <span class="na">exprContextCritical</span><span class="p">:</span> <span class="kc">false</span>
    <span class="p">},</span>

    <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
        <span class="k">new</span> <span class="nx">CleanWebpackPlugin</span><span class="p">(</span>
            <span class="p">[</span>
                <span class="s1">'./wwwroot/dist'</span><span class="p">,</span>
                <span class="s1">'./wwwroot/assets'</span>
            <span class="p">]</span>
        <span class="p">),</span>
        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">NoEmitOnErrorsPlugin</span><span class="p">(),</span>
        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">UglifyJsPlugin</span><span class="p">({</span>
            <span class="na">compress</span><span class="p">:</span> <span class="p">{</span>
                <span class="na">warnings</span><span class="p">:</span> <span class="kc">false</span>
            <span class="p">},</span>
            <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
                <span class="na">comments</span><span class="p">:</span> <span class="kc">false</span>
            <span class="p">},</span>
            <span class="na">sourceMap</span><span class="p">:</span> <span class="kc">false</span>
        <span class="p">}),</span>
        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">CommonsChunkPlugin</span><span class="p">(</span>
            <span class="p">{</span>
                <span class="na">name</span><span class="p">:</span> <span class="p">[</span><span class="s1">'vendor'</span><span class="p">,</span> <span class="s1">'polyfills'</span><span class="p">]</span>
            <span class="p">}),</span>

        <span class="k">new</span> <span class="nx">HtmlWebpackPlugin</span><span class="p">({</span>
            <span class="na">filename</span><span class="p">:</span> <span class="s1">'index.html'</span><span class="p">,</span>
            <span class="na">inject</span><span class="p">:</span> <span class="s1">'body'</span><span class="p">,</span>
            <span class="na">template</span><span class="p">:</span> <span class="s1">'angularApp/index.html'</span>
        <span class="p">}),</span>

        <span class="k">new</span> <span class="nx">CopyWebpackPlugin</span><span class="p">([</span>
            <span class="p">{</span> <span class="na">from</span><span class="p">:</span> <span class="s1">'./angularApp/images/*.*'</span><span class="p">,</span> <span class="na">to</span><span class="p">:</span> <span class="s1">'assets/'</span><span class="p">,</span> <span class="na">flatten</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}</span>
        <span class="p">])</span>
    <span class="p">]</span>
<span class="p">};</span></code></pre></figure>

<h2 id="webpack-production-build">Webpack Production build</h2>

<p>The production build has to be run from the command line. At present ngc, the angular compiler, can only be used from the command line.</p>

<p>See also (Using ngc) <a href="http://blog.mgechev.com/2016/06/26/tree-shaking-angular2-production-build-rollup-javascript/">http://blog.mgechev.com/2016/06/26/tree-shaking-angular2-production-build-rollup-javascript/</a></p>

<p>It can be run using npm run build-production which is configured in the package.json.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>"build-production": "npm run ngc &amp;&amp; npm run webpack-prodroduction"
</code></pre>
</div>

<p>The production build uses tsconfig-aot.json and main-aot.ts as an entry point.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">"compilerOptions"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"target"</span><span class="err">:</span> <span class="s2">"es5"</span><span class="p">,</span>
    <span class="s2">"module"</span><span class="err">:</span> <span class="s2">"es2015"</span><span class="p">,</span>
    <span class="s2">"moduleResolution"</span><span class="err">:</span> <span class="s2">"node"</span><span class="p">,</span>
    <span class="s2">"sourceMap"</span><span class="err">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="s2">"emitDecoratorMetadata"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"experimentalDecorators"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"removeComments"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"noImplicitAny"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"suppressImplicitAnyIndexErrors"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"skipLibCheck"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"lib"</span><span class="err">:</span> <span class="p">[</span>
      <span class="s2">"es2015"</span><span class="p">,</span>
      <span class="s2">"dom"</span>
    <span class="p">]</span>
  <span class="p">},</span>
  <span class="s2">"files"</span><span class="err">:</span> <span class="p">[</span>
    <span class="s2">"angularApp/app/app.module.ts"</span><span class="p">,</span>
    <span class="s2">"angularApp/app/modules/about/about.module.ts"</span><span class="p">,</span>
    <span class="s2">"angularApp/main-aot.ts"</span>
  <span class="p">],</span>
  <span class="s2">"angularCompilerOptions"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"genDir"</span><span class="err">:</span> <span class="s2">"aot"</span><span class="p">,</span>
    <span class="s2">"skipMetadataEmit"</span><span class="err">:</span> <span class="kc">true</span>
  <span class="p">},</span>
  <span class="s2">"compileOnSave"</span><span class="err">:</span> <span class="kc">false</span><span class="p">,</span>
  <span class="s2">"buildOnSave"</span><span class="err">:</span> <span class="kc">false</span>
<span class="p">}</span></code></pre></figure>

<h2 id="webpackdevjs">webpack.dev.js</h2>

<p>Lets dive into the webpack.dev.js a bit:</p>

<p>Firstly, all plugins are loaded which are required to process all the js, ts, … files which are included, or used in the project.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'path'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'webpack'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">HtmlWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'html-webpack-plugin'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">CopyWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'copy-webpack-plugin'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">CleanWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'clean-webpack-plugin'</span><span class="p">);</span></code></pre></figure>

<p>The npm environment variable NODE_ENV is used to define the type of build, either a development build or a production build. The entries are configured depending on this parameter.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js">    <span class="nx">entry</span><span class="err">:</span> <span class="p">{</span>
        <span class="s1">'app'</span><span class="err">:</span> <span class="s1">'./angularApp/main.ts'</span> <span class="c1">// JiT compilation</span>
    <span class="p">},</span></code></pre></figure>

<p>for webpack.prod.js</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js">    <span class="nx">entry</span><span class="err">:</span> <span class="p">{</span>
        <span class="s1">'app'</span><span class="err">:</span> <span class="s1">'./angularApp/main-aot.ts'</span> <span class="c1">// AoT compilation</span>
    <span class="p">},</span></code></pre></figure>

<p>The entries provide Webpack with the required information, where to start from, or where to hook in to.</p>

<p>Webpack knows which paths to run and includes the corresponding files and packages.</p>

<p>The “loaders” section and the “modules” section in the configuration provides Webpack with the following information: which files it needs to get and how to read the files. The modules tells Webpack what to do with the files exactly. Like minifying or whatever.</p>

<p>In this project configuration, if a production node parameter is set, different plugins are pushed into the sections because the files should be treated differently.</p>

<h3 id="the-output">The output</h3>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">output</span><span class="err">:</span> <span class="p">{</span>
        <span class="nl">path</span><span class="p">:</span> <span class="s2">"./wwwroot/"</span><span class="p">,</span>
        <span class="nx">filename</span><span class="err">:</span> <span class="s1">'dist/[name].bundle.js'</span><span class="p">,</span>
		<span class="nx">chunkFilename</span><span class="err">:</span> <span class="s1">'dist/[id].chunk.js'</span><span class="p">,</span>
        <span class="nx">publicPath</span><span class="err">:</span> <span class="s2">"/"</span>
    <span class="p">},</span></code></pre></figure>

<p>output for production adds a hash:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">output</span><span class="err">:</span> <span class="p">{</span>
        <span class="nl">path</span><span class="p">:</span> <span class="s2">"./wwwroot/"</span><span class="p">,</span>
        <span class="nx">filename</span><span class="err">:</span> <span class="s1">'dist/[name].[hash].bundle.js'</span><span class="p">,</span>
		<span class="nx">chunkFilename</span><span class="err">:</span> <span class="s1">'dist/[id].[hash].chunk.js'</span><span class="p">,</span>
        <span class="nx">publicPath</span><span class="err">:</span> <span class="s2">"/"</span>
    <span class="p">},</span></code></pre></figure>

<p>tells webpack where to put the files in the end. You can use like wildcards to use the “name” or an “hash” or something like that.</p>

<h3 id="the-module-loaders">The module loaders</h3>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">module</span><span class="err">:</span> <span class="p">{</span>
        <span class="nl">rules</span><span class="p">:</span> <span class="p">[</span>
           <span class="c1">//...loaders here</span>
        <span class="p">]</span>
    <span class="p">},</span></code></pre></figure>

<p>tell webpack how to react when a certain file extension comes into play. It will then use loaders to handle that file.</p>

<p>The plugins you are providing in the end are necessary to configure how the files should be processed.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js">    <span class="nx">plugins</span><span class="err">:</span> <span class="p">[</span>
        <span class="c1">//...loaders here</span>
    <span class="p">]</span></code></pre></figure>

<h2 id="angular-indexhtml">Angular index.html</h2>

<p>The index.html contains all the references required for the Angular client. The scripts are added as part of the build and not manually. The developer only needs to use the imports.</p>

<p>Source index.html file in the angularApp/public folder:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;base</span> <span class="na">href=</span><span class="s">"./"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;title&gt;</span>Angular Webpack Template<span class="nt">&lt;/title&gt;</span>

    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"content-type"</span> <span class="na">content=</span><span class="s">"text/html; charset=utf-8"</span> <span class="nt">/&gt;</span>

    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span> <span class="nt">/&gt;</span>

<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;my-app&gt;</span>Loading...<span class="nt">&lt;/my-app&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span></code></pre></figure>

<p>And the produced build file in the wwwroot folder. The script for the app has been added using Webpack. Hashes are used in a production build for cache busting.</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;base</span> <span class="na">href=</span><span class="s">"./"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;title&gt;</span>Angular Webpack Template<span class="nt">&lt;/title&gt;</span>

    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"content-type"</span> <span class="na">content=</span><span class="s">"text/html; charset=utf-8"</span> <span class="nt">/&gt;</span>

    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span> <span class="nt">/&gt;</span>

    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"css/bootstrap.css"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;my-app&gt;</span>Loading...<span class="nt">&lt;/my-app&gt;</span>
<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"/dist/app.bundle.js"</span><span class="nt">&gt;&lt;/script&gt;&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span></code></pre></figure>

<h2 id="visual-studio-tools">Visual Studio Tools</h2>

<h3 id="npm-custom-task-runner">npm custom Task Runner</h3>

<p>The NPM Task Runner can be used to build  the client SPA application from inside Visual Studio. This task runner can be downloaded from:</p>

<p><a href="https://marketplace.visualstudio.com/items?itemName=MadsKristensen.NPMTaskRunner">https://marketplace.visualstudio.com/items?itemName=MadsKristensen.NPMTaskRunner</a></p>

<p>The task runners need to be configured correctly. 
Go to Tools –&gt; Options –&gt; Projects and Solutions –&gt; External Web Tools.</p>

<p>Check that are options are checked. See:</p>

<p><a href="https://blogs.msdn.microsoft.com/webdev/2015/03/19/customize-external-web-tools-in-visual-studio-2015/">https://blogs.msdn.microsoft.com/webdev/2015/03/19/customize-external-web-tools-in-visual-studio-2015/</a></p>

<h3 id="npm-scripts">npm scripts</h3>

<p>The npm scripts are used to build, watch the client application as required. The scripts can be run from the command line or the npm task runner.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="s2">"ngc"</span><span class="err">:</span> <span class="s2">"ngc -p ./tsconfig-aot.json"</span><span class="p">,</span>
<span class="s2">"start"</span><span class="err">:</span> <span class="s2">"concurrently \"webpack-dev-server --hot --inline --port 8080\" \"dotnet run\" "</span><span class="p">,</span>
<span class="s2">"webpack-dev"</span><span class="err">:</span> <span class="s2">"set NODE_ENV=development&amp;&amp; webpack"</span><span class="p">,</span>
<span class="s2">"webpack-production"</span><span class="err">:</span> <span class="s2">"set NODE_ENV=production&amp;&amp; webpack"</span><span class="p">,</span>
<span class="s2">"build-dev"</span><span class="err">:</span> <span class="s2">"npm run webpack-dev"</span><span class="p">,</span>
<span class="s2">"build-production"</span><span class="err">:</span> <span class="s2">"npm run ngc &amp;&amp; npm run webpack-production"</span><span class="p">,</span>
<span class="s2">"watch-webpack-dev"</span><span class="err">:</span> <span class="s2">"set NODE_ENV=development&amp;&amp; webpack --watch --color"</span><span class="p">,</span>
<span class="s2">"watch-webpack-production"</span><span class="err">:</span> <span class="s2">"npm run build-production --watch --color"</span><span class="p">,</span>
<span class="s2">"publish-for-iis"</span><span class="err">:</span> <span class="s2">"npm run build-production &amp;&amp; dotnet publish -c Release"</span> </code></pre></figure>

<p>The watch-webpack-dev npm script can be automatically be started in Visual Studio by adding the following to the package.json</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="s2">"-vs-binding"</span><span class="err">:</span> <span class="p">{</span> <span class="s2">"ProjectOpened"</span><span class="err">:</span> <span class="p">[</span> <span class="s2">"watch-webpack-dev"</span> <span class="p">]</span> <span class="p">}</span></code></pre></figure>

<p><b>Note</b> Webpack task runner cannot be used to build the Angular webpack application as it uses the wrong options and cannot be used to do a production build due to the ngc.</p>

<h3 id="webpack-sass">Webpack SASS</h3>

<p><a href="http://sass-lang.com/">SASS</a> is used to style the SPA application. The SASS files can be built using the SASS. Webpack can build all the styles inline or as an external file, depending on your Webpack config.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="nl">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">scss$/</span><span class="p">,</span>
  <span class="nx">exclude</span><span class="err">:</span> <span class="o">/</span><span class="nx">node_modules</span><span class="o">/</span><span class="p">,</span>
  <span class="nx">loaders</span><span class="err">:</span> <span class="p">[</span><span class="s2">"style"</span><span class="p">,</span> <span class="s2">"css"</span><span class="p">,</span> <span class="s2">"sass"</span><span class="p">]</span>
<span class="p">},</span></code></pre></figure>

<p>See: <a href="https://damienbod.com/2016/10/14/using-sass-with-webpack-angular2-and-visual-studio/">https://damienbod.com/2016/10/14/using-sass-with-webpack-angular2-and-visual-studio/</a></p>

<h3 id="webpack-clean">Webpack Clean</h3>

<p><a href="https://github.com/johnagan/clean-webpack-plugin/">clean-webpack-plugin</a> is used to clean up the deployment folder inside the wwwroot. This ensures that the application uses the latest files.</p>

<p>The clean task can be configured as follows:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">CleanWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'clean-webpack-plugin'</span><span class="p">);</span></code></pre></figure>

<p>And used in Webpack.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js">  <span class="k">new</span> <span class="nx">CleanWebpackPlugin</span><span class="p">([</span><span class="s1">'./wwwroot/dist'</span><span class="p">]),</span></code></pre></figure>

<h2 id="angular-component-files">Angular component files</h2>

<p>Note: require cannot be used because AoT does not work with this.</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">Thing</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'./../../../models/thing'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">TestDataService</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'./../../../services/testDataService'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">OnInit</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>

<span class="err">@</span><span class="nx">Component</span><span class="p">({</span>
    <span class="na">selector</span><span class="p">:</span> <span class="s1">'home-component'</span><span class="p">,</span>
    <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'home.component.html'</span>
<span class="p">})</span>

<span class="k">export</span> <span class="kr">class</span> <span class="nx">HomeComponent</span> <span class="k">implements</span> <span class="nx">OnInit</span> <span class="p">{</span>

    <span class="k">public</span> <span class="nx">message</span><span class="err">:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="k">public</span> <span class="nx">things</span><span class="err">:</span> <span class="nx">Thing</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">public</span> <span class="nx">thing</span><span class="err">:</span> <span class="nx">Thing</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Thing</span><span class="p">();</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">_dataService</span><span class="err">:</span> <span class="nx">TestDataService</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">message</span> <span class="o">=</span> <span class="s2">"Things from the ASP.NET Core API"</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nx">ngOnInit</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">getAllThings</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">addThing</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_dataService</span>
            <span class="p">.</span><span class="nx">Add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">thing</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">subscribe</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">getAllThings</span><span class="p">();</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">thing</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Thing</span><span class="p">();</span>
            <span class="p">},</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
            <span class="p">});</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">deleteThing</span><span class="p">(</span><span class="na">thing</span><span class="p">:</span> <span class="nx">Thing</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_dataService</span>
            <span class="p">.</span><span class="nx">Delete</span><span class="p">(</span><span class="nx">thing</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">subscribe</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">getAllThings</span><span class="p">();</span>
            <span class="p">},</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
            <span class="p">});</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="nx">getAllThings</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_dataService</span>
            <span class="p">.</span><span class="nx">GetAll</span><span class="p">()</span>
            <span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span>
            <span class="nx">data</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">things</span> <span class="o">=</span> <span class="nx">data</span><span class="p">,</span>
            <span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">),</span>
            <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Get all complete'</span><span class="p">)</span>
            <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h2 id="tslint-file">tslint file</h2>

<p><a href="https://github.com/damienbod/AngularWebpackVisualStudio/blob/master/src/AngularWebpackVisualStudio/tslint.json">https://github.com/damienbod/AngularWebpackVisualStudio/blob/master/src/AngularWebpackVisualStudio/tslint.json</a></p>

<h2 id="the-aspnet-core-api">The ASP.NET Core API</h2>

<p>The ASP.NET Core API is quite small and tiny. It just provides a demo CRUD service.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Angular2WebpackVisualStudio.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Angular2WebpackVisualStudio.Repositories.Things</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.JsonPatch</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Angular2WebpackVisualStudio.Controller</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ThingsController</span> <span class="p">:</span> <span class="n">Microsoft</span><span class="p">.</span><span class="n">AspNetCore</span><span class="p">.</span><span class="n">Mvc</span><span class="p">.</span><span class="n">Controller</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IThingsRepository</span> <span class="n">_thingsRepository</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">ThingsController</span><span class="p">(</span><span class="n">IThingsRepository</span> <span class="n">thingsRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_thingsRepository</span> <span class="p">=</span> <span class="n">thingsRepository</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Get</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">_thingsRepository</span><span class="p">.</span><span class="nf">GetAll</span><span class="p">());</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Add</span><span class="p">([</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">Thing</span> <span class="n">thing</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">thing</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">ModelState</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">Thing</span> <span class="n">newThing</span> <span class="p">=</span> <span class="n">_thingsRepository</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">thing</span><span class="p">);</span>

            <span class="k">return</span> <span class="nf">CreatedAtRoute</span><span class="p">(</span><span class="s">"GetSingleThing"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">newThing</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">newThing</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpPatch</span><span class="p">(</span><span class="s">"{id:int}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">PartiallyUpdate</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="p">[</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">JsonPatchDocument</span><span class="p">&lt;</span><span class="n">Thing</span><span class="p">&gt;</span> <span class="n">patchDoc</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">patchDoc</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">Thing</span> <span class="n">existingEntity</span> <span class="p">=</span> <span class="n">_thingsRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">existingEntity</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">Thing</span> <span class="n">thing</span> <span class="p">=</span> <span class="n">existingEntity</span><span class="p">;</span>
            <span class="n">patchDoc</span><span class="p">.</span><span class="nf">ApplyTo</span><span class="p">(</span><span class="n">thing</span><span class="p">,</span> <span class="n">ModelState</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">ModelState</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">Thing</span> <span class="n">updatedThing</span> <span class="p">=</span> <span class="n">_thingsRepository</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">thing</span><span class="p">);</span>

            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">updatedThing</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"{id:int}"</span><span class="p">,</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">"GetSingleThing"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Single</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Thing</span> <span class="n">thing</span> <span class="p">=</span> <span class="n">_thingsRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">thing</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">thing</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="n">HttpDelete</span><span class="p">]</span>
        <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"{id:int}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Remove</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Thing</span> <span class="n">thing</span> <span class="p">=</span> <span class="n">_thingsRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">thing</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_thingsRepository</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="n">HttpPut</span><span class="p">]</span>
        <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"{id:int}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Update</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="p">[</span><span class="n">FromBody</span><span class="p">]</span><span class="n">Thing</span> <span class="n">thing</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">thingToCheck</span> <span class="p">=</span> <span class="n">_thingsRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">thingToCheck</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">thing</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="s">"Ids do not match"</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">ModelState</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">Thing</span> <span class="n">updatedThing</span> <span class="p">=</span> <span class="n">_thingsRepository</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">thing</span><span class="p">);</span>

            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">updatedThing</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h3 id="the-angular-http-service">The Angular Http-Service</h3>

<p>Note that in a normal environment, you should always return the typed classes and never the plain HTTP response like here. This application only has strings to return, and this is enough for the demo.</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">Thing</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'./../models/thing'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Injectable</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Http</span><span class="p">,</span> <span class="nx">Response</span><span class="p">,</span> <span class="nx">Headers</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/http'</span><span class="p">;</span>
<span class="k">import</span> <span class="s1">'rxjs/add/operator/map'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Observable</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'rxjs/Observable'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Configuration</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../app.constants'</span><span class="p">;</span>

<span class="err">@</span><span class="nx">Injectable</span><span class="p">()</span>
<span class="k">export</span> <span class="kr">class</span> <span class="nx">TestDataService</span> <span class="p">{</span>

    <span class="k">private</span> <span class="nx">actionUrl</span><span class="err">:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="k">private</span> <span class="nx">headers</span><span class="err">:</span> <span class="nx">Headers</span><span class="p">;</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">_http</span><span class="err">:</span> <span class="nx">Http</span><span class="p">,</span> <span class="k">private</span> <span class="nx">_configuration</span><span class="err">:</span> <span class="nx">Configuration</span><span class="p">)</span> <span class="p">{</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span> <span class="o">=</span> <span class="nx">_configuration</span><span class="p">.</span><span class="nx">Server</span> <span class="o">+</span> <span class="s1">'api/things/'</span><span class="p">;</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Headers</span><span class="p">();</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'Content-Type'</span><span class="p">,</span> <span class="s1">'application/json'</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'Accept'</span><span class="p">,</span> <span class="s1">'application/json'</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">GetAll</span> <span class="o">=</span> <span class="p">()</span><span class="err">:</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">Thing</span><span class="p">[]</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span><span class="p">).</span><span class="nx">map</span><span class="p">((</span><span class="na">response</span><span class="p">:</span> <span class="nx">Response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">Thing</span><span class="p">[]</span><span class="o">&gt;</span><span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">GetSingle</span> <span class="o">=</span> <span class="p">(</span><span class="na">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">Thing</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span> <span class="o">+</span> <span class="nx">id</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">Thing</span><span class="o">&gt;</span><span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">Add</span> <span class="o">=</span> <span class="p">(</span><span class="na">thingToAdd</span><span class="p">:</span> <span class="nx">Thing</span><span class="p">):</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">Thing</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">toAdd</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">name</span><span class="p">:</span> <span class="nx">thingToAdd</span><span class="p">.</span><span class="nx">name</span> <span class="p">});</span>

        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span><span class="p">,</span> <span class="nx">toAdd</span><span class="p">,</span> <span class="p">{</span> <span class="na">headers</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">headers</span> <span class="p">}).</span><span class="nx">map</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">Thing</span><span class="o">&gt;</span><span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">Update</span> <span class="o">=</span> <span class="p">(</span><span class="na">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="na">itemToUpdate</span><span class="p">:</span> <span class="kr">any</span><span class="p">):</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">Thing</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_http</span>
            <span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span> <span class="o">+</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">itemToUpdate</span><span class="p">),</span> <span class="p">{</span> <span class="na">headers</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">headers</span> <span class="p">})</span>
            <span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">Thing</span><span class="o">&gt;</span><span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">Delete</span> <span class="o">=</span> <span class="p">(</span><span class="na">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_http</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span> <span class="o">+</span> <span class="nx">id</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h2 id="notes">Notes</h2>

<p>The Webpack configuration could also build all of the scss and css files to a separate app.css or app.”hash”.css which could be loaded as a single file in the distribution. Some of the vendor js and css could also be loaded directly in the html header using the index.html file and not included in the Webpack build.</p>

<p>If you are building both the client application and the server application in separate projects, you could also consider angular-cli of angular2-webpack for the client application.</p>

<p>Debugging the Angular in Visual Studio with breakpoints is not possible with this setup. The SPA app can be debugged in chrome.</p>

<h2 id="links">Links</h2>

<p><a href="https://github.com/preboot/angular2-webpack">https://github.com/preboot/angular2-webpack</a></p>

<p><a href="https://webpack.github.io/docs/">https://webpack.github.io/docs/</a></p>

<p><a href="https://github.com/jtangelder/sass-loader">https://github.com/jtangelder/sass-loader</a></p>

<p><a href="https://github.com/petehunt/webpack-howto/blob/master/README.md">https://github.com/petehunt/webpack-howto/blob/master/README.md</a></p>

<p><a href="http://blog.mgechev.com/2016/06/26/tree-shaking-angular2-production-build-rollup-javascript/">http://blog.mgechev.com/2016/06/26/tree-shaking-angular2-production-build-rollup-javascript/</a></p>

<p><a href="https://angular.io/docs/ts/latest/guide/webpack.html">https://angular.io/docs/ts/latest/guide/webpack.html</a></p>

<p><a href="http://blog.thoughtram.io/angular/2016/06/08/component-relative-paths-in-angular-2.html">http://blog.thoughtram.io/angular/2016/06/08/component-relative-paths-in-angular-2.html</a></p>

<p><a href="http://sass-lang.com/">http://sass-lang.com/</a></p>

<p><a href="https://marketplace.visualstudio.com/items?itemName=MadsKristensen.NPMTaskRunner">https://marketplace.visualstudio.com/items?itemName=MadsKristensen.NPMTaskRunner</a></p>

<p><a href="https://blogs.msdn.microsoft.com/webdev/2015/03/19/customize-external-web-tools-in-visual-studio-2015/">https://blogs.msdn.microsoft.com/webdev/2015/03/19/customize-external-web-tools-in-visual-studio-2015/</a></p>

	  ]]></description>
	</item>


</channel>
</rss>
