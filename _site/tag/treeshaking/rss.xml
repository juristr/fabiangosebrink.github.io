<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>http://fabian-gosebrink.com</title>
   
   <link>http://offering.solutions</link>
   <description>Articles about Angular & ASP.NET</description>
   <language>en-us</language>
   <managingEditor> Fabian Gosebrink</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Angular Ahead Of Time (AoT) compilation, lazy loading and treeshaking with webpack</title>
	  <link>//blog/articles/2017/02/08/angular-2-ahead-of-time-aot-compilation-lazy-loading-treeshaking-webpack/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2017-02-08T16:42:00+01:00</pubDate>
	  <guid>//blog/articles/2017/02/08/angular-2-ahead-of-time-aot-compilation-lazy-loading-treeshaking-webpack/</guid>
	  <description><![CDATA[
	     <p>In this blogpost I want to show you how to get Ahead Of Time compilation enabled with lazy loading in combination with webpack 2.</p>

<h3 id="code">Code</h3>

<p><a href="https://github.com/FabianGosebrink/ASPNET-ASPNETCore-Angular-Webpack/tree/master">Github - ASPNET-ASPNETCore-AngularJS-Angular</a></p>

<h3 id="the-router">The Router</h3>

<p>If you want to enable lazy loading in your application with aot you first have to configure your router to load the module lazy - when it gets requested. You can do that with the loadChildren-attribute.</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">export</span> <span class="kd">const</span> <span class="nx">AppRoutes</span><span class="err">:</span> <span class="nx">Routes</span> <span class="o">=</span> <span class="p">[</span>
  <span class="c1">// normal routes</span>
  <span class="p">{</span> <span class="na">path</span><span class="p">:</span> <span class="s1">'food'</span><span class="p">,</span> <span class="na">loadChildren</span><span class="p">:</span> <span class="s1">'./path/to/module.file#ModuleName'</span> <span class="p">},</span>
  <span class="p">{</span>
    <span class="na">path</span><span class="p">:</span> <span class="s1">'**'</span><span class="p">,</span>
    <span class="na">redirectTo</span><span class="p">:</span> <span class="s1">'home'</span>
  <span class="p">}</span>
<span class="p">];</span></code></pre></figure>

<p>The syntax is <code class="highlighter-rouge"><span class="p">{</span><span class="w"> </span><span class="err">path:</span><span class="w"> </span><span class="err">'myPath',</span><span class="w"> </span><span class="err">loadChildren:</span><span class="w"> </span><span class="err">'./path/to/module.file#ModuleName'</span><span class="w"> </span><span class="p">}</span><span class="err">,</span></code></p>

<h3 id="the-module">The Module</h3>

<p>If you did this you have to remove the module import from the module import array where you explicitly imported it in the first place!</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="c1">// imports</span>

<span class="err">@</span><span class="nx">NgModule</span><span class="p">({</span>
    <span class="na">imports</span><span class="p">:</span> <span class="p">[</span>
        <span class="nx">BrowserModule</span><span class="p">,</span>
        <span class="c1">// other imports but NOT your lazy loaded module anymore</span>
        <span class="nx">HomeModule</span>
    <span class="p">],</span>

    <span class="na">declarations</span><span class="p">:</span> <span class="p">[</span>
        <span class="nx">AppComponent</span>
    <span class="p">],</span>

    <span class="na">providers</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// ...</span>
    <span class="p">],</span>

    <span class="na">bootstrap</span><span class="p">:</span> <span class="p">[</span><span class="nx">AppComponent</span><span class="p">]</span>
<span class="p">})</span>

<span class="k">export</span> <span class="kr">class</span> <span class="nx">AppModule</span> <span class="p">{</span> <span class="p">}</span></code></pre></figure>

<h3 id="the-ngc-compiler">The ngc compiler</h3>

<p>If done so you can install the needed packages to get started with the ngc compiler:</p>

<p><code class="highlighter-rouge">npm install @angular/compiler-cli @angular/platform-server --save</code></p>

<p>After this you have to configure a seperate tsconfig-aot.json for Ahead Of Time Compilation:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">
  </span><span class="nt">"compilerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nt">"target"</span><span class="p">:</span><span class="w"> </span><span class="s2">"es5"</span><span class="p">,</span><span class="w">
    </span><span class="nt">"module"</span><span class="p">:</span><span class="w"> </span><span class="s2">"es2015"</span><span class="p">,</span><span class="w">
    </span><span class="nt">"moduleResolution"</span><span class="p">:</span><span class="w"> </span><span class="s2">"node"</span><span class="p">,</span><span class="w">
    </span><span class="nt">"sourceMap"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nt">"emitDecoratorMetadata"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nt">"experimentalDecorators"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nt">"lib"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="s2">"es2015"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"dom"</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nt">"noImplicitAny"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nt">"suppressImplicitAnyIndexErrors"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nt">"files"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"app/app.module.ts"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"path/to/module.file"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"app/main.ts"</span><span class="w">
  </span><span class="p">],</span><span class="w">
  </span><span class="nt">"angularCompilerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nt">"genDir"</span><span class="p">:</span><span class="w"> </span><span class="s2">"aot"</span><span class="p">,</span><span class="w">
    </span><span class="nt">"skipMetadataEmit"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<blockquote>
  <p>Please pay special attention to the “files” array. Because the module is not imported in your application via the <code class="highlighter-rouge">import</code> statement anymore the compiler will not include it in the aot-folder (which is fixed in the “genDir”-attribute). So here you have to add it by yourself but only the path to the module.</p>
</blockquote>

<p>If you now run</p>

<p><code class="highlighter-rouge">node_modules/.bin/ngc -p tsconfig-aot.json</code></p>

<p>an “aot” folder is created which should contain all your compilated files.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>app
├── app.component.ts
├── app.component.html
├── ...
├── app.module.ts
└── main.ts
aot
└── app
    ├── module1
    ├── module2
    ├── module...
    └── ....ngfactory.ts
index.html
systemjs.config.js
tsconfig.json
tslint.json
styles.css
package.json
</code></pre>
</div>

<h3 id="the-new-entrypoint">The (new) entrypoint</h3>

<p>Also as an entry point we specify the file(s) we have but the main file is different. Because we created an output in the aot folder we need to point our entrypoint to that compilated files!</p>

<p>We can do that by adding a new main.ts file called “main-aot.ts” and add the following into it:</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">platformBrowser</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/platform-browser'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">enableProdMode</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">AppModuleNgFactory</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../aot/app/app.module.ngfactory'</span><span class="p">;</span>

<span class="nx">enableProdMode</span><span class="p">();</span>

<span class="nx">platformBrowser</span><span class="p">().</span><span class="nx">bootstrapModuleFactory</span><span class="p">(</span><span class="nx">AppModuleNgFactory</span><span class="p">);</span></code></pre></figure>

<p>Here we are consuming the generated files in the aot folder.</p>

<blockquote>
  <p>If this file causes problems because of not finding any files it may be that the aot folder does not exist yet. This is normal. What does not exist cant be imported. Just create the folder and the errors should go away.</p>
</blockquote>

<h3 id="webpack-comsuming-the-aot-output">Webpack: Comsuming the AoT output</h3>

<p>After that output is created you can go along and consume this files via webpack.</p>

<p>Here it is very important to use the <code class="highlighter-rouge">angular-router-loader</code> which enables loading modules through the string we mentioned in the routes.</p>

<p>So if a route ts file comes along we want to send it through the <code class="highlighter-rouge">angular2-template-loader</code>, <code class="highlighter-rouge">angular-router-loader</code> and the <code class="highlighter-rouge">awesome-typescript-loader</code> to proceed with our files.</p>

<p>The rule for this looks like the following:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">
    </span><span class="err">test:</span><span class="w"> </span><span class="err">/\.ts$/,</span><span class="w">
    </span><span class="err">use:</span><span class="w"> </span><span class="err">[</span><span class="w">
        </span><span class="err">'awesome-typescript-loader',</span><span class="w">
        </span><span class="err">'angular-router-loader?aot=true&amp;genDir=aot/',</span><span class="w">
        </span><span class="err">'angular2-template-loader',</span><span class="w">
    </span><span class="err">]</span><span class="w">
</span><span class="p">}</span><span class="err">,</span></code></pre></figure>

<blockquote>
  <p>Pay attention to the parameters we give to the <code class="highlighter-rouge">angular-router-loader</code>. the <code class="highlighter-rouge">genDir</code> has to match our directory containing our aot compiled output.</p>
</blockquote>

<p>and as an entrypoint we are pointing to the new file we created:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="err">entry:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">'app':</span><span class="w"> </span><span class="err">'./app/main-aot.ts'</span><span class="w">
</span><span class="p">}</span><span class="err">,</span></code></pre></figure>

<p>With this webpack uses our aot-file as an entrypoint and follows all imports in this file.</p>

<p>We also have to tell webpack how to name the files which are recognized as lazy loaded. We can do this by adding a “chunkFilename” in the output-settings:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="err">output:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">path:</span><span class="w"> </span><span class="err">'./.dist/web/aot/',</span><span class="w">
    </span><span class="err">filename:</span><span class="w"> </span><span class="err">'js/[name]-[hash:8].bundle.js',</span><span class="w">
    </span><span class="err">chunkFilename:</span><span class="w"> </span><span class="err">'js/[id].-[hash:8].chunk.js',</span><span class="w">
</span><span class="p">}</span><span class="err">,</span></code></pre></figure>

<h3 id="webpack-adding-tree-shaking">Webpack: Adding tree shaking</h3>

<p>To add tree shaking we have to use the <code class="highlighter-rouge">UglifyJsPlugin</code> from webpack which we can configure like this:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="err">var</span><span class="w"> </span><span class="err">CompressionPlugin</span><span class="w"> </span><span class="err">=</span><span class="w"> </span><span class="err">require(</span><span class="s2">"compression-webpack-plugin"</span><span class="err">);</span><span class="w">
</span><span class="err">//</span><span class="w"> </span><span class="err">...</span><span class="w">
</span><span class="err">plugins:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">...</span><span class="w">
    </span><span class="err">new</span><span class="w"> </span><span class="err">webpack.optimize.UglifyJsPlugin(</span><span class="p">{</span><span class="w">
        </span><span class="err">compress:</span><span class="w"> </span><span class="err">{</span><span class="w">
            </span><span class="err">warnings:</span><span class="w"> </span><span class="err">false</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="err">output:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="err">comments:</span><span class="w"> </span><span class="err">false</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="err">sourceMap:</span><span class="w"> </span><span class="kc">false</span><span class="w">
    </span><span class="err">})</span><span class="p">,</span><span class="w">
    </span><span class="err">new</span><span class="w"> </span><span class="err">CompressionPlugin(</span><span class="p">{</span><span class="w">
        </span><span class="err">asset:</span><span class="w"> </span><span class="nt">"[path].gz[query]"</span><span class="err">,</span><span class="w">
        </span><span class="err">algorithm</span><span class="p">:</span><span class="w"> </span><span class="s2">"gzip"</span><span class="p">,</span><span class="w">
        </span><span class="err">test</span><span class="p">:</span><span class="w"> </span><span class="err">/\.js$|\.html$/</span><span class="p">,</span><span class="w">
        </span><span class="err">threshold</span><span class="p">:</span><span class="w"> </span><span class="mi">10240</span><span class="p">,</span><span class="w">
        </span><span class="err">minRatio</span><span class="p">:</span><span class="w"> </span><span class="mf">0.8</span><span class="w">
    </span><span class="p">}</span><span class="err">)</span><span class="p">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">...</span><span class="w">
</span><span class="p">]</span></code></pre></figure>

<blockquote>
  <p>Here we also added the CompressionPlugin to get the compressed output too.</p>
</blockquote>

<h3 id="wrapping-it-up--beautify-it">Wrapping it up &amp; beautify it</h3>

<p>Ahead of Time compilation and treeshaking are two different things often used together. AoT is done via a different compiler. Treeshaking <em>can</em> be done via webpack but also rollup.js is a way to go.</p>

<p>So we need to have two steps:</p>

<ol>
  <li>compile our files via the ngc compiler</li>
  <li>use the output of that and consume it via webpack</li>
</ol>

<h4 id="beautify-it">beautify it</h4>

<p>You can now “hide” those two commands in the <code class="highlighter-rouge">package.json</code> “scripts” section like this:</p>

<p><code class="highlighter-rouge">"webpack-prod": "npm run ngc &amp;&amp; webpack",</code></p>

<p>which you can run via</p>

<p><code class="highlighter-rouge">npm run webpack-prod</code></p>

<blockquote>
  <p>Be sure to have the ngc command globally installed then…</p>
</blockquote>

<p>I hope i could clarify a bit how aot and treeshaking work with webpack 2 and angular.</p>

<p>Best regards</p>

<p>Fabian</p>

<h4 id="links">Links</h4>

<p><a href="https://angular.io/docs/ts/latest/cookbook/aot-compiler.html">Ahead of time compilation - Angular.io</a></p>

<p><a href="https://github.com/FabianGosebrink/ASPNET-ASPNETCore-Angular-Webpack/tree/master">ASPNET-ASPNETCore-AngularJS-Angular</a></p>

	  ]]></description>
	</item>


</channel>
</rss>
