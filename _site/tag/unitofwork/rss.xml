<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>http://fabian-gosebrink.com</title>
   
   <link>http://offering.solutions</link>
   <description>Articles about Angular & ASP.NET</description>
   <language>en-us</language>
   <managingEditor> Fabian Gosebrink</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>ASP.NET Unit Of Work with Entity Framework</title>
	  <link>//blog/articles/2015/12/09/asp-net-unit-of-work-with-entity-framework/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2015-12-09T21:37:00+01:00</pubDate>
	  <guid>//blog/articles/2015/12/09/asp-net-unit-of-work-with-entity-framework/</guid>
	  <description><![CDATA[
	     <p>I just implemented a solution for the ASP.NET Unit Of Work with Entity Framework (see <a href="http://offering.solutions/blog/articles/2014/07/01/asp-net-mvc-generic-repositories-and-unitofwork/">this</a> post) and put all this into a NuGet-Package. And finally: Here it is!</p>

<h3 id="code">Code</h3>

<p>Nuget: <a href="https://www.nuget.org/packages/OfferingSolutions.UnitOfWork.Structure/">UnitOfWork by Offering.Solutions</a></p>

<p>Github: <a href="https://github.com/OfferingSolutions/OfferingSolutions-RepositoryPattern-UnitOfWork">OfferingSolutions UnitOfWork with Entity Framework</a></p>

<p>This blogpost has a sample-solution attached. Feel free to look into it. But before you do let me explain this package a bit. It will use the UnitOfWork, you will be able to use GenericRepositories and Customrepositories and everything is cached so that if you use the repositories in one using they only have to be created once.</p>

<p>I wont go into details about the sense of the UnitOfWork-thing but I want to give you code-examples how you can start with this in just a few minutes of your time.</p>

<p>If you want to work with the UnitOfWork in this NuGet-Package you will have two different possibilities:</p>

<ol>
  <li>Use generic repositories</li>
  <li>Extend the generic repositories to use your own functions additional to the given CRUD-operations</li>
</ol>

<p>I want to handle both cases in this post:</p>

<p>Lets start:</p>

<p>First of all you have to install the NuGet-Package. It will add you the needed dll you can work with.</p>

<h3 id="use-generic-repositories">1) Use generic repositories</h3>

<p>The common case is that you have a DatabaseContext and DbSets of you entities stored in it. After adding the package you can use the OsUnitOfWorkContext as follows</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">using</span> <span class="p">(</span><span class="n">IOsUnitOfWorkContext</span> <span class="n">unitOfWorkContext</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">OsUnitOfWorkContext</span><span class="p">(</span><span class="k">new</span> <span class="nf">DatabaseContext</span><span class="p">()))</span>
<span class="p">{</span>
    <span class="n">Person</span> <span class="n">person</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Person</span><span class="p">()</span> <span class="p">{</span> <span class="n">Age</span> <span class="p">=</span> <span class="m">28</span><span class="p">,</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">"Fabian"</span> <span class="p">};</span>

    <span class="c1">//Adding a new Entity, for example "Person"
</span>    <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">person</span><span class="p">);</span>

    <span class="c1">//Savechanges
</span>    <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">Save</span><span class="p">();</span>

    <span class="c1">//or...
</span>    <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">SaveASync</span><span class="p">();</span>

    <span class="c1">// Get all Persons
</span>    <span class="n">List</span> <span class="n">allPersons</span> <span class="p">=</span> <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">GetAll</span><span class="p">().</span><span class="nf">ToList</span><span class="p">();</span>

    <span class="c1">// Get all Persons with the age of 35
</span>    <span class="n">List</span> <span class="n">allPersonsOnAge35</span> <span class="p">=</span> <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">GetAll</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Age</span> <span class="p">==</span> <span class="m">35</span><span class="p">).</span><span class="nf">ToList</span><span class="p">();</span>

    <span class="c1">// Get all Persons with the age of 35 ordered by Name
</span>    <span class="n">List</span> <span class="n">allPersonsOnAge35Ordered</span> <span class="p">=</span> <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">GetAll</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Age</span> <span class="p">==</span> <span class="m">35</span><span class="p">,</span> <span class="n">orderBy</span><span class="p">:</span> <span class="n">q</span> <span class="p">=&gt;</span> <span class="n">q</span><span class="p">.</span><span class="nf">OrderBy</span><span class="p">(</span><span class="n">d</span> <span class="p">=&gt;</span> <span class="n">d</span><span class="p">.</span><span class="n">Name</span><span class="p">)).</span><span class="nf">ToList</span><span class="p">();</span>

    <span class="c1">// Get all Persons with the age of 35 ordered by Name and include its properties
</span>    <span class="n">List</span> <span class="n">allPersonsOnAge35OrderedAndWithThings</span> <span class="p">=</span> <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">GetAll</span><span class="p">(</span>
        <span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Age</span> <span class="p">==</span> <span class="m">35</span><span class="p">,</span>
        <span class="n">orderBy</span><span class="p">:</span> <span class="n">q</span> <span class="p">=&gt;</span> <span class="n">q</span><span class="p">.</span><span class="nf">OrderBy</span><span class="p">(</span><span class="n">d</span> <span class="p">=&gt;</span> <span class="n">d</span><span class="p">.</span><span class="n">Name</span><span class="p">),</span>
        <span class="n">includeProperties</span><span class="p">:</span> <span class="s">"Things"</span><span class="p">).</span><span class="nf">ToList</span><span class="p">();</span>

    <span class="c1">// Get all Persons and include its properties
</span>    <span class="n">List</span> <span class="n">allPersonsWithThings</span> <span class="p">=</span> <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">GetAll</span><span class="p">(</span><span class="n">includeProperties</span><span class="p">:</span> <span class="s">"Things"</span><span class="p">).</span><span class="nf">ToList</span><span class="p">();</span>

    <span class="c1">// Find a single Person with a specific name
</span>    <span class="n">Person</span> <span class="n">findBy</span> <span class="p">=</span> <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="s">"Fabian"</span><span class="p">);</span>

    <span class="c1">// Find a single Person with a specific name and include its siblings
</span>    <span class="n">Person</span> <span class="n">findByWithThings</span> <span class="p">=</span> <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="s">"Fabian"</span><span class="p">,</span> <span class="n">includeProperties</span><span class="p">:</span> <span class="s">"Things"</span><span class="p">);</span>

    <span class="c1">// Find a person by id 
</span>    <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">GetSingleById</span><span class="p">(</span><span class="m">6</span><span class="p">);</span>

    <span class="c1">//Update an existing person
</span>    <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="n">person</span><span class="p">);</span>

    <span class="c1">//Add or Update a Person
</span>    <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">AddOrUpdate</span><span class="p">(</span><span class="n">person</span><span class="p">);</span>

    <span class="c1">//Deleting a Person by Id or by entity
</span>    <span class="c1">//unitOfWorkContext.Delete(person.Id);
</span>    <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="n">person</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<h3 id="use-extended-repositories">2) Use extended repositories</h3>

<p>If you want the normal repository to extend a bit with your own functions this is also possible. Everything you have to do is writing your own repository. You can even overwrite the normal CRUD-Methods to do whateer you like in there.</p>

<p>Attention to inherit it from the “IRepositoryContext<YourEntity>" respectively the "RepositoryContextImpl<YourEntity>". The code should look like this:</YourEntity></YourEntity></p>

<p>Interface:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">interface</span> <span class="n">IPersonRepository</span> <span class="p">:</span> <span class="n">IRepositoryContext</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;</span>
<span class="p">{</span>
    <span class="k">void</span> <span class="nf">MyNewFunction</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>Implementation:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">PersonRepository</span> <span class="p">:</span> <span class="n">RepositoryContextImpl</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;,</span> <span class="n">IPersonRepository</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nf">PersonRepository</span><span class="p">(</span><span class="n">DbContext</span> <span class="n">dbContext</span><span class="p">)</span>
        <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">dbContext</span><span class="p">)</span>
    <span class="p">{</span>

    <span class="p">}</span>

    <span class="k">public</span> <span class="k">void</span> <span class="nf">MyNewFunction</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">//Do Something
</span>    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>You can then use it with</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">using</span> <span class="p">(</span><span class="n">IPersonRepository</span> <span class="n">personRepository</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">PersonRepository</span><span class="p">(</span><span class="k">new</span> <span class="nf">DatabaseContext</span><span class="p">()))</span>
<span class="p">{</span>
    <span class="n">personRepository</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Person</span><span class="p">());</span>
    <span class="n">personRepository</span><span class="p">.</span><span class="nf">Save</span><span class="p">();</span>
    <span class="n">List</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;</span> <span class="n">persons</span> <span class="p">=</span> <span class="n">personRepository</span><span class="p">.</span><span class="nf">GetAll</span><span class="p">();</span>
    <span class="n">personRepository</span><span class="p">.</span><span class="nf">MyNewFunction</span><span class="p">(</span><span class="m">6</span><span class="p">);</span>
    <span class="c1">//...
</span><span class="p">}</span></code></pre></figure>

<p>With this you can build your own repositories and they are build up modular and are replacable in an easy way.</p>

<p>Thats it. I think this is nice and smooth. I hope you can get along with it. Have fun.</p>

<p>See <a href="http://www.asp.net/mvc/tutorials/getting-started-with-ef-5-using-mvc-4/implementing-the-repository-and-unit-of-work-patterns-in-an-asp-net-mvc-application" target="_blank">here</a> and <a href="http://codereview.stackexchange.com/questions/31822/unit-of-work-and-repository-design-pattern-implementation" target="_blank">here </a>for inspiration.</p>

<p>See also <a title="ASP.NET MVC Architecture (Part III): Generic Repositories and UnitOfWork" href="http://offering.solutions/blog/articles/2014/07/01/asp-net-mvc-generic-repositories-and-unitofwork/" target="_blank">here </a>for another related BlogEntry (when this Nuget was not released so far ;) )</p>

<p>Regards</p>

<p>Fabian</p>

<p>Download <a href="/assets/articles/wp-content/uploads/2014/08/OfferingSolutions.UnitOfWork.Sample.0.6.1.zip">OfferingSolutions.UnitOfWork.Sample.0.6.1</a></p>

	  ]]></description>
	</item>

	<item>
	  <title>ASP.NET Repository Pattern und Unit of Work</title>
	  <link>//blog/articles/2014/10/06/asp-net-repository-pattern-und-unit-of-work/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2014-10-06T20:39:00+02:00</pubDate>
	  <guid>//blog/articles/2014/10/06/asp-net-repository-pattern-und-unit-of-work/</guid>
	  <description><![CDATA[
	     <p>In diesem Blogpost möcht ich das ASP.NET Repository Pattern and Unit of Work vorstellen. In einem Informationssystem (z.B. Webapplikation) hat man normalerweise immer dasselbe Problem: Irgendwie muss man Daten persistieren und von der Oberfläche im Browser in die Datenbank hin- und wieder zurückschieben. Und dies findet man beinahe bei jedem Objekt (Person, Artikel, Blogeintrage, etc.). Vor allem fällt nach einer Zeit auf, dass die Operationen immer dieselben sind: <strong>C</strong>reate/<strong>R</strong>ead/<strong>U</strong>pdate und <strong>D</strong>elete geben sich die Klinke in die Hand. Dies sind die sogenannten CRUD-Operationen.</p>

<p><img src="/assets/articles/2014-10-06/01.png" alt="ASP.NET Repository Pattern und Unit of Work" /></p>

<p>Um diese Datenoperationen so einfach, so sinnvoll und so übersichtlich wie möglich zu halten bietet sich das Repository- in der Kombination mit dem UnitOfWork-Pattern an. Vor allem, aber nicht nur, im Web-Bereich.</p>

<p>Ich werde jetzt kurz beide Ansätze erläutern um danach einen Anwendungsfall mit Code-Beispielen zu zeigen.</p>

<p>Um diese Datenoperationen so einfach, so sinnvoll und so übersichtlich wie möglich zu halten bietet sich das Repository- in der Kombination mit dem UnitOfWork-Pattern an. Vor allem, aber nicht nur, im Web-Bereich.</p>

<p>Ich werde jetzt kurz beide Ansätze erläutern um danach einen Anwendungsfall mit Code-Beispielen zu zeigen.</p>

<p><strong>Repositories:</strong></p>

<p>Das Pattern hilft dem Entwickler beim Aufziehen einer wartbaren, testbaren und übersichtlichen Architektur.</p>

<p>Das Repository-Pattern sieht vor, dass jedes Objekt (sei es ein Kunde, ein Artikel oder ein Blogeintrag) genau eine Schnittstelle hat, an denen es die CRUD-Operationen ausführen kann. Im Prinzip eine Schnittstelle, die auf die Anliegen „Kannst du mir mal alle xyz geben“, „Trage mal einen neuen xyz ein“, „Der xyz hat neue Werte, aktualisiere die mal“ und „Der xyz wird nicht mehr gebraucht“ eine passende Reaktion hat. Diese Schnittstelle oder der Punkt, wo solche Anliegen bearbeitet werden, ist das Repository. Für beinahe jedes Objekt, was persistiert wird.</p>

<p>Gerade bei Webapplikationen gilt: Datenbank-Anfragen sind teuer. Das sind sie wirklich: Denn je nachdem wie viele Anfragen abgesetzt werden kosten diese Zeit. Rechenzeit für den Server, den Anwender kostet dies Zeit, die er am und im Browser merkt und und und. Gerade im Cloud-Bereich wird dies sofort in bares Geld umgewandelt.</p>

<blockquote>
  <p><em>Definition des Repository-Patterns von Fowler:</em>
<em>Vermittelt mit Hilfe einer Collection-artigen Schnittstelle für den Zugriff auf Domänenobjekte zwischen den Domänen- und Daten-Mapping-Schichten</em></p>
</blockquote>

<p>Die Vorteile des Patterns sind zum einen die vereinfachten Unit-Tests. Man kann jedes Repositoryeinfach testen und so auf seine korrekte Funktionalität überprüfen. Weiter bieten Repositories eine zentrale Anlaufstelle für Datenbankoperationen. Eine gemeinsame Schnittstelle gegenüber den Datenhaltungs-Schichten. Zudem bietet es einen Punkt, an dem man beispielsweise Mechanismen wie Caching implementieren kann.</p>

<p><img src="/assets/articles/2014-10-06/02.png" alt="ASP.NET Repository Pattern und Unit of Work" /></p>

<p>Trotzdem hat man immernoch das „Problem“, dass man jede Abfrage direkt, also unverzüglich, an die Datenbank sendet.</p>

<p><img src="/assets/articles/2014-10-06/03.png" alt="ASP.NET Repository Pattern und Unit of Work" /></p>

<p><strong>UnitOfWork:</strong></p>

<p>Eine Milderung dieses Umstandes ist das UnitOfWork-Prinzip. Hierbei ist der Name mehr als treffend: Das „UnitOfWork“ ist ein Kontext, der sich alle Datenbankoperationen „notiert“, also alle Veränderungen, die gemacht werden sollen, mitschreibt und sie zum vom Entwickler gewählten Zeitpunkt gegen die Datenbank feuert. Somit werden alle Informationen „auf einmal“ (hierbei laufen wir schon noch synchron, jedoch mit so wenig aufrufen wie möglich) in die Datenbank geschrieben.</p>

<p>UnitOfWork löst also das grundlegende Problem, wie geänderte Objekte im Speicher verwaltet werden können, so dass eine effiziente Synchronisation mit der Datenbank möglich ist.</p>

<p>Schüttet man nun diese beiden Ansätze in einen Topf und gibt ein bisschen generisches dazu, hat man generische Repositories mit dem UnitOfWork-Pattern. Repositories, die grundsätzlich alle Operationen für jeden Dateityp bereitstellen, jedoch erweiterbar sind und alle ihre Änderungen auf einem UnitOfWork speichern, um dann alles gesammelt in eine Datenbank zu schreiben.</p>

<p>Nebenbei: Jeder, der das EntityFramework bisher benutzt hat, hat das UnitOfWork- und das Repository-Pattern schon genutzt. Der „DbContext“ ist schon eine Abstrahierung davon. Wenngleich eine sehr Datenbank-nahe.</p>

<p>Im Folgenden möchte ich so eine Implementierung vorstellen und ein Nuget-Paket von mir vorstellen, das die Arbeit mit dem UnitOfWork so einfach wie möglich macht.</p>

<p><img src="/assets/articles/2014-10-06/04.png" alt="ASP.NET Repository Pattern und Unit of Work" /></p>

<p>Benutzung des UnitOfWorks:</p>

<p><img src="/assets/articles/2014-10-06/05.png" alt="ASP.NET Repository Pattern und Unit of Work" /></p>

<p>Hierbei werden die Repositories im Prinzip generisch und implizit vom UnitOfWork zur Verfügung gestellt. Aber um das Testing zu verbessern und eine bessere Aufteilung zu gewährleisten kann und sollte man eigene Klassen für die Repositories erstellen und nutzen.</p>

<p><img src="/assets/articles/2014-10-06/06.png" alt="ASP.NET Repository Pattern und Unit of Work" /></p>

<p>Eine mögliche Aufteilung im Projekt könnte wie folgt aussehen (Am Beispiel eines Blog-Repositories)</p>

<p><img src="/assets/articles/2014-10-06/07.png" alt="ASP.NET Repository Pattern und Unit of Work" /></p>

<p>Verwendung könnte beispielsweise sein:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">AdminAreaServiceImpl</span> <span class="p">:</span> <span class="n">IAdminAreaService</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IBlogRepository</span> <span class="n">_blogRepository</span><span class="p">;</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IUserRepository</span> <span class="n">_userRepository</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">AdminAreaServiceImpl</span><span class="p">(</span><span class="n">IUserRepository</span> <span class="n">userRepository</span><span class="p">,</span> <span class="n">IBlogRepository</span> <span class="n">blogRepository</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_blogRepository</span> <span class="p">=</span> <span class="n">blogRepository</span><span class="p">.</span><span class="nf">CheckIsNull</span><span class="p">(</span><span class="s">"blogRepository"</span><span class="p">);</span>
        <span class="n">_userRepository</span> <span class="p">=</span> <span class="n">userRepository</span><span class="p">.</span><span class="nf">CheckIsNull</span><span class="p">(</span><span class="s">"userRepository"</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="k">public</span> <span class="n">AdminIndexViewModel</span> <span class="nf">AddBlog</span><span class="p">(</span><span class="n">AddBlogSubmitModel</span> <span class="n">addBlogSubmitModel</span><span class="p">,</span> <span class="kt">string</span> <span class="n">userName</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">AdminIndexViewModel</span> <span class="n">viewModel</span> <span class="p">=</span> <span class="nf">GetAdminIndexViewModelInternal</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="n">addBlogSubmitModel</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(!</span><span class="n">_modelValidator</span><span class="p">.</span><span class="nf">IsSubmitModelValid</span><span class="p">(</span><span class="n">viewModel</span><span class="p">,</span> <span class="n">addBlogSubmitModel</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">viewModel</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">Blog</span> <span class="n">blog</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Blog</span><span class="p">();</span>
        <span class="n">blog</span><span class="p">.</span><span class="n">Headline</span> <span class="p">=</span> <span class="n">addBlogSubmitModel</span><span class="p">.</span><span class="n">Headline</span><span class="p">;</span>
        <span class="n">blog</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="n">addBlogSubmitModel</span><span class="p">.</span><span class="n">Text</span><span class="p">;</span>
        <span class="n">blog</span><span class="p">.</span><span class="n">Added</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
        <span class="n">blog</span><span class="p">.</span><span class="n">WrittenBy</span> <span class="p">=</span> <span class="n">_userRepository</span><span class="p">.</span><span class="nf">GetUser</span><span class="p">(</span><span class="n">userName</span><span class="p">);</span>

        <span class="n">_blogRepository</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">blog</span><span class="p">);</span>
        <span class="n">_blogRepository</span><span class="p">.</span><span class="nf">Save</span><span class="p">();</span>

        <span class="n">viewModel</span><span class="p">.</span><span class="n">InfoMessages</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"Blog Added"</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">viewModel</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Der Code aus dem Beispiel und die oben erwähnte Verwendung benutzt das UnitOfWork-Paket welches bei Nuget verwendbar ist.</p>

<p><a href="http://www.nuget.org/packages/OfferingSolutions.UnitOfWork.Structure/" target="_blank">NuGet - UnitOfWork</a></p>

	  ]]></description>
	</item>


</channel>
</rss>
