<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>http://fabian-gosebrink.com</title>
   
   <link>http://offering.solutions</link>
   <description>Articles about Angular & ASP.NET</description>
   <language>en-us</language>
   <managingEditor> Fabian Gosebrink</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Writing custom validators in Angular</title>
	  <link>//blog/articles/2016/05/10/writing-custom-validators-in-angular-2/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2016-05-10T17:42:00+02:00</pubDate>
	  <guid>//blog/articles/2016/05/10/writing-custom-validators-in-angular-2/</guid>
	  <description><![CDATA[
	     <p>In this blogpost I want to show you how you are writing custom validators in Angular.</p>

<p><a href="https://github.com/OfferingSolutions/Offering-Solutions-Angular-Course/tree/master/Angular-Course/09_Forms/end/app/validators">https://github.com/OfferingSolutions/Offering-Solutions-Angular-Course/tree/master/Angular-Course/09_Forms/end/app/validators</a></p>

<blockquote>
  <p>Updated to new Syntax</p>
</blockquote>

<p>When dealing with forms in Angular you can use the build-in validators like: required, minLength or maxLength, pattern… . Sooner or later you need a custom validator fulfilling a special validation.</p>

<p>Let’s have a form first:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;form</span> <span class="err">#</span><span class="na">f=</span><span class="s">"ngForm"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"calories"</span><span class="nt">&gt;</span>Calories<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"calories"</span> <span class="na">placeholder=</span><span class="s">"Calories"</span> <span class="err">[(</span><span class="na">ngModel</span><span class="err">)]="</span><span class="na">foodItem</span><span class="err">.</span><span class="na">calories</span><span class="err">"</span>
             <span class="na">name=</span><span class="s">"calories"</span><span class="nt">&gt;</span>
   
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">class=</span><span class="s">"btn btn-default"</span> <span class="err">(</span><span class="na">click</span><span class="err">)="</span><span class="na">AddOrUpdateFood</span><span class="err">()"</span> <span class="err">[</span><span class="na">disabled</span><span class="err">]="!</span><span class="na">f</span><span class="err">?.</span><span class="na">valid</span><span class="err">"</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/form&gt;</span></code></pre></figure>

<p>We see a form which has a variable “f” representing the form with which we can ask for the current state. We also have an input control in which we can add a number - calories in this case.</p>

<blockquote>
  <p>I know that we could change the type of the input to number but in this post we want to check if whether the things the user typed are number or not.</p>
</blockquote>

<p>So lets write a validator which exactly checks for that:</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">Directive</span><span class="p">,</span> <span class="nx">forwardRef</span><span class="p">,</span> <span class="nx">Attribute</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Validator</span><span class="p">,</span> <span class="nx">FormControl</span><span class="p">,</span> <span class="nx">NG_VALIDATORS</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/forms'</span><span class="p">;</span>

<span class="err">@</span><span class="nx">Directive</span><span class="p">({</span>
    <span class="na">selector</span><span class="p">:</span> <span class="s1">'[isNumber][formControlName],[isNumber][formControl],[isNumber][ngModel]'</span><span class="p">,</span>
    <span class="na">providers</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span> <span class="na">provide</span><span class="p">:</span> <span class="nx">NG_VALIDATORS</span><span class="p">,</span> <span class="na">useExisting</span><span class="p">:</span> <span class="nx">forwardRef</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">IsNumberValidator</span><span class="p">),</span> <span class="na">multi</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}</span>
    <span class="p">]</span>
<span class="p">})</span>

<span class="k">export</span> <span class="kr">class</span> <span class="nx">IsNumberValidator</span> <span class="k">implements</span> <span class="nx">Validator</span> <span class="p">{</span>

    <span class="nx">validate</span><span class="p">(</span><span class="nx">c</span><span class="err">:</span> <span class="nx">FormControl</span><span class="p">)</span><span class="err">:</span> <span class="p">{</span> <span class="p">[</span><span class="nx">key</span><span class="err">:</span> <span class="kr">string</span><span class="p">]</span><span class="err">:</span> <span class="kr">any</span> <span class="p">}</span> <span class="p">{</span>

        <span class="k">if</span> <span class="p">(</span><span class="nb">isNaN</span><span class="p">(</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">value</span><span class="p">))</span> <span class="p">{</span>
            <span class="c1">// console.log(c.value + " is not a number");</span>
            <span class="k">return</span> <span class="p">{</span>
                <span class="na">isNumber</span><span class="p">:</span>
                <span class="p">{</span>
                    <span class="na">valid</span><span class="p">:</span> <span class="kc">false</span>
                <span class="p">}</span>
            <span class="p">};</span>
        <span class="p">}</span>

        <span class="c1">// console.log(c.value + " is a number");</span>
        <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>This validator is named “IsNumberValidator” and has a function with a FormControl as a parameter. After the imports we define a directive here and adding the selectors we want. The “providers” let us extend the build-in NG_VALIDATORS and add our new validator. The class implements the validator class with the “validate”-Method which takes a FormControl and returns null if everything is okay and not null if the validation fails.</p>

<p>Before we can use it in our form we have to include it in our module. I built a shared module which I include in my app.module.</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">NgModule</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">BrowserModule</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/platform-browser'</span><span class="p">;</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">IsNumberValidator</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../validators/isNumber.validator'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">IsInRangeValidator</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../validators/isInRange.validator'</span><span class="p">;</span>

<span class="err">@</span><span class="nx">NgModule</span><span class="p">({</span>
    <span class="na">imports</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// Modules</span>
        <span class="nx">BrowserModule</span>
    <span class="p">],</span>

    <span class="na">declarations</span><span class="p">:</span> <span class="p">[</span>

        <span class="c1">// Components &amp;amp; directives</span>

        <span class="nx">IsNumberValidator</span><span class="p">,</span>
         <span class="nx">IsInRangeValidator</span>
    <span class="p">],</span>

    <span class="na">providers</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// Services</span>
    <span class="p">],</span>

    <span class="na">exports</span><span class="p">:</span> <span class="p">[</span>
        <span class="nx">IsNumberValidator</span><span class="p">,</span>
        <span class="nx">IsInRangeValidator</span>
    <span class="p">]</span>
<span class="p">})</span>

<span class="k">export</span> <span class="kr">class</span> <span class="nx">SharedModule</span> <span class="p">{</span> <span class="p">}</span> </code></pre></figure>

<p>and in our app.module:</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="c1">// ...</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">SharedModule</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'./modules/shared.module'</span><span class="p">;</span>


<span class="err">@</span><span class="nx">NgModule</span><span class="p">({</span>
    <span class="na">imports</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// ...</span>
        <span class="nx">SharedModule</span>
    <span class="p">],</span>

    <span class="na">declarations</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// ...</span>
    <span class="p">],</span>

    <span class="na">providers</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// ...</span>
    <span class="p">],</span>

    <span class="na">bootstrap</span><span class="p">:</span> <span class="p">[</span><span class="nx">AppComponent</span><span class="p">]</span>
<span class="p">})</span>

<span class="k">export</span> <span class="kr">class</span> <span class="nx">AppModule</span> <span class="p">{</span> <span class="p">}</span> </code></pre></figure>

<p>We can use it in the form like</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;form</span> <span class="err">#</span><span class="na">f=</span><span class="s">"ngForm"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"calories"</span><span class="nt">&gt;</span>Calories<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"calories"</span> <span class="na">placeholder=</span><span class="s">"Calories"</span> <span class="err">[(</span><span class="na">ngModel</span><span class="err">)]="</span><span class="na">foodItem</span><span class="err">.</span><span class="na">calories</span><span class="err">"</span>
            <span class="na">isNumber</span> <span class="na">name=</span><span class="s">"calories"</span><span class="nt">&gt;</span>
   
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">class=</span><span class="s">"btn btn-default"</span> <span class="err">(</span><span class="na">click</span><span class="err">)="</span><span class="na">AddOrUpdateFood</span><span class="err">()"</span> <span class="err">[</span><span class="na">disabled</span><span class="err">]="!</span><span class="na">f</span><span class="err">?.</span><span class="na">valid</span><span class="err">"</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/form&gt;</span> </code></pre></figure>

<p>Here we add the validator to the input field of our form. It is only a directive so we can treat it this way like we did with every directive before.</p>

<p>So now the validator directive fires everytime a key is hit. We can now add a</p>

<p><code class="highlighter-rouge">... #calories="ngModel" ...</code></p>

<p>to the form and check if the variable we introduced is valid with</p>

<p><code class="highlighter-rouge">... calories.valid ...</code></p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;form</span> <span class="err">#</span><span class="na">f=</span><span class="s">"ngForm"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"calories"</span><span class="nt">&gt;</span>Calories<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"calories"</span> <span class="na">placeholder=</span><span class="s">"Calories"</span> <span class="err">[(</span><span class="na">ngModel</span><span class="err">)]="</span><span class="na">foodItem</span><span class="err">.</span><span class="na">calories</span><span class="err">"</span>
            <span class="na">isNumber</span> <span class="na">name=</span><span class="s">"calories"</span> <span class="err">#</span><span class="na">calories=</span><span class="s">"ngModel"</span><span class="nt">&gt;</span>
   
    <span class="nt">&lt;div</span> <span class="err">*</span><span class="na">ngIf=</span><span class="s">"!calories.valid"</span> <span class="na">class=</span><span class="s">"alert alert-danger"</span><span class="nt">&gt;</span>
            Field is not valid
        <span class="nt">&lt;/div&gt;</span>
   
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">class=</span><span class="s">"btn btn-default"</span> <span class="err">(</span><span class="na">click</span><span class="err">)="</span><span class="na">AddOrUpdateFood</span><span class="err">()"</span> <span class="err">[</span><span class="na">disabled</span><span class="err">]="!</span><span class="na">f</span><span class="err">?.</span><span class="na">valid</span><span class="err">"</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/form&gt;</span> </code></pre></figure>

<p>But it would be nice to show <em>specific</em> error messages to the users and not only if the filed is valid or not. Combining the variable with the dirty-check and our validator-naming we can show the user messages exactly to what was going wrong in the form.</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;form</span> <span class="err">#</span><span class="na">f=</span><span class="s">"ngForm"</span> <span class="na">novalidate</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"calories"</span><span class="nt">&gt;</span>Calories<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"calories"</span> <span class="na">placeholder=</span><span class="s">"Calories"</span> <span class="err">[(</span><span class="na">ngModel</span><span class="err">)]="</span><span class="na">currentFood</span><span class="err">.</span><span class="na">calories</span><span class="err">"</span> <span class="na">required</span>
            <span class="na">isNumber</span> <span class="na">name=</span><span class="s">"calories"</span> <span class="err">#</span><span class="na">calories=</span><span class="s">"ngModel"</span><span class="nt">&gt;</span> 
            
        <span class="nt">&lt;div</span> <span class="err">*</span><span class="na">ngIf=</span><span class="s">"calories.errors?.required &amp;amp;&amp;amp; (calories?.dirty &amp;amp;&amp;amp; !f.submitted)"</span> <span class="na">class=</span><span class="s">"alert alert-danger"</span><span class="nt">&gt;</span>
            *
        <span class="nt">&lt;/div&gt;</span>

        <span class="nt">&lt;div</span> <span class="err">*</span><span class="na">ngIf=</span><span class="s">"calories.errors?.isNumber &amp;amp;&amp;amp; (calories?.dirty &amp;amp;&amp;amp; !f.submitted)"</span> <span class="na">class=</span><span class="s">"alert alert-danger"</span><span class="nt">&gt;</span>
            Please enter a number in a valid range
        <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">class=</span><span class="s">"btn btn-default"</span> <span class="err">(</span><span class="na">click</span><span class="err">)="</span><span class="na">AddOrUpdateFood</span><span class="err">()"</span> <span class="err">[</span><span class="na">disabled</span><span class="err">]="!</span><span class="na">f</span><span class="err">?.</span><span class="na">valid</span><span class="err">"</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/form&gt;</span></code></pre></figure>

<p>And that’s basically it.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/05/Angular2CustomValidators.jpg" alt="Angular2CustomValidators" /></p>

<p>HTH</p>

<p>Regards
<a href="https://github.com/OfferingSolutions/Offering-Solutions-Angular-Course/tree/master/Angular-Course/09_Forms/end/app/validators">https://github.com/OfferingSolutions/Offering-Solutions-Angular-Course/tree/master/Angular-Course/09_Forms/end/app/validators</a></p>

<p><a href="http://blog.thoughtram.io/angular/2016/03/14/custom-validators-in-angular-2.html">http://blog.thoughtram.io/angular/2016/03/14/custom-validators-in-angular-2.html</a></p>

<p>Thanks to <a href="http://www.gutsch-online.de/">Jürgen Gutsch</a> for doing a review of this blogpost.</p>

<p>Fabian</p>

	  ]]></description>
	</item>


</channel>
</rss>
