<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>http://fabian-gosebrink.com</title>
   
   <link>http://offering.solutions</link>
   <description>Articles about Angular & ASP.NET</description>
   <language>en-us</language>
   <managingEditor> Fabian Gosebrink</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Build and debug a WebAPI with the Dotnet CLI and VSCode</title>
	  <link>//blog/articles/2016/11/02/build-and-debug-webapi-with-the-dotnet-cli-and-vscode/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2016-11-02T09:30:00+01:00</pubDate>
	  <guid>//blog/articles/2016/11/02/build-and-debug-webapi-with-the-dotnet-cli-and-vscode/</guid>
	  <description><![CDATA[
	     <p>In this blog I want to show you how to build and debug a WebAPI with the Dotnet CLI and VSCode.</p>

<p>Code is here:</p>

<p><a href="https://github.com/FabianGosebrink/ASPNETCore-WebAPI-With-VSCode-Dotnet-CLI">https://github.com/FabianGosebrink/ASPNETCore-WebAPI-With-VSCode-Dotnet-CLI</a></p>

<h3 id="why-should-we-do-a-webapi-with-vscode-and-the-dotnet-cli">Why should we do a WebAPI with VSCode and the DotNet CLI?</h3>

<p>If you are building websites nowadays you have a lot of tools and a lot of technologies to handle. On Serverside this is a little bit easier but there you have a couple of technologies to face, too. In the past this was strongly connected to the operating system you were running on. With the dotnet CLI and Visual Studio Code you can build, run and debug APIs which are cross platform and so not bound to your (windows) system anymore.</p>

<h3 id="get-started">Get started</h3>

<p>First you have to download the dotnet CLI</p>

<p><a href="https://github.com/dotnet/cli">https://github.com/dotnet/cli</a></p>

<p>You can check if the CLI is running correctly by typing “dotnet” into your cmd. Something like this should appear:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/11/BuildaWebAPIwithVSCodeandtheDotNetCLI_01.jpg" alt="buildawebapiwithvscodeandthedotnetcli_01" />&lt;/a&gt;</p>

<p>Now we can type “code .” to start Visual Studio Code and add some content.</p>

<p>Modify the project.json to this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">"dependencies"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"Microsoft.NETCore.App"</span><span class="err">:</span> <span class="p">{</span>
      <span class="s2">"version"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
      <span class="s2">"type"</span><span class="err">:</span> <span class="s2">"platform"</span>
    <span class="p">},</span>
    <span class="s2">"Microsoft.AspNetCore.Diagnostics"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.AspNetCore.Server.IISIntegration"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.AspNetCore.Server.Kestrel"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.Extensions.Logging.Console"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.AspNetCore.Mvc"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Automapper"</span><span class="err">:</span> <span class="s2">"5.1.1"</span><span class="p">,</span>
    <span class="s2">"Microsoft.Extensions.Configuration.FileExtensions"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.Extensions.Configuration.Json"</span><span class="err">:</span> <span class="s2">"1.0.0"</span>
  <span class="p">},</span>
  <span class="s2">"tools"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"Microsoft.AspNetCore.Server.IISIntegration.Tools"</span><span class="err">:</span> <span class="s2">"1.0.0-preview2-final"</span>
  <span class="p">},</span>
  <span class="s2">"frameworks"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"netcoreapp1.0"</span><span class="err">:</span> <span class="p">{}</span>
  <span class="p">},</span>
  <span class="s2">"buildOptions"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"emitEntryPoint"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"preserveCompilationContext"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"debugType"</span><span class="err">:</span> <span class="s2">"portable"</span>
  <span class="p">},</span>
  <span class="s2">"runtimeOptions"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"configProperties"</span><span class="err">:</span> <span class="p">{</span>
      <span class="s2">"System.GC.Server"</span><span class="err">:</span> <span class="kc">true</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="s2">"publishOptions"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"include"</span><span class="err">:</span> <span class="p">[</span>
      <span class="s2">"wwwroot"</span><span class="p">,</span>
      <span class="s2">"web.config"</span>
    <span class="p">]</span>
  <span class="p">},</span>
  <span class="s2">"scripts"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"postpublish"</span><span class="err">:</span> <span class="p">[</span>
      <span class="s2">"dotnet publish-iis --publish-folder %publish:OutputPath% --framework %publish:FullTargetFramework%"</span>
    <span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>and add the Startup.cs like this:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Builder</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Hosting</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.DependencyInjection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Logging</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AspNetWebapiCore</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Startup</span>
    <span class="p">{</span>
        <span class="c1">// This method gets called by the runtime. Use this method to add services to the container.
</span>        <span class="c1">// For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=398940
</span>        <span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">services</span><span class="p">.</span><span class="nf">AddOptions</span><span class="p">();</span>

            <span class="n">services</span><span class="p">.</span><span class="nf">AddCors</span><span class="p">(</span><span class="n">options</span> <span class="p">=&gt;</span>
            <span class="p">{</span>
                <span class="n">options</span><span class="p">.</span><span class="nf">AddPolicy</span><span class="p">(</span><span class="s">"AllowAllOrigins"</span><span class="p">,</span>
                    <span class="n">builder</span> <span class="p">=&gt;</span>
                    <span class="p">{</span>
                        <span class="n">builder</span>
                            <span class="p">.</span><span class="nf">AllowAnyOrigin</span><span class="p">()</span>
                            <span class="p">.</span><span class="nf">AllowAnyHeader</span><span class="p">()</span>
                            <span class="p">.</span><span class="nf">AllowAnyMethod</span><span class="p">();</span>
                    <span class="p">});</span>
            <span class="p">});</span>

            <span class="n">services</span><span class="p">.</span><span class="nf">AddMvc</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
</span>        <span class="k">public</span> <span class="k">void</span> <span class="nf">Configure</span><span class="p">(</span><span class="n">IApplicationBuilder</span> <span class="n">app</span><span class="p">,</span> <span class="n">IHostingEnvironment</span> <span class="n">env</span><span class="p">,</span> <span class="n">ILoggerFactory</span> <span class="n">loggerFactory</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">loggerFactory</span><span class="p">.</span><span class="nf">AddConsole</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">env</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="n">app</span><span class="p">.</span><span class="nf">UseDeveloperExceptionPage</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseCors</span><span class="p">(</span><span class="s">"AllowAllOrigins"</span><span class="p">);</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseMvc</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Now modify the program.cs like this:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">using</span> <span class="nn">System.IO</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Hosting</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AspNetWebapiCore</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">host</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">WebHostBuilder</span><span class="p">()</span>
                <span class="p">.</span><span class="nf">UseKestrel</span><span class="p">()</span>
                <span class="p">.</span><span class="nf">UseContentRoot</span><span class="p">(</span><span class="n">Directory</span><span class="p">.</span><span class="nf">GetCurrentDirectory</span><span class="p">())</span>
                <span class="p">.</span><span class="nf">UseIISIntegration</span><span class="p">()</span>
                <span class="p">.</span><span class="n">UseStartup</span><span class="p">&lt;</span><span class="n">Startup</span><span class="p">&gt;()</span>
                <span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

            <span class="n">host</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>If you now type “dotnet restore” and “dotnet run” your api starts.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/11/BuildaWebAPIwithVSCodeandtheDotNetCLI_02.jpg" alt="buildawebapiwithvscodeandthedotnetcli_02" /></p>

<p>That was easy, right?</p>

<blockquote>
  <p>The ASP.NET Core WebAPI runs now. All we do now is adding content, but the main environment for the ASP.NET Core WebAPI is running at this point. :)</p>
</blockquote>

<p>Lets add some content.</p>

<p>Add the folders and files:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/11/BuildaWebAPIwithVSCodeandtheDotNetCLI_03.jpg" alt="buildawebapiwithvscodeandthedotnetcli_03" /></p>

<p>The repository can be found here:</p>

<p><a href="https://github.com/FabianGosebrink/ASPNETCore-WebAPI-With-VSCode-Dotnet-CLI">https://github.com/FabianGosebrink/ASPNETCore-WebAPI-With-VSCode-Dotnet-CLI</a></p>

<p>Please add the showed files to your project, you can copy them from the repo.</p>

<p>Do not forget to modify your Startup.cs like this: Adding the repositry to the IoC-Container and adding the Automapper mapping:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...
</span>    <span class="n">services</span><span class="p">.</span><span class="n">AddSingleton</span><span class="p">&lt;</span><span class="n">IFoodRepository</span><span class="p">,</span> <span class="n">FoodRepository</span><span class="p">&gt;();</span>
    <span class="c1">// ...
</span><span class="p">}</span></code></pre></figure>

<p>and</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">void</span> <span class="nf">Configure</span><span class="p">(</span><span class="n">IApplicationBuilder</span> <span class="n">app</span><span class="p">,</span> <span class="n">IHostingEnvironment</span> <span class="n">env</span><span class="p">,</span> <span class="n">ILoggerFactory</span> <span class="n">loggerFactory</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...
</span>    <span class="n">AutoMapper</span><span class="p">.</span><span class="n">Mapper</span><span class="p">.</span><span class="nf">Initialize</span><span class="p">(</span><span class="n">mapper</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
        <span class="n">mapper</span><span class="p">.</span><span class="n">CreateMap</span><span class="p">&lt;</span><span class="n">FoodItem</span><span class="p">,</span> <span class="n">FoodDto</span><span class="p">&gt;().</span><span class="nf">ReverseMap</span><span class="p">();</span>
    <span class="p">});</span>
    <span class="c1">// ...
</span><span class="p">}</span></code></pre></figure>

<p>If you now type “dotnet build” it should build everyting. The warnings are because of we ware doing nothing with the exception variable. You should handle them anyhow in a real world project.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/11/BuildaWebAPIwithVSCodeandtheDotNetCLI_04.jpg" alt="Build and debug WebAPI with the Dotnet CLI and VSCode" /></p>

<p>If you now do “dotnet run” on your console, your webapi starts up and you can use it:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/11/BuildaWebAPIwithVSCodeandtheDotNetCLI_05-1024x555.jpg" alt="Build and debug WebAPI with the Dotnet CLI and VSCode" /></p>

<h3 id="debugging">Debugging</h3>

<p>We can now also debug the webapi with vscode. Therefore you only have to cancel the running process first and then hit the start button in the debug tab from vscode:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/11/BuildaWebAPIwithVSCodeandtheDotNetCLI_06-1024x555.jpg" alt="Build and debug a WebAPI with the Dotnet CLI and VSCode" /></p>

<p><img src="/assets/articles/wp-content/uploads/2016/11/BuildaWebAPIwithVSCodeandtheDotNetCLI_07-1024x553.jpg" alt="Build and debug a WebAPI with the Dotnet CLI and VSCode" /></p>

<p>So this is it. You now have built a ASP.NET WebAPI only with the dotnet cli and Visual Studio Code (vscode)</p>

<p>Hope this helps anybody</p>

<p>BR</p>

<p>Fabian</p>

	  ]]></description>
	</item>


</channel>
</rss>
