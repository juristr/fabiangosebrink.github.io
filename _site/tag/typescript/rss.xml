<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>http://fabian-gosebrink.com</title>
   
   <link>http://offering.solutions</link>
   <description>Articles about Angular & ASP.NET</description>
   <language>en-us</language>
   <managingEditor> Fabian Gosebrink</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>How to implement a table filter in Angular</title>
	  <link>//blog/articles/2016/11/21/how-to-implement-a-table-filter-in-angular-2/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2016-11-21T21:16:00+01:00</pubDate>
	  <guid>//blog/articles/2016/11/21/how-to-implement-a-table-filter-in-angular-2/</guid>
	  <description><![CDATA[
	     <p>In this post I want to show you how to implement a table filter in Angular.</p>

<p>Code: <a href="https://github.com/FabianGosebrink/ASPNET-ASPNETCore-Angular-Webpack/blob/master/AngularCLI/src/app/food/pipes/filter.pipe.ts">https://github.com/FabianGosebrink/ASPNET-ASPNETCore-Angular-Webpack/blob/master/AngularCLI/src/app/food/pipes/filter.pipe.ts</a></p>

<p>A table in your application is maybe one of the most used controls. So is a filter for the table.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/11/filter-1024x133.jpg" alt="In this post I want to show you how to implement a table filter in Angular2" /></p>

<p>You can achieve this using a pipe:</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">Pipe</span><span class="p">,</span> <span class="nx">PipeTransform</span><span class="p">,</span> <span class="nx">Injectable</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>

<span class="err">@</span><span class="nx">Pipe</span><span class="p">({</span>
    <span class="na">name</span><span class="p">:</span> <span class="s1">'filter'</span>
<span class="p">})</span>

<span class="err">@</span><span class="nx">Injectable</span><span class="p">()</span>
<span class="k">export</span> <span class="kr">class</span> <span class="nx">FilterPipe</span> <span class="k">implements</span> <span class="nx">PipeTransform</span> <span class="p">{</span>
    <span class="nx">transform</span><span class="p">(</span><span class="nx">items</span><span class="err">:</span> <span class="kr">any</span><span class="p">[],</span> <span class="nx">field</span><span class="err">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">value</span><span class="err">:</span> <span class="kr">string</span><span class="p">)</span><span class="err">:</span> <span class="kr">any</span><span class="p">[]</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">items</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="p">[];</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">field</span> <span class="o">||</span> <span class="o">!</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">items</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nx">items</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">singleItem</span> <span class="o">=&gt;</span> <span class="nx">singleItem</span><span class="p">[</span><span class="nx">field</span><span class="p">].</span><span class="nx">toLowerCase</span><span class="p">().</span><span class="nx">includes</span><span class="p">(</span><span class="nx">value</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()));</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>This pipe takes an array if items and checks if the field which is also a parameter on a single items contains the value the user types. It returns the array of matching items.</p>

<p>The Pipe is available through the name “filter”.</p>

<p>After implementing this the pipe has to be registered on a module to make it available in our application. Could be your application module or if you have one, a shared module. In case of the shared one: Do not forget to export it. ;-)</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">NgModule</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">BrowserModule</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/platform-browser'</span><span class="p">;</span>

<span class="c1">// ...</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">FilterPipe</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../pipes/filter.pipe'</span><span class="p">;</span>

<span class="err">@</span><span class="nx">NgModule</span><span class="p">({</span>
    <span class="na">imports</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// Modules</span>
        <span class="nx">BrowserModule</span>
    <span class="p">],</span>

    <span class="na">declarations</span><span class="p">:</span> <span class="p">[</span>

        <span class="c1">// Components &amp;amp; directives</span>
        <span class="nx">FilterPipe</span>
    <span class="p">],</span>

    <span class="na">providers</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// Services</span>
    <span class="p">],</span>

    <span class="na">exports</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// ...</span>
        <span class="nx">FilterPipe</span>
    <span class="p">]</span>
<span class="p">})</span>

<span class="k">export</span> <span class="kr">class</span> <span class="nx">SharedModule</span> <span class="p">{</span> <span class="p">}</span></code></pre></figure>

<p>AppModule:</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">NgModule</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="c1">// ...</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">SharedModule</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'./modules/shared.module'</span><span class="p">;</span>

<span class="c1">// ...</span>

<span class="err">@</span><span class="nx">NgModule</span><span class="p">({</span>
    <span class="na">imports</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// ...</span>
        <span class="nx">SharedModule</span>
    <span class="p">],</span>

    <span class="na">declarations</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// ...</span>
    <span class="p">],</span>

    <span class="na">providers</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// ...</span>
    <span class="p">],</span>

    <span class="na">bootstrap</span><span class="p">:</span> <span class="p">[</span><span class="nx">AppComponent</span><span class="p">]</span>
<span class="p">})</span>

<span class="k">export</span> <span class="kr">class</span> <span class="nx">AppModule</span> <span class="p">{</span> <span class="p">}</span></code></pre></figure>

<p>In the template you have to add a input to a form to display a field to the user where the searchstring can be typed. After this the pipe has to be applied and the searchstring has to be databound in the template.</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">OnInit</span><span class="p">,</span> <span class="nx">Output</span><span class="p">,</span> <span class="nx">EventEmitter</span><span class="p">,</span> <span class="nx">Input</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="err">@</span><span class="nx">Component</span><span class="p">({</span>
    <span class="na">selector</span><span class="p">:</span> <span class="s1">'foodList'</span><span class="p">,</span>
    <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'app/components/foodList/foodList.component.html'</span>
<span class="p">})</span>

<span class="k">export</span> <span class="kr">class</span> <span class="nx">FoodListComponent</span> <span class="p">{</span>
    <span class="k">public</span> <span class="nx">foodItem</span><span class="err">:</span> <span class="nx">FoodItem</span><span class="p">;</span>
    <span class="k">public</span> <span class="nx">searchString</span><span class="err">:</span> <span class="kr">string</span><span class="p">;</span>

    <span class="c1">// ...</span>
<span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;form&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"input-group"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"input-group-addon"</span><span class="nt">&gt;&lt;i</span> <span class="na">class=</span><span class="s">"glyphicon glyphicon-search"</span><span class="nt">&gt;&lt;/i&gt;&lt;/div&gt;</span>
            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">name=</span><span class="s">"searchString"</span> <span class="na">placeholder=</span><span class="s">"Type to search..."</span> <span class="err">[(</span><span class="na">ngModel</span><span class="err">)]="</span><span class="na">searchString</span><span class="err">"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/form&gt;</span>

<span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">"table"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
        <span class="nt">&lt;th&gt;</span>Name<span class="nt">&lt;/th&gt;</span>
        <span class="nt">&lt;th&gt;</span>Calories<span class="nt">&lt;/th&gt;</span>
        <span class="nt">&lt;th</span> <span class="na">class=</span><span class="s">"text-right"</span><span class="nt">&gt;</span>Actions<span class="nt">&lt;/th&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
    <span class="nt">&lt;tr</span> <span class="err">*</span><span class="na">ngFor=</span><span class="s">"let food of foods | filter : 'name' : searchString; let i = index"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">"text-left"</span><span class="nt">&gt;</span>
            
        <span class="nt">&lt;/td&gt;</span>
        // ...
    <span class="nt">&lt;/tr&gt;</span>
<span class="nt">&lt;/table&gt;</span></code></pre></figure>

<p>Now the table is filtered after the field “name” by the string which is typed into the searchString-input.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/11/searchFilter-1024x316.gif" alt="In this post I want to show you how to implement a table filter in Angular2" /></p>

<p>HTH</p>

<p>Fabian</p>

	  ]]></description>
	</item>

	<item>
	  <title>Consuming a REST API with Angular Http-Service in Typescript</title>
	  <link>//blog/articles/2016/02/01/consuming-a-rest-api-with-angular-http-service-in-typescript/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2016-02-01T12:23:00+01:00</pubDate>
	  <guid>//blog/articles/2016/02/01/consuming-a-rest-api-with-angular-http-service-in-typescript/</guid>
	  <description><![CDATA[
	     <p><strong>Updated to new syntax</strong></p>

<p>Hey,</p>

<p>with this blog pot I want to show you how to create a Dataservice to consume (not only) an ASP.NET REST API with the angular2 http module.</p>

<p>In my recent blog post <a href="http://offering.solutions/blog/articles/2015/12/03/getting-started-with-visual-studio-code-angularjs-and-typescript/">Getting started with Visual Studio Code, AngularJS and Typescript</a> I have already mentioned how to start and to install the complete angular2 environment with corresponding tools.</p>

<p>Now I want to show you an example dataservice to call your favourite API.</p>

<h3 id="configuration">Configuration</h3>

<p>Its always a good thing if you have your configuration seperated stored anywhere in your application. I always go for a file like “app.constants.ts” where I store all my values. If anything changes there, like a version of the api which is stored in the url or the endpoint/server whatever, I can do those changes immediatelly at one point.</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">Injectable</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>

<span class="err">@</span><span class="nx">Injectable</span><span class="p">()</span>
<span class="k">export</span> <span class="kr">class</span> <span class="nx">Configuration</span> <span class="p">{</span>
    <span class="k">public</span> <span class="nx">Server</span><span class="err">:</span> <span class="kr">string</span> <span class="o">=</span> <span class="s1">'http://localhost:5000/'</span><span class="p">;</span>
    <span class="k">public</span> <span class="nx">ApiUrl</span><span class="err">:</span> <span class="kr">string</span> <span class="o">=</span> <span class="s1">'api/'</span><span class="p">;</span>
    <span class="k">public</span> <span class="nx">ServerWithApiUrl</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">Server</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">ApiUrl</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>Notice the injectable attribute to generate the metadata to make the service available through DI in other modules.</p>

<blockquote>
  <p>You can read more about DI in Angular in this blog post <a href="http://blog.thoughtram.io/angular/2015/05/18/dependency-injection-in-angular-2.html">Dependency Injection in Angular</a></p>
</blockquote>

<p>Now we have this going we can generate our service:</p>

<h3 id="the-service">The Service</h3>

<p>First of all you have to create a module which only contains a service which is only responsible for calling an API with a specific endpoint.</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">Injectable</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Http</span><span class="p">,</span> <span class="nx">Response</span><span class="p">,</span> <span class="nx">Headers</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/http'</span><span class="p">;</span>
<span class="k">import</span> <span class="s1">'rxjs/add/operator/map'</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Observable</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'rxjs/Observable'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">MyTypedItem</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../models/MyTypedItem'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Configuration</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../app.constants'</span><span class="p">;</span>

<span class="err">@</span><span class="nx">Injectable</span><span class="p">()</span>
<span class="k">export</span> <span class="kr">class</span> <span class="nx">DataService</span> <span class="p">{</span>

    <span class="k">private</span> <span class="nx">actionUrl</span><span class="err">:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="k">private</span> <span class="nx">headers</span><span class="err">:</span> <span class="nx">Headers</span><span class="p">;</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">_http</span><span class="err">:</span> <span class="nx">Http</span><span class="p">,</span> <span class="k">private</span> <span class="nx">_configuration</span><span class="err">:</span> <span class="nx">Configuration</span><span class="p">)</span> <span class="p">{</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span> <span class="o">=</span> <span class="nx">_configuration</span><span class="p">.</span><span class="nx">ServerWithApiUrl</span> <span class="o">+</span> <span class="s1">'myItem/'</span><span class="p">;</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Headers</span><span class="p">();</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'Content-Type'</span><span class="p">,</span> <span class="s1">'application/json'</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'Accept'</span><span class="p">,</span> <span class="s1">'application/json'</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">GetAll</span> <span class="o">=</span> <span class="p">()</span><span class="err">:</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">MyTypedItem</span><span class="p">[]</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="na">response</span><span class="p">:</span> <span class="nx">Response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">MyTypedItem</span><span class="p">[]</span><span class="o">&gt;</span><span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
            <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">handleError</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">GetSingle</span> <span class="o">=</span> <span class="p">(</span><span class="na">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">MyTypedItem</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span> <span class="o">+</span> <span class="nx">id</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="na">response</span><span class="p">:</span> <span class="nx">Response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">MyTypedItem</span><span class="o">&gt;</span><span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
            <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">handleError</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">Add</span> <span class="o">=</span> <span class="p">(</span><span class="na">itemName</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">MyTypedItem</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nx">toAdd</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">ItemName</span><span class="p">:</span> <span class="nx">itemName</span> <span class="p">});</span>

        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span><span class="p">,</span> <span class="nx">toAdd</span><span class="p">,</span> <span class="p">{</span> <span class="na">headers</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">headers</span> <span class="p">})</span>
            <span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="na">response</span><span class="p">:</span> <span class="nx">Response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">MyTypedItem</span><span class="o">&gt;</span><span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
            <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">handleError</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">Update</span> <span class="o">=</span> <span class="p">(</span><span class="na">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="na">itemToUpdate</span><span class="p">:</span> <span class="nx">MyTypedItem</span><span class="p">):</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">MyTypedItem</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_http</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span> <span class="o">+</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">itemToUpdate</span><span class="p">),</span> <span class="p">{</span> <span class="na">headers</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">headers</span> <span class="p">})</span>
            <span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="na">response</span><span class="p">:</span> <span class="nx">Response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">MyTypedItem</span><span class="o">&gt;</span><span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
            <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">handleError</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">Delete</span> <span class="o">=</span> <span class="p">(</span><span class="na">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">Response</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_http</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span> <span class="o">+</span> <span class="nx">id</span><span class="p">)</span>
            <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">handleError</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="nx">handleError</span><span class="p">(</span><span class="na">error</span><span class="p">:</span> <span class="nx">Response</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">Observable</span><span class="p">.</span><span class="k">throw</span><span class="p">(</span><span class="nx">error</span><span class="p">.</span><span class="nx">json</span><span class="p">().</span><span class="nx">error</span> <span class="o">||</span> <span class="s1">'Server error'</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>This dataservice gets the configuration we just did and the HTTP-Service via DI. We included it over the new module-loading-syntax. Also notice the typed items we included and the configuration we have to pull in to make it available.</p>

<p>It is also important to tell the http-calls which header to use. “Application/Json” in this case.</p>

<p>Now you can include, inject and use this service to make http-calls to your API like this:</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">OnInit</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">DataService</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../services/dataService'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">MyTypedItem</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../models/MyTypedItem '</span><span class="p">;</span>

<span class="err">@</span><span class="nx">Component</span><span class="p">({</span>
    <span class="na">selector</span><span class="p">:</span> <span class="s1">'my-item-component'</span><span class="p">,</span>
    <span class="na">providers</span><span class="p">:</span> <span class="p">[</span><span class="nx">DataService</span><span class="p">],</span>
    <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'app/myItem/myItem.component.html'</span>
<span class="p">})</span>

<span class="k">export</span> <span class="kr">class</span> <span class="nx">MyItemComponent</span> <span class="k">implements</span> <span class="nx">OnInit</span> <span class="p">{</span>
    <span class="k">public</span> <span class="nx">myItems</span><span class="err">:</span> <span class="nx">MyTypedItem</span> <span class="p">[];</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">_dataService</span><span class="err">:</span> <span class="nx">DataService</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>

    <span class="nx">ngOnInit</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">getAllItems</span><span class="p">();</span>
    <span class="p">}</span>
    
    <span class="c1">//...</span>

    <span class="k">private</span> <span class="nx">getAllItems</span><span class="p">()</span><span class="err">:</span> <span class="k">void</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_dataService</span>
            <span class="p">.</span><span class="nx">GetAll</span><span class="p">()</span>
            <span class="p">.</span><span class="nx">subscribe</span><span class="p">((</span><span class="na">data</span><span class="p">:</span><span class="nx">MyTypedItem</span><span class="p">[])</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">myItems</span> <span class="o">=</span> <span class="nx">data</span><span class="p">,</span>
                <span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">),</span>
                <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Get all Items complete'</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>I think this should be basically it. Pay attention to the typed answer you get from the service</p>

<p><code class="highlighter-rouge">(response:MyTypedItem[]) =&gt;</code></p>

<p>and to the subsribe after calling the “GetAll”-Method from the service.</p>

<p>Hope you enjoyed it and a lot more: I hope this helps.</p>

<p>Bye</p>

<p>Fabian</p>

<h3 id="github">GitHub:</h3>

<p><a href="https://github.com/FabianGosebrink/ASPNETCore-Angular-SignalR-Typescript">Angular ASP.NET CORE Template With SignalR</a></p>

<p>or</p>

<p><a href="https://github.com/FabianGosebrink/ASPNET-ASPNETCore-Angular-Webpack/tree/master/AngularCLI">https://github.com/FabianGosebrink/ASPNET-ASPNETCore-Angular-Webpack/tree/master/AngularCLI</a></p>

<h3 id="links">Links:</h3>

<p><a href="https://auth0.com/blog/2015/05/14/creating-your-first-real-world-angular-2-app-from-authentication-to-calling-an-api-and-everything-in-between/">https://auth0.com/blog/2015/05/14/creating-your-first-real-world-angular-2-app-from-authentication-to-calling-an-api-and-everything-in-between/</a></p>

<p><a href="https://auth0.com/blog/2015/10/15/angular-2-series-part-3-using-http/">https://auth0.com/blog/2015/10/15/angular-2-series-part-3-using-http/</a></p>

<p><a href="https://auth0.com/blog/2015/09/17/angular-2-series-part-2-domain-models-and-dependency-injection/">https://auth0.com/blog/2015/09/17/angular-2-series-part-2-domain-models-and-dependency-injection/</a></p>

<p><a href="https://auth0.com/blog/2015/09/03/angular2-series-working-with-pipes/">https://auth0.com/blog/2015/09/03/angular2-series-working-with-pipes/</a></p>

<p><a href="https://angular.io/docs/ts/latest/guide/architecture.html">https://angular.io/docs/ts/latest/guide/architecture.html</a></p>

	  ]]></description>
	</item>

	<item>
	  <title>Getting started with Visual Studio Code, AngularJS and Typescript</title>
	  <link>//blog/articles/2015/12/03/getting-started-with-visual-studio-code-angularjs-and-typescript/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2015-12-03T14:17:00+01:00</pubDate>
	  <guid>//blog/articles/2015/12/03/getting-started-with-visual-studio-code-angularjs-and-typescript/</guid>
	  <description><![CDATA[
	     <p>This time I want to show you how getting started with Visual Studio Code, AngularJS and Typescript.</p>

<p>Before we start: A new Typescript version was announced!! You can see whats new <a href="https://github.com/Microsoft/TypeScript/wiki/roadmap">here</a> and further information <a href="http://www.typescriptlang.org/">here</a>.</p>

<p>I always wanted to get to know Typescript and see the advantages of it compared to the “normal” javascript and so I just took my plain old sample application and tried to build it up with Typescript. I have to say: Typescript in combination with Visual Studio Code is absolutely awesome! I loved it.</p>

<h2 id="getting-started">Getting Started:</h2>

<p>Fist of all you need to install npm/nodejs from the installers <a href="https://nodejs.org/en/">here </a>if you are running a windows machine.</p>

<p>if you have npm installed you can install typescript with the command</p>

<p><code class="highlighter-rouge">npm install -g typescript</code></p>

<p>which will install typescript globally. With this installed you can run the typescript compiler “tsc” and compile typescript.</p>

<p>With</p>

<p><code class="highlighter-rouge">npm install tsd -g</code></p>

<p>You can install the <a href="http://definitelytyped.org/tsd/">TypeScript Definition manager for DefinitelyTyped</a> to get the strong typed advantages from Typescript going.</p>

<p>In Visual Studio Code the first file you need when working with Typescript is the “tsconfig.json” which sets the basic behaviour of your typescript compiler.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
    <span class="s2">"compilerOptions"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"target"</span><span class="err">:</span> <span class="s2">"ES5"</span>
    <span class="p">},</span>
    <span class="s2">"exclude"</span><span class="err">:</span> <span class="p">[</span>
        <span class="s2">"node_modules"</span><span class="p">,</span>
        <span class="s2">"wwwroot"</span>
    <span class="p">]</span>
<span class="p">}</span></code></pre></figure>

<p>The “compilerOptions” tell typescript in which language the typescript code should be compiled. The exclude-block, you guessed it, excluded several folders from being checked by the compiler.</p>

<p>Now you can write and compile Typescript files. :-)</p>

<p>In Visual Studio Code if you now press the CRTL-SHIFT-B-Buttons you should trigger Visual Studio Code to compile your written files. If you create a taskrunner Visual Studio Code generates a .vscode-folder with a “tasks.json” in it.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/12/tyepscript01.jpg" alt="Getting started with Visual Studio Code, AngularJS and Typescript" /></p>

<p>See that the “args” is not containing any files explicitly. That triggers the taskrunner to compile the whole code. Not only several files.</p>

<p>If you now type Typescript-code in a *.ts file, save it and compile you will see a progress running in vs code for a short time. After this your file should be compiled into Typescript and appear in Visual Studio Code since Visual Studio Code is file based.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/12/tyepscript02.jpg" alt="Getting started with Visual Studio Code, AngularJS and Typescript" />
<img src="/assets/articles/wp-content/uploads/2015/12/tyepscript03.jpg" alt="Getting started with Visual Studio Code, AngularJS and Typescript" /></p>

<blockquote>
  <p>If you do NOT see any compiled js/ts-files checking your typescript version is always a good hint.</p>
</blockquote>

<h3 id="adding-angularjs-files">Adding AngularJs-Files</h3>

<p>If you want to get also started with AngularJs (and have installed the tsd like mentioned above) you can go to the root of your application, open the console and simply type</p>

<p><code class="highlighter-rouge">tsd install angular --resolve --save</code></p>

<p>which causes the Typescript Definition Manager (tsd) to install the *.d.ts files for AngularJs. The resolve parameter resolves all dependencies angular has (like jQuery in this case).</p>

<p><img src="/assets/articles/wp-content/uploads/2015/12/tyepscript04.jpg" alt="Getting started with Visual Studio Code, Angular and Typescript" /></p>

<p>As you can see the typings-folder was generated with a “tsd.d.ts” file which holds the references and a tsd.json on the root of the application which holds all installed plugins for our project. This gets updated every time you install a new typescript.d-reference.</p>

<p>Thats it. You can now go ahead and implement Typescript with Visual Studio Code.</p>

<p>Check out the github repository of this code <a href="https://github.com/FabianGosebrink/ASPNET-WebAPI-AngularJs-Typescript">here</a>.</p>

<p>Hope this helps.</p>

<p>Regards</p>

<p>Fabian</p>

	  ]]></description>
	</item>


</channel>
</rss>
