<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>http://fabian-gosebrink.com</title>
   
   <link>http://offering.solutions</link>
   <description>Articles about Angular & ASP.NET</description>
   <language>en-us</language>
   <managingEditor> Fabian Gosebrink</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>How to create an ASP.NET Core WebAPI</title>
	  <link>//blog/articles/2016/07/29/how-to-create-an-asp-net-core-webapi/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2016-07-29T18:31:00+02:00</pubDate>
	  <guid>//blog/articles/2016/07/29/how-to-create-an-asp-net-core-webapi/</guid>
	  <description><![CDATA[
	     <p>In this blogpost I want to show you how to create an ASP.NET Core WebAPI. We will use a custom mapper (you could use AutoMapper for this instead, a repository which is a singleton in this blog here and we will use the normal CRUD operations to Create, Read, Update and Delete in the “database” here.</p>

<p>Code here <a href="https://github.com/FabianGosebrink/ASPNETCore-WebAPI-Sample">https://github.com/FabianGosebrink/ASPNETCore-WebAPI-Sample</a></p>

<h3 id="visual-studio">Visual Studio</h3>

<p><img src="/assets/articles/wp-content/uploads/2016/07/AspNetCoreWebApi0.jpg" alt="AspNetCoreWebApi0" />
<img src="/assets/articles/wp-content/uploads/2016/07/AspNetCoreWebApi02.jpg" alt="AspNetCoreWebApi02" /></p>

<p>We will start with the ASP.NET Startup-File</p>

<h3 id="aspnet-core-startup">ASP.NET Core Startup</h3>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">Startup</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nf">Startup</span><span class="p">(</span><span class="n">IHostingEnvironment</span> <span class="n">env</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ConfigurationBuilder</span><span class="p">()</span>
           <span class="p">.</span><span class="nf">SetBasePath</span><span class="p">(</span><span class="n">env</span><span class="p">.</span><span class="n">ContentRootPath</span><span class="p">)</span>
           <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="s">"appsettings.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">true</span><span class="p">,</span> <span class="n">reloadOnChange</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
           <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="err">$</span><span class="s">"appsettings.{env.EnvironmentName}.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">true</span><span class="p">);</span>

        <span class="n">builder</span><span class="p">.</span><span class="nf">AddEnvironmentVariables</span><span class="p">();</span>
        <span class="n">Configuration</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="n">IConfigurationRoot</span> <span class="n">Configuration</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="c1">// This method gets called by the runtime. Use this method to add services to the container.
</span>    <span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// Add framework services.
</span>        <span class="n">services</span><span class="p">.</span><span class="nf">AddMvc</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="c1">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
</span>    <span class="k">public</span> <span class="k">void</span> <span class="nf">Configure</span><span class="p">(</span><span class="n">IApplicationBuilder</span> <span class="n">app</span><span class="p">,</span> <span class="n">IHostingEnvironment</span> <span class="n">env</span><span class="p">,</span> <span class="n">ILoggerFactory</span> <span class="n">loggerFactory</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">loggerFactory</span><span class="p">.</span><span class="nf">AddConsole</span><span class="p">(</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetSection</span><span class="p">(</span><span class="s">"Logging"</span><span class="p">));</span>
        <span class="n">loggerFactory</span><span class="p">.</span><span class="nf">AddDebug</span><span class="p">();</span>

        <span class="n">app</span><span class="p">.</span><span class="nf">UseDefaultFiles</span><span class="p">();</span>
        <span class="n">app</span><span class="p">.</span><span class="nf">UseStaticFiles</span><span class="p">();</span>

        <span class="n">app</span><span class="p">.</span><span class="nf">UseMvc</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>No magic here so far. We are creating a configuration in the first step (constructor) of the FIle and then add and use MVC with its defaultfiles (e.g. index.html) and add the ability to server static files in general (app.useStaticFiles).</p>

<h3 id="the-models">The models</h3>

<p>First lets build some entities we want to send to the client and back. We will create a DTO and an Entity and map everything before it gets send to the client.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">HouseDto</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="p">[</span><span class="n">Required</span><span class="p">,</span> <span class="nf">MinLength</span><span class="p">(</span><span class="m">3</span><span class="p">)]</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Street</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="p">[</span><span class="n">Required</span><span class="p">,</span> <span class="nf">MinLength</span><span class="p">(</span><span class="m">3</span><span class="p">)]</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">City</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="p">[</span><span class="n">Required</span><span class="p">]</span>
        <span class="p">[</span><span class="nf">DataType</span><span class="p">(</span><span class="n">DataType</span><span class="p">.</span><span class="n">PostalCode</span><span class="p">)]</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">ZipCode</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">HouseEntity</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Street</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">City</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">ZipCode</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>So the DTO is an exact duplicate from the entity in this case.</p>

<p>Lets create the Mapper next (which is really obvious):</p>

<h3 id="the-mapper">The mapper</h3>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">interface</span> <span class="n">IHouseMapper</span>
    <span class="p">{</span>
        <span class="n">HouseDto</span> <span class="nf">MapToDto</span><span class="p">(</span><span class="n">HouseEntity</span> <span class="n">houseEntity</span><span class="p">);</span>
        <span class="n">HouseEntity</span> <span class="nf">MapToEntity</span><span class="p">(</span><span class="n">HouseDto</span> <span class="n">houseDto</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">HouseMapper</span> <span class="p">:</span> <span class="n">IHouseMapper</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">HouseDto</span> <span class="nf">MapToDto</span><span class="p">(</span><span class="n">HouseEntity</span> <span class="n">houseEntity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">HouseDto</span><span class="p">()</span>
            <span class="p">{</span>
                <span class="n">Id</span> <span class="p">=</span> <span class="n">houseEntity</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span>
                <span class="n">ZipCode</span> <span class="p">=</span> <span class="n">houseEntity</span><span class="p">.</span><span class="n">ZipCode</span><span class="p">,</span>
                <span class="n">City</span> <span class="p">=</span> <span class="n">houseEntity</span><span class="p">.</span><span class="n">City</span><span class="p">,</span>
                <span class="n">Street</span> <span class="p">=</span> <span class="n">houseEntity</span><span class="p">.</span><span class="n">Street</span>
            <span class="p">};</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">HouseEntity</span> <span class="nf">MapToEntity</span><span class="p">(</span><span class="n">HouseDto</span> <span class="n">houseDto</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">HouseEntity</span><span class="p">()</span>
            <span class="p">{</span>
                <span class="n">Id</span> <span class="p">=</span> <span class="n">houseDto</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span>
                <span class="n">ZipCode</span> <span class="p">=</span> <span class="n">houseDto</span><span class="p">.</span><span class="n">ZipCode</span><span class="p">,</span>
                <span class="n">City</span> <span class="p">=</span> <span class="n">houseDto</span><span class="p">.</span><span class="n">City</span><span class="p">,</span>
                <span class="n">Street</span> <span class="p">=</span> <span class="n">houseDto</span><span class="p">.</span><span class="n">Street</span>
            <span class="p">};</span>
        <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>So here we are just mapping from one to another. Simple case. This can get more complex but it should do it for this time.</p>

<p>After we created the mapper we want to have this mapper instanciated <strong>every time a request comes in</strong>. For this we use the build in DI-container in ASP.NET Core.</p>

<p>So go to Startup.cs and add the line</p>

<p><code class="highlighter-rouge">services.AddTransient&lt;IHouseMapper, HouseMapper&gt;();</code></p>

<p>in the “ConfigureServices”-Method. It should look like this then:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
            <span class="n">services</span><span class="p">.</span><span class="n">AddTransient</span><span class="p">&lt;</span><span class="n">IHouseMapper</span><span class="p">,</span> <span class="n">HouseMapper</span><span class="p">&gt;();</span>
            <span class="c1">// Add framework services.
</span>            <span class="n">services</span><span class="p">.</span><span class="nf">AddMvc</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<h3 id="the-repository">The Repository</h3>

<p>The repository is responsible for providing and saving the data. Normally you would use da database here.</p>

<p>Like:</p>

<p><a href="https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-6">https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-6</a></p>

<p><a href="https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-Core">https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-Core</a></p>

<p>But for this time we will use like a static list where objects are added and removed.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">interface</span> <span class="n">IHouseRepository</span>
    <span class="p">{</span>
        <span class="n">List</span><span class="p">&lt;</span><span class="n">HouseEntity</span><span class="p">&gt;</span> <span class="nf">GetAll</span><span class="p">();</span>
        <span class="n">HouseEntity</span> <span class="nf">GetSingle</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
        <span class="n">HouseEntity</span> <span class="nf">Add</span><span class="p">(</span><span class="n">HouseEntity</span> <span class="n">toAdd</span><span class="p">);</span>
        <span class="n">HouseEntity</span> <span class="nf">Update</span><span class="p">(</span><span class="n">HouseEntity</span> <span class="n">toUpdate</span><span class="p">);</span>
        <span class="k">void</span> <span class="nf">Delete</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">HouseRepository</span> <span class="p">:</span> <span class="n">IHouseRepository</span>
    <span class="p">{</span>
        <span class="k">readonly</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">HouseEntity</span><span class="p">&gt;</span> <span class="n">_houses</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">HouseEntity</span><span class="p">&gt;();</span>

        <span class="k">public</span> <span class="nf">HouseRepository</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">_houses</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="k">new</span> <span class="nf">HouseEntity</span><span class="p">()</span> <span class="p">{</span> <span class="n">City</span> <span class="p">=</span> <span class="s">"Town1"</span><span class="p">,</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">Street</span> <span class="p">=</span> <span class="s">"Street1"</span><span class="p">,</span> <span class="n">ZipCode</span> <span class="p">=</span> <span class="m">1234</span> <span class="p">});</span>
            <span class="n">_houses</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="k">new</span> <span class="nf">HouseEntity</span><span class="p">()</span> <span class="p">{</span> <span class="n">City</span> <span class="p">=</span> <span class="s">"Town2"</span><span class="p">,</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">2</span><span class="p">,</span> <span class="n">Street</span> <span class="p">=</span> <span class="s">"Street2"</span><span class="p">,</span> <span class="n">ZipCode</span> <span class="p">=</span> <span class="m">1234</span> <span class="p">});</span>
            <span class="n">_houses</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="k">new</span> <span class="nf">HouseEntity</span><span class="p">()</span> <span class="p">{</span> <span class="n">City</span> <span class="p">=</span> <span class="s">"Town3"</span><span class="p">,</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">3</span><span class="p">,</span> <span class="n">Street</span> <span class="p">=</span> <span class="s">"Street3"</span><span class="p">,</span> <span class="n">ZipCode</span> <span class="p">=</span> <span class="m">1234</span> <span class="p">});</span>
            <span class="n">_houses</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="m">4</span><span class="p">,</span> <span class="k">new</span> <span class="nf">HouseEntity</span><span class="p">()</span> <span class="p">{</span> <span class="n">City</span> <span class="p">=</span> <span class="s">"Town4"</span><span class="p">,</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">4</span><span class="p">,</span> <span class="n">Street</span> <span class="p">=</span> <span class="s">"Street4"</span><span class="p">,</span> <span class="n">ZipCode</span> <span class="p">=</span> <span class="m">1234</span> <span class="p">});</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">HouseEntity</span><span class="p">&gt;</span> <span class="nf">GetAll</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_houses</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Value</span><span class="p">).</span><span class="nf">ToList</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">HouseEntity</span> <span class="nf">GetSingle</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_houses</span><span class="p">.</span><span class="nf">FirstOrDefault</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Key</span> <span class="p">==</span> <span class="n">id</span><span class="p">).</span><span class="n">Value</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">HouseEntity</span> <span class="nf">Add</span><span class="p">(</span><span class="n">HouseEntity</span> <span class="n">toAdd</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">int</span> <span class="n">newId</span> <span class="p">=</span> <span class="p">!</span><span class="nf">GetAll</span><span class="p">().</span><span class="nf">Any</span><span class="p">()</span> <span class="p">?</span> <span class="m">1</span> <span class="p">:</span> <span class="nf">GetAll</span><span class="p">().</span><span class="nf">Max</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span> <span class="p">+</span> <span class="m">1</span><span class="p">;</span>
            <span class="n">toAdd</span><span class="p">.</span><span class="n">Id</span> <span class="p">=</span> <span class="n">newId</span><span class="p">;</span>
            <span class="n">_houses</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">newId</span><span class="p">,</span> <span class="n">toAdd</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">toAdd</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">HouseEntity</span> <span class="nf">Update</span><span class="p">(</span><span class="n">HouseEntity</span> <span class="n">toUpdate</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">HouseEntity</span> <span class="n">single</span> <span class="p">=</span> <span class="nf">GetSingle</span><span class="p">(</span><span class="n">toUpdate</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">single</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">_houses</span><span class="p">[</span><span class="n">single</span><span class="p">.</span><span class="n">Id</span><span class="p">]</span> <span class="p">=</span> <span class="n">toUpdate</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">toUpdate</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Delete</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_houses</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>A normal interface using Entity Framwork could look like this btw:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">interface</span> <span class="n">IExampleRepository</span>
    <span class="p">{</span>
        <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">MyModel</span><span class="p">&gt;</span> <span class="nf">GetAll</span><span class="p">();</span>
        <span class="n">MyModel</span> <span class="nf">GetSingle</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
        <span class="n">MyModel</span> <span class="nf">Add</span><span class="p">(</span><span class="n">MyModel</span> <span class="n">toAdd</span><span class="p">);</span>
        <span class="n">MyModel</span> <span class="nf">Update</span><span class="p">(</span><span class="n">MyModel</span> <span class="n">toUpdate</span><span class="p">);</span>
        <span class="k">void</span> <span class="nf">Delete</span><span class="p">(</span><span class="n">MyModel</span> <span class="n">toDelete</span><span class="p">);</span>
        <span class="kt">int</span> <span class="nf">Save</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<p>taken from <a href="https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-Core/blob/master/src/AspnetCoreEFCoreExample/Repositories/IExampleRepository.cs">https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-Core/blob/master/src/AspnetCoreEFCoreExample/Repositories/IExampleRepository.cs</a></p>

<p>See the “Save()”-Method here. But for this time it should be good with the list. We are not focussing on the Database here.</p>

<p>So we do have the repository to save the data. Let’s make it available through DI in the Startup. This time we do NOT want to have a new repo every request, so we will add a singleton this time.</p>

<p>In a normal case with a real DB you would not do that</p>

<p>Example for EF 6 is here</p>

<p><a href="https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-6/blob/master/src/AspnetCoreEF6Example/Startup.cs#L32">https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-6/blob/master/src/AspnetCoreEF6Example/Startup.cs#L32</a></p>

<p><a href="https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-Core/blob/master/src/AspnetCoreEFCoreExample/Startup.cs#L32">https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-Core/blob/master/src/AspnetCoreEFCoreExample/Startup.cs#L32</a></p>

<p>But this time we will use a singleton. Shame on me so far.</p>

<p><code class="highlighter-rouge">services.AddSingleton&lt;IHouseRepository, HouseRepository&gt;();</code></p>

<p>So the whole Startup.cs is now like:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">services</span><span class="p">.</span><span class="n">AddSingleton</span><span class="p">&lt;</span><span class="n">IHouseRepository</span><span class="p">,</span> <span class="n">HouseRepository</span><span class="p">&gt;();</span>

    <span class="n">services</span><span class="p">.</span><span class="n">AddTransient</span><span class="p">&lt;</span><span class="n">IHouseMapper</span><span class="p">,</span> <span class="n">HouseMapper</span><span class="p">&gt;();</span>
    <span class="c1">// Add framework services.
</span>    <span class="n">services</span><span class="p">.</span><span class="nf">AddMvc</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<p>With this we can start using the whole construct in a controller like this:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="na">[Route("api/[controller]</span><span class="s">")]
</span><span class="k">public</span> <span class="k">class</span> <span class="nc">HouseController</span> <span class="p">:</span> <span class="n">Controller</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IHouseMapper</span> <span class="n">_houseMapper</span><span class="p">;</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IHouseRepository</span> <span class="n">_houseRepository</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">HouseController</span><span class="p">(</span><span class="n">IHouseMapper</span> <span class="n">houseMapper</span><span class="p">,</span> <span class="n">IHouseRepository</span> <span class="n">houseRepository</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_houseMapper</span> <span class="p">=</span> <span class="n">houseMapper</span><span class="p">;</span>
        <span class="n">_houseRepository</span> <span class="p">=</span> <span class="n">houseRepository</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
    <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Get</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">_houseRepository</span><span class="p">.</span><span class="nf">GetAll</span><span class="p">().</span><span class="nf">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">_houseMapper</span><span class="p">.</span><span class="nf">MapToDto</span><span class="p">(</span><span class="n">x</span><span class="p">)));</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//logg exception or do anything with it
</span>            <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span> <span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">InternalServerError</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id:int}"</span><span class="p">,</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">"GetSingleHouse"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">GetSingle</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="n">HouseEntity</span> <span class="n">houseEntity</span> <span class="p">=</span> <span class="n">_houseRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">houseEntity</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">_houseMapper</span><span class="p">.</span><span class="nf">MapToDto</span><span class="p">(</span><span class="n">houseEntity</span><span class="p">));</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//logg exception or do anything with it
</span>            <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">InternalServerError</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="nf">HttpPatch</span><span class="p">(</span><span class="s">"{id:int}"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Patch</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="p">[</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">JsonPatchDocument</span><span class="p">&lt;</span><span class="n">HouseDto</span><span class="p">&gt;</span> <span class="n">housePatchDocument</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">housePatchDocument</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">ModelState</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">HouseEntity</span> <span class="n">houseEntity</span> <span class="p">=</span> <span class="n">_houseRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">houseEntity</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">HouseDto</span> <span class="n">existingHouse</span> <span class="p">=</span> <span class="n">_houseMapper</span><span class="p">.</span><span class="nf">MapToDto</span><span class="p">(</span><span class="n">houseEntity</span><span class="p">);</span>

            <span class="n">housePatchDocument</span><span class="p">.</span><span class="nf">ApplyTo</span><span class="p">(</span><span class="n">existingHouse</span><span class="p">,</span> <span class="n">ModelState</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">ModelState</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">_houseRepository</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="n">_houseMapper</span><span class="p">.</span><span class="nf">MapToEntity</span><span class="p">(</span><span class="n">existingHouse</span><span class="p">));</span>

            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">existingHouse</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//logg exception or do anything with it
</span>            <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">InternalServerError</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
    <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Create</span><span class="p">([</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">HouseDto</span> <span class="n">houseDto</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">houseDto</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">ModelState</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">HouseEntity</span> <span class="n">houseEntity</span> <span class="p">=</span> <span class="n">_houseMapper</span><span class="p">.</span><span class="nf">MapToEntity</span><span class="p">(</span><span class="n">houseDto</span><span class="p">);</span>

            <span class="n">_houseRepository</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">houseEntity</span><span class="p">);</span>

            <span class="k">return</span> <span class="nf">CreatedAtRoute</span><span class="p">(</span><span class="s">"GetSingleHouse"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">houseEntity</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">_houseMapper</span><span class="p">.</span><span class="nf">MapToDto</span><span class="p">(</span><span class="n">houseEntity</span><span class="p">));</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//logg exception or do anything with it
</span>            <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">InternalServerError</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"{id:int}"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Update</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="p">[</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">HouseDto</span> <span class="n">houseDto</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">houseDto</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">ModelState</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">HouseEntity</span> <span class="n">houseEntityToUpdate</span> <span class="p">=</span> <span class="n">_houseRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">houseEntityToUpdate</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">houseEntityToUpdate</span><span class="p">.</span><span class="n">ZipCode</span> <span class="p">=</span> <span class="n">houseDto</span><span class="p">.</span><span class="n">ZipCode</span><span class="p">;</span>
            <span class="n">houseEntityToUpdate</span><span class="p">.</span><span class="n">Street</span> <span class="p">=</span> <span class="n">houseDto</span><span class="p">.</span><span class="n">Street</span><span class="p">;</span>
            <span class="n">houseEntityToUpdate</span><span class="p">.</span><span class="n">City</span> <span class="p">=</span> <span class="n">houseDto</span><span class="p">.</span><span class="n">City</span><span class="p">;</span>

            <span class="n">_houseRepository</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="n">houseEntityToUpdate</span><span class="p">);</span>

            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">_houseMapper</span><span class="p">.</span><span class="nf">MapToDto</span><span class="p">(</span><span class="n">houseEntityToUpdate</span><span class="p">));</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//logg exception or do anything with it
</span>            <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">InternalServerError</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"{id:int}"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Delete</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="n">HouseEntity</span> <span class="n">houseEntityToDelete</span> <span class="p">=</span> <span class="n">_houseRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">houseEntityToDelete</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_houseRepository</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//logg exception or do anything with it
</span>            <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">InternalServerError</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Now we can go ahead and test this with a tool like postman or whatever:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/07/AspNetCoreWebApi1.jpg" alt="Create an ASP.NET Core 1.1 WebAPI" /></p>

<p><img src="/assets/articles/wp-content/uploads/2016/07/AspNetCoreWebApi3.jpg" alt="AspNetCoreWebApi3" /></p>

	  ]]></description>
	</item>

	<item>
	  <title>ASP.NET Core 1.0 with Entity Framework Core</title>
	  <link>//blog/articles/2016/07/03/asp-net-core-with-entity-framework-core/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2016-07-03T22:32:00+02:00</pubDate>
	  <guid>//blog/articles/2016/07/03/asp-net-core-with-entity-framework-core/</guid>
	  <description><![CDATA[
	     <p>In this repository I want to show the first steps with Entity Framework Core and ASP.NET Core 1.0.</p>

<p>The Repository contains a sample WebAPI with CRUD-Operations that you can Get/Read/Update and Delete “MyModel” objects through HTTP-calls.</p>

<p>Here is the code: <a href="https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-Core">https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-Core</a></p>

<h2 id="before-starting">Before starting…</h2>

<p>Please read this readme and think of executing <code class="highlighter-rouge">Add-Migration [MyMigrationName]</code> and <code class="highlighter-rouge">update-database</code> in the Package Manager Console first.</p>

<p>The database should now be visible inside your SQL Server Management Studio.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/07/database.jpg" alt="ASP.NET CORE 1.0 with Entity Framework Core" /></p>

<p><img src="/assets/articles/wp-content/uploads/2016/07/folderstructure.jpg" alt="ASP.NET CORE 1.0 with Entity Framework Core" /></p>

<h2 id="projectjson">Project.json</h2>

<p>The project.json file includes tha Entity Framework SQLServer package as well as the EF Core itself and the EF Core Tools. The tools are mentioned twice: Once in the “dependencies”-section and once in the “tools”-section</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">"dependencies"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"Microsoft.NETCore.App"</span><span class="err">:</span> <span class="p">{</span>
      <span class="s2">"version"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
      <span class="s2">"type"</span><span class="err">:</span> <span class="s2">"platform"</span>
    <span class="p">},</span>
    <span class="s2">"Microsoft.ApplicationInsights.AspNetCore"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.AspNetCore.Mvc"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.AspNetCore.Server.IISIntegration"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.AspNetCore.Server.Kestrel"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.Extensions.Configuration.EnvironmentVariables"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.Extensions.Configuration.FileExtensions"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.Extensions.Configuration.Json"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.Extensions.Logging"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.Extensions.Logging.Console"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.Extensions.Logging.Debug"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.Extensions.Options.ConfigurationExtensions"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.AspNetCore.StaticFiles"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.EntityFrameworkCore"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.EntityFrameworkCore.SqlServer"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.EntityFrameworkCore.Tools"</span><span class="err">:</span> <span class="p">{</span>
      <span class="s2">"version"</span><span class="err">:</span> <span class="s2">"1.0.0-preview2-final"</span><span class="p">,</span>
      <span class="s2">"type"</span><span class="err">:</span> <span class="s2">"build"</span>
    <span class="p">},</span>
    <span class="s2">"AutoMapper"</span><span class="err">:</span> <span class="s2">"5.0.0"</span>
  <span class="p">},</span>

  <span class="s2">"tools"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"Microsoft.AspNetCore.Server.IISIntegration.Tools"</span><span class="err">:</span> <span class="s2">"1.0.0-preview2-final"</span><span class="p">,</span>
    <span class="s2">"Microsoft.EntityFrameworkCore.Tools"</span><span class="err">:</span> <span class="s2">"1.0.0-preview2-final"</span>
  <span class="p">},</span>

  <span class="s2">"frameworks"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"netcoreapp1.0"</span><span class="err">:</span> <span class="p">{</span>
      <span class="s2">"imports"</span><span class="err">:</span> <span class="p">[</span>
        <span class="s2">"dotnet5.6"</span><span class="p">,</span>
        <span class="s2">"portable-net45+win8"</span>
      <span class="p">]</span>
    <span class="p">}</span>
  <span class="p">},</span>

  <span class="s2">"buildOptions"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"emitEntryPoint"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"preserveCompilationContext"</span><span class="err">:</span> <span class="kc">true</span>
  <span class="p">},</span>

  <span class="s2">"runtimeOptions"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"configProperties"</span><span class="err">:</span> <span class="p">{</span>
      <span class="s2">"System.GC.Server"</span><span class="err">:</span> <span class="kc">true</span>
    <span class="p">}</span>
  <span class="p">},</span>

  <span class="s2">"publishOptions"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"include"</span><span class="err">:</span> <span class="p">[</span>
      <span class="s2">"wwwroot"</span><span class="p">,</span>
      <span class="s2">"Views"</span><span class="p">,</span>
      <span class="s2">"Areas/**/Views"</span><span class="p">,</span>
      <span class="s2">"appsettings.json"</span><span class="p">,</span>
      <span class="s2">"web.config"</span>
    <span class="p">]</span>
  <span class="p">},</span>

  <span class="s2">"scripts"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"postpublish"</span><span class="err">:</span> <span class="p">[</span> <span class="s2">"dotnet publish-iis --publish-folder %publish:OutputPath% --framework %publish:FullTargetFramework%"</span> <span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h2 id="appsettings">Appsettings</h2>

<p>The appsettings contain beside the well known logging section the connectionstring to target the database:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">"Logging"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"IncludeScopes"</span><span class="err">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="s2">"LogLevel"</span><span class="err">:</span> <span class="p">{</span>
      <span class="s2">"Default"</span><span class="err">:</span> <span class="s2">"Debug"</span><span class="p">,</span>
      <span class="s2">"System"</span><span class="err">:</span> <span class="s2">"Information"</span><span class="p">,</span>
      <span class="s2">"Microsoft"</span><span class="err">:</span> <span class="s2">"Information"</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="s2">"ConnectionStrings"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"DefaultConnection"</span><span class="err">:</span> <span class="s2">"Server=localhost\\SQLEXPRESS;Database=AspnetCoreEF7Example;Trusted_Connection=True;MultipleActiveResultSets=true;"</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>This connectionstring is consumed in …</p>

<h2 id="startup">Startup</h2>

<p>…the startup-file. With</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="kt">var</span> <span class="n">configurationSection</span> <span class="p">=</span> <span class="n">Configuration</span><span class="p">.</span><span class="nf">GetSection</span><span class="p">(</span><span class="s">"ConnectionStrings:DefaultConnection"</span><span class="p">);</span>
<span class="n">services</span><span class="p">.</span><span class="nf">AddDbContext</span><span class="p">(</span><span class="n">options</span> <span class="p">=&gt;</span> <span class="n">options</span><span class="p">.</span><span class="nf">UseSqlServer</span><span class="p">(</span><span class="n">configurationSection</span><span class="p">.</span><span class="n">Value</span><span class="p">));</span></code></pre></figure>

<p>we can read the connectionstring and pass it to the “UseSQLServer”-Method.</p>

<h2 id="the-database-context">The Database Context</h2>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">DataBaseContext</span> <span class="p">:</span> <span class="n">DbContext</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">MyModel</span><span class="p">&gt;</span> <span class="n">MyModels</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="nf">DataBaseContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">DataBaseContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span>
        <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
    <span class="p">{</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>In the DbContext you pass the DbSet of your Entites as you are used to it when working with the Entity Framework also in previous versions. But see the new constructor EF Core introduces.</p>

<h2 id="run-it">Run it…</h2>

<p>If you now run the solution you can perform CRUD operations for example via postman, angular etc…</p>

<p><img src="/assets/articles/wp-content/uploads/2016/07/postmandatabase.jpg" alt="ASP.NET CORE 1.0 with Entity Framework Core" /></p>

<h2 id="links">Links</h2>

<p><a href="https://ef.readthedocs.io/en/latest/platforms/aspnetcore/new-db.html">ASP.NET Core Application to New Database</a></p>

	  ]]></description>
	</item>

	<item>
	  <title>ASP.NET Core and Angular with Webpack and Visual Studio</title>
	  <link>//blog/articles/2016/06/12/asp-net-core-angular-2-webpack-visual-studio/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2016-06-12T22:10:00+02:00</pubDate>
	  <guid>//blog/articles/2016/06/12/asp-net-core-angular-2-webpack-visual-studio/</guid>
	  <description><![CDATA[
	     <p>This article shows how to use ASP.NET Core and Angular with webpack and Visual Studio. Both the client and the server side of the application is implemented inside one ASP.NET Core project which makes it easier to deploy.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/06/vs_webpack_angular2.png" alt="vs_webpack_angular2" /></p>

<p><strong>Code:</strong> <a href="https://github.com/damienbod/Angular2WebpackVisualStudio">https://github.com/damienbod/Angular2WebpackVisualStudio</a></p>

<p><strong>Authors</strong> <em>Fabian Gosebrink, Damien Bowden</em>.
This post is hosted on both <a href="http://damienbod.com">http://damienbod.com</a> and <a href="http://offering.solutions/">http://offering.solutions/</a>.</p>

<p><strong>Setting up the application</strong></p>

<p>The ASP.NET Core application contains both the server side API services and also hosts the Angular 2 client application. The source code for the Angular 2 application is implemented in the angular2App folder. Webpack is then used to deploy the application, using the development build or a production build, which deploys the application to the wwwroot folder. This makes it easy to deploy the application using the standard tools from Visual Studio with the standard configurations.</p>

<p><strong>npm configuration</strong></p>

<p>The npm package.json configuration loads all the required packages for Angular 2 and Webpack. The Webpack packages are all added to the devDependencies. A “npm build” script and also a “npm buildProduction” are also configured, so that the client application can be built using Webpack from the cmd line using “npm build” or “npm buildProduction”. These two scripts just call the same cmd as the Webpack task runner.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">"name"</span><span class="err">:</span> <span class="s2">"angular2-webpack-visualstudio"</span><span class="p">,</span>
  <span class="s2">"version"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
  <span class="s2">"description"</span><span class="err">:</span> <span class="s2">""</span><span class="p">,</span>
  <span class="s2">"main"</span><span class="err">:</span> <span class="s2">"wwwroot/index.html"</span><span class="p">,</span>
  <span class="s2">"author"</span><span class="err">:</span> <span class="s2">""</span><span class="p">,</span>
  <span class="s2">"license"</span><span class="err">:</span> <span class="s2">"ISC"</span><span class="p">,</span>
  <span class="s2">"scripts"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"ngc"</span><span class="err">:</span> <span class="s2">"ngc -p ./tsconfig-aot.json"</span><span class="p">,</span>
    <span class="s2">"start"</span><span class="err">:</span> <span class="s2">"concurrently \"webpack-dev-server --hot --inline --port 8080\" \"dotnet run\" "</span><span class="p">,</span>
    <span class="s2">"webpack-dev"</span><span class="err">:</span> <span class="s2">"set NODE_ENV=development &amp;&amp; webpack"</span><span class="p">,</span>
    <span class="s2">"webpack-production"</span><span class="err">:</span> <span class="s2">"set NODE_ENV=production &amp;&amp; webpack"</span><span class="p">,</span>
    <span class="s2">"build-dev"</span><span class="err">:</span> <span class="s2">"npm run webpack-dev"</span><span class="p">,</span>
    <span class="s2">"build-production"</span><span class="err">:</span> <span class="s2">"npm run ngc &amp;&amp; npm run webpack-production"</span><span class="p">,</span>
    <span class="s2">"watch-webpack-dev"</span><span class="err">:</span> <span class="s2">"set NODE_ENV=development &amp;&amp; webpack --watch --color"</span><span class="p">,</span>
    <span class="s2">"watch-webpack-production"</span><span class="err">:</span> <span class="s2">"npm run build-production --watch --color"</span><span class="p">,</span>
    <span class="s2">"publish-for-iis"</span><span class="err">:</span> <span class="s2">"npm run build-production &amp;&amp; dotnet publish -c Release"</span>
  <span class="p">},</span>
  <span class="s2">"dependencies"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"@angular/common"</span><span class="err">:</span> <span class="s2">"~2.4.7"</span><span class="p">,</span>
    <span class="s2">"@angular/compiler"</span><span class="err">:</span> <span class="s2">"~2.4.7"</span><span class="p">,</span>
    <span class="s2">"@angular/core"</span><span class="err">:</span> <span class="s2">"~2.4.7"</span><span class="p">,</span>
    <span class="s2">"@angular/forms"</span><span class="err">:</span> <span class="s2">"~2.4.7"</span><span class="p">,</span>
    <span class="s2">"@angular/http"</span><span class="err">:</span> <span class="s2">"~2.4.7"</span><span class="p">,</span>
    <span class="s2">"@angular/platform-browser"</span><span class="err">:</span> <span class="s2">"~2.4.7"</span><span class="p">,</span>
    <span class="s2">"@angular/platform-browser-dynamic"</span><span class="err">:</span> <span class="s2">"~2.4.7"</span><span class="p">,</span>
    <span class="s2">"@angular/router"</span><span class="err">:</span> <span class="s2">"~3.4.7"</span><span class="p">,</span>
    <span class="s2">"@angular/upgrade"</span><span class="err">:</span> <span class="s2">"~2.4.7"</span><span class="p">,</span>
    <span class="s2">"angular-in-memory-web-api"</span><span class="err">:</span> <span class="s2">"0.2.4"</span><span class="p">,</span>
    <span class="s2">"core-js"</span><span class="err">:</span> <span class="s2">"2.4.1"</span><span class="p">,</span>
    <span class="s2">"reflect-metadata"</span><span class="err">:</span> <span class="s2">"0.1.9"</span><span class="p">,</span>
    <span class="s2">"rxjs"</span><span class="err">:</span> <span class="s2">"5.0.3"</span><span class="p">,</span>
    <span class="s2">"zone.js"</span><span class="err">:</span> <span class="s2">"0.7.5"</span><span class="p">,</span>
    <span class="s2">"@angular/compiler-cli"</span><span class="err">:</span> <span class="s2">"~2.4.7"</span><span class="p">,</span>
    <span class="s2">"@angular/platform-server"</span><span class="err">:</span> <span class="s2">"~2.4.7"</span><span class="p">,</span>
    <span class="s2">"bootstrap"</span><span class="err">:</span> <span class="s2">"^3.3.7"</span><span class="p">,</span>
    <span class="s2">"ie-shim"</span><span class="err">:</span> <span class="s2">"~0.1.0"</span>
  <span class="p">},</span>
  <span class="s2">"devDependencies"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"@types/node"</span><span class="err">:</span> <span class="s2">"7.0.5"</span><span class="p">,</span>
    <span class="s2">"angular2-template-loader"</span><span class="err">:</span> <span class="s2">"^0.6.0"</span><span class="p">,</span>
    <span class="s2">"angular-router-loader"</span><span class="err">:</span> <span class="s2">"^0.5.0"</span><span class="p">,</span>
    <span class="s2">"awesome-typescript-loader"</span><span class="err">:</span> <span class="s2">"3.0.4"</span><span class="p">,</span>
    <span class="s2">"clean-webpack-plugin"</span><span class="err">:</span> <span class="s2">"^0.1.15"</span><span class="p">,</span>
    <span class="s2">"concurrently"</span><span class="err">:</span> <span class="s2">"^3.1.0"</span><span class="p">,</span>
    <span class="s2">"copy-webpack-plugin"</span><span class="err">:</span> <span class="s2">"^4.0.1"</span><span class="p">,</span>
    <span class="s2">"css-loader"</span><span class="err">:</span> <span class="s2">"^0.26.1"</span><span class="p">,</span>
    <span class="s2">"file-loader"</span><span class="err">:</span> <span class="s2">"^0.9.0"</span><span class="p">,</span>
    <span class="s2">"html-webpack-plugin"</span><span class="err">:</span> <span class="s2">"^2.26.0"</span><span class="p">,</span>
    <span class="s2">"jquery"</span><span class="err">:</span> <span class="s2">"^2.2.0"</span><span class="p">,</span>
    <span class="s2">"json-loader"</span><span class="err">:</span> <span class="s2">"^0.5.4"</span><span class="p">,</span>
    <span class="s2">"node-sass"</span><span class="err">:</span> <span class="s2">"^4.3.0"</span><span class="p">,</span>
    <span class="s2">"raw-loader"</span><span class="err">:</span> <span class="s2">"^0.5.1"</span><span class="p">,</span>
    <span class="s2">"rimraf"</span><span class="err">:</span> <span class="s2">"^2.5.4"</span><span class="p">,</span>
    <span class="s2">"sass-loader"</span><span class="err">:</span> <span class="s2">"^4.1.1"</span><span class="p">,</span>
    <span class="s2">"source-map-loader"</span><span class="err">:</span> <span class="s2">"^0.1.6"</span><span class="p">,</span>
    <span class="s2">"style-loader"</span><span class="err">:</span> <span class="s2">"^0.13.1"</span><span class="p">,</span>
    <span class="s2">"ts-helpers"</span><span class="err">:</span> <span class="s2">"^1.1.2"</span><span class="p">,</span>
    <span class="s2">"tslint"</span><span class="err">:</span> <span class="s2">"^4.3.1"</span><span class="p">,</span>
    <span class="s2">"tslint-loader"</span><span class="err">:</span> <span class="s2">"^3.3.0"</span><span class="p">,</span>
    <span class="s2">"typescript"</span><span class="err">:</span> <span class="s2">"2.0.3"</span><span class="p">,</span>
    <span class="s2">"url-loader"</span><span class="err">:</span> <span class="s2">"^0.5.7"</span><span class="p">,</span>
    <span class="s2">"webpack"</span><span class="err">:</span> <span class="s2">"^2.2.1"</span><span class="p">,</span>
    <span class="s2">"webpack-dev-server"</span><span class="err">:</span> <span class="s2">"2.2.1"</span>
  <span class="p">},</span>
  <span class="s2">"-vs-binding"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"ProjectOpened"</span><span class="err">:</span> <span class="p">[</span>
      <span class="s2">"watch-webpack-dev"</span>
    <span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><strong>tsconfig configuration</strong></p>

<p>The types are configured in this file, so typings are no longer required.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">"compilerOptions"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"target"</span><span class="err">:</span> <span class="s2">"es5"</span><span class="p">,</span>
    <span class="s2">"module"</span><span class="err">:</span> <span class="s2">"es2015"</span><span class="p">,</span>
    <span class="s2">"moduleResolution"</span><span class="err">:</span> <span class="s2">"node"</span><span class="p">,</span>
    <span class="s2">"sourceMap"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"emitDecoratorMetadata"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"experimentalDecorators"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"removeComments"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"noImplicitAny"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"skipLibCheck"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"lib"</span><span class="err">:</span> <span class="p">[</span>
      <span class="s2">"es2015"</span><span class="p">,</span>
      <span class="s2">"dom"</span>
    <span class="p">],</span>
    <span class="s2">"types"</span><span class="err">:</span> <span class="p">[</span>
      <span class="s2">"node"</span>
    <span class="p">]</span>
  <span class="p">},</span>
  <span class="s2">"files"</span><span class="err">:</span> <span class="p">[</span>
    <span class="s2">"angularApp/app/app.module.ts"</span><span class="p">,</span>
    <span class="s2">"angularApp/app/about/about.module.ts"</span><span class="p">,</span>
    <span class="s2">"angularApp/main.ts"</span>
  <span class="p">],</span>
  <span class="s2">"awesomeTypescriptLoaderOptions"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"useWebpackText"</span><span class="err">:</span> <span class="kc">true</span>
  <span class="p">},</span>
  <span class="s2">"compileOnSave"</span><span class="err">:</span> <span class="kc">false</span><span class="p">,</span>
  <span class="s2">"buildOnSave"</span><span class="err">:</span> <span class="kc">false</span>
<span class="p">}</span></code></pre></figure>

<h2 id="webpack-build">Webpack build</h2>

<p>The Webpack development build <em>&gt;webpack -d</em> just uses the source files and creates outputs for development. The production build copies everything required for the client application to the wwwroot folder, and uglifies the js files. The <em>webpack -d –watch</em> can be used to automatically build the dist files if a source file is changed.</p>

<p>The Webpack config file was created using the excellent github repository <a href="https://github.com/preboot/angular2-webpack">https://github.com/preboot/angular2-webpack</a>. Thanks for this. Small changes were made to this, such as the process.env.NODE_ENV and Webpack uses different source and output folders to match the ASP.NET Core project. If you decide to use two different projects, one for server, and one for client,  preboot or angular-cli, or both together would be a good choice for the client application.</p>

<p><strong>webpack.config.js</strong></p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">/// &lt;binding ProjectOpened='Run - Development' /&gt;</span>

<span class="kd">var</span> <span class="nx">environment</span> <span class="o">=</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">||</span> <span class="s2">"development"</span><span class="p">).</span><span class="nx">trim</span><span class="p">();</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">environment</span> <span class="o">===</span> <span class="s2">"development"</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./webpack.dev.js'</span><span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./webpack.prod.js'</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p><strong>webpack.dev.js</strong></p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'path'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'webpack'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">HtmlWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'html-webpack-plugin'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">CopyWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'copy-webpack-plugin'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">CleanWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'clean-webpack-plugin'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">helpers</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./webpack.helpers'</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'@@@@@@@@@ USING DEVELOPMENT @@@@@@@@@@@@@@@'</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>

    <span class="na">devtool</span><span class="p">:</span> <span class="s1">'source-map'</span><span class="p">,</span>
    <span class="na">performance</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">hints</span><span class="p">:</span> <span class="kc">false</span>
    <span class="p">},</span>
    <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
        <span class="s1">'polyfills'</span><span class="p">:</span> <span class="s1">'./angularApp/polyfills.ts'</span><span class="p">,</span>
        <span class="s1">'vendor'</span><span class="p">:</span> <span class="s1">'./angularApp/vendor.ts'</span><span class="p">,</span>
        <span class="s1">'app'</span><span class="p">:</span> <span class="s1">'./angularApp/main.ts'</span>
    <span class="p">},</span>

    <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">path</span><span class="p">:</span> <span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">'/wwwroot/'</span><span class="p">,</span>
        <span class="na">filename</span><span class="p">:</span> <span class="s1">'dist/[name].bundle.js'</span><span class="p">,</span>
        <span class="na">chunkFilename</span><span class="p">:</span> <span class="s1">'dist/[id].chunk.js'</span><span class="p">,</span>
        <span class="na">publicPath</span><span class="p">:</span> <span class="s1">'/'</span>
    <span class="p">},</span>

    <span class="na">resolve</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">extensions</span><span class="p">:</span> <span class="p">[</span><span class="s1">'.ts'</span><span class="p">,</span> <span class="s1">'.js'</span><span class="p">,</span> <span class="s1">'.json'</span><span class="p">,</span> <span class="s1">'.css'</span><span class="p">,</span> <span class="s1">'.scss'</span><span class="p">,</span> <span class="s1">'.html'</span><span class="p">]</span>
    <span class="p">},</span>

    <span class="na">devServer</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">historyApiFallback</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="na">contentBase</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'/wwwroot/'</span><span class="p">),</span>
        <span class="na">watchOptions</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">aggregateTimeout</span><span class="p">:</span> <span class="mi">300</span><span class="p">,</span>
            <span class="na">poll</span><span class="p">:</span> <span class="mi">1000</span>
        <span class="p">}</span>
    <span class="p">},</span>

    <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">rules</span><span class="p">:</span> <span class="p">[</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">ts$/</span><span class="p">,</span>
                <span class="na">loaders</span><span class="p">:</span> <span class="p">[</span>
                    <span class="s1">'awesome-typescript-loader'</span><span class="p">,</span>
                    <span class="s1">'angular-router-loader'</span><span class="p">,</span>
                    <span class="s1">'angular2-template-loader'</span><span class="p">,</span>
                    <span class="s1">'source-map-loader'</span><span class="p">,</span>
                    <span class="s1">'tslint-loader'</span>
                <span class="p">]</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.(</span><span class="sr">png|jpg|gif|woff|woff2|ttf|svg|eot</span><span class="se">)</span><span class="sr">$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'file-loader?name=assets/[name]-[hash:6].[ext]'</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/favicon.ico$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'file-loader?name=/[name].[ext]'</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">css$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'style-loader!css-loader'</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">scss$/</span><span class="p">,</span>
                <span class="na">exclude</span><span class="p">:</span> <span class="sr">/node_modules/</span><span class="p">,</span>
                <span class="na">loaders</span><span class="p">:</span> <span class="p">[</span><span class="s1">'style-loader'</span><span class="p">,</span> <span class="s1">'css-loader'</span><span class="p">,</span> <span class="s1">'sass-loader'</span><span class="p">]</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">html$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'raw-loader'</span>
            <span class="p">}</span>
        <span class="p">],</span>
        <span class="na">exprContextCritical</span><span class="p">:</span> <span class="kc">false</span>
    <span class="p">},</span>
    <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">CommonsChunkPlugin</span><span class="p">({</span> <span class="na">name</span><span class="p">:</span> <span class="p">[</span><span class="s1">'app'</span><span class="p">,</span> <span class="s1">'polyfills'</span><span class="p">]</span> <span class="p">}),</span>

        <span class="k">new</span> <span class="nx">CleanWebpackPlugin</span><span class="p">(</span>
            <span class="p">[</span>
                <span class="s1">'./wwwroot/dist'</span><span class="p">,</span>
                <span class="s1">'./wwwroot/assets'</span>
            <span class="p">]</span>
        <span class="p">),</span>

        <span class="k">new</span> <span class="nx">HtmlWebpackPlugin</span><span class="p">({</span>
            <span class="na">filename</span><span class="p">:</span> <span class="s1">'index.html'</span><span class="p">,</span>
            <span class="na">inject</span><span class="p">:</span> <span class="s1">'body'</span><span class="p">,</span>
            <span class="na">template</span><span class="p">:</span> <span class="s1">'angularApp/index.html'</span>
        <span class="p">}),</span>

        <span class="k">new</span> <span class="nx">CopyWebpackPlugin</span><span class="p">([</span>
            <span class="p">{</span> <span class="na">from</span><span class="p">:</span> <span class="s1">'./angularApp/images/*.*'</span><span class="p">,</span> <span class="na">to</span><span class="p">:</span> <span class="s1">'assets/'</span><span class="p">,</span> <span class="na">flatten</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}</span>
        <span class="p">])</span>
    <span class="p">]</span>

<span class="p">};</span></code></pre></figure>

<p><strong>webpack.prod.js</strong></p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'path'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'webpack'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">HtmlWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'html-webpack-plugin'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">CopyWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'copy-webpack-plugin'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">CleanWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'clean-webpack-plugin'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">helpers</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./webpack.helpers'</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'@@@@@@@@@ USING PRODUCTION @@@@@@@@@@@@@@@'</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>

    <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
        <span class="s1">'vendor'</span><span class="p">:</span> <span class="s1">'./angularApp/vendor.ts'</span><span class="p">,</span>
        <span class="s1">'polyfills'</span><span class="p">:</span> <span class="s1">'./angularApp/polyfills.ts'</span><span class="p">,</span>
        <span class="s1">'app'</span><span class="p">:</span> <span class="s1">'./angularApp/main-aot.ts'</span> <span class="c1">// AoT compilation</span>
    <span class="p">},</span>

    <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">path</span><span class="p">:</span> <span class="s1">'./wwwroot/'</span><span class="p">,</span>
        <span class="na">filename</span><span class="p">:</span> <span class="s1">'dist/[name].[hash].bundle.js'</span><span class="p">,</span>
        <span class="na">chunkFilename</span><span class="p">:</span> <span class="s1">'dist/[id].[hash].chunk.js'</span><span class="p">,</span>
        <span class="na">publicPath</span><span class="p">:</span> <span class="s1">'/'</span>
    <span class="p">},</span>

    <span class="na">resolve</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">extensions</span><span class="p">:</span> <span class="p">[</span><span class="s1">'.ts'</span><span class="p">,</span> <span class="s1">'.js'</span><span class="p">,</span> <span class="s1">'.json'</span><span class="p">,</span> <span class="s1">'.css'</span><span class="p">,</span> <span class="s1">'.scss'</span><span class="p">,</span> <span class="s1">'.html'</span><span class="p">]</span>
    <span class="p">},</span>

    <span class="na">devServer</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">historyApiFallback</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="na">stats</span><span class="p">:</span> <span class="s1">'minimal'</span><span class="p">,</span>
        <span class="na">outputPath</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'wwwroot/'</span><span class="p">)</span>
    <span class="p">},</span>

    <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">rules</span><span class="p">:</span> <span class="p">[</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">ts$/</span><span class="p">,</span>
                <span class="na">loaders</span><span class="p">:</span> <span class="p">[</span>
                    <span class="s1">'awesome-typescript-loader'</span><span class="p">,</span>
                    <span class="s1">'angular-router-loader?aot=true&amp;genDir=aot/'</span>
                <span class="p">]</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.(</span><span class="sr">png|jpg|gif|woff|woff2|ttf|svg|eot</span><span class="se">)</span><span class="sr">$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'file-loader?name=assets/[name]-[hash:6].[ext]'</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/favicon.ico$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'file-loader?name=/[name].[ext]'</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">css$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'style-loader!css-loader'</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">scss$/</span><span class="p">,</span>
                <span class="na">exclude</span><span class="p">:</span> <span class="sr">/node_modules/</span><span class="p">,</span>
                <span class="na">loaders</span><span class="p">:</span> <span class="p">[</span><span class="s1">'style-loader'</span><span class="p">,</span> <span class="s1">'css-loader'</span><span class="p">,</span> <span class="s1">'sass-loader'</span><span class="p">]</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">html$/</span><span class="p">,</span>
                <span class="na">loader</span><span class="p">:</span> <span class="s1">'raw-loader'</span>
            <span class="p">}</span>
        <span class="p">],</span>
        <span class="na">exprContextCritical</span><span class="p">:</span> <span class="kc">false</span>
    <span class="p">},</span>

    <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
        <span class="k">new</span> <span class="nx">CleanWebpackPlugin</span><span class="p">(</span>
            <span class="p">[</span>
                <span class="s1">'./wwwroot/dist'</span><span class="p">,</span>
                <span class="s1">'./wwwroot/assets'</span>
            <span class="p">]</span>
        <span class="p">),</span>
        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">NoEmitOnErrorsPlugin</span><span class="p">(),</span>
        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">UglifyJsPlugin</span><span class="p">({</span>
            <span class="na">compress</span><span class="p">:</span> <span class="p">{</span>
                <span class="na">warnings</span><span class="p">:</span> <span class="kc">false</span>
            <span class="p">},</span>
            <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
                <span class="na">comments</span><span class="p">:</span> <span class="kc">false</span>
            <span class="p">},</span>
            <span class="na">sourceMap</span><span class="p">:</span> <span class="kc">false</span>
        <span class="p">}),</span>
        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">CommonsChunkPlugin</span><span class="p">(</span>
            <span class="p">{</span>
                <span class="na">name</span><span class="p">:</span> <span class="p">[</span><span class="s1">'vendor'</span><span class="p">,</span> <span class="s1">'polyfills'</span><span class="p">]</span>
            <span class="p">}),</span>

        <span class="k">new</span> <span class="nx">HtmlWebpackPlugin</span><span class="p">({</span>
            <span class="na">filename</span><span class="p">:</span> <span class="s1">'index.html'</span><span class="p">,</span>
            <span class="na">inject</span><span class="p">:</span> <span class="s1">'body'</span><span class="p">,</span>
            <span class="na">template</span><span class="p">:</span> <span class="s1">'angularApp/index.html'</span>
        <span class="p">}),</span>

        <span class="k">new</span> <span class="nx">CopyWebpackPlugin</span><span class="p">([</span>
            <span class="p">{</span> <span class="na">from</span><span class="p">:</span> <span class="s1">'./angularApp/images/*.*'</span><span class="p">,</span> <span class="na">to</span><span class="p">:</span> <span class="s1">'assets/'</span><span class="p">,</span> <span class="na">flatten</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}</span>
        <span class="p">])</span>
    <span class="p">]</span>
<span class="p">};</span></code></pre></figure>

<h2 id="webpack-production-build">Webpack Production build</h2>

<p>The production build has to be run from the command line. At present ngc, the angular compiler, can only be used from the command line.</p>

<p>See also (Using ngc) <a href="http://blog.mgechev.com/2016/06/26/tree-shaking-angular2-production-build-rollup-javascript/">http://blog.mgechev.com/2016/06/26/tree-shaking-angular2-production-build-rollup-javascript/</a></p>

<p>It can be run using npm run build-production which is configured in the package.json.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>"build-production": "npm run ngc &amp;&amp; npm run webpack-prodroduction"
</code></pre>
</div>

<p>The production build uses tsconfig-aot.json and main-aot.ts as an entry point.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">"compilerOptions"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"target"</span><span class="err">:</span> <span class="s2">"es5"</span><span class="p">,</span>
    <span class="s2">"module"</span><span class="err">:</span> <span class="s2">"es2015"</span><span class="p">,</span>
    <span class="s2">"moduleResolution"</span><span class="err">:</span> <span class="s2">"node"</span><span class="p">,</span>
    <span class="s2">"sourceMap"</span><span class="err">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="s2">"emitDecoratorMetadata"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"experimentalDecorators"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"removeComments"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"noImplicitAny"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"suppressImplicitAnyIndexErrors"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"skipLibCheck"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"lib"</span><span class="err">:</span> <span class="p">[</span>
      <span class="s2">"es2015"</span><span class="p">,</span>
      <span class="s2">"dom"</span>
    <span class="p">]</span>
  <span class="p">},</span>
  <span class="s2">"files"</span><span class="err">:</span> <span class="p">[</span>
    <span class="s2">"angularApp/app/app.module.ts"</span><span class="p">,</span>
    <span class="s2">"angularApp/app/modules/about/about.module.ts"</span><span class="p">,</span>
    <span class="s2">"angularApp/main-aot.ts"</span>
  <span class="p">],</span>
  <span class="s2">"angularCompilerOptions"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"genDir"</span><span class="err">:</span> <span class="s2">"aot"</span><span class="p">,</span>
    <span class="s2">"skipMetadataEmit"</span><span class="err">:</span> <span class="kc">true</span>
  <span class="p">},</span>
  <span class="s2">"compileOnSave"</span><span class="err">:</span> <span class="kc">false</span><span class="p">,</span>
  <span class="s2">"buildOnSave"</span><span class="err">:</span> <span class="kc">false</span>
<span class="p">}</span></code></pre></figure>

<h2 id="webpackdevjs">webpack.dev.js</h2>

<p>Lets dive into the webpack.dev.js a bit:</p>

<p>Firstly, all plugins are loaded which are required to process all the js, ts, … files which are included, or used in the project.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'path'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'webpack'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">HtmlWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'html-webpack-plugin'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">CopyWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'copy-webpack-plugin'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">CleanWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'clean-webpack-plugin'</span><span class="p">);</span></code></pre></figure>

<p>The npm environment variable NODE_ENV is used to define the type of build, either a development build or a production build. The entries are configured depending on this parameter.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js">    <span class="nx">entry</span><span class="err">:</span> <span class="p">{</span>
        <span class="s1">'app'</span><span class="err">:</span> <span class="s1">'./angularApp/main.ts'</span> <span class="c1">// JiT compilation</span>
    <span class="p">},</span></code></pre></figure>

<p>for webpack.prod.js</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js">    <span class="nx">entry</span><span class="err">:</span> <span class="p">{</span>
        <span class="s1">'app'</span><span class="err">:</span> <span class="s1">'./angularApp/main-aot.ts'</span> <span class="c1">// AoT compilation</span>
    <span class="p">},</span></code></pre></figure>

<p>The entries provide Webpack with the required information, where to start from, or where to hook in to.</p>

<p>Webpack knows which paths to run and includes the corresponding files and packages.</p>

<p>The “loaders” section and the “modules” section in the configuration provides Webpack with the following information: which files it needs to get and how to read the files. The modules tells Webpack what to do with the files exactly. Like minifying or whatever.</p>

<p>In this project configuration, if a production node parameter is set, different plugins are pushed into the sections because the files should be treated differently.</p>

<h3 id="the-output">The output</h3>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">output</span><span class="err">:</span> <span class="p">{</span>
        <span class="nl">path</span><span class="p">:</span> <span class="s2">"./wwwroot/"</span><span class="p">,</span>
        <span class="nx">filename</span><span class="err">:</span> <span class="s1">'dist/[name].bundle.js'</span><span class="p">,</span>
		<span class="nx">chunkFilename</span><span class="err">:</span> <span class="s1">'dist/[id].chunk.js'</span><span class="p">,</span>
        <span class="nx">publicPath</span><span class="err">:</span> <span class="s2">"/"</span>
    <span class="p">},</span></code></pre></figure>

<p>output for production adds a hash:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">output</span><span class="err">:</span> <span class="p">{</span>
        <span class="nl">path</span><span class="p">:</span> <span class="s2">"./wwwroot/"</span><span class="p">,</span>
        <span class="nx">filename</span><span class="err">:</span> <span class="s1">'dist/[name].[hash].bundle.js'</span><span class="p">,</span>
		<span class="nx">chunkFilename</span><span class="err">:</span> <span class="s1">'dist/[id].[hash].chunk.js'</span><span class="p">,</span>
        <span class="nx">publicPath</span><span class="err">:</span> <span class="s2">"/"</span>
    <span class="p">},</span></code></pre></figure>

<p>tells webpack where to put the files in the end. You can use like wildcards to use the “name” or an “hash” or something like that.</p>

<h3 id="the-module-loaders">The module loaders</h3>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">module</span><span class="err">:</span> <span class="p">{</span>
        <span class="nl">rules</span><span class="p">:</span> <span class="p">[</span>
           <span class="c1">//...loaders here</span>
        <span class="p">]</span>
    <span class="p">},</span></code></pre></figure>

<p>tell webpack how to react when a certain file extension comes into play. It will then use loaders to handle that file.</p>

<p>The plugins you are providing in the end are necessary to configure how the files should be processed.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js">    <span class="nx">plugins</span><span class="err">:</span> <span class="p">[</span>
        <span class="c1">//...loaders here</span>
    <span class="p">]</span></code></pre></figure>

<h2 id="angular-indexhtml">Angular index.html</h2>

<p>The index.html contains all the references required for the Angular client. The scripts are added as part of the build and not manually. The developer only needs to use the imports.</p>

<p>Source index.html file in the angularApp/public folder:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;base</span> <span class="na">href=</span><span class="s">"./"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;title&gt;</span>Angular Webpack Template<span class="nt">&lt;/title&gt;</span>

    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"content-type"</span> <span class="na">content=</span><span class="s">"text/html; charset=utf-8"</span> <span class="nt">/&gt;</span>

    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span> <span class="nt">/&gt;</span>

<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;my-app&gt;</span>Loading...<span class="nt">&lt;/my-app&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span></code></pre></figure>

<p>And the produced build file in the wwwroot folder. The script for the app has been added using Webpack. Hashes are used in a production build for cache busting.</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;base</span> <span class="na">href=</span><span class="s">"./"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;title&gt;</span>Angular Webpack Template<span class="nt">&lt;/title&gt;</span>

    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"content-type"</span> <span class="na">content=</span><span class="s">"text/html; charset=utf-8"</span> <span class="nt">/&gt;</span>

    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span> <span class="nt">/&gt;</span>

    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"css/bootstrap.css"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;my-app&gt;</span>Loading...<span class="nt">&lt;/my-app&gt;</span>
<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"/dist/app.bundle.js"</span><span class="nt">&gt;&lt;/script&gt;&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span></code></pre></figure>

<h2 id="visual-studio-tools">Visual Studio Tools</h2>

<h3 id="npm-custom-task-runner">npm custom Task Runner</h3>

<p>The NPM Task Runner can be used to build  the client SPA application from inside Visual Studio. This task runner can be downloaded from:</p>

<p><a href="https://marketplace.visualstudio.com/items?itemName=MadsKristensen.NPMTaskRunner">https://marketplace.visualstudio.com/items?itemName=MadsKristensen.NPMTaskRunner</a></p>

<p>The task runners need to be configured correctly. 
Go to Tools –&gt; Options –&gt; Projects and Solutions –&gt; External Web Tools.</p>

<p>Check that are options are checked. See:</p>

<p><a href="https://blogs.msdn.microsoft.com/webdev/2015/03/19/customize-external-web-tools-in-visual-studio-2015/">https://blogs.msdn.microsoft.com/webdev/2015/03/19/customize-external-web-tools-in-visual-studio-2015/</a></p>

<h3 id="npm-scripts">npm scripts</h3>

<p>The npm scripts are used to build, watch the client application as required. The scripts can be run from the command line or the npm task runner.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="s2">"ngc"</span><span class="err">:</span> <span class="s2">"ngc -p ./tsconfig-aot.json"</span><span class="p">,</span>
<span class="s2">"start"</span><span class="err">:</span> <span class="s2">"concurrently \"webpack-dev-server --hot --inline --port 8080\" \"dotnet run\" "</span><span class="p">,</span>
<span class="s2">"webpack-dev"</span><span class="err">:</span> <span class="s2">"set NODE_ENV=development&amp;&amp; webpack"</span><span class="p">,</span>
<span class="s2">"webpack-production"</span><span class="err">:</span> <span class="s2">"set NODE_ENV=production&amp;&amp; webpack"</span><span class="p">,</span>
<span class="s2">"build-dev"</span><span class="err">:</span> <span class="s2">"npm run webpack-dev"</span><span class="p">,</span>
<span class="s2">"build-production"</span><span class="err">:</span> <span class="s2">"npm run ngc &amp;&amp; npm run webpack-production"</span><span class="p">,</span>
<span class="s2">"watch-webpack-dev"</span><span class="err">:</span> <span class="s2">"set NODE_ENV=development&amp;&amp; webpack --watch --color"</span><span class="p">,</span>
<span class="s2">"watch-webpack-production"</span><span class="err">:</span> <span class="s2">"npm run build-production --watch --color"</span><span class="p">,</span>
<span class="s2">"publish-for-iis"</span><span class="err">:</span> <span class="s2">"npm run build-production &amp;&amp; dotnet publish -c Release"</span> </code></pre></figure>

<p>The watch-webpack-dev npm script can be automatically be started in Visual Studio by adding the following to the package.json</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="s2">"-vs-binding"</span><span class="err">:</span> <span class="p">{</span> <span class="s2">"ProjectOpened"</span><span class="err">:</span> <span class="p">[</span> <span class="s2">"watch-webpack-dev"</span> <span class="p">]</span> <span class="p">}</span></code></pre></figure>

<p><b>Note</b> Webpack task runner cannot be used to build the Angular webpack application as it uses the wrong options and cannot be used to do a production build due to the ngc.</p>

<h3 id="webpack-sass">Webpack SASS</h3>

<p><a href="http://sass-lang.com/">SASS</a> is used to style the SPA application. The SASS files can be built using the SASS. Webpack can build all the styles inline or as an external file, depending on your Webpack config.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="nl">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">scss$/</span><span class="p">,</span>
  <span class="nx">exclude</span><span class="err">:</span> <span class="o">/</span><span class="nx">node_modules</span><span class="o">/</span><span class="p">,</span>
  <span class="nx">loaders</span><span class="err">:</span> <span class="p">[</span><span class="s2">"style"</span><span class="p">,</span> <span class="s2">"css"</span><span class="p">,</span> <span class="s2">"sass"</span><span class="p">]</span>
<span class="p">},</span></code></pre></figure>

<p>See: <a href="https://damienbod.com/2016/10/14/using-sass-with-webpack-angular2-and-visual-studio/">https://damienbod.com/2016/10/14/using-sass-with-webpack-angular2-and-visual-studio/</a></p>

<h3 id="webpack-clean">Webpack Clean</h3>

<p><a href="https://github.com/johnagan/clean-webpack-plugin/">clean-webpack-plugin</a> is used to clean up the deployment folder inside the wwwroot. This ensures that the application uses the latest files.</p>

<p>The clean task can be configured as follows:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">CleanWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'clean-webpack-plugin'</span><span class="p">);</span></code></pre></figure>

<p>And used in Webpack.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js">  <span class="k">new</span> <span class="nx">CleanWebpackPlugin</span><span class="p">([</span><span class="s1">'./wwwroot/dist'</span><span class="p">]),</span></code></pre></figure>

<h2 id="angular-component-files">Angular component files</h2>

<p>Note: require cannot be used because AoT does not work with this.</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">Thing</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'./../../../models/thing'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">TestDataService</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'./../../../services/testDataService'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">OnInit</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>

<span class="err">@</span><span class="nx">Component</span><span class="p">({</span>
    <span class="na">selector</span><span class="p">:</span> <span class="s1">'home-component'</span><span class="p">,</span>
    <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'home.component.html'</span>
<span class="p">})</span>

<span class="k">export</span> <span class="kr">class</span> <span class="nx">HomeComponent</span> <span class="k">implements</span> <span class="nx">OnInit</span> <span class="p">{</span>

    <span class="k">public</span> <span class="nx">message</span><span class="err">:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="k">public</span> <span class="nx">things</span><span class="err">:</span> <span class="nx">Thing</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">public</span> <span class="nx">thing</span><span class="err">:</span> <span class="nx">Thing</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Thing</span><span class="p">();</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">_dataService</span><span class="err">:</span> <span class="nx">TestDataService</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">message</span> <span class="o">=</span> <span class="s2">"Things from the ASP.NET Core API"</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nx">ngOnInit</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">getAllThings</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">addThing</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_dataService</span>
            <span class="p">.</span><span class="nx">Add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">thing</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">subscribe</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">getAllThings</span><span class="p">();</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">thing</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Thing</span><span class="p">();</span>
            <span class="p">},</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
            <span class="p">});</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">deleteThing</span><span class="p">(</span><span class="na">thing</span><span class="p">:</span> <span class="nx">Thing</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_dataService</span>
            <span class="p">.</span><span class="nx">Delete</span><span class="p">(</span><span class="nx">thing</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">subscribe</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">getAllThings</span><span class="p">();</span>
            <span class="p">},</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
            <span class="p">});</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="nx">getAllThings</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_dataService</span>
            <span class="p">.</span><span class="nx">GetAll</span><span class="p">()</span>
            <span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span>
            <span class="nx">data</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">things</span> <span class="o">=</span> <span class="nx">data</span><span class="p">,</span>
            <span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">),</span>
            <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Get all complete'</span><span class="p">)</span>
            <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h2 id="tslint-file">tslint file</h2>

<p><a href="https://github.com/damienbod/AngularWebpackVisualStudio/blob/master/src/AngularWebpackVisualStudio/tslint.json">https://github.com/damienbod/AngularWebpackVisualStudio/blob/master/src/AngularWebpackVisualStudio/tslint.json</a></p>

<h2 id="the-aspnet-core-api">The ASP.NET Core API</h2>

<p>The ASP.NET Core API is quite small and tiny. It just provides a demo CRUD service.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Angular2WebpackVisualStudio.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Angular2WebpackVisualStudio.Repositories.Things</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.JsonPatch</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Angular2WebpackVisualStudio.Controller</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ThingsController</span> <span class="p">:</span> <span class="n">Microsoft</span><span class="p">.</span><span class="n">AspNetCore</span><span class="p">.</span><span class="n">Mvc</span><span class="p">.</span><span class="n">Controller</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IThingsRepository</span> <span class="n">_thingsRepository</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">ThingsController</span><span class="p">(</span><span class="n">IThingsRepository</span> <span class="n">thingsRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_thingsRepository</span> <span class="p">=</span> <span class="n">thingsRepository</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Get</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">_thingsRepository</span><span class="p">.</span><span class="nf">GetAll</span><span class="p">());</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Add</span><span class="p">([</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">Thing</span> <span class="n">thing</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">thing</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">ModelState</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">Thing</span> <span class="n">newThing</span> <span class="p">=</span> <span class="n">_thingsRepository</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">thing</span><span class="p">);</span>

            <span class="k">return</span> <span class="nf">CreatedAtRoute</span><span class="p">(</span><span class="s">"GetSingleThing"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">newThing</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">newThing</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpPatch</span><span class="p">(</span><span class="s">"{id:int}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">PartiallyUpdate</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="p">[</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">JsonPatchDocument</span><span class="p">&lt;</span><span class="n">Thing</span><span class="p">&gt;</span> <span class="n">patchDoc</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">patchDoc</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">Thing</span> <span class="n">existingEntity</span> <span class="p">=</span> <span class="n">_thingsRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">existingEntity</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">Thing</span> <span class="n">thing</span> <span class="p">=</span> <span class="n">existingEntity</span><span class="p">;</span>
            <span class="n">patchDoc</span><span class="p">.</span><span class="nf">ApplyTo</span><span class="p">(</span><span class="n">thing</span><span class="p">,</span> <span class="n">ModelState</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">ModelState</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">Thing</span> <span class="n">updatedThing</span> <span class="p">=</span> <span class="n">_thingsRepository</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">thing</span><span class="p">);</span>

            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">updatedThing</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"{id:int}"</span><span class="p">,</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">"GetSingleThing"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Single</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Thing</span> <span class="n">thing</span> <span class="p">=</span> <span class="n">_thingsRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">thing</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">thing</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="n">HttpDelete</span><span class="p">]</span>
        <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"{id:int}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Remove</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Thing</span> <span class="n">thing</span> <span class="p">=</span> <span class="n">_thingsRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">thing</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_thingsRepository</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="n">HttpPut</span><span class="p">]</span>
        <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"{id:int}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Update</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="p">[</span><span class="n">FromBody</span><span class="p">]</span><span class="n">Thing</span> <span class="n">thing</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">thingToCheck</span> <span class="p">=</span> <span class="n">_thingsRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">thingToCheck</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">thing</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="s">"Ids do not match"</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">ModelState</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">Thing</span> <span class="n">updatedThing</span> <span class="p">=</span> <span class="n">_thingsRepository</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">thing</span><span class="p">);</span>

            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">updatedThing</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h3 id="the-angular-http-service">The Angular Http-Service</h3>

<p>Note that in a normal environment, you should always return the typed classes and never the plain HTTP response like here. This application only has strings to return, and this is enough for the demo.</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">Thing</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'./../models/thing'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Injectable</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Http</span><span class="p">,</span> <span class="nx">Response</span><span class="p">,</span> <span class="nx">Headers</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/http'</span><span class="p">;</span>
<span class="k">import</span> <span class="s1">'rxjs/add/operator/map'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Observable</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'rxjs/Observable'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Configuration</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../app.constants'</span><span class="p">;</span>

<span class="err">@</span><span class="nx">Injectable</span><span class="p">()</span>
<span class="k">export</span> <span class="kr">class</span> <span class="nx">TestDataService</span> <span class="p">{</span>

    <span class="k">private</span> <span class="nx">actionUrl</span><span class="err">:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="k">private</span> <span class="nx">headers</span><span class="err">:</span> <span class="nx">Headers</span><span class="p">;</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">_http</span><span class="err">:</span> <span class="nx">Http</span><span class="p">,</span> <span class="k">private</span> <span class="nx">_configuration</span><span class="err">:</span> <span class="nx">Configuration</span><span class="p">)</span> <span class="p">{</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span> <span class="o">=</span> <span class="nx">_configuration</span><span class="p">.</span><span class="nx">Server</span> <span class="o">+</span> <span class="s1">'api/things/'</span><span class="p">;</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Headers</span><span class="p">();</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'Content-Type'</span><span class="p">,</span> <span class="s1">'application/json'</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'Accept'</span><span class="p">,</span> <span class="s1">'application/json'</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">GetAll</span> <span class="o">=</span> <span class="p">()</span><span class="err">:</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">Thing</span><span class="p">[]</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span><span class="p">).</span><span class="nx">map</span><span class="p">((</span><span class="na">response</span><span class="p">:</span> <span class="nx">Response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">Thing</span><span class="p">[]</span><span class="o">&gt;</span><span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">GetSingle</span> <span class="o">=</span> <span class="p">(</span><span class="na">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">Thing</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span> <span class="o">+</span> <span class="nx">id</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">Thing</span><span class="o">&gt;</span><span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">Add</span> <span class="o">=</span> <span class="p">(</span><span class="na">thingToAdd</span><span class="p">:</span> <span class="nx">Thing</span><span class="p">):</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">Thing</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">toAdd</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">name</span><span class="p">:</span> <span class="nx">thingToAdd</span><span class="p">.</span><span class="nx">name</span> <span class="p">});</span>

        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span><span class="p">,</span> <span class="nx">toAdd</span><span class="p">,</span> <span class="p">{</span> <span class="na">headers</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">headers</span> <span class="p">}).</span><span class="nx">map</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">Thing</span><span class="o">&gt;</span><span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">Update</span> <span class="o">=</span> <span class="p">(</span><span class="na">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="na">itemToUpdate</span><span class="p">:</span> <span class="kr">any</span><span class="p">):</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">Thing</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_http</span>
            <span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span> <span class="o">+</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">itemToUpdate</span><span class="p">),</span> <span class="p">{</span> <span class="na">headers</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">headers</span> <span class="p">})</span>
            <span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">Thing</span><span class="o">&gt;</span><span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">Delete</span> <span class="o">=</span> <span class="p">(</span><span class="na">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_http</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">actionUrl</span> <span class="o">+</span> <span class="nx">id</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h2 id="notes">Notes</h2>

<p>The Webpack configuration could also build all of the scss and css files to a separate app.css or app.”hash”.css which could be loaded as a single file in the distribution. Some of the vendor js and css could also be loaded directly in the html header using the index.html file and not included in the Webpack build.</p>

<p>If you are building both the client application and the server application in separate projects, you could also consider angular-cli of angular2-webpack for the client application.</p>

<p>Debugging the Angular in Visual Studio with breakpoints is not possible with this setup. The SPA app can be debugged in chrome.</p>

<h2 id="links">Links</h2>

<p><a href="https://github.com/preboot/angular2-webpack">https://github.com/preboot/angular2-webpack</a></p>

<p><a href="https://webpack.github.io/docs/">https://webpack.github.io/docs/</a></p>

<p><a href="https://github.com/jtangelder/sass-loader">https://github.com/jtangelder/sass-loader</a></p>

<p><a href="https://github.com/petehunt/webpack-howto/blob/master/README.md">https://github.com/petehunt/webpack-howto/blob/master/README.md</a></p>

<p><a href="http://blog.mgechev.com/2016/06/26/tree-shaking-angular2-production-build-rollup-javascript/">http://blog.mgechev.com/2016/06/26/tree-shaking-angular2-production-build-rollup-javascript/</a></p>

<p><a href="https://angular.io/docs/ts/latest/guide/webpack.html">https://angular.io/docs/ts/latest/guide/webpack.html</a></p>

<p><a href="http://blog.thoughtram.io/angular/2016/06/08/component-relative-paths-in-angular-2.html">http://blog.thoughtram.io/angular/2016/06/08/component-relative-paths-in-angular-2.html</a></p>

<p><a href="http://sass-lang.com/">http://sass-lang.com/</a></p>

<p><a href="https://marketplace.visualstudio.com/items?itemName=MadsKristensen.NPMTaskRunner">https://marketplace.visualstudio.com/items?itemName=MadsKristensen.NPMTaskRunner</a></p>

<p><a href="https://blogs.msdn.microsoft.com/webdev/2015/03/19/customize-external-web-tools-in-visual-studio-2015/">https://blogs.msdn.microsoft.com/webdev/2015/03/19/customize-external-web-tools-in-visual-studio-2015/</a></p>

	  ]]></description>
	</item>

	<item>
	  <title>Angular and ASP.NET Core Starter</title>
	  <link>//blog/articles/2016/01/25/angular-2-asp-net-core-starter/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2016-01-25T19:47:00+01:00</pubDate>
	  <guid>//blog/articles/2016/01/25/angular-2-asp-net-core-starter/</guid>
	  <description><![CDATA[
	     <p>With this bIog I want to give you an Angular and ASP.NET Core Starter.</p>

<p>Code here:</p>

<p><a href="https://github.com/FabianGosebrink/ASPNETCore-Angular-StarterTemplate">https://github.com/FabianGosebrink/ASPNETCore-Angular-StarterTemplate</a></p>

<p><strong>Updated to the newest Version!</strong></p>

<p>Nowadays you hear a lot of new technologies around the web stuff and with this post I want to show you a get-starting-guide how to start with the following technologies in general. I want to show how to set up an environment where you can start programming ASP.NET and Angular. As I started I spent a lot of time setting up all my tools and stuff. If you want to save this time: Go ahead reading.</p>

<p>So I want to have an environment where I can build an Angular web application with typescript, having an api where I can call to build with ASP.NET Core. We will also use <a href="https://code.visualstudio.com/">Visual Studio Code</a> to get the client-side programming going.</p>

<h2 id="lets-start">Lets start:</h2>

<p>First thing to do is setting up our Visual Studio. Create a new application and choose the ASP.NET 5 Templates. I guess they will be renamed later ;-)</p>

<p><img src="/assets/articles/wp-content/uploads/2016/01/AspNetCoreAngular2Demo_1.jpg" alt="AspNetCoreAngular2Demo_1" />
<img src="/assets/articles/wp-content/uploads/2016/01/AspNetCoreAngular2Demo_2.jpg" alt="AspNetCoreAngular2Demo_2" /></p>

<p>You will get an empty solution with no dependencies so far. Lets go and add some: open up the “project.json” and add this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
    <span class="s2">"dependencies"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"Microsoft.NETCore.App"</span><span class="err">:</span> <span class="p">{</span>
            <span class="s2">"version"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
            <span class="s2">"type"</span><span class="err">:</span> <span class="s2">"platform"</span>
        <span class="p">},</span>
        <span class="s2">"Microsoft.AspNetCore.Server.IISIntegration"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
        <span class="s2">"Microsoft.AspNetCore.Server.Kestrel"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
        <span class="s2">"Microsoft.Extensions.Configuration.FileExtensions"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
        <span class="s2">"Microsoft.AspNetCore.Mvc.Core"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
        <span class="s2">"Microsoft.AspNetCore.StaticFiles"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
        <span class="s2">"Microsoft.Extensions.Configuration.Json"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
        <span class="s2">"Microsoft.AspNetCore.Mvc"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
        <span class="s2">"Microsoft.Extensions.Logging.Console"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
        <span class="s2">"Microsoft.Extensions.Logging.Debug"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
        <span class="s2">"Microsoft.Extensions.Configuration.EnvironmentVariables"</span><span class="err">:</span> <span class="s2">"1.0.0"</span>
    <span class="p">},</span>

    <span class="s2">"tools"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"Microsoft.AspNetCore.Server.IISIntegration.Tools"</span><span class="err">:</span> <span class="s2">"1.0.0-preview2-final"</span>
    <span class="p">},</span>

    <span class="s2">"frameworks"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"netcoreapp1.0"</span><span class="err">:</span> <span class="p">{}</span>
    <span class="p">},</span>

    <span class="s2">"buildOptions"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"emitEntryPoint"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="s2">"preserveCompilationContext"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="s2">"debugType"</span><span class="err">:</span> <span class="s2">"portable"</span><span class="p">,</span>
        <span class="s2">"compile"</span><span class="err">:</span> <span class="p">{</span>
            <span class="s2">"include"</span><span class="err">:</span> <span class="p">[</span>
                <span class="s2">"**/*.cs"</span>
            <span class="p">],</span>
            <span class="s2">"exclude"</span><span class="err">:</span> <span class="p">[</span>
                <span class="s2">"**/node_modules/"</span>
            <span class="p">]</span>
        <span class="p">}</span>
    <span class="p">},</span>

    <span class="s2">"runtimeOptions"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"configProperties"</span><span class="err">:</span> <span class="p">{</span>
            <span class="s2">"System.GC.Server"</span><span class="err">:</span> <span class="kc">true</span>
        <span class="p">}</span>
    <span class="p">},</span>

    <span class="s2">"publishOptions"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"include"</span><span class="err">:</span> <span class="p">[</span>
            <span class="s2">"wwwroot"</span><span class="p">,</span>
            <span class="s2">"web.config"</span>
        <span class="p">]</span>
    <span class="p">},</span>

    <span class="s2">"scripts"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"postpublish"</span><span class="err">:</span> <span class="p">[</span> <span class="s2">"dotnet publish-iis --publish-folder %publish:OutputPath% --framework %publish:FullTargetFramework%"</span> <span class="p">]</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>What we are adding is MVC, because we will need it for setting up the API, some logging things and AutoMappers to map between our DTOs and our real Entities. We wont use it in this tutorial, but for a kickstart its good to have them.</p>

<p>Visual Studio should now go ahead and resolve, download and install these packages.</p>

<p>Now go on and add an “app”-Folder, a “js”-folder and a “css”-folder to the wwwroot-folder.</p>

<blockquote>
  <p>Everything in the wwwroot-folder is going to be served to the client. This is where our app lives. You can also build your application outside this folder and copy the relevant files in it via gulp etc. I am not doing this in this case because its easier to debug in the when launching. If you have a better approach I would love to hear it :)</p>
</blockquote>

<p><img src="/assets/articles/wp-content/uploads/2016/01/04.png" alt="04" /></p>

<p>To get started with our web application we need an index.html. Lets add it and put nothing in it so far.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/01/05.png" alt="05" /></p>

<h2 id="the-serversideapi">The Serverside/API</h2>

<p>Lets get started with the serverside: To wire up everything we need to configure our application in the Startup.cs.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Builder</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Hosting</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Configuration</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.DependencyInjection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Logging</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ASPNETCoreAngular2Demo</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Startup</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">IConfigurationRoot</span> <span class="n">Configuration</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// This method gets called by the runtime. Use this method to add services to the container.
</span>        <span class="c1">// For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=398940
</span>        <span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">services</span><span class="p">.</span><span class="nf">AddCors</span><span class="p">();</span>
            <span class="n">services</span><span class="p">.</span><span class="nf">AddMvc</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="nf">Startup</span><span class="p">(</span><span class="n">IHostingEnvironment</span> <span class="n">env</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ConfigurationBuilder</span><span class="p">()</span>
                <span class="p">.</span><span class="nf">SetBasePath</span><span class="p">(</span><span class="n">env</span><span class="p">.</span><span class="n">ContentRootPath</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="s">"appsettings.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">true</span><span class="p">,</span> <span class="n">reloadOnChange</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="err">$</span><span class="s">"appsettings.{env.EnvironmentName}.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">true</span><span class="p">);</span>

            <span class="n">builder</span><span class="p">.</span><span class="nf">AddEnvironmentVariables</span><span class="p">();</span>
            <span class="n">Configuration</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>
        <span class="p">}</span>


        <span class="c1">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
</span>        <span class="k">public</span> <span class="k">void</span> <span class="nf">Configure</span><span class="p">(</span><span class="n">IApplicationBuilder</span> <span class="n">app</span><span class="p">,</span> <span class="n">ILoggerFactory</span> <span class="n">loggerFactory</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">loggerFactory</span><span class="p">.</span><span class="nf">AddConsole</span><span class="p">(</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetSection</span><span class="p">(</span><span class="s">"Logging"</span><span class="p">));</span>
            <span class="n">loggerFactory</span><span class="p">.</span><span class="nf">AddDebug</span><span class="p">();</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseCors</span><span class="p">(</span><span class="n">config</span> <span class="p">=&gt;</span>
                <span class="n">config</span><span class="p">.</span><span class="nf">AllowAnyHeader</span><span class="p">()</span>
                    <span class="p">.</span><span class="nf">AllowAnyMethod</span><span class="p">()</span>
                    <span class="p">.</span><span class="nf">AllowAnyOrigin</span><span class="p">());</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseDefaultFiles</span><span class="p">();</span>
            <span class="n">app</span><span class="p">.</span><span class="nf">UseStaticFiles</span><span class="p">();</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseMvc</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Because at the beginning of this page we are consuming an “appsettings.json” we should also create it. Create a new file called like this beside the Startup.cs and paste some logging information to it. You can add some informations you want to have in there later if you want. For the start, this should be okay.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
    <span class="s2">"Logging"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"IncludeScopes"</span><span class="err">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="s2">"LogLevel"</span><span class="err">:</span> <span class="p">{</span>
            <span class="s2">"Default"</span><span class="err">:</span> <span class="s2">"Debug"</span><span class="p">,</span>
            <span class="s2">"System"</span><span class="err">:</span> <span class="s2">"Information"</span><span class="p">,</span>
            <span class="s2">"Microsoft"</span><span class="err">:</span> <span class="s2">"Information"</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Our application should now be able to start up. Just go to the commandline and type “dotnet run” in it. This will start a webserver and serve all files in wwwroot.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/01/AspNetCoreAngular2Demo_3.jpg" alt="AspNetCoreAngular2Demo_3" /></p>

<p><img src="/assets/articles/wp-content/uploads/2016/01/07.png" alt="07" /></p>

<p>Great so far! Now we can add a controller!</p>

<p>For this go ahead in the root of the project and add a folder “Controller” which wil hold all the controllers for us. Then you can add an standardcontroller for the first run.</p>

<blockquote>
  <p>I like to stay to IActionResult-Interface in my controllers. It just gives me a way I am used to and is clearer for me. You do not have to do this. The controller is just for demo purposes.</p>
</blockquote>

<p><img src="/assets/articles/wp-content/uploads/2016/01/08.png" alt="08" /></p>

<p>If we now run the server again with “dotnet run” it will start and via Postman we can check if everything works correctly:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/01/09.png" alt="Angular and ASP.NET Core Starter" /></p>

<h2 id="the-client">The Client</h2>

<p>Great. So lets start clientside. What we need is an Angular environment. For the tooling I made the best experiences using <a href="https://code.visualstudio.com/">Visual Studio Code</a>.</p>

<p>We already defined the wwwroot-Folder which holds every file which is transported to the client.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/01/11.png" alt="11" /></p>

<p>As we start developing Angular we have to prepare our environment for working with Typescript. I already have an instruction how to start in a previous Blogpost <a href="http://offering.solutions/blog/articles/2015/12/03/getting-started-with-visual-studio-code-angularjs-and-typescript/">Getting started with Visual Studio Code &amp; Typescript</a>. But lets cover some thing in short to get it customised for this Angular case.</p>

<p>Lets add a file for configuring the typescript-options for our project: tsconfig.json to the root of our project.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">"compilerOptions"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"target"</span><span class="err">:</span> <span class="s2">"es5"</span><span class="p">,</span>
    <span class="s2">"module"</span><span class="err">:</span> <span class="s2">"commonjs"</span><span class="p">,</span>
    <span class="s2">"moduleResolution"</span><span class="err">:</span> <span class="s2">"node"</span><span class="p">,</span>
    <span class="s2">"sourceMap"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"emitDecoratorMetadata"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"experimentalDecorators"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"lib"</span><span class="err">:</span> <span class="p">[</span>
      <span class="s2">"es2015"</span><span class="p">,</span>
      <span class="s2">"dom"</span>
    <span class="p">],</span>
    <span class="s2">"noImplicitAny"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"suppressImplicitAnyIndexErrors"</span><span class="err">:</span> <span class="kc">true</span>
  <span class="p">},</span>
  <span class="s2">"exclude"</span><span class="err">:</span> <span class="p">[</span>
    <span class="s2">"node_modules"</span><span class="p">,</span>
    <span class="s2">"wwwroot/**/*"</span>
  <span class="p">]</span>
<span class="p">}</span></code></pre></figure>

<h3 id="adding-angular">Adding Angular</h3>

<p>Angular is served via npm. To get Angular we have to add a package.json to the root of our project. “npm start” will run the lite-server, compile the *.ts files and start the watcher :)</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">"name"</span><span class="err">:</span> <span class="s2">"ng2app"</span><span class="p">,</span>
  <span class="s2">"version"</span><span class="err">:</span> <span class="s2">"0.0.0"</span><span class="p">,</span>
  <span class="s2">"license"</span><span class="err">:</span> <span class="s2">"MIT"</span><span class="p">,</span>
  <span class="s2">"angular-cli"</span><span class="err">:</span> <span class="p">{},</span>
  <span class="s2">"scripts"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"start"</span><span class="err">:</span> <span class="s2">"tsc &amp;&amp; gulp get:started &amp;&amp; concurrently \"npm run tsc:w\" \"dotnet run\" \"npm run lite\" \"gulp start-watch\""</span><span class="p">,</span>
    <span class="s2">"lite"</span><span class="err">:</span> <span class="s2">"lite-server"</span><span class="p">,</span>
    <span class="s2">"tsc"</span><span class="err">:</span> <span class="s2">"tsc"</span><span class="p">,</span>
    <span class="s2">"tsc:w"</span><span class="err">:</span> <span class="s2">"tsc -w"</span><span class="p">,</span>
    <span class="s2">"lint"</span><span class="err">:</span> <span class="s2">"tslint ./angular2app/**/*.ts -t verbose"</span>
  <span class="p">},</span>
  <span class="s2">"private"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="s2">"dependencies"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"@angular/common"</span><span class="err">:</span> <span class="s2">"~2.4.0"</span><span class="p">,</span>
    <span class="s2">"@angular/compiler"</span><span class="err">:</span> <span class="s2">"~2.4.0"</span><span class="p">,</span>
    <span class="s2">"@angular/core"</span><span class="err">:</span> <span class="s2">"~2.4.0"</span><span class="p">,</span>
    <span class="s2">"@angular/forms"</span><span class="err">:</span> <span class="s2">"~2.4.0"</span><span class="p">,</span>
    <span class="s2">"@angular/http"</span><span class="err">:</span> <span class="s2">"~2.4.0"</span><span class="p">,</span>
    <span class="s2">"@angular/platform-browser"</span><span class="err">:</span> <span class="s2">"~2.4.0"</span><span class="p">,</span>
    <span class="s2">"@angular/platform-browser-dynamic"</span><span class="err">:</span> <span class="s2">"~2.4.0"</span><span class="p">,</span>
    <span class="s2">"@angular/router"</span><span class="err">:</span> <span class="s2">"~3.4.0"</span><span class="p">,</span>
    <span class="s2">"angular-in-memory-web-api"</span><span class="err">:</span> <span class="s2">"~0.2.2"</span><span class="p">,</span>
    <span class="s2">"angular2-toaster"</span><span class="err">:</span> <span class="s2">"^1.0.1"</span><span class="p">,</span>
    <span class="s2">"bootstrap"</span><span class="err">:</span> <span class="s2">"^3.3.7"</span><span class="p">,</span>
    <span class="s2">"core-js"</span><span class="err">:</span> <span class="s2">"^2.4.1"</span><span class="p">,</span>
    <span class="s2">"jquery"</span><span class="err">:</span> <span class="s2">"2.2.4"</span><span class="p">,</span>
    <span class="s2">"ng2-loading-bar"</span><span class="err">:</span> <span class="s2">"0.0.6"</span><span class="p">,</span>
    <span class="s2">"reflect-metadata"</span><span class="err">:</span> <span class="s2">"^0.1.8"</span><span class="p">,</span>
    <span class="s2">"rxjs"</span><span class="err">:</span> <span class="s2">"5.0.1"</span><span class="p">,</span>
    <span class="s2">"systemjs"</span><span class="err">:</span> <span class="s2">"0.19.40"</span><span class="p">,</span>
    <span class="s2">"zone.js"</span><span class="err">:</span> <span class="s2">"^0.7.4"</span>
  <span class="p">},</span>
  <span class="s2">"devDependencies"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"@types/jasmine"</span><span class="err">:</span> <span class="s2">"^2.5.36"</span><span class="p">,</span>
    <span class="s2">"@types/node"</span><span class="err">:</span> <span class="s2">"^6.0.46"</span><span class="p">,</span>
    <span class="s2">"canonical-path"</span><span class="err">:</span> <span class="s2">"0.0.2"</span><span class="p">,</span>
    <span class="s2">"concurrently"</span><span class="err">:</span> <span class="s2">"^3.1.0"</span><span class="p">,</span>
    <span class="s2">"gulp"</span><span class="err">:</span> <span class="s2">"^3.9.1"</span><span class="p">,</span>
    <span class="s2">"http-server"</span><span class="err">:</span> <span class="s2">"^0.9.0"</span><span class="p">,</span>
    <span class="s2">"lite-server"</span><span class="err">:</span> <span class="s2">"^2.2.2"</span><span class="p">,</span>
    <span class="s2">"lodash"</span><span class="err">:</span> <span class="s2">"^4.16.4"</span><span class="p">,</span>
    <span class="s2">"protractor"</span><span class="err">:</span> <span class="s2">"~4.0.14"</span><span class="p">,</span>
    <span class="s2">"rimraf"</span><span class="err">:</span> <span class="s2">"^2.5.4"</span><span class="p">,</span>
    <span class="s2">"run-sequence"</span><span class="err">:</span> <span class="s2">"^1.2.2"</span><span class="p">,</span>
    <span class="s2">"tslint"</span><span class="err">:</span> <span class="s2">"^3.15.1"</span><span class="p">,</span>
    <span class="s2">"typescript"</span><span class="err">:</span> <span class="s2">"~2.0.10"</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>or just type “npm init” to answer all questions and get an project.json file generated.</p>

<p>After this you can install Angular and all other dependencies via “npm install” or Visual Studio will do this for you automatically. Just just have to wait a few seconds. It will add a node_modules folder to your root application and copy all files, also the *.d.ts-files you need to develop with typescript.</p>

<h4 id="systemjs">System.js</h4>

<p>Now we have to configure the system.js as so:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="cm">/**
 * System configuration for Angular 2 samples
 * Adjust as necessary for your application needs.
 */</span>
<span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">global</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">System</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span>
    <span class="na">paths</span><span class="p">:</span> <span class="p">{</span>
      <span class="c1">// paths serve as alias</span>
      <span class="s1">'npm:'</span><span class="p">:</span> <span class="s1">'js/'</span>
    <span class="p">},</span>
    <span class="c1">// map tells the System loader where to look for things</span>
    <span class="na">map</span><span class="p">:</span> <span class="p">{</span>
      <span class="c1">// our app is within the app folder</span>
      <span class="na">app</span><span class="p">:</span> <span class="s1">'app'</span><span class="p">,</span>
      <span class="c1">// angular bundles</span>
      <span class="s1">'@angular/core'</span><span class="p">:</span> <span class="s1">'npm:@angular/core/bundles/core.umd.js'</span><span class="p">,</span>
      <span class="s1">'@angular/common'</span><span class="p">:</span> <span class="s1">'npm:@angular/common/bundles/common.umd.js'</span><span class="p">,</span>
      <span class="s1">'@angular/compiler'</span><span class="p">:</span> <span class="s1">'npm:@angular/compiler/bundles/compiler.umd.js'</span><span class="p">,</span>
      <span class="s1">'@angular/platform-browser'</span><span class="p">:</span> <span class="s1">'npm:@angular/platform-browser/bundles/platform-browser.umd.js'</span><span class="p">,</span>
      <span class="s1">'@angular/platform-browser-dynamic'</span><span class="p">:</span> <span class="s1">'npm:@angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js'</span><span class="p">,</span>
      <span class="s1">'@angular/http'</span><span class="p">:</span> <span class="s1">'npm:@angular/http/bundles/http.umd.js'</span><span class="p">,</span>
      <span class="s1">'@angular/router'</span><span class="p">:</span> <span class="s1">'npm:@angular/router/bundles/router.umd.js'</span><span class="p">,</span>
      <span class="s1">'@angular/forms'</span><span class="p">:</span> <span class="s1">'npm:@angular/forms/bundles/forms.umd.js'</span><span class="p">,</span>

      <span class="c1">// Third Party</span>
      <span class="s1">'angular2-toaster'</span><span class="p">:</span> <span class="s1">'npm:angular2-toaster'</span><span class="p">,</span>
      <span class="c1">// 'ng2-slim-loading-bar': 'npm:ng2-slim-loading-bar/bundles/index.umd.js',</span>
      <span class="s2">"ng2-loading-bar"</span><span class="p">:</span> <span class="s2">"npm:ng2-loading-bar"</span><span class="p">,</span>

      <span class="c1">// other libraries</span>
      <span class="s1">'rxjs'</span><span class="p">:</span> <span class="s1">'npm:rxjs'</span>
    <span class="p">},</span>
    <span class="c1">// packages tells the System loader how to load when no filename and/or no extension</span>
    <span class="na">packages</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">app</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">main</span><span class="p">:</span> <span class="s1">'./main.js'</span><span class="p">,</span>
        <span class="na">defaultExtension</span><span class="p">:</span> <span class="s1">'js'</span>
      <span class="p">},</span>
      <span class="na">rxjs</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">defaultExtension</span><span class="p">:</span> <span class="s1">'js'</span>
      <span class="p">},</span>
      <span class="s1">'angular2-toaster'</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">defaultExtension</span><span class="p">:</span> <span class="s1">'js'</span>
      <span class="p">},</span>
      <span class="s1">'ng2-slim-loading-bar'</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">defaultExtension</span><span class="p">:</span> <span class="s1">'js'</span>
      <span class="p">},</span>
      <span class="s2">"ng2-loading-bar"</span><span class="p">:</span> <span class="p">{</span> <span class="s2">"main"</span><span class="p">:</span> <span class="s2">"index.js"</span><span class="p">,</span> <span class="s2">"defaultExtension"</span><span class="p">:</span> <span class="s2">"js"</span> <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">})(</span><span class="k">this</span><span class="p">);</span></code></pre></figure>

<p>Now go ahead in you index.html and link to the files in the client js folder:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>

<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;base</span> <span class="na">href=</span><span class="s">"/"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;title&gt;</span>ASP.NET Core 1.0 Angular 2 Demo<span class="nt">&lt;/title&gt;</span>

    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">type=</span><span class="s">"text/css"</span> <span class="na">href=</span><span class="s">"css/bootstrap.css"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">type=</span><span class="s">"text/css"</span> <span class="na">href=</span><span class="s">"css/toaster.css"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">type=</span><span class="s">"text/css"</span> <span class="na">href=</span><span class="s">"css/style.css"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/head&gt;</span>

<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;my-app&gt;</span>Loading...<span class="nt">&lt;/my-app&gt;</span>

     <span class="c">&lt;!-- 1. Load libraries --&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"js/shim.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"js/zone.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"js/Reflect.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"js/system.src.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"js/jquery.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"js/bootstrap.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    
    <span class="c">&lt;!-- 2. Configure SystemJS --&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"system.config.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script&gt;</span>
      <span class="nx">System</span><span class="p">.</span><span class="kr">import</span><span class="p">(</span><span class="s1">'app'</span><span class="p">).</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span> <span class="p">});</span>
    <span class="nt">&lt;/script&gt;</span>

<span class="nt">&lt;/body&gt;</span>

<span class="nt">&lt;/html&gt;</span></code></pre></figure>

<h2 id="finally">Finally…</h2>

<p>We are done so far:</p>

<p>You can now go ahead and develop you application in Typescript and Angular. You could start with the <a href="https://angular.io/docs/ts/latest/quickstart.html">Angular</a> quickstart. All files you need should be there. Its important to add the <a href="https://github.com/FabianGosebrink/ASPNETCore-Angular-StarterTemplate/blob/master/src/ASPNETCoreAngular2Demo/angularApp/main.ts">main.ts</a> , the <a href="https://github.com/FabianGosebrink/ASPNETCore-Angular-StarterTemplate/blob/master/src/ASPNETCoreAngular2Demo/angularApp/app.component.ts">app.component.ts</a> and <a href="https://github.com/FabianGosebrink/ASPNETCore-Angular-StarterTemplate/blob/master/src/ASPNETCoreAngular2Demo/angularApp/app.module.ts">app.module.ts</a> to get an entry point and bootstrapping your application.</p>

<blockquote>
  <p>If you, like me, always forget to compile the typescript files: open a cmd in the app folder and just type “npm run tsc:w”. This activates a typescript watcher using the tsconfig in the root of the project and will always compile the *.ts files into *.js files if there are some changes</p>
</blockquote>

<h3 id="further-steps">Further steps:</h3>

<p>You could now start using gulp/grunt to copy files to the locations automatically instead of doing it manually. Or you could start consuming the api using the http-Service like shown <a href="https://auth0.com/blog/2015/10/15/angular-2-series-part-3-using-http/">here</a>. I have done that all in my example repository here on Github. Hope you like it.</p>

<p><a href="https://github.com/FabianGosebrink/ASPNETCore-Angular-StarterTemplate">https://github.com/FabianGosebrink/ASPNETCore-Angular-StarterTemplate</a></p>

<p>Regards &amp; HTH</p>

<p>Fabian</p>

	  ]]></description>
	</item>


</channel>
</rss>
