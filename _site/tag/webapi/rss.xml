<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>http://fabian-gosebrink.com</title>
   
   <link>http://offering.solutions</link>
   <description>Articles about Angular & ASP.NET</description>
   <language>en-us</language>
   <managingEditor> Fabian Gosebrink</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Build and debug a WebAPI with the Dotnet CLI and VSCode</title>
	  <link>//blog/articles/2016/11/02/build-and-debug-webapi-with-the-dotnet-cli-and-vscode/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2016-11-02T09:30:00+01:00</pubDate>
	  <guid>//blog/articles/2016/11/02/build-and-debug-webapi-with-the-dotnet-cli-and-vscode/</guid>
	  <description><![CDATA[
	     <p>In this blog I want to show you how to build and debug a WebAPI with the Dotnet CLI and VSCode.</p>

<p>Code is here:</p>

<p><a href="https://github.com/FabianGosebrink/ASPNETCore-WebAPI-With-VSCode-Dotnet-CLI">https://github.com/FabianGosebrink/ASPNETCore-WebAPI-With-VSCode-Dotnet-CLI</a></p>

<h3 id="why-should-we-do-a-webapi-with-vscode-and-the-dotnet-cli">Why should we do a WebAPI with VSCode and the DotNet CLI?</h3>

<p>If you are building websites nowadays you have a lot of tools and a lot of technologies to handle. On Serverside this is a little bit easier but there you have a couple of technologies to face, too. In the past this was strongly connected to the operating system you were running on. With the dotnet CLI and Visual Studio Code you can build, run and debug APIs which are cross platform and so not bound to your (windows) system anymore.</p>

<h3 id="get-started">Get started</h3>

<p>First you have to download the dotnet CLI</p>

<p><a href="https://github.com/dotnet/cli">https://github.com/dotnet/cli</a></p>

<p>You can check if the CLI is running correctly by typing “dotnet” into your cmd. Something like this should appear:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/11/BuildaWebAPIwithVSCodeandtheDotNetCLI_01.jpg" alt="buildawebapiwithvscodeandthedotnetcli_01" />&lt;/a&gt;</p>

<p>Now we can type “code .” to start Visual Studio Code and add some content.</p>

<p>Modify the project.json to this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">"dependencies"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"Microsoft.NETCore.App"</span><span class="err">:</span> <span class="p">{</span>
      <span class="s2">"version"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
      <span class="s2">"type"</span><span class="err">:</span> <span class="s2">"platform"</span>
    <span class="p">},</span>
    <span class="s2">"Microsoft.AspNetCore.Diagnostics"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.AspNetCore.Server.IISIntegration"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.AspNetCore.Server.Kestrel"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.Extensions.Logging.Console"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.AspNetCore.Mvc"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Automapper"</span><span class="err">:</span> <span class="s2">"5.1.1"</span><span class="p">,</span>
    <span class="s2">"Microsoft.Extensions.Configuration.FileExtensions"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
    <span class="s2">"Microsoft.Extensions.Configuration.Json"</span><span class="err">:</span> <span class="s2">"1.0.0"</span>
  <span class="p">},</span>
  <span class="s2">"tools"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"Microsoft.AspNetCore.Server.IISIntegration.Tools"</span><span class="err">:</span> <span class="s2">"1.0.0-preview2-final"</span>
  <span class="p">},</span>
  <span class="s2">"frameworks"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"netcoreapp1.0"</span><span class="err">:</span> <span class="p">{}</span>
  <span class="p">},</span>
  <span class="s2">"buildOptions"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"emitEntryPoint"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"preserveCompilationContext"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"debugType"</span><span class="err">:</span> <span class="s2">"portable"</span>
  <span class="p">},</span>
  <span class="s2">"runtimeOptions"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"configProperties"</span><span class="err">:</span> <span class="p">{</span>
      <span class="s2">"System.GC.Server"</span><span class="err">:</span> <span class="kc">true</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="s2">"publishOptions"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"include"</span><span class="err">:</span> <span class="p">[</span>
      <span class="s2">"wwwroot"</span><span class="p">,</span>
      <span class="s2">"web.config"</span>
    <span class="p">]</span>
  <span class="p">},</span>
  <span class="s2">"scripts"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"postpublish"</span><span class="err">:</span> <span class="p">[</span>
      <span class="s2">"dotnet publish-iis --publish-folder %publish:OutputPath% --framework %publish:FullTargetFramework%"</span>
    <span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>and add the Startup.cs like this:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Builder</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Hosting</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.DependencyInjection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Logging</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AspNetWebapiCore</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Startup</span>
    <span class="p">{</span>
        <span class="c1">// This method gets called by the runtime. Use this method to add services to the container.
</span>        <span class="c1">// For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=398940
</span>        <span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">services</span><span class="p">.</span><span class="nf">AddOptions</span><span class="p">();</span>

            <span class="n">services</span><span class="p">.</span><span class="nf">AddCors</span><span class="p">(</span><span class="n">options</span> <span class="p">=&gt;</span>
            <span class="p">{</span>
                <span class="n">options</span><span class="p">.</span><span class="nf">AddPolicy</span><span class="p">(</span><span class="s">"AllowAllOrigins"</span><span class="p">,</span>
                    <span class="n">builder</span> <span class="p">=&gt;</span>
                    <span class="p">{</span>
                        <span class="n">builder</span>
                            <span class="p">.</span><span class="nf">AllowAnyOrigin</span><span class="p">()</span>
                            <span class="p">.</span><span class="nf">AllowAnyHeader</span><span class="p">()</span>
                            <span class="p">.</span><span class="nf">AllowAnyMethod</span><span class="p">();</span>
                    <span class="p">});</span>
            <span class="p">});</span>

            <span class="n">services</span><span class="p">.</span><span class="nf">AddMvc</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
</span>        <span class="k">public</span> <span class="k">void</span> <span class="nf">Configure</span><span class="p">(</span><span class="n">IApplicationBuilder</span> <span class="n">app</span><span class="p">,</span> <span class="n">IHostingEnvironment</span> <span class="n">env</span><span class="p">,</span> <span class="n">ILoggerFactory</span> <span class="n">loggerFactory</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">loggerFactory</span><span class="p">.</span><span class="nf">AddConsole</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">env</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="n">app</span><span class="p">.</span><span class="nf">UseDeveloperExceptionPage</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseCors</span><span class="p">(</span><span class="s">"AllowAllOrigins"</span><span class="p">);</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseMvc</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Now modify the program.cs like this:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">using</span> <span class="nn">System.IO</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Hosting</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AspNetWebapiCore</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">host</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">WebHostBuilder</span><span class="p">()</span>
                <span class="p">.</span><span class="nf">UseKestrel</span><span class="p">()</span>
                <span class="p">.</span><span class="nf">UseContentRoot</span><span class="p">(</span><span class="n">Directory</span><span class="p">.</span><span class="nf">GetCurrentDirectory</span><span class="p">())</span>
                <span class="p">.</span><span class="nf">UseIISIntegration</span><span class="p">()</span>
                <span class="p">.</span><span class="n">UseStartup</span><span class="p">&lt;</span><span class="n">Startup</span><span class="p">&gt;()</span>
                <span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

            <span class="n">host</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>If you now type “dotnet restore” and “dotnet run” your api starts.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/11/BuildaWebAPIwithVSCodeandtheDotNetCLI_02.jpg" alt="buildawebapiwithvscodeandthedotnetcli_02" /></p>

<p>That was easy, right?</p>

<blockquote>
  <p>The ASP.NET Core WebAPI runs now. All we do now is adding content, but the main environment for the ASP.NET Core WebAPI is running at this point. :)</p>
</blockquote>

<p>Lets add some content.</p>

<p>Add the folders and files:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/11/BuildaWebAPIwithVSCodeandtheDotNetCLI_03.jpg" alt="buildawebapiwithvscodeandthedotnetcli_03" /></p>

<p>The repository can be found here:</p>

<p><a href="https://github.com/FabianGosebrink/ASPNETCore-WebAPI-With-VSCode-Dotnet-CLI">https://github.com/FabianGosebrink/ASPNETCore-WebAPI-With-VSCode-Dotnet-CLI</a></p>

<p>Please add the showed files to your project, you can copy them from the repo.</p>

<p>Do not forget to modify your Startup.cs like this: Adding the repositry to the IoC-Container and adding the Automapper mapping:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...
</span>    <span class="n">services</span><span class="p">.</span><span class="n">AddSingleton</span><span class="p">&lt;</span><span class="n">IFoodRepository</span><span class="p">,</span> <span class="n">FoodRepository</span><span class="p">&gt;();</span>
    <span class="c1">// ...
</span><span class="p">}</span></code></pre></figure>

<p>and</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">void</span> <span class="nf">Configure</span><span class="p">(</span><span class="n">IApplicationBuilder</span> <span class="n">app</span><span class="p">,</span> <span class="n">IHostingEnvironment</span> <span class="n">env</span><span class="p">,</span> <span class="n">ILoggerFactory</span> <span class="n">loggerFactory</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...
</span>    <span class="n">AutoMapper</span><span class="p">.</span><span class="n">Mapper</span><span class="p">.</span><span class="nf">Initialize</span><span class="p">(</span><span class="n">mapper</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
        <span class="n">mapper</span><span class="p">.</span><span class="n">CreateMap</span><span class="p">&lt;</span><span class="n">FoodItem</span><span class="p">,</span> <span class="n">FoodDto</span><span class="p">&gt;().</span><span class="nf">ReverseMap</span><span class="p">();</span>
    <span class="p">});</span>
    <span class="c1">// ...
</span><span class="p">}</span></code></pre></figure>

<p>If you now type “dotnet build” it should build everyting. The warnings are because of we ware doing nothing with the exception variable. You should handle them anyhow in a real world project.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/11/BuildaWebAPIwithVSCodeandtheDotNetCLI_04.jpg" alt="Build and debug WebAPI with the Dotnet CLI and VSCode" /></p>

<p>If you now do “dotnet run” on your console, your webapi starts up and you can use it:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/11/BuildaWebAPIwithVSCodeandtheDotNetCLI_05-1024x555.jpg" alt="Build and debug WebAPI with the Dotnet CLI and VSCode" /></p>

<h3 id="debugging">Debugging</h3>

<p>We can now also debug the webapi with vscode. Therefore you only have to cancel the running process first and then hit the start button in the debug tab from vscode:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/11/BuildaWebAPIwithVSCodeandtheDotNetCLI_06-1024x555.jpg" alt="Build and debug a WebAPI with the Dotnet CLI and VSCode" /></p>

<p><img src="/assets/articles/wp-content/uploads/2016/11/BuildaWebAPIwithVSCodeandtheDotNetCLI_07-1024x553.jpg" alt="Build and debug a WebAPI with the Dotnet CLI and VSCode" /></p>

<p>So this is it. You now have built a ASP.NET WebAPI only with the dotnet cli and Visual Studio Code (vscode)</p>

<p>Hope this helps anybody</p>

<p>BR</p>

<p>Fabian</p>

	  ]]></description>
	</item>

	<item>
	  <title>How to create an ASP.NET Core WebAPI</title>
	  <link>//blog/articles/2016/07/29/how-to-create-an-asp-net-core-webapi/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2016-07-29T18:31:00+02:00</pubDate>
	  <guid>//blog/articles/2016/07/29/how-to-create-an-asp-net-core-webapi/</guid>
	  <description><![CDATA[
	     <p>In this blogpost I want to show you how to create an ASP.NET Core WebAPI. We will use a custom mapper (you could use AutoMapper for this instead, a repository which is a singleton in this blog here and we will use the normal CRUD operations to Create, Read, Update and Delete in the “database” here.</p>

<p>Code here <a href="https://github.com/FabianGosebrink/ASPNETCore-WebAPI-Sample">https://github.com/FabianGosebrink/ASPNETCore-WebAPI-Sample</a></p>

<h3 id="visual-studio">Visual Studio</h3>

<p><img src="/assets/articles/wp-content/uploads/2016/07/AspNetCoreWebApi0.jpg" alt="AspNetCoreWebApi0" />
<img src="/assets/articles/wp-content/uploads/2016/07/AspNetCoreWebApi02.jpg" alt="AspNetCoreWebApi02" /></p>

<p>We will start with the ASP.NET Startup-File</p>

<h3 id="aspnet-core-startup">ASP.NET Core Startup</h3>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">Startup</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nf">Startup</span><span class="p">(</span><span class="n">IHostingEnvironment</span> <span class="n">env</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ConfigurationBuilder</span><span class="p">()</span>
           <span class="p">.</span><span class="nf">SetBasePath</span><span class="p">(</span><span class="n">env</span><span class="p">.</span><span class="n">ContentRootPath</span><span class="p">)</span>
           <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="s">"appsettings.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">true</span><span class="p">,</span> <span class="n">reloadOnChange</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
           <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="err">$</span><span class="s">"appsettings.{env.EnvironmentName}.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">true</span><span class="p">);</span>

        <span class="n">builder</span><span class="p">.</span><span class="nf">AddEnvironmentVariables</span><span class="p">();</span>
        <span class="n">Configuration</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="n">IConfigurationRoot</span> <span class="n">Configuration</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="c1">// This method gets called by the runtime. Use this method to add services to the container.
</span>    <span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// Add framework services.
</span>        <span class="n">services</span><span class="p">.</span><span class="nf">AddMvc</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="c1">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
</span>    <span class="k">public</span> <span class="k">void</span> <span class="nf">Configure</span><span class="p">(</span><span class="n">IApplicationBuilder</span> <span class="n">app</span><span class="p">,</span> <span class="n">IHostingEnvironment</span> <span class="n">env</span><span class="p">,</span> <span class="n">ILoggerFactory</span> <span class="n">loggerFactory</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">loggerFactory</span><span class="p">.</span><span class="nf">AddConsole</span><span class="p">(</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetSection</span><span class="p">(</span><span class="s">"Logging"</span><span class="p">));</span>
        <span class="n">loggerFactory</span><span class="p">.</span><span class="nf">AddDebug</span><span class="p">();</span>

        <span class="n">app</span><span class="p">.</span><span class="nf">UseDefaultFiles</span><span class="p">();</span>
        <span class="n">app</span><span class="p">.</span><span class="nf">UseStaticFiles</span><span class="p">();</span>

        <span class="n">app</span><span class="p">.</span><span class="nf">UseMvc</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>No magic here so far. We are creating a configuration in the first step (constructor) of the FIle and then add and use MVC with its defaultfiles (e.g. index.html) and add the ability to server static files in general (app.useStaticFiles).</p>

<h3 id="the-models">The models</h3>

<p>First lets build some entities we want to send to the client and back. We will create a DTO and an Entity and map everything before it gets send to the client.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">HouseDto</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="p">[</span><span class="n">Required</span><span class="p">,</span> <span class="nf">MinLength</span><span class="p">(</span><span class="m">3</span><span class="p">)]</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Street</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="p">[</span><span class="n">Required</span><span class="p">,</span> <span class="nf">MinLength</span><span class="p">(</span><span class="m">3</span><span class="p">)]</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">City</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="p">[</span><span class="n">Required</span><span class="p">]</span>
        <span class="p">[</span><span class="nf">DataType</span><span class="p">(</span><span class="n">DataType</span><span class="p">.</span><span class="n">PostalCode</span><span class="p">)]</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">ZipCode</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">HouseEntity</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Street</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">City</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">ZipCode</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>So the DTO is an exact duplicate from the entity in this case.</p>

<p>Lets create the Mapper next (which is really obvious):</p>

<h3 id="the-mapper">The mapper</h3>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">interface</span> <span class="n">IHouseMapper</span>
    <span class="p">{</span>
        <span class="n">HouseDto</span> <span class="nf">MapToDto</span><span class="p">(</span><span class="n">HouseEntity</span> <span class="n">houseEntity</span><span class="p">);</span>
        <span class="n">HouseEntity</span> <span class="nf">MapToEntity</span><span class="p">(</span><span class="n">HouseDto</span> <span class="n">houseDto</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">HouseMapper</span> <span class="p">:</span> <span class="n">IHouseMapper</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">HouseDto</span> <span class="nf">MapToDto</span><span class="p">(</span><span class="n">HouseEntity</span> <span class="n">houseEntity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">HouseDto</span><span class="p">()</span>
            <span class="p">{</span>
                <span class="n">Id</span> <span class="p">=</span> <span class="n">houseEntity</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span>
                <span class="n">ZipCode</span> <span class="p">=</span> <span class="n">houseEntity</span><span class="p">.</span><span class="n">ZipCode</span><span class="p">,</span>
                <span class="n">City</span> <span class="p">=</span> <span class="n">houseEntity</span><span class="p">.</span><span class="n">City</span><span class="p">,</span>
                <span class="n">Street</span> <span class="p">=</span> <span class="n">houseEntity</span><span class="p">.</span><span class="n">Street</span>
            <span class="p">};</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">HouseEntity</span> <span class="nf">MapToEntity</span><span class="p">(</span><span class="n">HouseDto</span> <span class="n">houseDto</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">HouseEntity</span><span class="p">()</span>
            <span class="p">{</span>
                <span class="n">Id</span> <span class="p">=</span> <span class="n">houseDto</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span>
                <span class="n">ZipCode</span> <span class="p">=</span> <span class="n">houseDto</span><span class="p">.</span><span class="n">ZipCode</span><span class="p">,</span>
                <span class="n">City</span> <span class="p">=</span> <span class="n">houseDto</span><span class="p">.</span><span class="n">City</span><span class="p">,</span>
                <span class="n">Street</span> <span class="p">=</span> <span class="n">houseDto</span><span class="p">.</span><span class="n">Street</span>
            <span class="p">};</span>
        <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>So here we are just mapping from one to another. Simple case. This can get more complex but it should do it for this time.</p>

<p>After we created the mapper we want to have this mapper instanciated <strong>every time a request comes in</strong>. For this we use the build in DI-container in ASP.NET Core.</p>

<p>So go to Startup.cs and add the line</p>

<p><code class="highlighter-rouge">services.AddTransient&lt;IHouseMapper, HouseMapper&gt;();</code></p>

<p>in the “ConfigureServices”-Method. It should look like this then:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
            <span class="n">services</span><span class="p">.</span><span class="n">AddTransient</span><span class="p">&lt;</span><span class="n">IHouseMapper</span><span class="p">,</span> <span class="n">HouseMapper</span><span class="p">&gt;();</span>
            <span class="c1">// Add framework services.
</span>            <span class="n">services</span><span class="p">.</span><span class="nf">AddMvc</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<h3 id="the-repository">The Repository</h3>

<p>The repository is responsible for providing and saving the data. Normally you would use da database here.</p>

<p>Like:</p>

<p><a href="https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-6">https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-6</a></p>

<p><a href="https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-Core">https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-Core</a></p>

<p>But for this time we will use like a static list where objects are added and removed.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">interface</span> <span class="n">IHouseRepository</span>
    <span class="p">{</span>
        <span class="n">List</span><span class="p">&lt;</span><span class="n">HouseEntity</span><span class="p">&gt;</span> <span class="nf">GetAll</span><span class="p">();</span>
        <span class="n">HouseEntity</span> <span class="nf">GetSingle</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
        <span class="n">HouseEntity</span> <span class="nf">Add</span><span class="p">(</span><span class="n">HouseEntity</span> <span class="n">toAdd</span><span class="p">);</span>
        <span class="n">HouseEntity</span> <span class="nf">Update</span><span class="p">(</span><span class="n">HouseEntity</span> <span class="n">toUpdate</span><span class="p">);</span>
        <span class="k">void</span> <span class="nf">Delete</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">HouseRepository</span> <span class="p">:</span> <span class="n">IHouseRepository</span>
    <span class="p">{</span>
        <span class="k">readonly</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">HouseEntity</span><span class="p">&gt;</span> <span class="n">_houses</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">HouseEntity</span><span class="p">&gt;();</span>

        <span class="k">public</span> <span class="nf">HouseRepository</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">_houses</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="k">new</span> <span class="nf">HouseEntity</span><span class="p">()</span> <span class="p">{</span> <span class="n">City</span> <span class="p">=</span> <span class="s">"Town1"</span><span class="p">,</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">Street</span> <span class="p">=</span> <span class="s">"Street1"</span><span class="p">,</span> <span class="n">ZipCode</span> <span class="p">=</span> <span class="m">1234</span> <span class="p">});</span>
            <span class="n">_houses</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="k">new</span> <span class="nf">HouseEntity</span><span class="p">()</span> <span class="p">{</span> <span class="n">City</span> <span class="p">=</span> <span class="s">"Town2"</span><span class="p">,</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">2</span><span class="p">,</span> <span class="n">Street</span> <span class="p">=</span> <span class="s">"Street2"</span><span class="p">,</span> <span class="n">ZipCode</span> <span class="p">=</span> <span class="m">1234</span> <span class="p">});</span>
            <span class="n">_houses</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="k">new</span> <span class="nf">HouseEntity</span><span class="p">()</span> <span class="p">{</span> <span class="n">City</span> <span class="p">=</span> <span class="s">"Town3"</span><span class="p">,</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">3</span><span class="p">,</span> <span class="n">Street</span> <span class="p">=</span> <span class="s">"Street3"</span><span class="p">,</span> <span class="n">ZipCode</span> <span class="p">=</span> <span class="m">1234</span> <span class="p">});</span>
            <span class="n">_houses</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="m">4</span><span class="p">,</span> <span class="k">new</span> <span class="nf">HouseEntity</span><span class="p">()</span> <span class="p">{</span> <span class="n">City</span> <span class="p">=</span> <span class="s">"Town4"</span><span class="p">,</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">4</span><span class="p">,</span> <span class="n">Street</span> <span class="p">=</span> <span class="s">"Street4"</span><span class="p">,</span> <span class="n">ZipCode</span> <span class="p">=</span> <span class="m">1234</span> <span class="p">});</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">HouseEntity</span><span class="p">&gt;</span> <span class="nf">GetAll</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_houses</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Value</span><span class="p">).</span><span class="nf">ToList</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">HouseEntity</span> <span class="nf">GetSingle</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_houses</span><span class="p">.</span><span class="nf">FirstOrDefault</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Key</span> <span class="p">==</span> <span class="n">id</span><span class="p">).</span><span class="n">Value</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">HouseEntity</span> <span class="nf">Add</span><span class="p">(</span><span class="n">HouseEntity</span> <span class="n">toAdd</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">int</span> <span class="n">newId</span> <span class="p">=</span> <span class="p">!</span><span class="nf">GetAll</span><span class="p">().</span><span class="nf">Any</span><span class="p">()</span> <span class="p">?</span> <span class="m">1</span> <span class="p">:</span> <span class="nf">GetAll</span><span class="p">().</span><span class="nf">Max</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span> <span class="p">+</span> <span class="m">1</span><span class="p">;</span>
            <span class="n">toAdd</span><span class="p">.</span><span class="n">Id</span> <span class="p">=</span> <span class="n">newId</span><span class="p">;</span>
            <span class="n">_houses</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">newId</span><span class="p">,</span> <span class="n">toAdd</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">toAdd</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">HouseEntity</span> <span class="nf">Update</span><span class="p">(</span><span class="n">HouseEntity</span> <span class="n">toUpdate</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">HouseEntity</span> <span class="n">single</span> <span class="p">=</span> <span class="nf">GetSingle</span><span class="p">(</span><span class="n">toUpdate</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">single</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">_houses</span><span class="p">[</span><span class="n">single</span><span class="p">.</span><span class="n">Id</span><span class="p">]</span> <span class="p">=</span> <span class="n">toUpdate</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">toUpdate</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Delete</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_houses</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>A normal interface using Entity Framwork could look like this btw:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">interface</span> <span class="n">IExampleRepository</span>
    <span class="p">{</span>
        <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">MyModel</span><span class="p">&gt;</span> <span class="nf">GetAll</span><span class="p">();</span>
        <span class="n">MyModel</span> <span class="nf">GetSingle</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
        <span class="n">MyModel</span> <span class="nf">Add</span><span class="p">(</span><span class="n">MyModel</span> <span class="n">toAdd</span><span class="p">);</span>
        <span class="n">MyModel</span> <span class="nf">Update</span><span class="p">(</span><span class="n">MyModel</span> <span class="n">toUpdate</span><span class="p">);</span>
        <span class="k">void</span> <span class="nf">Delete</span><span class="p">(</span><span class="n">MyModel</span> <span class="n">toDelete</span><span class="p">);</span>
        <span class="kt">int</span> <span class="nf">Save</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<p>taken from <a href="https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-Core/blob/master/src/AspnetCoreEFCoreExample/Repositories/IExampleRepository.cs">https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-Core/blob/master/src/AspnetCoreEFCoreExample/Repositories/IExampleRepository.cs</a></p>

<p>See the “Save()”-Method here. But for this time it should be good with the list. We are not focussing on the Database here.</p>

<p>So we do have the repository to save the data. Let’s make it available through DI in the Startup. This time we do NOT want to have a new repo every request, so we will add a singleton this time.</p>

<p>In a normal case with a real DB you would not do that</p>

<p>Example for EF 6 is here</p>

<p><a href="https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-6/blob/master/src/AspnetCoreEF6Example/Startup.cs#L32">https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-6/blob/master/src/AspnetCoreEF6Example/Startup.cs#L32</a></p>

<p><a href="https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-Core/blob/master/src/AspnetCoreEFCoreExample/Startup.cs#L32">https://github.com/FabianGosebrink/ASPNETCore-Entity-Framework-Core/blob/master/src/AspnetCoreEFCoreExample/Startup.cs#L32</a></p>

<p>But this time we will use a singleton. Shame on me so far.</p>

<p><code class="highlighter-rouge">services.AddSingleton&lt;IHouseRepository, HouseRepository&gt;();</code></p>

<p>So the whole Startup.cs is now like:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">services</span><span class="p">.</span><span class="n">AddSingleton</span><span class="p">&lt;</span><span class="n">IHouseRepository</span><span class="p">,</span> <span class="n">HouseRepository</span><span class="p">&gt;();</span>

    <span class="n">services</span><span class="p">.</span><span class="n">AddTransient</span><span class="p">&lt;</span><span class="n">IHouseMapper</span><span class="p">,</span> <span class="n">HouseMapper</span><span class="p">&gt;();</span>
    <span class="c1">// Add framework services.
</span>    <span class="n">services</span><span class="p">.</span><span class="nf">AddMvc</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<p>With this we can start using the whole construct in a controller like this:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="na">[Route("api/[controller]</span><span class="s">")]
</span><span class="k">public</span> <span class="k">class</span> <span class="nc">HouseController</span> <span class="p">:</span> <span class="n">Controller</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IHouseMapper</span> <span class="n">_houseMapper</span><span class="p">;</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IHouseRepository</span> <span class="n">_houseRepository</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">HouseController</span><span class="p">(</span><span class="n">IHouseMapper</span> <span class="n">houseMapper</span><span class="p">,</span> <span class="n">IHouseRepository</span> <span class="n">houseRepository</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_houseMapper</span> <span class="p">=</span> <span class="n">houseMapper</span><span class="p">;</span>
        <span class="n">_houseRepository</span> <span class="p">=</span> <span class="n">houseRepository</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
    <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Get</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">_houseRepository</span><span class="p">.</span><span class="nf">GetAll</span><span class="p">().</span><span class="nf">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">_houseMapper</span><span class="p">.</span><span class="nf">MapToDto</span><span class="p">(</span><span class="n">x</span><span class="p">)));</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//logg exception or do anything with it
</span>            <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span> <span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">InternalServerError</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id:int}"</span><span class="p">,</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">"GetSingleHouse"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">GetSingle</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="n">HouseEntity</span> <span class="n">houseEntity</span> <span class="p">=</span> <span class="n">_houseRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">houseEntity</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">_houseMapper</span><span class="p">.</span><span class="nf">MapToDto</span><span class="p">(</span><span class="n">houseEntity</span><span class="p">));</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//logg exception or do anything with it
</span>            <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">InternalServerError</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="nf">HttpPatch</span><span class="p">(</span><span class="s">"{id:int}"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Patch</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="p">[</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">JsonPatchDocument</span><span class="p">&lt;</span><span class="n">HouseDto</span><span class="p">&gt;</span> <span class="n">housePatchDocument</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">housePatchDocument</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">ModelState</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">HouseEntity</span> <span class="n">houseEntity</span> <span class="p">=</span> <span class="n">_houseRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">houseEntity</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">HouseDto</span> <span class="n">existingHouse</span> <span class="p">=</span> <span class="n">_houseMapper</span><span class="p">.</span><span class="nf">MapToDto</span><span class="p">(</span><span class="n">houseEntity</span><span class="p">);</span>

            <span class="n">housePatchDocument</span><span class="p">.</span><span class="nf">ApplyTo</span><span class="p">(</span><span class="n">existingHouse</span><span class="p">,</span> <span class="n">ModelState</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">ModelState</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">_houseRepository</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="n">_houseMapper</span><span class="p">.</span><span class="nf">MapToEntity</span><span class="p">(</span><span class="n">existingHouse</span><span class="p">));</span>

            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">existingHouse</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//logg exception or do anything with it
</span>            <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">InternalServerError</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
    <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Create</span><span class="p">([</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">HouseDto</span> <span class="n">houseDto</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">houseDto</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">ModelState</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">HouseEntity</span> <span class="n">houseEntity</span> <span class="p">=</span> <span class="n">_houseMapper</span><span class="p">.</span><span class="nf">MapToEntity</span><span class="p">(</span><span class="n">houseDto</span><span class="p">);</span>

            <span class="n">_houseRepository</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">houseEntity</span><span class="p">);</span>

            <span class="k">return</span> <span class="nf">CreatedAtRoute</span><span class="p">(</span><span class="s">"GetSingleHouse"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">houseEntity</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">_houseMapper</span><span class="p">.</span><span class="nf">MapToDto</span><span class="p">(</span><span class="n">houseEntity</span><span class="p">));</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//logg exception or do anything with it
</span>            <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">InternalServerError</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"{id:int}"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Update</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="p">[</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">HouseDto</span> <span class="n">houseDto</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">houseDto</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">ModelState</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">HouseEntity</span> <span class="n">houseEntityToUpdate</span> <span class="p">=</span> <span class="n">_houseRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">houseEntityToUpdate</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">houseEntityToUpdate</span><span class="p">.</span><span class="n">ZipCode</span> <span class="p">=</span> <span class="n">houseDto</span><span class="p">.</span><span class="n">ZipCode</span><span class="p">;</span>
            <span class="n">houseEntityToUpdate</span><span class="p">.</span><span class="n">Street</span> <span class="p">=</span> <span class="n">houseDto</span><span class="p">.</span><span class="n">Street</span><span class="p">;</span>
            <span class="n">houseEntityToUpdate</span><span class="p">.</span><span class="n">City</span> <span class="p">=</span> <span class="n">houseDto</span><span class="p">.</span><span class="n">City</span><span class="p">;</span>

            <span class="n">_houseRepository</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="n">houseEntityToUpdate</span><span class="p">);</span>

            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">_houseMapper</span><span class="p">.</span><span class="nf">MapToDto</span><span class="p">(</span><span class="n">houseEntityToUpdate</span><span class="p">));</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//logg exception or do anything with it
</span>            <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">InternalServerError</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"{id:int}"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Delete</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="n">HouseEntity</span> <span class="n">houseEntityToDelete</span> <span class="p">=</span> <span class="n">_houseRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">houseEntityToDelete</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_houseRepository</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//logg exception or do anything with it
</span>            <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">InternalServerError</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Now we can go ahead and test this with a tool like postman or whatever:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/07/AspNetCoreWebApi1.jpg" alt="Create an ASP.NET Core 1.1 WebAPI" /></p>

<p><img src="/assets/articles/wp-content/uploads/2016/07/AspNetCoreWebApi3.jpg" alt="AspNetCoreWebApi3" /></p>

	  ]]></description>
	</item>

	<item>
	  <title>Angular, ASP.NET WebAPI, Azure & Cordova, Cross Platform – My Private Hackathon Part 2</title>
	  <link>//blog/articles/2016/04/26/angular-asp-net-webapi-azure-cordova-cross-platform-my-private-hackathon-part-2/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2016-04-26T10:05:00+02:00</pubDate>
	  <guid>//blog/articles/2016/04/26/angular-asp-net-webapi-azure-cordova-cross-platform-my-private-hackathon-part-2/</guid>
	  <description><![CDATA[
	     <p>In the last <a href="http://offering.solutions/blog/articles/2016/04/19/angular-asp-net-webapi-azure-cordova-cross-platform-2/">blogpost</a>I lost a few words about the REST-API the FoodChooser is talking to. In this blog I want to talk about the clients I developed. This is: Angular, ASP.NET WebAPI, Azure &amp; Cordova, Cross Platform – My Private Hackathon Part 2.</p>

<p>Well I started coding an AngularJs 1.x Client with Typecript which is available here</p>

<p><a href="https://github.com/FabianGosebrink/ASPNET-Foodchooser-Cross-Platform-AngularJS">https://github.com/FabianGosebrink/ASPNET-Foodchooser-Cross-Platform-AngularJS</a></p>

<p>Of course I could not stop looking and digging into Angular. So I wrote this client too which is available here:</p>

<p><a href="https://github.com/FabianGosebrink/Foodchooser-ASPNET-Angular-Cross-Platform">https://github.com/FabianGosebrink/Foodchooser-ASPNET-Angular-Cross-Platform</a></p>

<p>Inside this blog I want to loose a few words about how I wrote them what the pitfalls were and how I came up with this solution.</p>

<blockquote>
  <p>I will only show Angular2 examples here because it’s the only client which is still maintained</p>
</blockquote>

<h3 id="architecture">Architecture</h3>

<p>The application is divieded into several components with its child components. Due to the fact that the application is not that big at all there is no huge hierarchy.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/04/SiteMap.png" alt="Angular 2, ASP.NET WebAPI, Azure &amp; Cordova, Cross Platform" /></p>

<p>So the only interesting thing is the Food-Component which has two child Components “FoodForm” and “FoodList”.</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="err">@</span><span class="nx">Component</span><span class="p">({</span>
<span class="err">   </span> <span class="na">selector</span><span class="p">:</span> <span class="s1">'food-component'</span><span class="p">,</span>
<span class="err">   </span> <span class="na">directives</span><span class="p">:</span> <span class="p">[</span><span class="nx">ROUTER_DIRECTIVES</span><span class="p">,</span> <span class="nx">CORE_DIRECTIVES</span><span class="p">,</span> <span class="nx">FoodListComponent</span><span class="p">,</span> <span class="nx">FoodListFormComponent</span><span class="p">],</span>
<span class="err">   </span> <span class="na">providers</span><span class="p">:</span> <span class="p">[</span><span class="nx">FoodDataService</span><span class="p">,</span> <span class="nx">FoodListDataService</span><span class="p">],</span>
<span class="err">   </span> <span class="na">template</span><span class="p">:</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./food.component.html'</span><span class="p">)</span>
<span class="p">})</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="c">&lt;!-- Page Content --&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
    <span class="c">&lt;!-- Introduction Row --&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-lg-12"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">"page-header"</span><span class="nt">&gt;</span>Foodlists
                    <span class="nt">&lt;small&gt;</span>See all your food lists<span class="nt">&lt;/small&gt;</span>
                <span class="nt">&lt;/h1&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>

    <span class="nt">&lt;foodListForm-component&gt;&lt;/foodListForm-component&gt;</span>
    <span class="nt">&lt;foodlists-component&gt;&lt;/foodlists-component&gt;</span>

<span class="nt">&lt;/div&gt;</span></code></pre></figure>

<p>The list component itself is not containing the details-view but redirecting to it while iterating through all the foodItems:</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">OnInit</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">CORE_DIRECTIVES</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/common'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">RouteConfig</span><span class="p">,</span> <span class="nx">ROUTER_DIRECTIVES</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/router-deprecated'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">FoodDataService</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../../shared/services/food.dataService'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">FoodListDataService</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../../shared/services/foodList.dataService'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">FoodList</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../../models/FoodList'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">NeedsAuthentication</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../../decorators/needsAuthentication'</span><span class="p">;</span>

<span class="err">@</span><span class="nx">Component</span><span class="p">({</span>
<span class="err">   </span> <span class="na">selector</span><span class="p">:</span> <span class="s1">'foodlists-component'</span><span class="p">,</span>
<span class="err">   </span> <span class="na">directives</span><span class="p">:</span> <span class="p">[</span><span class="nx">ROUTER_DIRECTIVES</span><span class="p">,</span> <span class="nx">CORE_DIRECTIVES</span><span class="p">],</span>
<span class="err">   </span> <span class="na">template</span><span class="p">:</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./foodlists.component.html'</span><span class="p">)</span>
<span class="p">})</span>

<span class="err">@</span><span class="nx">NeedsAuthentication</span><span class="p">()</span>
<span class="k">export</span> <span class="kr">class</span> <span class="nx">FoodListComponent</span> <span class="k">implements</span> <span class="nx">OnInit</span> <span class="p">{</span>

    <span class="nl">allLists</span><span class="p">:</span> <span class="nx">FoodList</span><span class="p">[];</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">_foodListDataService</span><span class="err">:</span> <span class="nx">FoodListDataService</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">_foodListDataService</span><span class="p">.</span><span class="nx">foodListAdded</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">((</span><span class="nx">foodList</span><span class="err">:</span> <span class="nx">FoodList</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">getAllLists</span><span class="p">();</span>
        <span class="p">});</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nx">ngOnInit</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">getAllLists</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="nx">getAllLists</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_foodListDataService</span>
            <span class="p">.</span><span class="nx">GetAllLists</span><span class="p">()</span>
            <span class="p">.</span><span class="nx">subscribe</span><span class="p">((</span><span class="na">response</span><span class="p">:</span> <span class="nx">FoodList</span><span class="p">[])</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">allLists</span> <span class="o">=</span> <span class="nx">response</span><span class="p">;</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
            <span class="p">},</span> <span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">errorMessage</span> <span class="o">=</span> <span class="nx">error</span><span class="p">;</span>
            <span class="p">});</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>and the template</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="c">&lt;!-- Team Members Row --&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-lg-12"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;h2</span> <span class="na">class=</span><span class="s">"page-header"</span><span class="nt">&gt;</span>Your Lists  <span class="nt">&lt;small&gt;&lt;/small&gt;&lt;/h2&gt;</span>
    <span class="nt">&lt;/div&gt;</span>

    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-lg-12"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"list-group"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;a</span> <span class="err">*</span><span class="na">ngFor=</span><span class="s">"let item of allLists; let i=index"</span> <span class="err">[</span><span class="na">routerLink</span><span class="err">]="['/</span><span class="na">FoodListDetails</span><span class="err">',</span> <span class="err">{</span><span class="na">id:</span> <span class="na">item</span><span class="err">.</span><span class="na">Id</span><span class="err">}]"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"list-group-item"</span><span class="nt">&gt;&lt;/li&gt;</span>
            <span class="nt">&lt;/a&gt;</span>
        <span class="nt">&lt;/ul&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span></code></pre></figure>

<h3 id="authentication">Authentication</h3>

<p>The WebAPI is providing a token endpoint to get tokens from after the login process. I do use a “CurrentUserService” to save this token in the storage and read it again.</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">Injectable</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">StorageService</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'./storage.service'</span><span class="p">;</span>

<span class="err">@</span><span class="nx">Injectable</span><span class="p">()</span>
<span class="k">export</span> <span class="kr">class</span> <span class="nx">CurrentUserService</span> <span class="p">{</span>

<span class="err">   </span> <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">_storageService</span><span class="err">:</span> <span class="nx">StorageService</span><span class="p">)</span> <span class="p">{</span>

<span class="err">   </span> <span class="p">}</span>

<span class="err">   </span> <span class="k">public</span> <span class="nx">get</span> <span class="nx">token</span><span class="p">()</span><span class="err">:</span> <span class="kr">string</span> <span class="p">{</span>
<span class="err">       </span> <span class="kd">let</span> <span class="nx">token</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_storageService</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="s1">'auth'</span><span class="p">);</span>

<span class="err">       </span> <span class="k">return</span> <span class="nx">token</span><span class="p">;</span>
<span class="err">   </span> <span class="p">}</span>

<span class="err">   </span> <span class="k">public</span> <span class="nx">set</span> <span class="nx">token</span><span class="p">(</span><span class="nx">token</span><span class="err">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
<span class="err">       </span> <span class="k">this</span><span class="p">.</span><span class="nx">_storageService</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="s1">'auth'</span><span class="p">,</span> <span class="nx">token</span><span class="p">);</span>
<span class="err">   </span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>With this I can read if the user is authenticated in a very basic way.</p>

<p>Further I took a decorator to hook into the creation of components to check if the user is authenticated or not. If not the decorator will redirect to the login page:</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">import</span> <span class="p">{</span> <span class="nx">CanActivate</span><span class="p">,</span> <span class="nx">ComponentInstruction</span><span class="p">,</span> <span class="nx">Router</span><span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/router-deprecated'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Injector</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">appInjector</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../shared/services/appInjector'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">StorageService</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'../shared/services/storage.service'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">NeedsAuthentication</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="err">   </span> <span class="k">return</span> <span class="nx">CanActivate</span><span class="p">((</span><span class="na">to</span><span class="p">:</span> <span class="nx">ComponentInstruction</span><span class="p">,</span> <span class="na">from</span><span class="p">:</span> <span class="nx">ComponentInstruction</span><span class="p">,</span> <span class="nx">target</span> <span class="o">=</span> <span class="p">[</span><span class="s1">'/'</span><span class="p">])</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="err">       </span> <span class="kd">let</span> <span class="na">injector</span><span class="p">:</span> <span class="nx">Injector</span> <span class="o">=</span> <span class="nx">appInjector</span><span class="p">();</span>
<span class="err">       </span> <span class="kd">let</span> <span class="na">router</span><span class="p">:</span> <span class="nx">Router</span> <span class="o">=</span> <span class="nx">injector</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">Router</span><span class="p">);</span>
<span class="err">       </span> <span class="kd">let</span> <span class="na">storageService</span><span class="p">:</span> <span class="nx">StorageService</span> <span class="o">=</span> <span class="nx">injector</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">StorageService</span><span class="p">);</span>

<span class="err">       </span> <span class="k">if</span> <span class="p">(</span><span class="nx">storageService</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="s1">'auth'</span><span class="p">))</span> <span class="p">{</span>
<span class="err">           </span> <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
<span class="err">       </span> <span class="p">}</span>

<span class="err">       </span> <span class="nx">router</span><span class="p">.</span><span class="nx">navigate</span><span class="p">([</span><span class="s1">'/Login'</span><span class="p">,</span> <span class="p">{</span> <span class="nx">target</span> <span class="p">}]);</span>

<span class="err">       </span> <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
<span class="err">   </span> <span class="p">});</span>
<span class="p">}</span></code></pre></figure>

<p>With every request I have to prepare the header which I do in a wrapped Http service.</p>

<p><a href="https://github.com/FabianGosebrink/Foodchooser-ASPNET-Angular-Cross-Platform/blob/0903dd96b731416a6e2f96ab30f21456f1efd9a0/Client/app/core/services/httpWrapper.service.ts">https://github.com/FabianGosebrink/Foodchooser-ASPNET-Angular-Cross-Platform/blob/0903dd96b731416a6e2f96ab30f21456f1efd9a0/Client/app/core/services/httpWrapper.service.ts</a></p>

<p>Sneak peek:</p>

<figure class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="k">private</span> <span class="nx">prepareOptions</span><span class="p">(</span><span class="nx">options</span><span class="err">:</span> <span class="nx">RequestOptionsArgs</span><span class="p">)</span><span class="err">:</span> <span class="nx">RequestOptionsArgs</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">token</span><span class="err">:</span> <span class="kr">string</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_currentUserService</span><span class="p">.</span><span class="nx">token</span><span class="p">;</span>

    <span class="nx">options</span> <span class="o">=</span> <span class="nx">options</span> <span class="o">||</span> <span class="p">{};</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">options</span><span class="p">.</span><span class="nx">headers</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">options</span><span class="p">.</span><span class="nx">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Headers</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">token</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">options</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'Authorization'</span><span class="p">,</span> <span class="s1">'Bearer '</span> <span class="o">+</span> <span class="nx">token</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">options</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'Content-Type'</span><span class="p">,</span> <span class="s1">'application/json'</span><span class="p">);</span>
    <span class="nx">options</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'Accept'</span><span class="p">,</span> <span class="s1">'application/json'</span><span class="p">);</span>

    <span class="k">return</span> <span class="nx">options</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>So I check the headers, append a token if available, set the content-type and accept-properties and give the options back to use it in the REST-Call.</p>

<h3 id="cross-platform-with-gulp">Cross Platform with Gulp</h3>

<p>To give this whole thing a go as an exe and as an app on mobile devices I used cordova and electron with gulp as a taskrunner.</p>

<p>I seperated all the files in the tasks for “electron”, “cordova” and “web”. In the main gulp file I am just gathering all the information and point the default task only to list all available tasks to _not- start something the developer does not know when he only types “gulp” without a specific command.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">buildConfig</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./gulp.config'</span><span class="p">);</span>

<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">'default'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'help'</span><span class="p">]);</span>
<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">'help'</span><span class="p">,</span> <span class="nx">taskListing</span><span class="p">.</span><span class="nx">withFilters</span><span class="p">(</span><span class="sr">/-/</span><span class="p">));</span>

<span class="nx">require</span><span class="p">(</span><span class="s1">'./gulpTasks/web'</span><span class="p">);</span>
<span class="nx">require</span><span class="p">(</span><span class="s1">'./gulpTasks/electron'</span><span class="p">);</span>
<span class="nx">require</span><span class="p">(</span><span class="s1">'./gulpTasks/cordova'</span><span class="p">);</span>

<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">'build:all'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">runSeq</span><span class="p">(</span>
        <span class="s1">'build:web:prod'</span><span class="p">,</span>
        <span class="s1">'build:electron:prod'</span><span class="p">,</span>
        <span class="s1">'build:apps'</span><span class="p">,</span>
        <span class="nx">done</span><span class="p">);</span>
<span class="p">});</span></code></pre></figure>

<p>For example here is the electron gulp file, which turns this application into an exe</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">'build:electron:prod'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
<span class="err">   </span> <span class="nx">runSeq</span><span class="p">(</span>
<span class="err">       </span> <span class="s1">'electron-clean-temp'</span><span class="p">,</span>
<span class="err">       </span> <span class="s1">'electron-compile-with-webpack'</span><span class="p">,</span>
<span class="err">       </span> <span class="s1">'electron-copy-index-to-temp-folder'</span><span class="p">,</span>
<span class="err">       </span> <span class="s1">'electron-inject-in-html'</span><span class="p">,</span>
<span class="err">       </span> <span class="s1">'electron-copy-assets-to-temp-folder'</span><span class="p">,</span>
<span class="err">       </span> <span class="s1">'electron-build-win'</span><span class="p">,</span>
<span class="err">       </span> <span class="nx">done</span><span class="p">);</span>
<span class="p">});</span></code></pre></figure>

<p>For cordova</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">'build:apps'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
<span class="err">   </span> <span class="nx">runSeq</span><span class="p">(</span>
<span class="err">       </span> <span class="s1">'cordova-clean-temp'</span><span class="p">,</span>
<span class="err">       </span> <span class="s1">'cordova-copy-config-to-temp'</span><span class="p">,</span>
<span class="err">       </span> <span class="s1">'cordova-copy-winstore-to-temp'</span><span class="p">,</span>
<span class="err">       </span> <span class="s1">'cordova-copy-index-to-temp-folder'</span><span class="p">,</span>
<span class="err">       </span> <span class="s1">'cordova-copy-images-to-temp-folder'</span><span class="p">,</span>
<span class="err">       </span> <span class="s1">'cordova-compile-with-webpack'</span><span class="p">,</span>
<span class="err">       </span> <span class="s1">'cordova-inject-in-html'</span><span class="p">,</span>
<span class="err">       </span> <span class="s1">'cordova-build-windows'</span><span class="p">,</span>
<span class="err">       </span> <span class="c1">//  'cordova-build-android',</span>
<span class="err">       </span> <span class="s1">'cordova-clean-dist'</span><span class="p">,</span>
<span class="err">       </span> <span class="s1">'cordova-copy-to-dist'</span><span class="p">,</span>
<span class="err">       </span> <span class="nx">done</span><span class="p">);</span>
<span class="p">});</span></code></pre></figure>

<h3 id="conclusion">Conclusion:</h3>

<p>I hope with this blog posts I gave you an idea and an introduction in what you can achieve with javascript and ASP.NET WebAPI. Having all the tools like Cordova, gulp. you can build real cross-platform applications.</p>

<p>Hope you liked reading it as i liked making it :)</p>

<p>HTH</p>

<p>Regards</p>

<p>Fabian</p>

<h3 id="links">Links</h3>

<p><a href="http://blog.thoughtram.io/angular/2015/05/03/the-difference-between-annotations-and-decorators.html">http://blog.thoughtram.io/angular/2015/05/03/the-difference-between-annotations-and-decorators.html</a></p>

<p><a href="https://github.com/thinktecture/boardz-cross-platform-sample">https://github.com/thinktecture/boardz-cross-platform-sample</a></p>

<p><a href="https://www.xplatform.rocks/2016/02/14/angular2-and-electron-the-definitive-guide/">https://www.xplatform.rocks/2016/02/14/angular2-and-electron-the-definitive-guide/</a></p>

	  ]]></description>
	</item>

	<item>
	  <title>Angular, ASP.NET WebAPI, Azure & Cordova, Cross Platform – My Private Hackathon Part 1</title>
	  <link>//blog/articles/2016/04/19/angular-asp-net-webapi-azure-cordova-cross-platform-2/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2016-04-19T17:34:00+02:00</pubDate>
	  <guid>//blog/articles/2016/04/19/angular-asp-net-webapi-azure-cordova-cross-platform-2/</guid>
	  <description><![CDATA[
	     <p><img src="/assets/articles/wp-content/uploads/2016/04/foodchooser.jpg" alt="foodchooser" /></p>

<h3 id="motivation">Motivation</h3>

<p>I had a few free hours and was curious and wanted to know what you can achieve in 9 hours of coding. Due to the fact that I am very into ASP.NET development with Angular I coded a small application which is based on ASP.NET Web API, AngularJs/Angular2 with Typescript &amp; co. So the question is: How far will I go in 9 hours? This is my private Hackathon!!</p>

<h3 id="code">Code</h3>

<p><a href="https://github.com/FabianGosebrink/Foodchooser-ASPNET-Angular-Cross-Platform">https://github.com/FabianGosebrink/Foodchooser-ASPNET-Angular-Cross-Platform</a></p>

<h3 id="goal---the-foodchooser">Goal - The FoodChooser</h3>

<p>When I am not coding I love to stand in the kitchen but I do always have the problem of know knowing what I should cook. I know there are tons of cooking websites out there with a lot of inspiration but my problem is not getting a recipe for the meals but instead I got no idea what to search for. So my idea was to develop a small application where I can manage my food ideas without recipes. Because everybody is doing the meals the way they want to because every taste is different. However: A small application where I can manage my food should be the application I wanted to write: The FoodChooser</p>

<h3 id="backlog-for-first-version">Backlog for first Version</h3>

<p>So I wanted to make it basically usable for everyone. So I need a user account or a login for users. The users should add their food items, update and delete them. This is handled the best way in categories or lists. So the users should also create, add, update and delete those lists. The idea is getting random food immediately when getting onto the page without a user account. But every mentioned managing feature should only be available when logged in. But perhaps not every user wants his food items to be public. So users have to switch between publish and unpublishing their food. If you want to get random food only from a list of food items there should also be a button available for this. Because its your food and you don’t care about public or not: You just want to have a random item out of your food list.</p>

<p>In the end it should also be available for mobile devices. So I need a responsive design which concentrates on the things I need. Basic things. Because I am really not a UI-designer. ;-)</p>

<p>To keep a long story short:</p>

<ol>
  <li>Login/Logout</li>
  <li>CRUD: Food Items</li>
  <li>CRUD: Food Lists</li>
  <li>Getting random food from public foods</li>
  <li>Getting random food from a single list</li>
  <li>Un/Publishing food items</li>
  <li>Responsive and easy design also for mobile devices</li>
</ol>

<h3 id="technologies--tools">Technologies &amp; Tools</h3>

<p>The backlog mentioned above are leading to the technologies and tools I wanted to use to get a kick-start. Because ASP.NET 5 is not released yet I used WebAPI 2.2 for this. On client side I wanted to use Typescript with Angular and all tools which are connected to this. This whole thing should be hosted on azure in the end.</p>

<ol>
  <li>ASP.NET WebAPI with Bearer-Token-Identity and OWIN</li>
  <li>Typescript</li>
  <li>AngularJs and Angular2 Clients</li>
  <li>Automapper</li>
  <li>Bootstrap</li>
  <li>Azure</li>
</ol>

<p>My tools would be Visual Studio 2015 and Visual Studio Code.</p>

<p>So my timebox was 9 hours. Not a minute more. I know some of the technologies mentioned but not by 100%. Well, lets start coding and learning something!</p>

<h3 id="the-viewmodels">The (View)Models</h3>

<p>We have CRUD operations for food items, and food lists. And we are going to map them with Automapper. So we need ViewModels for every model.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">FoodItem</span>
<span class="p">{</span>
    <span class="p">[</span><span class="n">Key</span><span class="p">]</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">ItemName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="n">FoodList</span> <span class="n">FoodList</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">FoodListId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="n">DateTime</span> <span class="n">Created</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">bool</span> <span class="n">IsPublic</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">FoodList</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">UserId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="n">ICollection</span><span class="p">&lt;</span><span class="n">FoodItem</span><span class="p">&gt;</span> <span class="n">Foods</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">FoodItemViewModel</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">[</span><span class="n">Required</span><span class="p">]</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">ItemName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Rating</span><span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">FoodListId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="n">DateTime</span> <span class="n">Created</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">bool</span> <span class="n">IsPublic</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs">   
<span class="k">public</span> <span class="k">class</span> <span class="nc">FoodListViewModel</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">[</span><span class="n">Required</span><span class="p">]</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">UserId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="n">ICollection</span><span class="p">&lt;</span><span class="n">FoodItem</span><span class="p">&gt;</span> <span class="n">Foods</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>in the OWIN-Configuration we can go ahead and initialize the mappings:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"> 
<span class="n">Mapper</span><span class="p">.</span><span class="nf">Initialize</span><span class="p">(</span><span class="n">mapper</span> <span class="p">=&gt;</span>
<span class="p">{</span>
    <span class="n">mapper</span><span class="p">.</span><span class="n">CreateMap</span><span class="p">&lt;</span><span class="n">FoodItem</span><span class="p">,</span> <span class="n">FoodItemViewModel</span><span class="p">&gt;().</span><span class="nf">ReverseMap</span><span class="p">();</span>
    <span class="n">mapper</span><span class="p">.</span><span class="n">CreateMap</span><span class="p">&lt;</span><span class="n">FoodList</span><span class="p">,</span> <span class="n">FoodListViewModel</span><span class="p">&gt;().</span><span class="nf">ReverseMap</span><span class="p">();</span>
<span class="p">});</span></code></pre></figure>

<p>Of course you need to add Automapper to your project which I did via <a href="https://www.nuget.org/packages/AutoMapper/4.1.1">Nuget</a>.</p>

<h3 id="the-api">The API</h3>

<p>I mostly start coding server-side.</p>

<p>So the API has to handle FoodItems and FoodLists. Two Models, two controllers.
Beside the whole authorization features this is basically it. The API is quite small but I think it clarifies the principle.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs">   
<span class="na">[Authorize]</span>
<span class="na">[RoutePrefix("api")]</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">FoodsController</span> <span class="p">:</span> <span class="n">BaseController</span>
<span class="p">{</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">MaxPageSize</span> <span class="p">=</span> <span class="m">10</span><span class="p">;</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IFoodRepository</span> <span class="n">_foodRepository</span><span class="p">;</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IFoodListRepository</span> <span class="n">_foodListRepository</span><span class="p">;</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IRandomNumberGenerator</span> <span class="n">_randomNumberGenerator</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">FoodsController</span><span class="p">(</span><span class="n">IFoodRepository</span> <span class="n">foodRepository</span><span class="p">,</span> <span class="n">IFoodListRepository</span> <span class="n">foodListRepository</span><span class="p">,</span>
        <span class="n">IRandomNumberGenerator</span> <span class="n">randomNumberGenerator</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_foodRepository</span> <span class="p">=</span> <span class="n">foodRepository</span><span class="p">;</span>
        <span class="n">_foodListRepository</span> <span class="p">=</span> <span class="n">foodListRepository</span><span class="p">;</span>
        <span class="n">_randomNumberGenerator</span> <span class="p">=</span> <span class="n">randomNumberGenerator</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"foodlists/{id:int}/foods"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">GetFoodsFromList</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="n">FoodList</span> <span class="n">foodList</span> <span class="p">=</span> <span class="n">_foodListRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">,</span> <span class="s">"Foods"</span><span class="p">);</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">foodList</span><span class="p">.</span><span class="n">Foods</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">FoodItemViewModel</span><span class="p">&gt;(</span><span class="n">x</span><span class="p">)));</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">InternalServerError</span><span class="p">(</span><span class="n">exception</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"foodlists/{listId:int}/food/{foodItemId:int}"</span><span class="p">)]</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"foods/{foodItemId:int}"</span><span class="p">,</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">"GetSingleFood"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">GetSingleFood</span><span class="p">(</span><span class="kt">int</span> <span class="n">foodItemId</span><span class="p">,</span> <span class="kt">int</span><span class="p">?</span> <span class="n">listId</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="n">FoodItem</span> <span class="n">foodItem</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">listId</span><span class="p">.</span><span class="n">HasValue</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">foodItem</span> <span class="p">=</span> <span class="n">_foodRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">foodItemId</span> <span class="p">&amp;&amp;</span> <span class="n">x</span><span class="p">.</span><span class="n">FoodList</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">listId</span><span class="p">.</span><span class="n">Value</span><span class="p">,</span>
                    <span class="n">includeProperties</span><span class="p">:</span> <span class="s">"FoodList"</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="n">foodItem</span> <span class="p">=</span> <span class="n">_foodRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">foodItemId</span><span class="p">,</span> <span class="s">"FoodList"</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">foodItem</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">foodItem</span><span class="p">.</span><span class="n">FoodList</span> <span class="p">==</span> <span class="k">null</span> <span class="p">||</span> <span class="n">foodItem</span><span class="p">.</span><span class="n">FoodList</span><span class="p">.</span><span class="n">UserId</span> <span class="p">!=</span> <span class="n">CurrentUserId</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">(</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">Forbidden</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">FoodItemViewModel</span><span class="p">&gt;(</span><span class="n">foodItem</span><span class="p">));</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">InternalServerError</span><span class="p">(</span><span class="n">exception</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
    <span class="p">[</span><span class="n">AllowAnonymous</span><span class="p">]</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"foods/getrandomfood"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">GetRandomFood</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>

            <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">FoodItem</span><span class="p">&gt;</span> <span class="n">foodItems</span> <span class="p">=</span> <span class="n">_foodRepository</span><span class="p">.</span><span class="nf">GetAll</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">IsPublic</span><span class="p">,</span> <span class="n">includeProperties</span><span class="p">:</span> <span class="s">"FoodList"</span><span class="p">).</span><span class="nf">AsEnumerable</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">foodItems</span><span class="p">.</span><span class="nf">Any</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">FoodItem</span><span class="p">&gt;</span> <span class="n">enumerable</span> <span class="p">=</span> <span class="n">foodItems</span> <span class="k">as</span> <span class="n">IList</span><span class="p">&lt;</span><span class="n">FoodItem</span><span class="p">&gt;</span> <span class="p">??</span> <span class="n">foodItems</span><span class="p">.</span><span class="nf">ToList</span><span class="p">();</span>
            <span class="n">FoodItem</span> <span class="n">elementAt</span> <span class="p">=</span> <span class="n">enumerable</span><span class="p">.</span><span class="nf">ElementAt</span><span class="p">(</span><span class="n">_randomNumberGenerator</span><span class="p">.</span><span class="nf">GetRandomNumber</span><span class="p">(</span><span class="n">enumerable</span><span class="p">.</span><span class="nf">Count</span><span class="p">()));</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">elementAt</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">FoodItemViewModel</span><span class="p">&gt;(</span><span class="n">elementAt</span><span class="p">));</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">InternalServerError</span><span class="p">(</span><span class="n">exception</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"foods"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">AddFoodToList</span><span class="p">([</span><span class="n">FromBody</span><span class="p">]</span><span class="n">FoodItemViewModel</span> <span class="n">viewModel</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">viewModel</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">ModelState</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">FoodList</span> <span class="n">singleFoodList</span> <span class="p">=</span> <span class="n">_foodListRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">FoodListId</span><span class="p">,</span> <span class="s">"Foods"</span><span class="p">);</span>
            <span class="n">FoodItem</span> <span class="n">item</span> <span class="p">=</span> <span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">FoodItem</span><span class="p">&gt;(</span><span class="n">viewModel</span><span class="p">);</span>
            <span class="n">item</span><span class="p">.</span><span class="n">Created</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
            <span class="n">singleFoodList</span><span class="p">.</span><span class="n">Foods</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">item</span><span class="p">);</span>
            <span class="n">_foodListRepository</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="n">singleFoodList</span><span class="p">);</span>

            <span class="kt">int</span> <span class="n">save</span> <span class="p">=</span> <span class="n">_foodListRepository</span><span class="p">.</span><span class="nf">Save</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">save</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">CreatedAtRoute</span><span class="p">(</span><span class="s">"GetSingleFood"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">foodItemId</span> <span class="p">=</span> <span class="n">item</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">FoodItemViewModel</span><span class="p">&gt;(</span><span class="n">item</span><span class="p">));</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">InternalServerError</span><span class="p">(</span><span class="n">exception</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">HttpPut</span><span class="p">]</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"foods/{foodItemId:int}"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">UpdateFoodInList</span><span class="p">(</span><span class="kt">int</span> <span class="n">foodItemId</span><span class="p">,</span> <span class="p">[</span><span class="n">FromBody</span><span class="p">]</span><span class="n">FoodItemViewModel</span> <span class="n">viewModel</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">viewModel</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">ModelState</span><span class="p">);</span>
            <span class="p">}</span>


            <span class="n">FoodItem</span> <span class="n">singleById</span> <span class="p">=</span> <span class="n">_foodRepository</span><span class="p">.</span><span class="nf">GetSingleById</span><span class="p">(</span><span class="n">foodItemId</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">singleById</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">singleById</span><span class="p">.</span><span class="n">ItemName</span> <span class="p">=</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">ItemName</span><span class="p">;</span>
            <span class="n">singleById</span><span class="p">.</span><span class="n">IsPublic</span> <span class="p">=</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">IsPublic</span><span class="p">;</span>

            <span class="n">_foodRepository</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="n">singleById</span><span class="p">);</span>
            <span class="kt">int</span> <span class="n">save</span> <span class="p">=</span> <span class="n">_foodRepository</span><span class="p">.</span><span class="nf">Save</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">save</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">FoodItemViewModel</span><span class="p">&gt;(</span><span class="n">singleById</span><span class="p">));</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">InternalServerError</span><span class="p">(</span><span class="n">exception</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">HttpDelete</span><span class="p">]</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"foods/{foodItemId:int}"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">DeleteFoodFromList</span><span class="p">(</span><span class="kt">int</span> <span class="n">foodItemId</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="n">FoodItem</span> <span class="n">singleById</span> <span class="p">=</span> <span class="n">_foodRepository</span><span class="p">.</span><span class="nf">GetSingleById</span><span class="p">(</span><span class="n">foodItemId</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">singleById</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_foodRepository</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="n">foodItemId</span><span class="p">);</span>
            <span class="kt">int</span> <span class="n">save</span> <span class="p">=</span> <span class="n">_foodRepository</span><span class="p">.</span><span class="nf">Save</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">save</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">(</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">NoContent</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">InternalServerError</span><span class="p">(</span><span class="n">exception</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h3 id="foodlistcontroller">FoodListController:</h3>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs">   
<span class="na">[Authorize]</span>
<span class="na">[RoutePrefix("api")]</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">FoodListsController</span> <span class="p">:</span> <span class="n">BaseController</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IFoodListRepository</span> <span class="n">_foodListRepository</span><span class="p">;</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">MaxPageSize</span> <span class="p">=</span> <span class="m">10</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">FoodListsController</span><span class="p">(</span><span class="n">IFoodListRepository</span> <span class="n">foodListRepository</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_foodListRepository</span> <span class="p">=</span> <span class="n">foodListRepository</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"foodlists"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">GetAllLists</span><span class="p">(</span><span class="kt">int</span> <span class="n">page</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pageSize</span> <span class="p">=</span> <span class="n">MaxPageSize</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">pageSize</span> <span class="p">&gt;</span> <span class="n">MaxPageSize</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">pageSize</span> <span class="p">=</span> <span class="n">MaxPageSize</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">FoodList</span><span class="p">&gt;</span> <span class="n">foodLists</span> <span class="p">=</span> <span class="n">_foodListRepository</span>
                <span class="p">.</span><span class="nf">GetAll</span><span class="p">()</span>
                <span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">UserId</span> <span class="p">==</span> <span class="n">CurrentUserId</span><span class="p">);</span>

            <span class="kt">var</span> <span class="n">paginationHeader</span> <span class="p">=</span> <span class="k">new</span>
            <span class="p">{</span>
                <span class="n">totalCount</span> <span class="p">=</span> <span class="n">foodLists</span><span class="p">.</span><span class="nf">Count</span><span class="p">()</span>
                <span class="c1">// Add more headers here if you want...
</span>                <span class="c1">// Link to next and previous page etc.
</span>                <span class="c1">// Also see OData-Options for this
</span>            <span class="p">};</span>

            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">foodLists</span>
                <span class="p">.</span><span class="nf">OrderBy</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">Skip</span><span class="p">(</span><span class="n">pageSize</span> <span class="p">*</span> <span class="p">(</span><span class="n">page</span> <span class="p">-</span> <span class="m">1</span><span class="p">))</span>
                <span class="p">.</span><span class="nf">Take</span><span class="p">(</span><span class="n">pageSize</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">ToList</span><span class="p">();</span>

            <span class="n">HttpContext</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="nf">AppendHeader</span><span class="p">(</span><span class="s">"X-Pagination"</span><span class="p">,</span> <span class="n">JsonConvert</span><span class="p">.</span><span class="nf">SerializeObject</span><span class="p">(</span><span class="n">paginationHeader</span><span class="p">));</span>

            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">FoodListViewModel</span><span class="p">&gt;(</span><span class="n">x</span><span class="p">)));</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">InternalServerError</span><span class="p">(</span><span class="n">exception</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"foodlists/{id:int}"</span><span class="p">,</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">"GetSingleList"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">GetSingleList</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="n">FoodList</span> <span class="n">singleFoodList</span> <span class="p">=</span> <span class="n">_foodListRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">singleFoodList</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">singleFoodList</span><span class="p">.</span><span class="n">UserId</span> <span class="p">!=</span> <span class="n">CurrentUserId</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">(</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">Forbidden</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">FoodListViewModel</span><span class="p">&gt;(</span><span class="n">singleFoodList</span><span class="p">));</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">InternalServerError</span><span class="p">(</span><span class="n">exception</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"foodlists"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">AddList</span><span class="p">([</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">FoodListViewModel</span> <span class="n">viewModel</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">viewModel</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">ModelState</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">FoodList</span> <span class="n">item</span> <span class="p">=</span> <span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">FoodList</span><span class="p">&gt;(</span><span class="n">viewModel</span><span class="p">);</span>
            <span class="n">item</span><span class="p">.</span><span class="n">UserId</span> <span class="p">=</span> <span class="n">CurrentUserId</span><span class="p">;</span>
            <span class="n">_foodListRepository</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">item</span><span class="p">);</span>
            <span class="kt">int</span> <span class="n">save</span> <span class="p">=</span> <span class="n">_foodListRepository</span><span class="p">.</span><span class="nf">Save</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">save</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">CreatedAtRoute</span><span class="p">(</span><span class="s">"GetSingleList"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">item</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">item</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">InternalServerError</span><span class="p">(</span><span class="n">exception</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">HttpDelete</span><span class="p">]</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"foodlists/{id:int}"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">DeleteList</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="n">FoodList</span> <span class="n">singleFoodList</span> <span class="p">=</span> <span class="n">_foodListRepository</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">,</span> <span class="s">"Foods"</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">singleFoodList</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">singleFoodList</span><span class="p">.</span><span class="n">UserId</span> <span class="p">!=</span> <span class="n">CurrentUserId</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">(</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">Forbidden</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">_foodListRepository</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="n">singleFoodList</span><span class="p">);</span>
            <span class="kt">int</span> <span class="n">save</span> <span class="p">=</span> <span class="n">_foodListRepository</span><span class="p">.</span><span class="nf">Save</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">save</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">(</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">NoContent</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">InternalServerError</span><span class="p">(</span><span class="n">exception</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Next we will do the clients</p>

<h3 id="the-clients">The Clients</h3>

<p>Concerning the clients I was torn between Angular 1.x with Typescript in Visual Studio and Angular 2. Because I could not make a descision whats better I made both. (You can find them in two different approaches in two different GitHub Repositories)</p>

<p>The first approach was the Visual Studio approach with making everything inside VS to be able to make this “right-click –&gt; Publish”-thing in the end.</p>

<p>The advantage of this is that you can maintain everything from VS like the API, the client code etc. But with this approach you do not have the sexy client- and serverside code separated. We are developing a RESTApi to develop client and server separate. You can handle the client like you want and modify it without touching the server. This is why I tried Angular2 in the second approach making a “client” and “server” folder where the client contains all *.ts, *.js and other files and the server contains (the same) REST API we build.</p>

<blockquote>
  <p>The GitHub repos are both full functional examples with these different approaches. Choose the one you want. Both do not rely on each other.</p>
</blockquote>

<p>So we are building two clients. At this point I could not go for 9 hours anymore, so I build up one client during these 9 hours of coding and build the other one afterwards. Because it’s fun :)</p>

<p>I will describe the clients in other blog posts after this one…</p>

	  ]]></description>
	</item>

	<item>
	  <title>Get started with ASP.NET Core and Entity Framework 6</title>
	  <link>//blog/articles/2015/12/13/get-started-with-asp-net-core-and-entity-framework-6/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2015-12-13T20:20:00+01:00</pubDate>
	  <guid>//blog/articles/2015/12/13/get-started-with-asp-net-core-and-entity-framework-6/</guid>
	  <description><![CDATA[
	     <p>Hey,</p>

<p>today I want to show you how to get started with ASP.NET 5 and Entity Framework 6.</p>

<p>If you start with the new templates for ASP.NET 5 you will notice in a short time that examples are going the EF 7 way. But if you want to stay at Entity Framework 6 as long as 7 is not in a final release or just to move from an older version step by step you can follow this instructions here. In this blog post I want to show you how to include a database with a connectionstring saved in a json file with the new ASP.NET Core.</p>

<blockquote>
  <p>Note: At the time of this post ASP.NET was at RC1 status. There might be changes until its completely an final released. However: If you want to dive into new functionalities: Keep reading.</p>
</blockquote>

<h2 id="get-started-with-aspnet-core-and-entity-framework-6-">Get started with ASP.NET Core and Entity Framework 6 :</h2>

<p>First of all you need to start an new project with the new ASP.NET like this:</p>

<p><img src="/assets/articles/wp-content/uploads/2015/12/Ef6Example.jpg" alt="Ef6Example" /></p>

<p>This will create you a new nearly empty solution following the new standards with all configs in *.json files and so on.</p>

<blockquote>
  <p>This example is only made fot the full version of the .net-Framework. So the core version will not be supported with this example.</p>
</blockquote>

<p>The first step we a re going to do is adding the dependency of the Entity Framework to our solution via the project.json file. For this only put the line</p>

<p><code class="highlighter-rouge">"EntityFramework": "6.1.3"</code></p>

<p>at the end of you dependencies section like this:</p>

<p><img src="/assets/articles/wp-content/uploads/2015/12/Ef6Example_02.jpg" alt="Ef6Example_02" /></p>

<p>This will get Visual Studio 2015 to update your dependencies including the Entity Framework.</p>

<p>Now you can create a new class named like your Context. in this case this will be “MyEf6EntityFrameworkContext”.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/12/Ef6Example_03.jpg" alt="Ef6Example_03" /></p>

<p>Be sure to use the “base”-functionality, because we will need it when passing the connectionstring to the context reading it out of the *.json file.</p>

<p>Back in our Startup.cs-File we are including a file called “appsettings.json”. Lets go and add our Connectionstring to this file:</p>

<p><img src="/assets/articles/wp-content/uploads/2015/12/Ef6Example_04.jpg" alt="Ef6Example_04" /></p>

<p>This should look quite familiar because of the connectionstring you knew from the web.config in the previous asp.net-versions.</p>

<h2 id="what-we-did-so-far">What we did so far:</h2>

<p>At this point we added the connectionstring to the config file we will consume in the startup.cs and we created a databasecontext like we know it which will provide us any data in the future.</p>

<h2 id="go-ahead">Go ahead!</h2>

<p>Next thing we have to do is getting the config and our databasecontext married :-)</p>

<p>This can be done putting a single line in our “Startup.cs”-File.</p>

<p>Just add</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="n">services</span><span class="p">.</span><span class="n">AddScoped</span><span class="p">&lt;</span><span class="n">MyEf6EntityFrameworkContext</span><span class="p">&gt;((</span><span class="n">s</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">MyEf6EntityFrameworkContext</span><span class="p">(</span><span class="n">Configuration</span><span class="p">[</span><span class="s">"Data:Ef6ExampleConnectionString"</span><span class="p">]));</span></code></pre></figure>

<p>in the method “ConfigureServices” in your Startup.cs.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Add framework services.
</span>    <span class="n">services</span><span class="p">.</span><span class="nf">AddMvc</span><span class="p">();</span>
    <span class="n">services</span><span class="p">.</span><span class="n">AddScoped</span><span class="p">&lt;</span><span class="n">MyEf6EntityFrameworkContext</span><span class="p">&gt;((</span><span class="n">s</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">MyEf6EntityFrameworkContext</span><span class="p">(</span><span class="n">Configuration</span><span class="p">[</span><span class="s">"Data:Ef6ExampleConnectionString"</span><span class="p">]));</span>
<span class="p">}</span></code></pre></figure>

<p>This line will read the configuration and get the connection-string out of it and use it for establishing the connection. pay attention to the scoped adding. This is because the context should be generated for every single request. You can grab an overview of all lifestyles here, even it’s a bit outdated: <a href="http://blogs.msdn.com/b/webdev/archive/2014/06/17/dependency-injection-in-asp-net-vnext.aspx">Dependency Injection in ASP.NET vNext</a></p>

<h2 id="the-model">The Model</h2>

<p>You can now go ahead and install my <a href="https://github.com/OfferingSolutions/OfferingSolutions-RepositoryPattern-UnitOfWork">Unit of Work</a> via nuget and create a repository like this:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">interface</span> <span class="n">IExampleRepository</span> <span class="p">:</span> <span class="n">IRepositoryContext</span><span class="p">&lt;</span><span class="n">MyModel</span><span class="p">&gt;</span>
    <span class="p">{</span>
    <span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">ExampleRepository</span> <span class="p">:</span> <span class="n">RepositoryContextImpl</span><span class="p">&lt;</span><span class="n">MyModel</span><span class="p">&gt;,</span> <span class="n">IExampleRepository</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nf">ExampleRepository</span><span class="p">(</span><span class="n">MyEf6EntityFrameworkContext</span> <span class="n">databaseContext</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">databaseContext</span><span class="p">)</span>
    <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>With a model like this (for example):</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">MyModel</span>
    <span class="p">{</span>
        <span class="p">[</span><span class="n">Key</span><span class="p">]</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span></code></pre></figure>

<p>Meanwhile I also added <a href="https://github.com/AutoMapper/AutoMapper/wiki/Getting-started">Automappers</a> and a ViewModel to map between those two:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">MyModelViewModel</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">[</span><span class="n">Required</span><span class="p">]</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Now we have to bring it to the build in DI in ASP.NET:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Add framework services.
</span>    <span class="n">services</span><span class="p">.</span><span class="nf">AddMvc</span><span class="p">();</span>
    <span class="n">services</span><span class="p">.</span><span class="n">AddScoped</span><span class="p">&lt;</span><span class="n">IExampleRepository</span><span class="p">,</span> <span class="n">ExampleRepository</span><span class="p">&gt;();</span>
    <span class="n">services</span><span class="p">.</span><span class="n">AddScoped</span><span class="p">&lt;</span><span class="n">MyEf6EntityFrameworkContext</span><span class="p">&gt;((</span><span class="n">s</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">MyEf6EntityFrameworkContext</span><span class="p">(</span><span class="n">Configuration</span><span class="p">[</span><span class="s">"Data:Ef6ExampleConnectionString"</span><span class="p">]));</span>
<span class="p">}</span></code></pre></figure>

<p>and the automapping:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">void</span> <span class="nf">Configure</span><span class="p">(</span><span class="n">IApplicationBuilder</span> <span class="n">app</span><span class="p">,</span> <span class="n">IHostingEnvironment</span> <span class="n">env</span><span class="p">,</span> <span class="n">ILoggerFactory</span> <span class="n">loggerFactory</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Mapper</span><span class="p">.</span><span class="nf">Initialize</span><span class="p">(</span><span class="n">config</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
        <span class="n">config</span><span class="p">.</span><span class="n">CreateMap</span><span class="p">&lt;</span><span class="n">MyModel</span><span class="p">,</span> <span class="n">MyModelViewModel</span><span class="p">&gt;().</span><span class="nf">ReverseMap</span><span class="p">();</span>
    <span class="p">});</span>

    <span class="c1">//...
</span><span class="p">}</span></code></pre></figure>

<p>In the end you only have to build up a controller which gives and takes the values as your API:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="na">[Route("api/[controller]</span><span class="s">")]
</span><span class="k">public</span> <span class="k">class</span> <span class="nc">MyModelController</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IExampleRepository</span> <span class="n">_exampleRepository</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">MyModelController</span><span class="p">(</span><span class="n">IExampleRepository</span> <span class="n">exampleRepository</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_exampleRepository</span> <span class="p">=</span> <span class="n">exampleRepository</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// GET: api/mymodel
</span>    <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">""</span><span class="p">,</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">"GetAll"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Get</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="n">List</span><span class="p">&lt;</span><span class="n">MyModel</span><span class="p">&gt;</span> <span class="n">MyModels</span> <span class="p">=</span> <span class="n">_exampleRepository</span><span class="p">.</span><span class="nf">GetAll</span><span class="p">().</span><span class="nf">ToList</span><span class="p">();</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">JsonResult</span><span class="p">(</span><span class="n">MyModels</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">MyModelViewModel</span><span class="p">&gt;(</span><span class="n">x</span><span class="p">)));</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//Do something with the exception
</span>            <span class="k">return</span> <span class="k">new</span> <span class="nf">HttpStatusCodeResult</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">InternalServerError</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// GET api/values/5
</span>    <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">,</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">"GetSingle"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Get</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="n">MyModel</span> <span class="n">MyModel</span> <span class="p">=</span> <span class="n">_exampleRepository</span><span class="p">.</span><span class="nf">GetSingleById</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">MyModel</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nf">HttpNotFoundResult</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="k">new</span> <span class="nf">HttpOkObjectResult</span><span class="p">(</span><span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">MyModelViewModel</span><span class="p">&gt;(</span><span class="n">MyModel</span><span class="p">));</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//Do something with the exception
</span>            <span class="k">return</span> <span class="k">new</span> <span class="nf">HttpStatusCodeResult</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">InternalServerError</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// POST api/values
</span>    <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
    <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Post</span><span class="p">([</span><span class="n">FromBody</span><span class="p">]</span><span class="n">MyModelViewModel</span> <span class="n">viewModel</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">viewModel</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nf">BadRequestResult</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">MyModel</span> <span class="n">item</span> <span class="p">=</span> <span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">MyModel</span><span class="p">&gt;(</span><span class="n">viewModel</span><span class="p">);</span>

            <span class="n">_exampleRepository</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">item</span><span class="p">);</span>
            <span class="kt">int</span> <span class="n">save</span> <span class="p">=</span> <span class="n">_exampleRepository</span><span class="p">.</span><span class="nf">Save</span><span class="p">();</span>

            <span class="k">return</span> <span class="k">new</span> <span class="nf">CreatedAtRouteResult</span><span class="p">(</span><span class="s">"GetSingle"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">controller</span> <span class="p">=</span> <span class="s">"MyModel"</span><span class="p">,</span> <span class="n">id</span> <span class="p">=</span> <span class="n">item</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">item</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//Do something with the exception
</span>            <span class="k">return</span> <span class="k">new</span> <span class="nf">HttpStatusCodeResult</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">InternalServerError</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// PUT api/values/5
</span>    <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Put</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="p">[</span><span class="n">FromBody</span><span class="p">]</span><span class="n">MyModelViewModel</span> <span class="n">viewModel</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">viewModel</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nf">BadRequestResult</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">MyModel</span> <span class="n">singleById</span> <span class="p">=</span> <span class="n">_exampleRepository</span><span class="p">.</span><span class="nf">GetSingleById</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">singleById</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nf">HttpNotFoundResult</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">singleById</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">Name</span><span class="p">;</span>

            <span class="n">_exampleRepository</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="n">singleById</span><span class="p">);</span>
            <span class="kt">int</span> <span class="n">save</span> <span class="p">=</span> <span class="n">_exampleRepository</span><span class="p">.</span><span class="nf">Save</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">save</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nf">HttpOkObjectResult</span><span class="p">(</span><span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">MyModelViewModel</span><span class="p">&gt;(</span><span class="n">singleById</span><span class="p">));</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="k">new</span> <span class="nf">BadRequestResult</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//Do something with the exception
</span>            <span class="k">return</span> <span class="k">new</span> <span class="nf">HttpStatusCodeResult</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">InternalServerError</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// DELETE api/values/5
</span>    <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Delete</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="n">MyModel</span> <span class="n">singleById</span> <span class="p">=</span> <span class="n">_exampleRepository</span><span class="p">.</span><span class="nf">GetSingleById</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">singleById</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nf">HttpNotFoundResult</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_exampleRepository</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="kt">int</span> <span class="n">save</span> <span class="p">=</span> <span class="n">_exampleRepository</span><span class="p">.</span><span class="nf">Save</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">save</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nf">NoContentResult</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="k">new</span> <span class="nf">BadRequestResult</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//Do something with the exception
</span>            <span class="k">return</span> <span class="k">new</span> <span class="nf">HttpStatusCodeResult</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">InternalServerError</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Thats it. If you now going to use the DatabaseContext it will create the database for you with the new ASP.NET 5 RC1.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/12/Ef6Example_05.jpg" alt="Ef6Example_05" /></p>

<p>You can now go ahead and add an item with e.g. postman:</p>

<p><img src="/assets/articles/wp-content/uploads/2015/12/Ef6Example_06.jpg" alt="Ef6Example_06" /></p>

<p>and it will be stored in the database:</p>

<p><a href="https://github.com/FabianGosebrink/Asp.Net5WithEntityFramework6">Github</a></p>

<p>Hope this helps</p>

<p>Regards</p>

<p>Fabian</p>

	  ]]></description>
	</item>

	<item>
	  <title>WebAPI with ASP.NET Core 1.0 and ASP.NET</title>
	  <link>//blog/articles/2015/09/02/webapi-with-asp-net-core-1-0-and-asp-net/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2015-09-02T17:04:00+02:00</pubDate>
	  <guid>//blog/articles/2015/09/02/webapi-with-asp-net-core-1-0-and-asp-net/</guid>
	  <description><![CDATA[
	     <p>I just released two sample APIs on Github: WebAPI with ASP.NET Core 1.0 and ASP.NET</p>

<p>One of them is done with the “old” approach but heads in the direction of my understanding of a modern WebAPI using OData and having DTOs instead of delivering the plain entitites down to the client.</p>

<p>I will cover the most important information now:</p>

<p>The get method includes odata and is restricting the page-size to 50 to prevent anyone from getting <em>all</em> entries which can cause problems. I also added a paginationheader to enable paging and give the information included in the header “X-Pagination” value. Here you can add more stuff like link to the next page, link ot the previous page etc.</p>

<p>I am also using mapper to get a DataTransferObject (DTO) to send it to the client instead of my plain “entity”.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="na">[HttpGet]</span>
<span class="na">[EnableQuery(PageSize = 50)]</span>
<span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">Get</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">paginationHeader</span> <span class="p">=</span> <span class="k">new</span>
    <span class="p">{</span>
        <span class="n">totalCount</span> <span class="p">=</span> <span class="n">Singleton</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">Houses</span><span class="p">.</span><span class="n">Count</span>
        <span class="c1">// Add more headers here if you want...
</span>    <span class="p">};</span>

    <span class="n">HttpContext</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="nf">AppendHeader</span><span class="p">(</span><span class="s">"X-Pagination"</span><span class="p">,</span> <span class="n">JsonConvert</span><span class="p">.</span><span class="nf">SerializeObject</span><span class="p">(</span><span class="n">paginationHeader</span><span class="p">));</span>

    <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">Singleton</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">Houses</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">_houseMapper</span><span class="p">.</span><span class="nf">MapToDto</span><span class="p">(</span><span class="n">x</span><span class="p">)));</span>
<span class="p">}</span></code></pre></figure>

<p>The only important thing to mention about the Create-Method is that we are returning a CreatedAtRoute-Actionresult. This causes, that we have a link to the created resource in the header so we can either redirect on the client directly to it, provide the link to the user or work with it in another way.
Also take care about sending back the Modelstate in case of an invalid dto.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="na">[HttpPost]</span>
<span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">Create</span><span class="p">([</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">HouseDto</span> <span class="n">houseDto</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">houseDto</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(!</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">ModelState</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">HouseEntity</span> <span class="n">houseEntity</span> <span class="p">=</span> <span class="n">_houseMapper</span><span class="p">.</span><span class="nf">MapToEntity</span><span class="p">(</span><span class="n">houseDto</span><span class="p">);</span>

    <span class="n">Singleton</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">Houses</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">houseEntity</span><span class="p">);</span>

    <span class="k">return</span> <span class="nf">CreatedAtRoute</span><span class="p">(</span><span class="s">"DefaultApi"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">houseEntity</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">_houseMapper</span><span class="p">.</span><span class="nf">MapToDto</span><span class="p">(</span><span class="n">houseEntity</span><span class="p">));</span>
<span class="p">}</span></code></pre></figure>

<p>Mostly forgotten: The Http-Patch-Verb. Its receiving a generic Delta-Object which can be applied to an existing entity and then can be updated.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="na">[HttpPatch]</span>
<span class="na">[Route("{id:int}")]</span>
<span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">Patch</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Delta</span><span class="p">&lt;</span><span class="n">HouseDto</span><span class="p">&gt;</span> <span class="n">houseDto</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">houseDto</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(!</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">ModelState</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">HouseEntity</span> <span class="n">houseEntityToUpdate</span> <span class="p">=</span> <span class="n">Singleton</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">Houses</span><span class="p">.</span><span class="nf">FirstOrDefault</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">houseEntityToUpdate</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="n">HouseDto</span> <span class="n">existingHouse</span> <span class="p">=</span> <span class="n">_houseMapper</span><span class="p">.</span><span class="nf">MapToDto</span><span class="p">(</span><span class="n">houseEntityToUpdate</span><span class="p">);</span>
    <span class="n">houseDto</span><span class="p">.</span><span class="nf">Patch</span><span class="p">(</span><span class="n">existingHouse</span><span class="p">);</span>

    <span class="kt">int</span> <span class="n">index</span> <span class="p">=</span> <span class="n">Singleton</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">Houses</span><span class="p">.</span><span class="nf">FindIndex</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">);</span>
    <span class="n">Singleton</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">Houses</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="p">=</span> <span class="n">_houseMapper</span><span class="p">.</span><span class="nf">MapToEntity</span><span class="p">(</span><span class="n">existingHouse</span><span class="p">);</span>

    <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">existingHouse</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>And last but not least the delete-method. See the fact that one has to return a nocontent (204) which tells the client that the delete was successful.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="na">[HttpDelete]</span>
<span class="na">[Route("{id:int}")]</span>
<span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">Delete</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">HouseEntity</span> <span class="n">houseEntityToDelete</span> <span class="p">=</span> <span class="n">Singleton</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">Houses</span><span class="p">.</span><span class="nf">FirstOrDefault</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">houseEntityToDelete</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="n">Singleton</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">Houses</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">houseEntityToDelete</span><span class="p">);</span>

    <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">(</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">NoContent</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>You can find it here:</p>

<p><a href="https://github.com/FabianGosebrink/ASPNET-WebAPI-Sample">https://github.com/FabianGosebrink/ASPNET-WebAPI-Sample</a></p>

<p>It supports the GET/POST/PUT/PATCH/DELETE, so the normal CRUD-Approach. OData is included.</p>

<p>The ASP.NET Core-approach is present in another repository.
<a href="https://github.com/FabianGosebrink/ASPNET-Core-WebAPI-Sample">https://github.com/FabianGosebrink/ASPNET-Core-WebAPI-Sample</a></p>

<p>Comment if you have suggestions to make these examples better! Let me know.</p>

<p>HTH</p>

<p>Fabian</p>

	  ]]></description>
	</item>

	<item>
	  <title>AngularJS NgResource Demo with ASP.NET WebAPI</title>
	  <link>//blog/articles/2015/08/25/angularjs-ngresource-demo-with-asp-net-webapi/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2015-08-25T11:45:00+02:00</pubDate>
	  <guid>//blog/articles/2015/08/25/angularjs-ngresource-demo-with-asp-net-webapi/</guid>
	  <description><![CDATA[
	     <p>In this blogpost I want to show a simple AngularJS NgResource Demo with ASP.NET WebAPI querying data as JSON.</p>

<p>Code: <a href="https://github.com/FabianGosebrink/ASPNET-WebAPI-AngularJs-NgResource-Demo">https://github.com/FabianGosebrink/ASPNET-WebAPI-AngularJs-NgResource-Demo</a></p>

<p>NgResource: <a href="https://docs.AngularJS.org/api/ngResource/service/$resource">https://docs.AngularJS.org/api/ngResource/service/$resource</a></p>

<h4 id="the-application">The application</h4>

<p>The application follows the “normal” way of seperating the data access also on client side into services.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/08/folders.png" alt="AngularJS NgResource Demo with ASP.NET WebAPI" /></p>

<h4 id="preparation">Preparation:</h4>

<p>Before you can use angulars ng resource you have to include it into your application like this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="s2">"use strict"</span><span class="p">;</span>
    <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'AngularJSDemoApp'</span><span class="p">,</span>
    <span class="p">[</span>
        <span class="s1">'ngRoute'</span><span class="p">,</span>
        <span class="s1">'ngAnimate'</span><span class="p">,</span>
        <span class="s1">'ngResource'</span><span class="p">,</span>
        <span class="s2">"ui.bootstrap"</span><span class="p">,</span>
        <span class="s1">'angular-loading-bar'</span><span class="p">,</span>
        <span class="s2">"toastr"</span><span class="p">,</span>

        <span class="s1">'home.homeModule'</span><span class="p">,</span>
        <span class="s1">'contact.contactModule'</span>
    <span class="p">]).</span><span class="nx">config</span><span class="p">([</span><span class="s1">'cfpLoadingBarProvider'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">cfpLoadingBarProvider</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">cfpLoadingBarProvider</span><span class="p">.</span><span class="nx">includeSpinner</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}]);</span>
<span class="p">}());</span></code></pre></figure>

<p>So here you are providing “ngResource” to your app.</p>

<p>After this you can inject the ngResource service provided by angular into your services:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="s2">"use strict"</span><span class="p">;</span>
    <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'home.homeModule'</span><span class="p">).</span><span class="nx">factory</span><span class="p">(</span><span class="s2">"home.services.peopleService"</span><span class="p">,</span>
        <span class="p">[</span>
            <span class="s2">"$resource"</span><span class="p">,</span> 
            <span class="kd">function</span> <span class="p">(</span><span class="nx">$resource</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nx">$resource</span><span class="p">(</span><span class="s2">"api/home/:id"</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span>
                <span class="p">{</span>
                    <span class="s1">'update'</span><span class="p">:</span> <span class="p">{</span>
                        <span class="na">method</span><span class="p">:</span> <span class="s1">'PUT'</span>
                    <span class="p">}</span>
                <span class="p">});</span>
            <span class="p">}</span>
        <span class="p">]);</span>
<span class="p">}());</span></code></pre></figure>

<p>The first argument you pass in is the url with the optional id (:id). The ng resource service now can call get create and delete methods ist a rest convenient way.</p>

<p>ngresource is providing you the following methods:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span> 
  <span class="s1">'get'</span><span class="err">:</span>    <span class="p">{</span><span class="nl">method</span><span class="p">:</span><span class="s1">'GET'</span><span class="p">},</span>
  <span class="s1">'save'</span><span class="err">:</span>   <span class="p">{</span><span class="nl">method</span><span class="p">:</span><span class="s1">'POST'</span><span class="p">},</span>
  <span class="s1">'query'</span><span class="err">:</span>  <span class="p">{</span><span class="nl">method</span><span class="p">:</span><span class="s1">'GET'</span><span class="p">,</span> <span class="nx">isArray</span><span class="err">:</span><span class="kc">true</span><span class="p">},</span>
  <span class="s1">'remove'</span><span class="err">:</span> <span class="p">{</span><span class="nl">method</span><span class="p">:</span><span class="s1">'DELETE'</span><span class="p">},</span>
  <span class="s1">'delete'</span><span class="err">:</span> <span class="p">{</span><span class="nl">method</span><span class="p">:</span><span class="s1">'DELETE'</span><span class="p">}</span> 
<span class="p">};</span></code></pre></figure>

<h4 id="usage">Usage</h4>

<p>Querying all resources:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">peopleService</span><span class="p">.</span><span class="nx">query</span><span class="p">({},</span>
    <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//Success</span>
        <span class="nx">vm</span><span class="p">.</span><span class="nx">allPeople</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
    <span class="p">},</span>
    <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="c1">//Error</span>
    <span class="p">});</span></code></pre></figure>

<p>Pay attention to the empty object we are passing in. You could add a single id here if you only want to query one single resource.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">peopleService</span><span class="p">.</span><span class="nx">query</span><span class="p">({</span><span class="na">id</span><span class="p">:</span> <span class="mi">4</span><span class="p">},</span>
    <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//Success</span>
    <span class="p">},</span>
    <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="c1">//Error</span>
    <span class="p">});</span></code></pre></figure>

<p>In case you want to add a new resource, a person in this case, you can just call the “save” method and pass in the person you want to save:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">peopleService</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="nx">vm</span><span class="p">.</span><span class="nx">newPerson</span><span class="p">,</span>
    <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//Success</span>
    <span class="p">},</span>
    <span class="kd">function</span> <span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//Error</span>
    <span class="p">});</span></code></pre></figure>

<p>The service maps the “save”-method to the POST-Action from REST and is executing a POST- call against the API.</p>

<p>Deleting is self explaining:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">peopleService</span><span class="p">.</span><span class="k">delete</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">personToDelete</span><span class="p">.</span><span class="nx">Id</span> <span class="p">},</span> 
    <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="c1">// success</span>
    <span class="p">},</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="c1">//Error</span>
    <span class="p">});</span></code></pre></figure>

<h4 id="conclusion">Conclusion:</h4>

<p>The ngResource provides a good way to interact with a rest api using very very small code but providing big functionality.</p>

<p>HTH</p>

<p>Fabian</p>

	  ]]></description>
	</item>

	<item>
	  <title>How to build a great RESTful Service</title>
	  <link>//blog/articles/2015/07/20/how-to-build-a-great-restful-service/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2015-07-20T21:13:00+02:00</pubDate>
	  <guid>//blog/articles/2015/07/20/how-to-build-a-great-restful-service/</guid>
	  <description><![CDATA[
	     <p>In this blogpost I want to get you an idea of how to build a great RESTful Service. The idea for this blogpost came after I spent a whole <a href="http://blog.noser.com/implementieren-von-paging-in-einer-asp-net-webapi-mitangularjs/">post</a> about implementing paging in a web API. Paging is a very important feature a REST API should offer. However, there are a lot more. Here I want to mention a few of them hoping to cover as much as you need to build great API’s ;-)</p>

<p>Before we dive deeper into what an API can do you may think that all this stuff can also be done on the client. But you do not know which kind of client in the future will consume your web API. This can be an intelligent client that can do all the stuff on client side. So why do you have to offer those features then? Because instead of an intelligent client this can also be a “stupid” client which does not support any features at all. And if it only supports simple http-calls it has to use the features you offer with your API. The more you offer, the better it is for those clients. Keep this in your mind during coding your API’s.</p>

<p><strong>Correct status codes</strong></p>

<p><em>Always</em> return the correct status codes in your web API. If you created a database entry, send the HTML-Code for “Created” (201). If something is forbidden send a different status code than for not authenticated and so on.</p>

<p>Modern web API’s are also consumed by applications which live in the internet (and not on a mobile device) like an Asp.Net MVC Application. They all rely on your status codes to get information about what was happening with their request. Moreover, you give them the chance to react to these codes accordingly.</p>

<p>So if you are handling exceptions, not authenticated states etc.: Always get clear information about what was happening to your client with status codes and messages.</p>

<p><strong>Paging</strong></p>

<p>On this point I want to refer to the blogpost I have already written. In addition to this I want to mention that the <em>pagination Header</em> should also be filled up with the link to the next page, the link to the last page, the current page size, the total pages, the current page etc.</p>

<p>Yes, you can solve this in a modern client like the one I did in the blogpost with AngularJS. However, for clients which do not support those features: These links are essential to get paging working! So do include them and thank me later. ;-)</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">paginationHeader</span> <span class="o">=</span> <span class="k">new</span>
<span class="p">{</span>
<span class="nx">totalCount</span> <span class="o">=</span> <span class="nx">myItems</span><span class="p">.</span><span class="nx">Count</span><span class="p">(),</span>
<span class="c1">//other Items here…</span>
<span class="p">};</span></code></pre></figure>

<p><strong>Datashaping</strong></p>

<p>Datashaping describes the possibility to strip the data you want to send to the client based on what the client was demanding.</p>

<p>If the client only demands the Id, maybe the time point and a description of the objects in a query your API should be able to handle this an only send the requested information.</p>

<p>*Example:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">https</span><span class="err">:</span><span class="c1">//myurl.com/api/test?fields=Id,Description,EntryDate</span></code></pre></figure>

<p>Of course, this should also be possible for child classes that are related to your parent class.</p>

<p>*Example:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">https</span><span class="err">:</span><span class="c1">//myurl.com/api/test?fields=Id,Description,EntryDate,ChildClass.Id,Childclass.Title</span></code></pre></figure>

<p>Yes, I know OData. Moreover, I love it! I really do. Again: Your API <em>must</em> give the client the opportunity to request only the data he wants to have. To achieve this web API should offer the data-shaping feature.</p>

<p>For this feature, I created a Nuget-Package and a Github-repository that can be downloaded and used.</p>

<p><strong>Sorting</strong></p>

<p>The client should also have the possibility to request the items he wants in a special order. Here think of ascending and descending order and this should be possible for every field on the request object the controller was built for. Ascending sort order should be the default while descending can be marked with an minus “-“ in the front of the field to sort after. This is usually a feature which you apply at the very end of your methods. Usually short before returning the data to the client.</p>

<p>Api:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">Get</span><span class="p">(</span><span class="err">…</span><span class="p">,</span> <span class="kt">string</span> <span class="n">sort</span> <span class="p">=</span> <span class="s">"Id"</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">//use the Sort-string
</span><span class="p">}</span></code></pre></figure>

<p>*Example: ´https://myurl.com/api/test?sort=Added´</p>

<p>Where “Added” is a Property of the receiving DTOs.</p>

<p><strong>Filtered Update</strong></p>

<p>A mostly forgotten HTTP verb in my opinion is the <em>Patch</em> verb that allows partial updates of an object. So sending the update back to the server (like a post/put action) the patch only has the fields to change and the corresponding values included. After this you can apply the new object to the existing one and update the entry in your database.</p>

<p>Example <a href="http://aspnet.codeplex.com/sourcecontrol/latest#Samples/WebApi/DeltaJsonDeserialization/DeltaJsonDeserialization.Server/Controllers/PatchController.cs">here</a> and <a href="http://www.asp.net/web-api/overview/odata-support-in-aspnet-web-api/odata-v4/create-an-odata-v4-endpoint">here</a>.</p>

<p><strong>Https</strong></p>

<p>Finally yet importantly it has to be mentioned to always use https to communicate with your server. All the data you are passing between your API and your clients has to be secure.</p>

<p><strong>Summing-up</strong></p>

<p>In the end building REST-APIs is great. You are very flexible choosing your clients. But always consider giving the client every possible mechanism to get, create, update and delete the data it neds. Thinking about this during the development of a RESTful-API may save you a lot of work later.</p>

	  ]]></description>
	</item>

	<item>
	  <title>ASP.NET WebAPI Datashaper to strip your json data</title>
	  <link>//blog/articles/2015/05/30/asp-net-webapi-datashaper-to-strip-your-json-data/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2015-05-30T18:23:00+02:00</pubDate>
	  <guid>//blog/articles/2015/05/30/asp-net-webapi-datashaper-to-strip-your-json-data/</guid>
	  <description><![CDATA[
	     <p>With this blogpost I want to introduce you the ASP.NET WebAPI Datashaper to strip your json data before sending it back to the client.</p>

<p>The Datashaper gives you the possibility to strip the data you want to send based on the query of the client if you can not use Odata for a reason.</p>

<p><a href="https://github.com/OfferingSolutions/OfferingSolutions-Datashaper">GitHub</a>
<a href="http://fabian-gosebrink.de/Projects/Datashaper">Project-Page</a>
<a href="http://www.nuget.org/packages/OfferingSolutions.DataShaper/">NuGet</a></p>

<p><a href="https://github.com/OfferingSolutions/OfferingSolutions-Datashaper-Demo">Demo</a></p>

<p>With this Nuget you can add the fields you want to receive in your request like:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">GET</span> <span class="o">/</span><span class="nx">api</span><span class="o">/</span><span class="nx">test</span><span class="p">?</span><span class="nx">fields</span><span class="o">=</span><span class="nx">Id</span><span class="p">,</span><span class="nx">Title</span><span class="p">,</span><span class="nb">Date</span></code></pre></figure>

<p>or</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">GET</span> <span class="o">/</span><span class="nx">api</span><span class="o">/</span><span class="nx">test</span><span class="p">?</span><span class="nx">fields</span><span class="o">=</span><span class="nx">Id</span><span class="p">,</span><span class="nx">Title</span><span class="p">,</span><span class="nb">Date</span><span class="p">,</span><span class="nx">ChildClasses</span><span class="p">.</span><span class="nx">Description</span><span class="p">,</span><span class="nx">ChildClasses</span><span class="p">.</span><span class="nx">Id</span> <span class="p">...</span></code></pre></figure>

<p>You only have to call</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="n">Datashaper</span><span class="p">.</span><span class="nf">CreateDataShapedObject</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">listOfFields</span><span class="p">)</span></code></pre></figure>

<p>in the end which is going to apply the list of Properties to your data.</p>

<p>This can be useful if you wnat to display a table of your data with only selected fields. You do not have to have every property from your model onto the client and display it. You only need specific fields which you can strip out with this package.</p>

<p>This is equivalent to the OData “$select”-Query option. But this package gives you the opportunity to get the same behaviour without using OData. But if you are interested you should take a look onto <a href="http://www.odata.org/">Odata</a>, too.</p>

<p>Here is an example</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="na">[Route("myroute")]</span>
<span class="k">public</span> <span class="n">IHttpActionResult</span> <span class="nf">Get</span><span class="p">(</span><span class="kt">string</span> <span class="n">fields</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">try</span>
    <span class="p">{</span>
        <span class="c1">//...
</span>        
        <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">listOfFields</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;();</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">fields</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">listOfFields</span> <span class="p">=</span> <span class="n">fields</span><span class="p">.</span><span class="nf">Split</span><span class="p">(</span><span class="sc">','</span><span class="p">).</span><span class="nf">ToList</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">MyItems</span><span class="p">&gt;</span> <span class="n">myItems</span> <span class="p">=</span> <span class="n">_repository</span><span class="p">.</span><span class="nf">GetMyItems</span><span class="p">();</span>

        <span class="c1">//...
</span>        
        <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">myItems</span>
            <span class="p">.</span><span class="nf">ToList</span><span class="p">()</span>
            <span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">Datashaper</span><span class="p">.</span><span class="nf">CreateDataShapedObject</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">listOfFields</span><span class="p">));</span>

        <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span><span class="p">)</span>
    <span class="p">{</span>
         <span class="k">return</span> <span class="nf">InternalServerError</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><img src="/assets/articles/wp-content/uploads/2015/05/datashaper_1.png" alt="ASP.NET WebAPI Datashaper to strip your json data" /></p>

<p><img src="/assets/articles/wp-content/uploads/2015/05/datashaper_2.png" alt="ASP.NET WebAPI Datashaper to strip your json data" /></p>

<p><img src="/assets/articles/wp-content/uploads/2015/05/datashaper_3.png" alt="ASP.NET WebAPI Datashaper to strip your json data" /></p>

<p><img src="/assets/articles/wp-content/uploads/2015/05/datashaper_4.png" alt="ASP.NET WebAPI Datashaper to strip your json data" /></p>

<p>Regards &amp; HTH</p>

<p>Fabian</p>

	  ]]></description>
	</item>


</channel>
</rss>
