<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>http://fabian-gosebrink.com</title>
   
   <link>http://offering.solutions</link>
   <description>Articles about Angular & ASP.NET</description>
   <language>en-us</language>
   <managingEditor> Fabian Gosebrink</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>ASP.NET Unit Of Work with Entity Framework</title>
	  <link>//blog/articles/2015/12/09/asp-net-unit-of-work-with-entity-framework/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2015-12-09T21:37:00+01:00</pubDate>
	  <guid>//blog/articles/2015/12/09/asp-net-unit-of-work-with-entity-framework/</guid>
	  <description><![CDATA[
	     <p>I just implemented a solution for the ASP.NET Unit Of Work with Entity Framework (see <a href="http://offering.solutions/blog/articles/2014/07/01/asp-net-mvc-generic-repositories-and-unitofwork/">this</a> post) and put all this into a NuGet-Package. And finally: Here it is!</p>

<h3 id="code">Code</h3>

<p>Nuget: <a href="https://www.nuget.org/packages/OfferingSolutions.UnitOfWork.Structure/">UnitOfWork by Offering.Solutions</a></p>

<p>Github: <a href="https://github.com/OfferingSolutions/OfferingSolutions-RepositoryPattern-UnitOfWork">OfferingSolutions UnitOfWork with Entity Framework</a></p>

<p>This blogpost has a sample-solution attached. Feel free to look into it. But before you do let me explain this package a bit. It will use the UnitOfWork, you will be able to use GenericRepositories and Customrepositories and everything is cached so that if you use the repositories in one using they only have to be created once.</p>

<p>I wont go into details about the sense of the UnitOfWork-thing but I want to give you code-examples how you can start with this in just a few minutes of your time.</p>

<p>If you want to work with the UnitOfWork in this NuGet-Package you will have two different possibilities:</p>

<ol>
  <li>Use generic repositories</li>
  <li>Extend the generic repositories to use your own functions additional to the given CRUD-operations</li>
</ol>

<p>I want to handle both cases in this post:</p>

<p>Lets start:</p>

<p>First of all you have to install the NuGet-Package. It will add you the needed dll you can work with.</p>

<h3 id="use-generic-repositories">1) Use generic repositories</h3>

<p>The common case is that you have a DatabaseContext and DbSets of you entities stored in it. After adding the package you can use the OsUnitOfWorkContext as follows</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">using</span> <span class="p">(</span><span class="n">IOsUnitOfWorkContext</span> <span class="n">unitOfWorkContext</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">OsUnitOfWorkContext</span><span class="p">(</span><span class="k">new</span> <span class="nf">DatabaseContext</span><span class="p">()))</span>
<span class="p">{</span>
    <span class="n">Person</span> <span class="n">person</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Person</span><span class="p">()</span> <span class="p">{</span> <span class="n">Age</span> <span class="p">=</span> <span class="m">28</span><span class="p">,</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">"Fabian"</span> <span class="p">};</span>

    <span class="c1">//Adding a new Entity, for example "Person"
</span>    <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">person</span><span class="p">);</span>

    <span class="c1">//Savechanges
</span>    <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">Save</span><span class="p">();</span>

    <span class="c1">//or...
</span>    <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">SaveASync</span><span class="p">();</span>

    <span class="c1">// Get all Persons
</span>    <span class="n">List</span> <span class="n">allPersons</span> <span class="p">=</span> <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">GetAll</span><span class="p">().</span><span class="nf">ToList</span><span class="p">();</span>

    <span class="c1">// Get all Persons with the age of 35
</span>    <span class="n">List</span> <span class="n">allPersonsOnAge35</span> <span class="p">=</span> <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">GetAll</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Age</span> <span class="p">==</span> <span class="m">35</span><span class="p">).</span><span class="nf">ToList</span><span class="p">();</span>

    <span class="c1">// Get all Persons with the age of 35 ordered by Name
</span>    <span class="n">List</span> <span class="n">allPersonsOnAge35Ordered</span> <span class="p">=</span> <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">GetAll</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Age</span> <span class="p">==</span> <span class="m">35</span><span class="p">,</span> <span class="n">orderBy</span><span class="p">:</span> <span class="n">q</span> <span class="p">=&gt;</span> <span class="n">q</span><span class="p">.</span><span class="nf">OrderBy</span><span class="p">(</span><span class="n">d</span> <span class="p">=&gt;</span> <span class="n">d</span><span class="p">.</span><span class="n">Name</span><span class="p">)).</span><span class="nf">ToList</span><span class="p">();</span>

    <span class="c1">// Get all Persons with the age of 35 ordered by Name and include its properties
</span>    <span class="n">List</span> <span class="n">allPersonsOnAge35OrderedAndWithThings</span> <span class="p">=</span> <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">GetAll</span><span class="p">(</span>
        <span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Age</span> <span class="p">==</span> <span class="m">35</span><span class="p">,</span>
        <span class="n">orderBy</span><span class="p">:</span> <span class="n">q</span> <span class="p">=&gt;</span> <span class="n">q</span><span class="p">.</span><span class="nf">OrderBy</span><span class="p">(</span><span class="n">d</span> <span class="p">=&gt;</span> <span class="n">d</span><span class="p">.</span><span class="n">Name</span><span class="p">),</span>
        <span class="n">includeProperties</span><span class="p">:</span> <span class="s">"Things"</span><span class="p">).</span><span class="nf">ToList</span><span class="p">();</span>

    <span class="c1">// Get all Persons and include its properties
</span>    <span class="n">List</span> <span class="n">allPersonsWithThings</span> <span class="p">=</span> <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">GetAll</span><span class="p">(</span><span class="n">includeProperties</span><span class="p">:</span> <span class="s">"Things"</span><span class="p">).</span><span class="nf">ToList</span><span class="p">();</span>

    <span class="c1">// Find a single Person with a specific name
</span>    <span class="n">Person</span> <span class="n">findBy</span> <span class="p">=</span> <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="s">"Fabian"</span><span class="p">);</span>

    <span class="c1">// Find a single Person with a specific name and include its siblings
</span>    <span class="n">Person</span> <span class="n">findByWithThings</span> <span class="p">=</span> <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">GetSingle</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="s">"Fabian"</span><span class="p">,</span> <span class="n">includeProperties</span><span class="p">:</span> <span class="s">"Things"</span><span class="p">);</span>

    <span class="c1">// Find a person by id 
</span>    <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">GetSingleById</span><span class="p">(</span><span class="m">6</span><span class="p">);</span>

    <span class="c1">//Update an existing person
</span>    <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="n">person</span><span class="p">);</span>

    <span class="c1">//Add or Update a Person
</span>    <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">AddOrUpdate</span><span class="p">(</span><span class="n">person</span><span class="p">);</span>

    <span class="c1">//Deleting a Person by Id or by entity
</span>    <span class="c1">//unitOfWorkContext.Delete(person.Id);
</span>    <span class="n">unitOfWorkContext</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="n">person</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<h3 id="use-extended-repositories">2) Use extended repositories</h3>

<p>If you want the normal repository to extend a bit with your own functions this is also possible. Everything you have to do is writing your own repository. You can even overwrite the normal CRUD-Methods to do whateer you like in there.</p>

<p>Attention to inherit it from the “IRepositoryContext<YourEntity>" respectively the "RepositoryContextImpl<YourEntity>". The code should look like this:</YourEntity></YourEntity></p>

<p>Interface:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">interface</span> <span class="n">IPersonRepository</span> <span class="p">:</span> <span class="n">IRepositoryContext</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;</span>
<span class="p">{</span>
    <span class="k">void</span> <span class="nf">MyNewFunction</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>Implementation:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">PersonRepository</span> <span class="p">:</span> <span class="n">RepositoryContextImpl</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;,</span> <span class="n">IPersonRepository</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nf">PersonRepository</span><span class="p">(</span><span class="n">DbContext</span> <span class="n">dbContext</span><span class="p">)</span>
        <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">dbContext</span><span class="p">)</span>
    <span class="p">{</span>

    <span class="p">}</span>

    <span class="k">public</span> <span class="k">void</span> <span class="nf">MyNewFunction</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">//Do Something
</span>    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>You can then use it with</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">using</span> <span class="p">(</span><span class="n">IPersonRepository</span> <span class="n">personRepository</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">PersonRepository</span><span class="p">(</span><span class="k">new</span> <span class="nf">DatabaseContext</span><span class="p">()))</span>
<span class="p">{</span>
    <span class="n">personRepository</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Person</span><span class="p">());</span>
    <span class="n">personRepository</span><span class="p">.</span><span class="nf">Save</span><span class="p">();</span>
    <span class="n">List</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;</span> <span class="n">persons</span> <span class="p">=</span> <span class="n">personRepository</span><span class="p">.</span><span class="nf">GetAll</span><span class="p">();</span>
    <span class="n">personRepository</span><span class="p">.</span><span class="nf">MyNewFunction</span><span class="p">(</span><span class="m">6</span><span class="p">);</span>
    <span class="c1">//...
</span><span class="p">}</span></code></pre></figure>

<p>With this you can build your own repositories and they are build up modular and are replacable in an easy way.</p>

<p>Thats it. I think this is nice and smooth. I hope you can get along with it. Have fun.</p>

<p>See <a href="http://www.asp.net/mvc/tutorials/getting-started-with-ef-5-using-mvc-4/implementing-the-repository-and-unit-of-work-patterns-in-an-asp-net-mvc-application" target="_blank">here</a> and <a href="http://codereview.stackexchange.com/questions/31822/unit-of-work-and-repository-design-pattern-implementation" target="_blank">here </a>for inspiration.</p>

<p>See also <a title="ASP.NET MVC Architecture (Part III): Generic Repositories and UnitOfWork" href="http://offering.solutions/blog/articles/2014/07/01/asp-net-mvc-generic-repositories-and-unitofwork/" target="_blank">here </a>for another related BlogEntry (when this Nuget was not released so far ;) )</p>

<p>Regards</p>

<p>Fabian</p>

<p>Download <a href="/assets/articles/wp-content/uploads/2014/08/OfferingSolutions.UnitOfWork.Sample.0.6.1.zip">OfferingSolutions.UnitOfWork.Sample.0.6.1</a></p>

	  ]]></description>
	</item>

	<item>
	  <title>ASP.NET Helpers by Offering Solutions</title>
	  <link>//blog/articles/2015/03/04/asp-net-helpers-by-offering-solutions/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2015-03-04T21:08:00+01:00</pubDate>
	  <guid>//blog/articles/2015/03/04/asp-net-helpers-by-offering-solutions/</guid>
	  <description><![CDATA[
	     <p>I just released a new version of the ASP.NET Helpers by Offering Solutions:</p>

<p><a href="https://www.nuget.org/packages/OfferingSolutions.AspNetHelpers/">Nuget: AspNetHelpers by Offering Solutions</a></p>

<p>which includes</p>

<ul>
  <li>ViewModelBase</li>
  <li>SubmitModelBase</li>
  <li>ModelValidator (for easier validation)</li>
</ul>

<p>and features like</p>

<ul>
  <li>Nullcheck with Exception</li>
  <li>Nullcheck with returning the type if not null, otherwise exception</li>
  <li>Return bool value if something is null</li>
  <li>Checking enumerable if its null or empty</li>
  <li>Checks if a string is a timespan</li>
  <li>Checks if a string is an email</li>
  <li>Converts a string to datetime</li>
  <li>Converts s tring to timespan</li>
  <li>Checks a string for null, empty or a given lenght (e.g. for password purposes)</li>
  <li>Checks if a HttpPostedFile has a specific format</li>
  <li>Checks if a HttpPostedFile is an image</li>
  <li>Checks if a string can be converted to double</li>
  <li>Converts a string to double</li>
</ul>

<p>Why ViewModels and Submitmodels you can read this <a href="http://blog.noser.com/what-are-submitmodels-and-how-to-use-them/">here</a> and <a href="http://blog.noser.com/why-and-how-to-avoid-viewbag-and-viewdata-in-asp-net-mvc/">here</a></p>

<p>ViewModelBase and SubmitModelBase are two baseclasses for the introduced view- and submitmodels.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">AccountRegisterViewModel</span> <span class="p">:</span> <span class="n">ViewModelBase</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="n">AccountRegisterSubmitModel</span> <span class="n">SubmitModel</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="nf">AccountRegisterViewModel</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Url</span> <span class="p">=</span> <span class="s">"~/Here/Goes/My/Url.cshtml"</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>And you can access InfoMessages, SuccessMessages and  ErrorMessages now from your ViewModel.</p>

<p>In your view you are filling up your submitmodel and sending it again to your Server. There you can now validate it:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="n">AccountRegisterViewModel</span> <span class="nf">RegisterUser</span><span class="p">(</span><span class="n">AccountRegisterSubmitModel</span> <span class="n">submitModel</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">AccountRegisterViewModel</span> <span class="n">viewModel</span> <span class="p">=</span> <span class="nf">GetAccountRegisterViewMmodel</span><span class="p">(</span><span class="n">submitModel</span><span class="p">);</span>

    <span class="k">try</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(!</span><span class="n">_modelValidator</span><span class="p">.</span><span class="nf">IsSubmitModelValid</span><span class="p">(</span><span class="n">viewModel</span><span class="p">,</span> <span class="n">submitModel</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">viewModel</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// Do some stuff
</span>    <span class="p">}</span>
    <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">viewModel</span><span class="p">.</span><span class="n">ErrorMessages</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"There was an error. Can not register."</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">viewModel</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>In this exampe the ModelValidator in the NuGet above is used which you can simply register</p>

<p>with Ninject for example like this:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="n">kernel</span><span class="p">.</span><span class="nf">Bind</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">IModelValidator</span><span class="p">)).</span><span class="nf">To</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">ModelValidatorImpl</span><span class="p">));</span></code></pre></figure>

<p>If you validate with the validator, your Errormessages are getting automatically filled with those defined in your submitmodel and you can easily return it. Of course you can do it the long way like this:</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="n">AccountRegisterViewModel</span> <span class="nf">RegisterUser</span><span class="p">(</span><span class="n">AccountRegisterSubmitModel</span> <span class="n">submitModel</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">AccountRegisterViewModel</span> <span class="n">viewModel</span> <span class="p">=</span> <span class="nf">GetAccountRegisterViewMmodel</span><span class="p">(</span><span class="n">submitModel</span><span class="p">);</span>

    <span class="k">try</span>
    <span class="p">{</span>
        <span class="n">ReadOnlyCollection</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">errors</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(!</span><span class="n">submitModel</span><span class="p">.</span><span class="nf">IsValid</span><span class="p">(</span><span class="k">out</span> <span class="n">errors</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="n">viewModel</span><span class="p">.</span><span class="n">ErrorMessages</span><span class="p">.</span><span class="nf">AddRange</span><span class="p">(</span><span class="n">errors</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">viewModel</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// Do some stuff
</span>    <span class="p">}</span>
    <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">viewModel</span><span class="p">.</span><span class="n">ErrorMessages</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"There was an error. Can not register."</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">viewModel</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p> </p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">//Throws an exception
</span>    <span class="n">Person</span> <span class="n">person</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
    <span class="n">person</span><span class="p">.</span><span class="nf">CheckIsNull</span><span class="p">();</span>

    <span class="c1">// Throws an exception if null, gives you back the type otherwise --&gt; Good for DI in public methods
</span>    <span class="n">Person</span> <span class="n">myPerson</span> <span class="p">=</span> <span class="n">person</span><span class="p">.</span><span class="nf">CheckIsNull</span><span class="p">(</span><span class="s">"Person must not be null"</span><span class="p">);</span>

    <span class="c1">// Is true in this case
</span>    <span class="kt">bool</span> <span class="n">personIsNull</span> <span class="p">=</span> <span class="n">person</span><span class="p">.</span><span class="nf">IsNull</span><span class="p">();</span>

    <span class="n">person</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Person</span><span class="p">()</span> <span class="p">{</span><span class="n">Id</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">"Fabian"</span><span class="p">};</span>
    <span class="n">List</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;</span> <span class="n">listOfPersons</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;()</span> <span class="p">{</span><span class="n">person</span><span class="p">};</span>

    <span class="c1">//should be false
</span>    <span class="kt">bool</span> <span class="n">isNullOrEmpty</span> <span class="p">=</span> <span class="n">listOfPersons</span><span class="p">.</span><span class="nf">IsNullOrEmpty</span><span class="p">();</span>

    <span class="c1">// Checks a string for a valid TimeSpan
</span>    <span class="kt">string</span> <span class="n">timeSpanToCheck</span> <span class="p">=</span> <span class="s">"11:20"</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="n">isTimeSpan</span> <span class="p">=</span> <span class="n">timeSpanToCheck</span><span class="p">.</span><span class="nf">IsTimeSpan</span><span class="p">();</span>

    <span class="c1">// Checks if a string is a valid email or not
</span>    <span class="kt">string</span> <span class="n">email</span> <span class="p">=</span> <span class="s">"dont@ask.me"</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="n">isEmail</span> <span class="p">=</span> <span class="n">email</span><span class="p">.</span><span class="nf">IsEmail</span><span class="p">();</span>

    <span class="c1">//Converts a string to datetime
</span>    <span class="kt">string</span> <span class="n">toDateTime</span> <span class="p">=</span> <span class="s">"01.01.2010"</span><span class="p">;</span>
    <span class="n">DateTime</span> <span class="n">dateTime</span> <span class="p">=</span> <span class="n">toDateTime</span><span class="p">.</span><span class="nf">ToDateTime</span><span class="p">();</span>

    <span class="c1">// COnverts a string to Timespan
</span>    <span class="n">timeSpanToCheck</span> <span class="p">=</span> <span class="s">"11:20"</span><span class="p">;</span>
    <span class="n">TimeSpan</span> <span class="n">timeSpan</span> <span class="p">=</span> <span class="n">timeSpanToCheck</span><span class="p">.</span><span class="nf">ToTimeSpan</span><span class="p">();</span>

    <span class="c1">//Cheks, if a password has a specific length or is null or empty
</span>    <span class="kt">string</span> <span class="n">password</span> <span class="p">=</span> <span class="s">"TheseAreAtLeastEightSigns"</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="n">isValidPassword</span> <span class="p">=</span> <span class="n">password</span><span class="p">.</span><span class="nf">IsValidPassword</span><span class="p">(</span><span class="m">8</span><span class="p">);</span>

    <span class="c1">// Checks if a file has a given format...
</span>    <span class="n">HttpPostedFileBase</span> <span class="n">httpPostedFile</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span><span class="c1">//...
</span>    <span class="kt">bool</span> <span class="n">hasFormat</span> <span class="p">=</span> <span class="n">httpPostedFile</span><span class="p">.</span><span class="nf">HasFormat</span><span class="p">(</span><span class="s">"txt"</span><span class="p">);</span>

    <span class="c1">// ... or wth multiple extensions
</span>    <span class="n">hasFormat</span> <span class="p">=</span> <span class="n">httpPostedFile</span><span class="p">.</span><span class="nf">HasFormat</span><span class="p">(</span><span class="s">"txt"</span><span class="p">,</span> <span class="s">"pdf"</span><span class="p">);</span>

    <span class="c1">// Checks if a file is an image...
</span>    <span class="kt">bool</span> <span class="n">isImage</span> <span class="p">=</span> <span class="n">httpPostedFile</span><span class="p">.</span><span class="nf">IsImage</span><span class="p">();</span>

    <span class="c1">// ...also with formats
</span>    <span class="n">isImage</span> <span class="p">=</span> <span class="n">httpPostedFile</span><span class="p">.</span><span class="nf">IsImage</span><span class="p">(</span><span class="s">"jpg"</span><span class="p">,</span> <span class="s">"gif"</span><span class="p">);</span>

    <span class="c1">//Checks if a value is a double value (separation with . or ,
</span>    <span class="kt">string</span> <span class="n">doubleToCheck</span> <span class="p">=</span> <span class="s">"3.5"</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="n">isDouble</span> <span class="p">=</span> <span class="n">doubleToCheck</span><span class="p">.</span><span class="nf">IsDouble</span><span class="p">();</span>

    <span class="c1">//COnverts a string to double
</span>    <span class="n">doubleToCheck</span> <span class="p">=</span> <span class="s">"3.5"</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">doubleValue</span> <span class="p">=</span> <span class="n">doubleToCheck</span><span class="p">.</span><span class="nf">ToDouble</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<p>So, this is it. Hope you enjoy!</p>

<p>Regards</p>

<p>Fabian</p>

	  ]]></description>
	</item>


</channel>
</rss>
