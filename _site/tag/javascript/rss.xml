<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>http://fabian-gosebrink.com</title>
   
   <link>http://offering.solutions</link>
   <description>Articles about Angular & ASP.NET</description>
   <language>en-us</language>
   <managingEditor> Fabian Gosebrink</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>How you can organise gulp in your applications</title>
	  <link>//blog/articles/2016/05/16/how-you-can-organise-gulp-in-your-applications/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2016-05-16T08:30:00+02:00</pubDate>
	  <guid>//blog/articles/2016/05/16/how-you-can-organise-gulp-in-your-applications/</guid>
	  <description><![CDATA[
	     <p>In this blogpost I want to show one possibility of organising your gulp tasks in a way that you as a developer can find them quickly and print them to the console in an ordered way.</p>

<blockquote>
  <p>I have taken all these examples from my cross platform examples on <a href="https://github.com/FabianGosebrink?tab=repositories">GitHub</a>. Especially from <a href="https://github.com/FabianGosebrink/Foodchooser-ASPNET-Angular-Cross-Platform">Foodchooser</a>.</p>
</blockquote>

<h2 id="motivation">Motivation</h2>

<p>No matter what you do with web development today you will have to have a task runner when it comes to distribute to a customer at the latest.</p>

<p>Gulp is one task runner which it makes easy to fulfill all then tasks like concatination and uglify-things we actually need to reduce request and optimize our performance etc.</p>

<p>But we as developers have also different tasks to face: We want a web application in dev-mode for our development environment. But we also want to have a distribution-ready environment for our staging and test environments etc.</p>

<p>When you are heading towards cross platfrom development this thing is even more important. Because your outputs differ from a webpage only with an additional executable (electron) and mobile apps for your phones.</p>

<h2 id="organising-your-files">Organising your files</h2>

<h3 id="gulp-and-its-config">Gulp and its config</h3>

<p>I think the best practice here is to seperate gulp itself on the one hand and the paths to the files and folders on the other in different files.</p>

<p>The <code class="highlighter-rouge">gulpfile.js</code> only contains the tasks whereas a file named like <code class="highlighter-rouge">gulp.config.js</code> is containing all your files, (temp-)paths, … .</p>

<p><img src="/assets/articles/wp-content/uploads/2016/05/gulpAndConfigFile.png" alt="How you can organise gulp in your applications" title="gulptask folder" /></p>

<p>You can include your config file in the gulpfile like this:</p>

<p><code class="highlighter-rouge">var buildConfig = require('./gulp.config');</code></p>

<p>If the files are on the same level.</p>

<p>The <code class="highlighter-rouge">gulp.config.js</code> can look like this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">general</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">appName</span><span class="p">:</span> <span class="s2">"FoodChooserAppAngular2"</span><span class="p">,</span>
        <span class="na">rootFolder</span><span class="p">:</span> <span class="s2">"app/"</span><span class="p">,</span>
        <span class="na">indexHtml</span><span class="p">:</span> <span class="s2">"./index.html"</span>
    <span class="p">},</span>
    <span class="na">sources</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">sourceFolder</span><span class="p">:</span> <span class="s2">"src/"</span><span class="p">,</span>
        <span class="na">allAppJsFiles</span><span class="p">:</span> <span class="p">[</span>
            <span class="s2">"./app/*.js"</span><span class="p">,</span>
            <span class="s2">"./app/*/**/*.js"</span><span class="p">,</span>
        <span class="p">],</span>
        <span class="na">allAppHtmlFiles</span><span class="p">:</span> <span class="p">[</span>
            <span class="s2">"./app/**/*.html"</span>
        <span class="p">],</span>
        <span class="na">allVendorJsFiles</span><span class="p">:</span> <span class="p">[</span>
            <span class="s2">"./js/*.js"</span>
        <span class="p">],</span>
        <span class="na">allAppCssFiles</span><span class="p">:</span> <span class="p">[</span>
            <span class="s2">"./node_modules/bootstrap/dist/css/bootstrap.min.css"</span><span class="p">,</span>
            <span class="s2">"./css/*.css"</span>
        <span class="p">],</span>
        <span class="na">allAppImgFiles</span><span class="p">:</span> <span class="p">[</span>
            <span class="s2">"./img/*.*"</span><span class="p">,</span>
            <span class="s2">"./img/windows/*.*"</span>
        <span class="p">],</span>
        <span class="na">vendorScripts</span><span class="p">:</span> <span class="p">[</span>
            <span class="s2">"node_modules/zone.js/dist/zone.js"</span><span class="p">,</span>
            <span class="s2">"node_modules/reflect-metadata/Reflect.js"</span><span class="p">,</span>
            <span class="s2">"node_modules/systemjs/dist/system.src.js"</span><span class="p">,</span>
            <span class="s2">"node_modules/jquery/dist/jquery.js"</span><span class="p">,</span>
            <span class="s2">"node_modules/bootstrap/dist/js/bootstrap.js"</span>
        <span class="p">],</span>
        <span class="c1">// ...</span>
    <span class="p">},</span>
    <span class="c1">// ...</span>
    <span class="na">targets</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">webAppOutputPath</span><span class="p">:</span> <span class="s2">"../.dist/webapp/"</span><span class="p">,</span>
        <span class="na">electronOutputPath</span><span class="p">:</span> <span class="s2">"../.dist/electron/"</span><span class="p">,</span>
        <span class="na">cordovaOutputPath</span><span class="p">:</span> <span class="s2">"../.dist/cordova/"</span><span class="p">,</span>
<span class="p">};</span></code></pre></figure>

<p>It is only containing all the files, paths and general information you want to use.</p>

<p>The gulp-file itself is now only containing the tasks and is consuming the config file.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">'web-copy-index-to-webapp-folder'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="nx">buildConfig</span><span class="p">.</span><span class="nx">general</span><span class="p">.</span><span class="nx">indexHtml</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="nx">buildConfig</span><span class="p">.</span><span class="nx">targets</span><span class="p">.</span><span class="nx">webAppOutputPath</span><span class="p">));</span>
<span class="p">});</span></code></pre></figure>

<p>This makes the gulp tasks more generic.</p>

<h3 id="tasks-in-folders">Tasks in folders</h3>

<p>I’ve seen many ways how people organise the gulp tasks but it turned out for me it was the best way to have a folder called “gulpTasks” (or similar) where I put all my gulptasks in. I’ve seen this on many other repositories and also on conferences etc. It’s always good to have a folder encapsulating all your gulpTasks like this:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/05/folderGulpTasks.png" alt="alt text" title="gulptask folder" /></p>

<p>Here I seperate all the different systems I want to have an output for.</p>

<p>But that also means, that the task seen above is moving to the <code class="highlighter-rouge">web.js</code> file.</p>

<p>How do I build up the “architecture” for my gulp-tasks now?</p>

<h2 id="manage-your-tasks">Manage your tasks</h2>

<p>Well we have to go one step back before clarifying how to solve this:</p>

<p>Getting an app ready for distribution or even for development purposes is more than one task. Although I know the task-dependency-system in gulp where all the dependent tasks are executed in parallel before the called task is going to run I think it’s easier to run the things in sequence. It’s easier to read and easier to maintain IMHO.</p>

<p>Therefore you need to install a <code class="highlighter-rouge">run-sequence</code>-plugin available <a href="https://www.npmjs.com/package/run-sequence">here</a>. With this you can divide your tasks and seperate the responsibilities in your web gulpfile (e.g.) like this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'gulp'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">runSeq</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'run-sequence'</span><span class="p">);</span>

 <span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">'build:web:prod'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">runSeq</span><span class="p">(</span>
        <span class="s1">'web-clean-webapp'</span><span class="p">,</span>
        <span class="s1">'web-copy-index-to-webapp-folder'</span><span class="p">,</span>
        <span class="s1">'web-copy-images-to-webapp-folder'</span><span class="p">,</span>
        <span class="s1">'web-copy-css-to-webapp-folder'</span><span class="p">,</span>
        <span class="s1">'web-concat-uglify-and-copy-vendor-scripts'</span><span class="p">,</span>
        <span class="c1">// all the other tasks</span>
        <span class="nx">done</span><span class="p">);</span>
<span class="p">});</span></code></pre></figure>

<p>I think this is a very good and clear documentation of what is done if I call the main task.</p>

<blockquote>
  <p>As a tip: I do also use this for “debugging” when something is going wrong. I can easily comment out the single tasks and the which one is causing trouble</p>
</blockquote>

<p>What we also did in this step is: We defined a <em>main task</em>! This task can be referenced and executed from the main gulp file.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">require</span><span class="p">(</span><span class="s1">'./gulpTasks/web'</span><span class="p">);</span>
<span class="c1">//...</span>
<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">'build:all'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">runSeq</span><span class="p">(</span>
        <span class="s1">'build:web:prod'</span><span class="p">,</span>
        <span class="c1">// maybe other main build tasks</span>
        <span class="nx">done</span><span class="p">);</span>
<span class="p">});</span></code></pre></figure>

<p>You can repeat that for all your files and main tasks.</p>

<blockquote>
  <p>I recommend to have 2 main tasks per file at the maximum: Dev and Prod.</p>
</blockquote>

<p>So here we are building a small architecture and get some order in our tasks-, file- and folder-structure.</p>

<h3 id="the-default-tasks">The default tasks</h3>

<p>Often I see that the default task is executing logic. It does something. And when the default task is doing something it’s most likely something like a main task. Like “build-all” or something?</p>

<p>Let’s picture the situation you cloned a repository and you just want to get started. Thats all you want to do. First step: “Let me see what you have got for me”.</p>

<p>If you run <code class="highlighter-rouge">gulp</code> which executes the default task and something starts to run and I as a developer have NO IDEA what exactly runs there - that scares me.</p>

<p>Wouldn’t it be better to have a kind of more defensive behaviour? This is why I prefer to list all the tasks the repo offers to the delevoper. And the developer can then decide which one he wants to execute.</p>

<p>But with this option I mentioned above we have <strong>many</strong> small tasks which can be executed.</p>

<p>This is why I do name the tasks in a special way:</p>

<p>All main tasks are divided with a “:”, all child tasks with “-“.</p>

<p>For the task-listing feature there is also an npm package available <a href="https://www.npmjs.com/package/gulp-task-listing">here</a>.</p>

<p>“gulp-task-listing - Adds the ability to provide a task listing for your gulpfile”</p>

<p>You can define filters to define which one is a main task and which one is a child task.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">taskListing</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'gulp-task-listing'</span><span class="p">);</span>
<span class="c1">//...</span>
<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">'help'</span><span class="p">,</span> <span class="nx">taskListing</span><span class="p">.</span><span class="nx">withFilters</span><span class="p">(</span><span class="sr">/-/</span><span class="p">));</span></code></pre></figure>

<p>Everything we need to do now is to point the default task on this help task to list all the tasks:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">taskListing</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'gulp-task-listing'</span><span class="p">);</span>
<span class="c1">//...</span>
<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">'default'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'help'</span><span class="p">]);</span>
<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">'help'</span><span class="p">,</span> <span class="nx">taskListing</span><span class="p">.</span><span class="nx">withFilters</span><span class="p">(</span><span class="sr">/-/</span><span class="p">));</span></code></pre></figure>

<p>Which brings the following output:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/05/gulpTasks.png" alt="tasks output" title="gulp task output" /></p>

<h2 id="further-steps">Further steps</h2>

<h3 id="commonjs">common.js</h3>

<p>One possibility would be going along and define some “main”-tasks and be more generic which can be executed from the <code class="highlighter-rouge">web.js</code> and other files. Like a <code class="highlighter-rouge">common.js</code> containing generic tasks like:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">copySourcesTo</span><span class="p">(</span><span class="nx">targetFolder</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="nx">getSourceFiles</span><span class="p">(</span><span class="nx">buildConfig</span><span class="p">.</span><span class="nx">source</span><span class="p">.</span><span class="nx">folder</span><span class="p">),</span> <span class="p">{</span>
        <span class="na">base</span><span class="p">:</span> <span class="nx">buildConfig</span><span class="p">.</span><span class="nx">source</span><span class="p">.</span><span class="nx">folder</span>
    <span class="p">})</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="nx">targetFolder</span><span class="p">));</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">copyFromTo</span><span class="p">(</span><span class="nx">sourceFolder</span><span class="p">,</span> <span class="nx">targetFolder</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">sourceFolder</span><span class="p">,</span> <span class="s1">'**'</span><span class="p">,</span> <span class="s1">'*.*'</span><span class="p">))</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="nx">targetFolder</span><span class="p">));</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">cleanTemp</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">del</span><span class="p">(</span><span class="nx">buildConfig</span><span class="p">.</span><span class="nx">targets</span><span class="p">.</span><span class="nx">tempFolder</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="nx">done</span><span class="p">();</span>
    <span class="p">});</span>
<span class="p">}</span>
<span class="c1">//...</span></code></pre></figure>

<p>For tasks which are all the same in every step. Perhaps this can be useful</p>

<blockquote>
  <p>I did this in this repository <a href="https://github.com/FabianGosebrink/Foodchooser-ASPNET-Angular-Cross-Platform">here</a></p>
</blockquote>

<h3 id="prefixes">Prefixes</h3>

<p>You could also prefix your private tasks with a “[private]-…” tag or something to clearify in the task overview that this task should be private.</p>

<h2 id="conclusion">Conclusion</h2>

<p>I hope with this post I could give you a small idea of how to treat your gulp files and tasks in order. Keep them seperated and let them have single tasks to do. I think with this you can keep also a big system organised.</p>

<h2 id="links">Links</h2>

<p><a href="https://github.com/FabianGosebrink/ASPNET-Foodchooser-Cross-Platform-Angular2/">https://github.com/FabianGosebrink/ASPNET-Foodchooser-Cross-Platform-Angular2</a></p>

<p><a href="https://github.com/FabianGosebrink/ASPNET-WebAPI-AngularJs-XPlatform-Example">https://github.com/FabianGosebrink/ASPNET-WebAPI-AngularJs-XPlatform-Example</a></p>

<p><a href="https://www.npmjs.com/package/run-sequence">https://www.npmjs.com/package/run-sequence</a></p>

<p><a href="https://www.npmjs.com/package/gulp-task-listing">https://www.npmjs.com/package/gulp-task-listing</a></p>

	  ]]></description>
	</item>

	<item>
	  <title>Lightweight architecture with AngularJS</title>
	  <link>//blog/articles/2014/03/05/lightweight-architecture-with-angularjs/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2014-03-05T18:17:51+01:00</pubDate>
	  <guid>//blog/articles/2014/03/05/lightweight-architecture-with-angularjs/</guid>
	  <description><![CDATA[
	     <p>During the last past days I have been to a conference in Germany and brought back several interesting things I want to share with you this time. (Here I have to say that my hotel did not have a spa. So everybody who wanted to get the latest hotel and spa tips is wrong here…so in case stop reading)</p>

<p>Well for me as a software developer it gets interesting every time I hear another company talking about their way of doing work, their kind of projects and their behavior in the market. It’s always refreshing to see how they behave. And, indeed, personally, if the topic “ASP.NET&amp;”, “Internet&amp;” with all its Buzzwords is connected you can be sure to have my attention.</p>

<p>This time I laid my focus on everything which was connected to the web and in eight hours of workshop and a lot of tracks the other day I learned a lot!</p>

<h3 id="history">History</h3>

<p>Let me get historical for a moment: .Net in its first version was released in 2002. This is 12 years ago! 12 years are more than a lifetime in computer-science. So you feel that there is something moving. Something growing. Internet-Applications are getting bigger and bigger and: It’s getting a lot more mobile focus. Having the same application on smartphone, tablet and your desktop-PC (Do you still have one? 😉 ) is something like essential to everyone. It also solves a lot of business-issues as I heard on the conference. “Oh if we would have known that before. It would have saved us a lot of trouble!&amp;”</p>

<h3 id="why-spas">Why SPAs?</h3>

<p>ASP.NET gives us great application-possibilities for this to achieve. ASP.NET MVC gives us a very established Framework (MVC) which does a great separation of your view, your logic and dealing with and between them. But it’s a server-sided technology. You are feeling it: There is a server I have to ask every time. I hated to ask my parents for almost everything I did when I was young, why should I love to ask a Server everything I do? And, which is the bigger point, why am I feeling it while working with my application?</p>

<p>Wouldn’t it be nice to have an application browser-based, which looks the same on every device I have, which keeps my data synchronized no matter which device I take to change the information? I can start it on my smartphone, have it on the desktop and love the information AND the look and feel. Because I am used to it.</p>

<p>As I mentioned ASP.NET MVC gives us a great but server-sided-technology to build up web applications. ASP.NET WebAPI gives us only a small thing server sided: An API we can ask information from and push information to. The client-side programming language would be JavaScript. When you read “JavaScript&amp;” the first thing which comes to your mind is “jQuery&amp;”. Why? Because jQuery is one of the most common DOM-Changing tools out there in the web. Okay okay, it’s more than a DOM-Changing-Tool I know. But without Require.js and a lot of tools it’s hard to get a real structure in your application by using jQuery.</p>

<h3 id="angularjs">Angular.js</h3>

<p>Frameworks like Angular.js are nowadays able to build up a complete MV*-Framework completely down on your client. Everybody who thought that JavaScript is a language without any structure, namespaces etc. can with tools like angular see, that this is not true. Angular.Js is a google-pushed Framework (that’s a reason why MS is not providing it in its templates 😉 ) where code can be separated into your well known controllers, into services and, of course, into your view model for html-views. The Dependency injection comes native with angular.js! With that you are facing real client-side architecture. It’s an architecture to write client-side-applications. Not only websites.</p>

<p><img src="/assets/articles/2014-03-05/5ab97616-0c2c-4953-9bca-8f5c20415c45.png" alt="Lightweight architecture with AngularJS" /></p>

<p>The following screenshots shows an example of a view iterating over persons, which are called from a WebApi over services (see the following screenshots).</p>

<p><img src="/assets/articles/2014-03-05/f45c07ec-ef2b-4369-86ac-786ec18ab1ee.png" alt="Lightweight architecture with AngularJS" /></p>

<p>The controller gets the “scope” injected, which is an angular.js-word for representing the view model. Here the persons are called from the service and set in the corresponding property.</p>

<p><img src="/assets/articles/2014-03-05/d76d36a2-13d9-4bf4-9a1d-42a29d36536f.png" alt="Lightweight architecture with AngularJS" /></p>

<p>Here the services for the communication to the WebAPi are shown. I only divided the service which gets injected to the controller from the one who really gets the data. Theoretically this could be one single service.</p>

<p><img src="/assets/articles/2014-03-05/d7b243d3-9c6e-48dd-9e16-37ee9f27127d.png" alt="Lightweight architecture with AngularJS" /></p>

<p>Your corresponding WebApi could look like:</p>

<p><img src="/assets/articles/2014-03-05/a3bc7793-7ecf-4bcc-9121-e26908d668dc.png" alt="Lightweight architecture with AngularJS" /></p>

<p>The last piece which fits everything together to get a real feeling of client-based-architecture is the routing, which you can navigate to your application with without having the feeling there is a server behind.</p>

<p><img src="/assets/articles/2014-03-05/874e9c02-d238-4cc9-afca-686785cd9397.png" alt="Lightweight architecture with AngularJS" /></p>

<p>With this angular.js-concept and WebAPI in the back you can get your information online, take it to your client and work with it. Navigation is client-based. Every behavior but the source of information is based on the client.</p>

<h3 id="conclusion">Conclusion</h3>

<p>Let’s summarize: The patterns to build up applications with a good architecture have been there so far. Since many years. Nowadays this grows further and further into JavaScript and client-side-applications. I think the word “Application&amp;” has to be paid the most attention to. Frameworks like angular.js are very into giving you the well knows structures and architecture-patterns to build up applications with a lightweight architecture completely using the client.</p>

<p>On the mentioned historically view every C#-Developer has to face the new age with JavaScript as a language you have to pay attention to.</p>

<p>Personally I think now that JavaScript is not a language without structure etc. It’s not like your good old C# with namespaces and classes and stuff but the frameworks in this direction are growing and getting better and better. So here is something moving. There is something growing. Let’s grow with it!</p>


	  ]]></description>
	</item>


</channel>
</rss>
