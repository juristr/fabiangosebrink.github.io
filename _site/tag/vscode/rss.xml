<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>http://fabian-gosebrink.com</title>
   
   <link>http://offering.solutions</link>
   <description>Articles about Angular & ASP.NET</description>
   <language>en-us</language>
   <managingEditor> Fabian Gosebrink</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>How to debug an Angular application with Chrome and VS Code</title>
	  <link>//blog/articles/2016/10/16/how-to-debug-an-angular-application-with-chrome-and-vs-code/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2016-10-16T17:50:00+02:00</pubDate>
	  <guid>//blog/articles/2016/10/16/how-to-debug-an-angular-application-with-chrome-and-vs-code/</guid>
	  <description><![CDATA[
	     <p>In this blogpost I want to show you how to debug an Angular application with Chrome and VS Code.</p>

<p>First of all you need to install the extension in VS Code.</p>

<p>You can find it here</p>

<p><a href="https://github.com/Microsoft/vscode-chrome-debug">https://github.com/Microsoft/vscode-chrome-debug</a></p>

<p>or search in the extensions tab for the plugin directly:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/10/HowtodebuganAngular2applicationwithChromeandVSCode_01.jpg" alt="How to debug an Angular application with Chrome and VS Code" /></p>

<p>After installing you probably have to enable the plugin and restart VS Code but in the end you will see your folder structure like normal. Then head over to the debug tab and press the button for creating you an new configuration and select the “Chrome” environment.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/10/HowtodebuganAngular2applicationwithChromeandVSCode_02-1024x276.jpg" alt="How to debug an Angular application with Chrome and VS Code" /></p>

<p>After doing this the extension created a new folder (if you do not have it already) called “.vscode” and a “launch.json” in it initially looking like this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
    <span class="s2">"version"</span><span class="err">:</span> <span class="s2">"0.2.0"</span><span class="p">,</span>
    <span class="s2">"configurations"</span><span class="err">:</span> <span class="p">[</span>
        <span class="p">{</span>
            <span class="s2">"name"</span><span class="p">:</span> <span class="s2">"Launch Chrome against localhost, with sourcemaps"</span><span class="p">,</span>
            <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"chrome"</span><span class="p">,</span>
            <span class="s2">"request"</span><span class="p">:</span> <span class="s2">"launch"</span><span class="p">,</span>
            <span class="s2">"url"</span><span class="p">:</span> <span class="s2">"http://localhost:8080"</span><span class="p">,</span>
            <span class="s2">"sourceMaps"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="s2">"webRoot"</span><span class="p">:</span> <span class="s2">"${workspaceRoot}"</span>
        <span class="p">},</span>
        <span class="p">{</span>
            <span class="s2">"name"</span><span class="p">:</span> <span class="s2">"Attach to Chrome, with sourcemaps"</span><span class="p">,</span>
            <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"chrome"</span><span class="p">,</span>
            <span class="s2">"request"</span><span class="p">:</span> <span class="s2">"attach"</span><span class="p">,</span>
            <span class="s2">"port"</span><span class="p">:</span> <span class="mi">9222</span><span class="p">,</span>
            <span class="s2">"sourceMaps"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="s2">"webRoot"</span><span class="p">:</span> <span class="s2">"${workspaceRoot}"</span>
        <span class="p">}</span>
    <span class="p">]</span>
<span class="p">}</span></code></pre></figure>

<p>Our folder strucutre tells us that the files are served from the root.</p>

<p>So, the “webRoot”: “${workspaceRoot}”” setting is good to go for us. We will open a new Chrome instance but it needs an existing running server. So, if you use something like lite-server, you can easily type “lite-server” at the root of your web application or place it in your NPM command chain in the “NPM Start” command. This is what I did.
But before we go we need to adjust the urls where the server is running on and the url where the Chrome instance is starting.</p>

<p>So replace the port in the config file with the port from your lite-server. In my cae thats “3000”. This is how your config look like then:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
    <span class="s2">"version"</span><span class="err">:</span> <span class="s2">"0.2.0"</span><span class="p">,</span>
    <span class="s2">"configurations"</span><span class="err">:</span> <span class="p">[</span>
        <span class="p">{</span>
            <span class="s2">"name"</span><span class="p">:</span> <span class="s2">"Launch Chrome against localhost, with sourcemaps"</span><span class="p">,</span>
            <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"chrome"</span><span class="p">,</span>
            <span class="s2">"request"</span><span class="p">:</span> <span class="s2">"launch"</span><span class="p">,</span>
            <span class="s2">"url"</span><span class="p">:</span> <span class="s2">"http://localhost:3000"</span><span class="p">,</span>
            <span class="s2">"sourceMaps"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="s2">"webRoot"</span><span class="p">:</span> <span class="s2">"${workspaceRoot}"</span>
        <span class="p">},</span>
        <span class="p">{</span>
            <span class="s2">"name"</span><span class="p">:</span> <span class="s2">"Attach to Chrome, with sourcemaps"</span><span class="p">,</span>
            <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"chrome"</span><span class="p">,</span>
            <span class="s2">"request"</span><span class="p">:</span> <span class="s2">"attach"</span><span class="p">,</span>
            <span class="s2">"port"</span><span class="p">:</span> <span class="mi">9222</span><span class="p">,</span>
            <span class="s2">"sourceMaps"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="s2">"webRoot"</span><span class="p">:</span> <span class="s2">"${workspaceRoot}"</span>
        <span class="p">}</span>
    <span class="p">]</span>
<span class="p">}</span></code></pre></figure>

<p>Then start the lite server and just hit “play”</p>

<p><img src="/assets/articles/wp-content/uploads/2016/10/HowtodebuganAngular2applicationwithChromeandVSCode_04.jpg" alt="How to debug an Angular application with Chrome and VS Code" /></p>

<p><img src="/assets/articles/wp-content/uploads/2016/10/HowtodebuganAngular2applicationwithChromeandVSCode-1024x608.gif" alt="How to debug an Angular application with Chrome and VS Code" /></p>

<p>Chrome starts and you can debug your page in VS Code. Of course you can also confugre Chrome to attach directly. See here for examples:</p>

<p><a href="https://github.com/Microsoft/vscode-chrome-debug/wiki/Examples">https://github.com/Microsoft/vscode-chrome-debug/wiki/Examples</a></p>

<p>Hope this helps anybody</p>

<p>BR</p>

<p>Fabian</p>

	  ]]></description>
	</item>

	<item>
	  <title>Angular and ASP.NET Core Starter</title>
	  <link>//blog/articles/2016/01/25/angular-2-asp-net-core-starter/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2016-01-25T19:47:00+01:00</pubDate>
	  <guid>//blog/articles/2016/01/25/angular-2-asp-net-core-starter/</guid>
	  <description><![CDATA[
	     <p>With this bIog I want to give you an Angular and ASP.NET Core Starter.</p>

<p>Code here:</p>

<p><a href="https://github.com/FabianGosebrink/ASPNETCore-Angular-StarterTemplate">https://github.com/FabianGosebrink/ASPNETCore-Angular-StarterTemplate</a></p>

<p><strong>Updated to the newest Version!</strong></p>

<p>Nowadays you hear a lot of new technologies around the web stuff and with this post I want to show you a get-starting-guide how to start with the following technologies in general. I want to show how to set up an environment where you can start programming ASP.NET and Angular. As I started I spent a lot of time setting up all my tools and stuff. If you want to save this time: Go ahead reading.</p>

<p>So I want to have an environment where I can build an Angular web application with typescript, having an api where I can call to build with ASP.NET Core. We will also use <a href="https://code.visualstudio.com/">Visual Studio Code</a> to get the client-side programming going.</p>

<h2 id="lets-start">Lets start:</h2>

<p>First thing to do is setting up our Visual Studio. Create a new application and choose the ASP.NET 5 Templates. I guess they will be renamed later ;-)</p>

<p><img src="/assets/articles/wp-content/uploads/2016/01/AspNetCoreAngular2Demo_1.jpg" alt="AspNetCoreAngular2Demo_1" />
<img src="/assets/articles/wp-content/uploads/2016/01/AspNetCoreAngular2Demo_2.jpg" alt="AspNetCoreAngular2Demo_2" /></p>

<p>You will get an empty solution with no dependencies so far. Lets go and add some: open up the “project.json” and add this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
    <span class="s2">"dependencies"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"Microsoft.NETCore.App"</span><span class="err">:</span> <span class="p">{</span>
            <span class="s2">"version"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
            <span class="s2">"type"</span><span class="err">:</span> <span class="s2">"platform"</span>
        <span class="p">},</span>
        <span class="s2">"Microsoft.AspNetCore.Server.IISIntegration"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
        <span class="s2">"Microsoft.AspNetCore.Server.Kestrel"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
        <span class="s2">"Microsoft.Extensions.Configuration.FileExtensions"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
        <span class="s2">"Microsoft.AspNetCore.Mvc.Core"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
        <span class="s2">"Microsoft.AspNetCore.StaticFiles"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
        <span class="s2">"Microsoft.Extensions.Configuration.Json"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
        <span class="s2">"Microsoft.AspNetCore.Mvc"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
        <span class="s2">"Microsoft.Extensions.Logging.Console"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
        <span class="s2">"Microsoft.Extensions.Logging.Debug"</span><span class="err">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
        <span class="s2">"Microsoft.Extensions.Configuration.EnvironmentVariables"</span><span class="err">:</span> <span class="s2">"1.0.0"</span>
    <span class="p">},</span>

    <span class="s2">"tools"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"Microsoft.AspNetCore.Server.IISIntegration.Tools"</span><span class="err">:</span> <span class="s2">"1.0.0-preview2-final"</span>
    <span class="p">},</span>

    <span class="s2">"frameworks"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"netcoreapp1.0"</span><span class="err">:</span> <span class="p">{}</span>
    <span class="p">},</span>

    <span class="s2">"buildOptions"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"emitEntryPoint"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="s2">"preserveCompilationContext"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="s2">"debugType"</span><span class="err">:</span> <span class="s2">"portable"</span><span class="p">,</span>
        <span class="s2">"compile"</span><span class="err">:</span> <span class="p">{</span>
            <span class="s2">"include"</span><span class="err">:</span> <span class="p">[</span>
                <span class="s2">"**/*.cs"</span>
            <span class="p">],</span>
            <span class="s2">"exclude"</span><span class="err">:</span> <span class="p">[</span>
                <span class="s2">"**/node_modules/"</span>
            <span class="p">]</span>
        <span class="p">}</span>
    <span class="p">},</span>

    <span class="s2">"runtimeOptions"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"configProperties"</span><span class="err">:</span> <span class="p">{</span>
            <span class="s2">"System.GC.Server"</span><span class="err">:</span> <span class="kc">true</span>
        <span class="p">}</span>
    <span class="p">},</span>

    <span class="s2">"publishOptions"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"include"</span><span class="err">:</span> <span class="p">[</span>
            <span class="s2">"wwwroot"</span><span class="p">,</span>
            <span class="s2">"web.config"</span>
        <span class="p">]</span>
    <span class="p">},</span>

    <span class="s2">"scripts"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"postpublish"</span><span class="err">:</span> <span class="p">[</span> <span class="s2">"dotnet publish-iis --publish-folder %publish:OutputPath% --framework %publish:FullTargetFramework%"</span> <span class="p">]</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>What we are adding is MVC, because we will need it for setting up the API, some logging things and AutoMappers to map between our DTOs and our real Entities. We wont use it in this tutorial, but for a kickstart its good to have them.</p>

<p>Visual Studio should now go ahead and resolve, download and install these packages.</p>

<p>Now go on and add an “app”-Folder, a “js”-folder and a “css”-folder to the wwwroot-folder.</p>

<blockquote>
  <p>Everything in the wwwroot-folder is going to be served to the client. This is where our app lives. You can also build your application outside this folder and copy the relevant files in it via gulp etc. I am not doing this in this case because its easier to debug in the when launching. If you have a better approach I would love to hear it :)</p>
</blockquote>

<p><img src="/assets/articles/wp-content/uploads/2016/01/04.png" alt="04" /></p>

<p>To get started with our web application we need an index.html. Lets add it and put nothing in it so far.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/01/05.png" alt="05" /></p>

<h2 id="the-serversideapi">The Serverside/API</h2>

<p>Lets get started with the serverside: To wire up everything we need to configure our application in the Startup.cs.</p>

<figure class="highlight"><pre><code class="language-cs" data-lang="cs"><span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Builder</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Hosting</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Configuration</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.DependencyInjection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Logging</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ASPNETCoreAngular2Demo</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Startup</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">IConfigurationRoot</span> <span class="n">Configuration</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// This method gets called by the runtime. Use this method to add services to the container.
</span>        <span class="c1">// For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=398940
</span>        <span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">services</span><span class="p">.</span><span class="nf">AddCors</span><span class="p">();</span>
            <span class="n">services</span><span class="p">.</span><span class="nf">AddMvc</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="nf">Startup</span><span class="p">(</span><span class="n">IHostingEnvironment</span> <span class="n">env</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ConfigurationBuilder</span><span class="p">()</span>
                <span class="p">.</span><span class="nf">SetBasePath</span><span class="p">(</span><span class="n">env</span><span class="p">.</span><span class="n">ContentRootPath</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="s">"appsettings.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">true</span><span class="p">,</span> <span class="n">reloadOnChange</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="err">$</span><span class="s">"appsettings.{env.EnvironmentName}.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">true</span><span class="p">);</span>

            <span class="n">builder</span><span class="p">.</span><span class="nf">AddEnvironmentVariables</span><span class="p">();</span>
            <span class="n">Configuration</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>
        <span class="p">}</span>


        <span class="c1">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
</span>        <span class="k">public</span> <span class="k">void</span> <span class="nf">Configure</span><span class="p">(</span><span class="n">IApplicationBuilder</span> <span class="n">app</span><span class="p">,</span> <span class="n">ILoggerFactory</span> <span class="n">loggerFactory</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">loggerFactory</span><span class="p">.</span><span class="nf">AddConsole</span><span class="p">(</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetSection</span><span class="p">(</span><span class="s">"Logging"</span><span class="p">));</span>
            <span class="n">loggerFactory</span><span class="p">.</span><span class="nf">AddDebug</span><span class="p">();</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseCors</span><span class="p">(</span><span class="n">config</span> <span class="p">=&gt;</span>
                <span class="n">config</span><span class="p">.</span><span class="nf">AllowAnyHeader</span><span class="p">()</span>
                    <span class="p">.</span><span class="nf">AllowAnyMethod</span><span class="p">()</span>
                    <span class="p">.</span><span class="nf">AllowAnyOrigin</span><span class="p">());</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseDefaultFiles</span><span class="p">();</span>
            <span class="n">app</span><span class="p">.</span><span class="nf">UseStaticFiles</span><span class="p">();</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseMvc</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Because at the beginning of this page we are consuming an “appsettings.json” we should also create it. Create a new file called like this beside the Startup.cs and paste some logging information to it. You can add some informations you want to have in there later if you want. For the start, this should be okay.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
    <span class="s2">"Logging"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"IncludeScopes"</span><span class="err">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="s2">"LogLevel"</span><span class="err">:</span> <span class="p">{</span>
            <span class="s2">"Default"</span><span class="err">:</span> <span class="s2">"Debug"</span><span class="p">,</span>
            <span class="s2">"System"</span><span class="err">:</span> <span class="s2">"Information"</span><span class="p">,</span>
            <span class="s2">"Microsoft"</span><span class="err">:</span> <span class="s2">"Information"</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Our application should now be able to start up. Just go to the commandline and type “dotnet run” in it. This will start a webserver and serve all files in wwwroot.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/01/AspNetCoreAngular2Demo_3.jpg" alt="AspNetCoreAngular2Demo_3" /></p>

<p><img src="/assets/articles/wp-content/uploads/2016/01/07.png" alt="07" /></p>

<p>Great so far! Now we can add a controller!</p>

<p>For this go ahead in the root of the project and add a folder “Controller” which wil hold all the controllers for us. Then you can add an standardcontroller for the first run.</p>

<blockquote>
  <p>I like to stay to IActionResult-Interface in my controllers. It just gives me a way I am used to and is clearer for me. You do not have to do this. The controller is just for demo purposes.</p>
</blockquote>

<p><img src="/assets/articles/wp-content/uploads/2016/01/08.png" alt="08" /></p>

<p>If we now run the server again with “dotnet run” it will start and via Postman we can check if everything works correctly:</p>

<p><img src="/assets/articles/wp-content/uploads/2016/01/09.png" alt="Angular and ASP.NET Core Starter" /></p>

<h2 id="the-client">The Client</h2>

<p>Great. So lets start clientside. What we need is an Angular environment. For the tooling I made the best experiences using <a href="https://code.visualstudio.com/">Visual Studio Code</a>.</p>

<p>We already defined the wwwroot-Folder which holds every file which is transported to the client.</p>

<p><img src="/assets/articles/wp-content/uploads/2016/01/11.png" alt="11" /></p>

<p>As we start developing Angular we have to prepare our environment for working with Typescript. I already have an instruction how to start in a previous Blogpost <a href="http://offering.solutions/blog/articles/2015/12/03/getting-started-with-visual-studio-code-angularjs-and-typescript/">Getting started with Visual Studio Code &amp; Typescript</a>. But lets cover some thing in short to get it customised for this Angular case.</p>

<p>Lets add a file for configuring the typescript-options for our project: tsconfig.json to the root of our project.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">"compilerOptions"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"target"</span><span class="err">:</span> <span class="s2">"es5"</span><span class="p">,</span>
    <span class="s2">"module"</span><span class="err">:</span> <span class="s2">"commonjs"</span><span class="p">,</span>
    <span class="s2">"moduleResolution"</span><span class="err">:</span> <span class="s2">"node"</span><span class="p">,</span>
    <span class="s2">"sourceMap"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"emitDecoratorMetadata"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"experimentalDecorators"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"lib"</span><span class="err">:</span> <span class="p">[</span>
      <span class="s2">"es2015"</span><span class="p">,</span>
      <span class="s2">"dom"</span>
    <span class="p">],</span>
    <span class="s2">"noImplicitAny"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">"suppressImplicitAnyIndexErrors"</span><span class="err">:</span> <span class="kc">true</span>
  <span class="p">},</span>
  <span class="s2">"exclude"</span><span class="err">:</span> <span class="p">[</span>
    <span class="s2">"node_modules"</span><span class="p">,</span>
    <span class="s2">"wwwroot/**/*"</span>
  <span class="p">]</span>
<span class="p">}</span></code></pre></figure>

<h3 id="adding-angular">Adding Angular</h3>

<p>Angular is served via npm. To get Angular we have to add a package.json to the root of our project. “npm start” will run the lite-server, compile the *.ts files and start the watcher :)</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">"name"</span><span class="err">:</span> <span class="s2">"ng2app"</span><span class="p">,</span>
  <span class="s2">"version"</span><span class="err">:</span> <span class="s2">"0.0.0"</span><span class="p">,</span>
  <span class="s2">"license"</span><span class="err">:</span> <span class="s2">"MIT"</span><span class="p">,</span>
  <span class="s2">"angular-cli"</span><span class="err">:</span> <span class="p">{},</span>
  <span class="s2">"scripts"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"start"</span><span class="err">:</span> <span class="s2">"tsc &amp;&amp; gulp get:started &amp;&amp; concurrently \"npm run tsc:w\" \"dotnet run\" \"npm run lite\" \"gulp start-watch\""</span><span class="p">,</span>
    <span class="s2">"lite"</span><span class="err">:</span> <span class="s2">"lite-server"</span><span class="p">,</span>
    <span class="s2">"tsc"</span><span class="err">:</span> <span class="s2">"tsc"</span><span class="p">,</span>
    <span class="s2">"tsc:w"</span><span class="err">:</span> <span class="s2">"tsc -w"</span><span class="p">,</span>
    <span class="s2">"lint"</span><span class="err">:</span> <span class="s2">"tslint ./angular2app/**/*.ts -t verbose"</span>
  <span class="p">},</span>
  <span class="s2">"private"</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="s2">"dependencies"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"@angular/common"</span><span class="err">:</span> <span class="s2">"~2.4.0"</span><span class="p">,</span>
    <span class="s2">"@angular/compiler"</span><span class="err">:</span> <span class="s2">"~2.4.0"</span><span class="p">,</span>
    <span class="s2">"@angular/core"</span><span class="err">:</span> <span class="s2">"~2.4.0"</span><span class="p">,</span>
    <span class="s2">"@angular/forms"</span><span class="err">:</span> <span class="s2">"~2.4.0"</span><span class="p">,</span>
    <span class="s2">"@angular/http"</span><span class="err">:</span> <span class="s2">"~2.4.0"</span><span class="p">,</span>
    <span class="s2">"@angular/platform-browser"</span><span class="err">:</span> <span class="s2">"~2.4.0"</span><span class="p">,</span>
    <span class="s2">"@angular/platform-browser-dynamic"</span><span class="err">:</span> <span class="s2">"~2.4.0"</span><span class="p">,</span>
    <span class="s2">"@angular/router"</span><span class="err">:</span> <span class="s2">"~3.4.0"</span><span class="p">,</span>
    <span class="s2">"angular-in-memory-web-api"</span><span class="err">:</span> <span class="s2">"~0.2.2"</span><span class="p">,</span>
    <span class="s2">"angular2-toaster"</span><span class="err">:</span> <span class="s2">"^1.0.1"</span><span class="p">,</span>
    <span class="s2">"bootstrap"</span><span class="err">:</span> <span class="s2">"^3.3.7"</span><span class="p">,</span>
    <span class="s2">"core-js"</span><span class="err">:</span> <span class="s2">"^2.4.1"</span><span class="p">,</span>
    <span class="s2">"jquery"</span><span class="err">:</span> <span class="s2">"2.2.4"</span><span class="p">,</span>
    <span class="s2">"ng2-loading-bar"</span><span class="err">:</span> <span class="s2">"0.0.6"</span><span class="p">,</span>
    <span class="s2">"reflect-metadata"</span><span class="err">:</span> <span class="s2">"^0.1.8"</span><span class="p">,</span>
    <span class="s2">"rxjs"</span><span class="err">:</span> <span class="s2">"5.0.1"</span><span class="p">,</span>
    <span class="s2">"systemjs"</span><span class="err">:</span> <span class="s2">"0.19.40"</span><span class="p">,</span>
    <span class="s2">"zone.js"</span><span class="err">:</span> <span class="s2">"^0.7.4"</span>
  <span class="p">},</span>
  <span class="s2">"devDependencies"</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">"@types/jasmine"</span><span class="err">:</span> <span class="s2">"^2.5.36"</span><span class="p">,</span>
    <span class="s2">"@types/node"</span><span class="err">:</span> <span class="s2">"^6.0.46"</span><span class="p">,</span>
    <span class="s2">"canonical-path"</span><span class="err">:</span> <span class="s2">"0.0.2"</span><span class="p">,</span>
    <span class="s2">"concurrently"</span><span class="err">:</span> <span class="s2">"^3.1.0"</span><span class="p">,</span>
    <span class="s2">"gulp"</span><span class="err">:</span> <span class="s2">"^3.9.1"</span><span class="p">,</span>
    <span class="s2">"http-server"</span><span class="err">:</span> <span class="s2">"^0.9.0"</span><span class="p">,</span>
    <span class="s2">"lite-server"</span><span class="err">:</span> <span class="s2">"^2.2.2"</span><span class="p">,</span>
    <span class="s2">"lodash"</span><span class="err">:</span> <span class="s2">"^4.16.4"</span><span class="p">,</span>
    <span class="s2">"protractor"</span><span class="err">:</span> <span class="s2">"~4.0.14"</span><span class="p">,</span>
    <span class="s2">"rimraf"</span><span class="err">:</span> <span class="s2">"^2.5.4"</span><span class="p">,</span>
    <span class="s2">"run-sequence"</span><span class="err">:</span> <span class="s2">"^1.2.2"</span><span class="p">,</span>
    <span class="s2">"tslint"</span><span class="err">:</span> <span class="s2">"^3.15.1"</span><span class="p">,</span>
    <span class="s2">"typescript"</span><span class="err">:</span> <span class="s2">"~2.0.10"</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>or just type “npm init” to answer all questions and get an project.json file generated.</p>

<p>After this you can install Angular and all other dependencies via “npm install” or Visual Studio will do this for you automatically. Just just have to wait a few seconds. It will add a node_modules folder to your root application and copy all files, also the *.d.ts-files you need to develop with typescript.</p>

<h4 id="systemjs">System.js</h4>

<p>Now we have to configure the system.js as so:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="cm">/**
 * System configuration for Angular 2 samples
 * Adjust as necessary for your application needs.
 */</span>
<span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">global</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">System</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span>
    <span class="na">paths</span><span class="p">:</span> <span class="p">{</span>
      <span class="c1">// paths serve as alias</span>
      <span class="s1">'npm:'</span><span class="p">:</span> <span class="s1">'js/'</span>
    <span class="p">},</span>
    <span class="c1">// map tells the System loader where to look for things</span>
    <span class="na">map</span><span class="p">:</span> <span class="p">{</span>
      <span class="c1">// our app is within the app folder</span>
      <span class="na">app</span><span class="p">:</span> <span class="s1">'app'</span><span class="p">,</span>
      <span class="c1">// angular bundles</span>
      <span class="s1">'@angular/core'</span><span class="p">:</span> <span class="s1">'npm:@angular/core/bundles/core.umd.js'</span><span class="p">,</span>
      <span class="s1">'@angular/common'</span><span class="p">:</span> <span class="s1">'npm:@angular/common/bundles/common.umd.js'</span><span class="p">,</span>
      <span class="s1">'@angular/compiler'</span><span class="p">:</span> <span class="s1">'npm:@angular/compiler/bundles/compiler.umd.js'</span><span class="p">,</span>
      <span class="s1">'@angular/platform-browser'</span><span class="p">:</span> <span class="s1">'npm:@angular/platform-browser/bundles/platform-browser.umd.js'</span><span class="p">,</span>
      <span class="s1">'@angular/platform-browser-dynamic'</span><span class="p">:</span> <span class="s1">'npm:@angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js'</span><span class="p">,</span>
      <span class="s1">'@angular/http'</span><span class="p">:</span> <span class="s1">'npm:@angular/http/bundles/http.umd.js'</span><span class="p">,</span>
      <span class="s1">'@angular/router'</span><span class="p">:</span> <span class="s1">'npm:@angular/router/bundles/router.umd.js'</span><span class="p">,</span>
      <span class="s1">'@angular/forms'</span><span class="p">:</span> <span class="s1">'npm:@angular/forms/bundles/forms.umd.js'</span><span class="p">,</span>

      <span class="c1">// Third Party</span>
      <span class="s1">'angular2-toaster'</span><span class="p">:</span> <span class="s1">'npm:angular2-toaster'</span><span class="p">,</span>
      <span class="c1">// 'ng2-slim-loading-bar': 'npm:ng2-slim-loading-bar/bundles/index.umd.js',</span>
      <span class="s2">"ng2-loading-bar"</span><span class="p">:</span> <span class="s2">"npm:ng2-loading-bar"</span><span class="p">,</span>

      <span class="c1">// other libraries</span>
      <span class="s1">'rxjs'</span><span class="p">:</span> <span class="s1">'npm:rxjs'</span>
    <span class="p">},</span>
    <span class="c1">// packages tells the System loader how to load when no filename and/or no extension</span>
    <span class="na">packages</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">app</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">main</span><span class="p">:</span> <span class="s1">'./main.js'</span><span class="p">,</span>
        <span class="na">defaultExtension</span><span class="p">:</span> <span class="s1">'js'</span>
      <span class="p">},</span>
      <span class="na">rxjs</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">defaultExtension</span><span class="p">:</span> <span class="s1">'js'</span>
      <span class="p">},</span>
      <span class="s1">'angular2-toaster'</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">defaultExtension</span><span class="p">:</span> <span class="s1">'js'</span>
      <span class="p">},</span>
      <span class="s1">'ng2-slim-loading-bar'</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">defaultExtension</span><span class="p">:</span> <span class="s1">'js'</span>
      <span class="p">},</span>
      <span class="s2">"ng2-loading-bar"</span><span class="p">:</span> <span class="p">{</span> <span class="s2">"main"</span><span class="p">:</span> <span class="s2">"index.js"</span><span class="p">,</span> <span class="s2">"defaultExtension"</span><span class="p">:</span> <span class="s2">"js"</span> <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">})(</span><span class="k">this</span><span class="p">);</span></code></pre></figure>

<p>Now go ahead in you index.html and link to the files in the client js folder:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>

<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;base</span> <span class="na">href=</span><span class="s">"/"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;title&gt;</span>ASP.NET Core 1.0 Angular 2 Demo<span class="nt">&lt;/title&gt;</span>

    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">type=</span><span class="s">"text/css"</span> <span class="na">href=</span><span class="s">"css/bootstrap.css"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">type=</span><span class="s">"text/css"</span> <span class="na">href=</span><span class="s">"css/toaster.css"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">type=</span><span class="s">"text/css"</span> <span class="na">href=</span><span class="s">"css/style.css"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/head&gt;</span>

<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;my-app&gt;</span>Loading...<span class="nt">&lt;/my-app&gt;</span>

     <span class="c">&lt;!-- 1. Load libraries --&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"js/shim.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"js/zone.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"js/Reflect.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"js/system.src.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"js/jquery.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"js/bootstrap.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    
    <span class="c">&lt;!-- 2. Configure SystemJS --&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"system.config.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script&gt;</span>
      <span class="nx">System</span><span class="p">.</span><span class="kr">import</span><span class="p">(</span><span class="s1">'app'</span><span class="p">).</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span> <span class="p">});</span>
    <span class="nt">&lt;/script&gt;</span>

<span class="nt">&lt;/body&gt;</span>

<span class="nt">&lt;/html&gt;</span></code></pre></figure>

<h2 id="finally">Finally…</h2>

<p>We are done so far:</p>

<p>You can now go ahead and develop you application in Typescript and Angular. You could start with the <a href="https://angular.io/docs/ts/latest/quickstart.html">Angular</a> quickstart. All files you need should be there. Its important to add the <a href="https://github.com/FabianGosebrink/ASPNETCore-Angular-StarterTemplate/blob/master/src/ASPNETCoreAngular2Demo/angularApp/main.ts">main.ts</a> , the <a href="https://github.com/FabianGosebrink/ASPNETCore-Angular-StarterTemplate/blob/master/src/ASPNETCoreAngular2Demo/angularApp/app.component.ts">app.component.ts</a> and <a href="https://github.com/FabianGosebrink/ASPNETCore-Angular-StarterTemplate/blob/master/src/ASPNETCoreAngular2Demo/angularApp/app.module.ts">app.module.ts</a> to get an entry point and bootstrapping your application.</p>

<blockquote>
  <p>If you, like me, always forget to compile the typescript files: open a cmd in the app folder and just type “npm run tsc:w”. This activates a typescript watcher using the tsconfig in the root of the project and will always compile the *.ts files into *.js files if there are some changes</p>
</blockquote>

<h3 id="further-steps">Further steps:</h3>

<p>You could now start using gulp/grunt to copy files to the locations automatically instead of doing it manually. Or you could start consuming the api using the http-Service like shown <a href="https://auth0.com/blog/2015/10/15/angular-2-series-part-3-using-http/">here</a>. I have done that all in my example repository here on Github. Hope you like it.</p>

<p><a href="https://github.com/FabianGosebrink/ASPNETCore-Angular-StarterTemplate">https://github.com/FabianGosebrink/ASPNETCore-Angular-StarterTemplate</a></p>

<p>Regards &amp; HTH</p>

<p>Fabian</p>

	  ]]></description>
	</item>

	<item>
	  <title>Getting started with Visual Studio Code, AngularJS and Typescript</title>
	  <link>//blog/articles/2015/12/03/getting-started-with-visual-studio-code-angularjs-and-typescript/</link>
	  <author>Fabian Gosebrink</author>
	  <pubDate>2015-12-03T14:17:00+01:00</pubDate>
	  <guid>//blog/articles/2015/12/03/getting-started-with-visual-studio-code-angularjs-and-typescript/</guid>
	  <description><![CDATA[
	     <p>This time I want to show you how getting started with Visual Studio Code, AngularJS and Typescript.</p>

<p>Before we start: A new Typescript version was announced!! You can see whats new <a href="https://github.com/Microsoft/TypeScript/wiki/roadmap">here</a> and further information <a href="http://www.typescriptlang.org/">here</a>.</p>

<p>I always wanted to get to know Typescript and see the advantages of it compared to the “normal” javascript and so I just took my plain old sample application and tried to build it up with Typescript. I have to say: Typescript in combination with Visual Studio Code is absolutely awesome! I loved it.</p>

<h2 id="getting-started">Getting Started:</h2>

<p>Fist of all you need to install npm/nodejs from the installers <a href="https://nodejs.org/en/">here </a>if you are running a windows machine.</p>

<p>if you have npm installed you can install typescript with the command</p>

<p><code class="highlighter-rouge">npm install -g typescript</code></p>

<p>which will install typescript globally. With this installed you can run the typescript compiler “tsc” and compile typescript.</p>

<p>With</p>

<p><code class="highlighter-rouge">npm install tsd -g</code></p>

<p>You can install the <a href="http://definitelytyped.org/tsd/">TypeScript Definition manager for DefinitelyTyped</a> to get the strong typed advantages from Typescript going.</p>

<p>In Visual Studio Code the first file you need when working with Typescript is the “tsconfig.json” which sets the basic behaviour of your typescript compiler.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
    <span class="s2">"compilerOptions"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"target"</span><span class="err">:</span> <span class="s2">"ES5"</span>
    <span class="p">},</span>
    <span class="s2">"exclude"</span><span class="err">:</span> <span class="p">[</span>
        <span class="s2">"node_modules"</span><span class="p">,</span>
        <span class="s2">"wwwroot"</span>
    <span class="p">]</span>
<span class="p">}</span></code></pre></figure>

<p>The “compilerOptions” tell typescript in which language the typescript code should be compiled. The exclude-block, you guessed it, excluded several folders from being checked by the compiler.</p>

<p>Now you can write and compile Typescript files. :-)</p>

<p>In Visual Studio Code if you now press the CRTL-SHIFT-B-Buttons you should trigger Visual Studio Code to compile your written files. If you create a taskrunner Visual Studio Code generates a .vscode-folder with a “tasks.json” in it.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/12/tyepscript01.jpg" alt="Getting started with Visual Studio Code, AngularJS and Typescript" /></p>

<p>See that the “args” is not containing any files explicitly. That triggers the taskrunner to compile the whole code. Not only several files.</p>

<p>If you now type Typescript-code in a *.ts file, save it and compile you will see a progress running in vs code for a short time. After this your file should be compiled into Typescript and appear in Visual Studio Code since Visual Studio Code is file based.</p>

<p><img src="/assets/articles/wp-content/uploads/2015/12/tyepscript02.jpg" alt="Getting started with Visual Studio Code, AngularJS and Typescript" />
<img src="/assets/articles/wp-content/uploads/2015/12/tyepscript03.jpg" alt="Getting started with Visual Studio Code, AngularJS and Typescript" /></p>

<blockquote>
  <p>If you do NOT see any compiled js/ts-files checking your typescript version is always a good hint.</p>
</blockquote>

<h3 id="adding-angularjs-files">Adding AngularJs-Files</h3>

<p>If you want to get also started with AngularJs (and have installed the tsd like mentioned above) you can go to the root of your application, open the console and simply type</p>

<p><code class="highlighter-rouge">tsd install angular --resolve --save</code></p>

<p>which causes the Typescript Definition Manager (tsd) to install the *.d.ts files for AngularJs. The resolve parameter resolves all dependencies angular has (like jQuery in this case).</p>

<p><img src="/assets/articles/wp-content/uploads/2015/12/tyepscript04.jpg" alt="Getting started with Visual Studio Code, Angular and Typescript" /></p>

<p>As you can see the typings-folder was generated with a “tsd.d.ts” file which holds the references and a tsd.json on the root of the application which holds all installed plugins for our project. This gets updated every time you install a new typescript.d-reference.</p>

<p>Thats it. You can now go ahead and implement Typescript with Visual Studio Code.</p>

<p>Check out the github repository of this code <a href="https://github.com/FabianGosebrink/ASPNET-WebAPI-AngularJs-Typescript">here</a>.</p>

<p>Hope this helps.</p>

<p>Regards</p>

<p>Fabian</p>

	  ]]></description>
	</item>


</channel>
</rss>
